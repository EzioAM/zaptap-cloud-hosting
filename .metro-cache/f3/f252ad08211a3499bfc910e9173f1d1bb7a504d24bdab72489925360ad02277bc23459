{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"isows","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":16,"index":1591},"end":{"line":39,"column":32,"index":1607}}],"key":"jQDboCV7KGBj8OKLH0IUEzqRis4=","exportNames":["*"]}},{"name":"./lib/constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":20,"index":1629},"end":{"line":40,"column":46,"index":1655}}],"key":"Tozkr70n9lVAcLLAJew2JSVOK9Y=","exportNames":["*"]}},{"name":"./lib/serializer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":37,"index":1694},"end":{"line":41,"column":64,"index":1721}}],"key":"w6PS/DWxGJvYtDNZkOtbDcmG8Nw=","exportNames":["*"]}},{"name":"./lib/timer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":32,"index":1756},"end":{"line":42,"column":54,"index":1778}}],"key":"w0qAHA9+ZFUiKikDuQKxEElN35A=","exportNames":["*"]}},{"name":"./lib/transformers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":23,"index":1804},"end":{"line":43,"column":52,"index":1833}}],"key":"WvmsZDe1rMnc+jBORnBzUNvCIm8=","exportNames":["*"]}},{"name":"./RealtimeChannel","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":42,"index":1877},"end":{"line":44,"column":70,"index":1905}}],"key":"XSu+A4jXCyp4V+QR2OkNPazTe3s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _asyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function get() {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var _ownKeys = function ownKeys(o) {\n      _ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return _ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = _ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var isows_1 = require(_dependencyMap[3], \"isows\");\n  var constants_1 = require(_dependencyMap[4], \"./lib/constants\");\n  var serializer_1 = __importDefault(require(_dependencyMap[5], \"./lib/serializer\"));\n  var timer_1 = __importDefault(require(_dependencyMap[6], \"./lib/timer\"));\n  var transformers_1 = require(_dependencyMap[7], \"./lib/transformers\");\n  var RealtimeChannel_1 = __importDefault(require(_dependencyMap[8], \"./RealtimeChannel\"));\n  var noop = function noop() {};\n  var WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\n  var RealtimeClient = /*#__PURE__*/function () {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.logLevel Sets the log level for Realtime\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    function RealtimeClient(endPoint, options) {\n      var _this = this;\n      _classCallCheck(this, RealtimeClient);\n      var _a;\n      this.accessTokenValue = null;\n      this.apiKey = null;\n      this.channels = new Array();\n      this.endPoint = '';\n      this.httpEndpoint = '';\n      /** @deprecated headers cannot be set on websocket connections */\n      this.headers = {};\n      this.params = {};\n      this.timeout = constants_1.DEFAULT_TIMEOUT;\n      this.heartbeatIntervalMs = 25000;\n      this.heartbeatTimer = undefined;\n      this.pendingHeartbeatRef = null;\n      this.heartbeatCallback = noop;\n      this.ref = 0;\n      this.logger = noop;\n      this.conn = null;\n      this.sendBuffer = [];\n      this.serializer = new serializer_1.default();\n      this.stateChangeCallbacks = {\n        open: [],\n        close: [],\n        error: [],\n        message: []\n      };\n      this.accessToken = null;\n      /**\n       * Use either custom fetch, if provided, or default fetch to make HTTP requests\n       *\n       * @internal\n       */\n      this._resolveFetch = function (customFetch) {\n        var _fetch;\n        if (customFetch) {\n          _fetch = customFetch;\n        } else if (typeof fetch === 'undefined') {\n          _fetch = function _fetch() {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return Promise.resolve(`${'@supabase/node-fetch'}`).then(function (s) {\n              return __importStar(function (line) {\n                throw new Error('Dynamic require defined at line ' + line + '; not supported by Metro');\n              }(109));\n            }).then(function (_ref) {\n              var fetch = _ref.default;\n              return fetch.apply(void 0, args);\n            });\n          };\n        } else {\n          _fetch = fetch;\n        }\n        return function () {\n          return _fetch.apply(void 0, arguments);\n        };\n      };\n      this.endPoint = `${endPoint}/${constants_1.TRANSPORTS.websocket}`;\n      this.httpEndpoint = (0, transformers_1.httpEndpointURL)(endPoint);\n      if (options === null || options === void 0 ? void 0 : options.transport) {\n        this.transport = options.transport;\n      } else {\n        this.transport = null;\n      }\n      if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n      if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n      if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n      if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\n        this.logLevel = options.logLevel || options.log_level;\n        this.params = Object.assign(Object.assign({}, this.params), {\n          log_level: this.logLevel\n        });\n      }\n      if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n      var accessTokenValue = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n      if (accessTokenValue) {\n        this.accessTokenValue = accessTokenValue;\n        this.apiKey = accessTokenValue;\n      }\n      this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : function (tries) {\n        return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n      };\n      this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : function (payload, callback) {\n        return callback(JSON.stringify(payload));\n      };\n      this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n      this.reconnectTimer = new timer_1.default(/*#__PURE__*/_asyncToGenerator(function* () {\n        _this.disconnect();\n        _this.connect();\n      }), this.reconnectAfterMs);\n      this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n      if (options === null || options === void 0 ? void 0 : options.worker) {\n        if (typeof window !== 'undefined' && !window.Worker) {\n          throw new Error('Web Worker is not supported');\n        }\n        this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;\n        this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n      }\n      this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    return _createClass(RealtimeClient, [{\n      key: \"connect\",\n      value: function connect() {\n        if (this.conn) {\n          return;\n        }\n        if (!this.transport) {\n          this.transport = isows_1.WebSocket;\n        }\n        if (!this.transport) {\n          throw new Error('No transport provided');\n        }\n        this.conn = new this.transport(this.endpointURL());\n        this.setupConnection();\n      }\n      /**\n       * Returns the URL of the websocket.\n       * @returns string The URL of the websocket.\n       */\n    }, {\n      key: \"endpointURL\",\n      value: function endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n          vsn: constants_1.VSN\n        }));\n      }\n      /**\n       * Disconnects the socket.\n       *\n       * @param code A numeric status code to send on disconnect.\n       * @param reason A custom reason for the disconnect.\n       */\n    }, {\n      key: \"disconnect\",\n      value: function disconnect(code, reason) {\n        if (this.conn) {\n          this.conn.onclose = function () {}; // noop\n          if (code) {\n            this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n          } else {\n            this.conn.close();\n          }\n          this.conn = null;\n          // remove open handles\n          this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n          this.reconnectTimer.reset();\n          this.channels.forEach(function (channel) {\n            return channel.teardown();\n          });\n        }\n      }\n      /**\n       * Returns all created channels\n       */\n    }, {\n      key: \"getChannels\",\n      value: function getChannels() {\n        return this.channels;\n      }\n      /**\n       * Unsubscribes and removes a single channel\n       * @param channel A RealtimeChannel instance\n       */\n    }, {\n      key: \"removeChannel\",\n      value: (function () {\n        var _removeChannel = _asyncToGenerator(function* (channel) {\n          var status = yield channel.unsubscribe();\n          if (this.channels.length === 0) {\n            this.disconnect();\n          }\n          return status;\n        });\n        function removeChannel(_x) {\n          return _removeChannel.apply(this, arguments);\n        }\n        return removeChannel;\n      }()\n      /**\n       * Unsubscribes and removes all channels\n       */\n      )\n    }, {\n      key: \"removeAllChannels\",\n      value: (function () {\n        var _removeAllChannels = _asyncToGenerator(function* () {\n          var values_1 = yield Promise.all(this.channels.map(function (channel) {\n            return channel.unsubscribe();\n          }));\n          this.channels = [];\n          this.disconnect();\n          return values_1;\n        });\n        function removeAllChannels() {\n          return _removeAllChannels.apply(this, arguments);\n        }\n        return removeAllChannels;\n      }()\n      /**\n       * Logs the message.\n       *\n       * For customized logging, `this.logger` can be overridden.\n       */\n      )\n    }, {\n      key: \"log\",\n      value: function log(kind, msg, data) {\n        this.logger(kind, msg, data);\n      }\n      /**\n       * Returns the current state of the socket.\n       */\n    }, {\n      key: \"connectionState\",\n      value: function connectionState() {\n        switch (this.conn && this.conn.readyState) {\n          case constants_1.SOCKET_STATES.connecting:\n            return constants_1.CONNECTION_STATE.Connecting;\n          case constants_1.SOCKET_STATES.open:\n            return constants_1.CONNECTION_STATE.Open;\n          case constants_1.SOCKET_STATES.closing:\n            return constants_1.CONNECTION_STATE.Closing;\n          default:\n            return constants_1.CONNECTION_STATE.Closed;\n        }\n      }\n      /**\n       * Returns `true` is the connection is open.\n       */\n    }, {\n      key: \"isConnected\",\n      value: function isConnected() {\n        return this.connectionState() === constants_1.CONNECTION_STATE.Open;\n      }\n    }, {\n      key: \"channel\",\n      value: function channel(topic) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          config: {}\n        };\n        var realtimeTopic = `realtime:${topic}`;\n        var exists = this.getChannels().find(function (c) {\n          return c.topic === realtimeTopic;\n        });\n        if (!exists) {\n          var chan = new RealtimeChannel_1.default(`realtime:${topic}`, params, this);\n          this.channels.push(chan);\n          return chan;\n        } else {\n          return exists;\n        }\n      }\n      /**\n       * Push out a message if the socket is connected.\n       *\n       * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n       */\n    }, {\n      key: \"push\",\n      value: function push(data) {\n        var _this2 = this;\n        var topic = data.topic,\n          event = data.event,\n          payload = data.payload,\n          ref = data.ref;\n        var callback = function callback() {\n          _this2.encode(data, function (result) {\n            var _a;\n            (_a = _this2.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n          });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n          callback();\n        } else {\n          this.sendBuffer.push(callback);\n        }\n      }\n      /**\n       * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n       *\n       * If param is null it will use the `accessToken` callback function or the token set on the client.\n       *\n       * On callback used, it will set the value of the token internal to the client.\n       *\n       * @param token A JWT string to override the token set on the client.\n       */\n    }, {\n      key: \"setAuth\",\n      value: (function () {\n        var _setAuth = _asyncToGenerator(function* () {\n          var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          var tokenToSend = token || this.accessToken && (yield this.accessToken()) || this.accessTokenValue;\n          if (this.accessTokenValue != tokenToSend) {\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach(function (channel) {\n              var payload = {\n                access_token: tokenToSend,\n                version: constants_1.DEFAULT_VERSION\n              };\n              tokenToSend && channel.updateJoinPayload(payload);\n              if (channel.joinedOnce && channel._isJoined()) {\n                channel._push(constants_1.CHANNEL_EVENTS.access_token, {\n                  access_token: tokenToSend\n                });\n              }\n            });\n          }\n        });\n        function setAuth() {\n          return _setAuth.apply(this, arguments);\n        }\n        return setAuth;\n      }()\n      /**\n       * Sends a heartbeat message if the socket is connected.\n       */\n      )\n    }, {\n      key: \"sendHeartbeat\",\n      value: (function () {\n        var _sendHeartbeat = _asyncToGenerator(function* () {\n          var _a;\n          if (!this.isConnected()) {\n            this.heartbeatCallback('disconnected');\n            return;\n          }\n          if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            this.heartbeatCallback('timeout');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(constants_1.WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n          }\n          this.pendingHeartbeatRef = this._makeRef();\n          this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef\n          });\n          this.heartbeatCallback('sent');\n          yield this.setAuth();\n        });\n        function sendHeartbeat() {\n          return _sendHeartbeat.apply(this, arguments);\n        }\n        return sendHeartbeat;\n      }())\n    }, {\n      key: \"onHeartbeat\",\n      value: function onHeartbeat(callback) {\n        this.heartbeatCallback = callback;\n      }\n      /**\n       * Flushes send buffer\n       */\n    }, {\n      key: \"flushSendBuffer\",\n      value: function flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n          this.sendBuffer.forEach(function (callback) {\n            return callback();\n          });\n          this.sendBuffer = [];\n        }\n      }\n      /**\n       * Return the next message ref, accounting for overflows\n       *\n       * @internal\n       */\n    }, {\n      key: \"_makeRef\",\n      value: function _makeRef() {\n        var newRef = this.ref + 1;\n        if (newRef === this.ref) {\n          this.ref = 0;\n        } else {\n          this.ref = newRef;\n        }\n        return this.ref.toString();\n      }\n      /**\n       * Unsubscribe from channels with the specified topic.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_leaveOpenTopic\",\n      value: function _leaveOpenTopic(topic) {\n        var dupChannel = this.channels.find(function (c) {\n          return c.topic === topic && (c._isJoined() || c._isJoining());\n        });\n        if (dupChannel) {\n          this.log('transport', `leaving duplicate topic \"${topic}\"`);\n          dupChannel.unsubscribe();\n        }\n      }\n      /**\n       * Removes a subscription from the socket.\n       *\n       * @param channel An open subscription.\n       *\n       * @internal\n       */\n    }, {\n      key: \"_remove\",\n      value: function _remove(channel) {\n        this.channels = this.channels.filter(function (c) {\n          return c.topic !== channel.topic;\n        });\n      }\n      /**\n       * Sets up connection handlers.\n       *\n       * @internal\n       */\n    }, {\n      key: \"setupConnection\",\n      value: function setupConnection() {\n        var _this3 = this;\n        if (this.conn) {\n          this.conn.binaryType = 'arraybuffer';\n          this.conn.onopen = function () {\n            return _this3._onConnOpen();\n          };\n          this.conn.onerror = function (error) {\n            return _this3._onConnError(error);\n          };\n          this.conn.onmessage = function (event) {\n            return _this3._onConnMessage(event);\n          };\n          this.conn.onclose = function (event) {\n            return _this3._onConnClose(event);\n          };\n        }\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnMessage\",\n      value: function _onConnMessage(rawMessage) {\n        var _this4 = this;\n        this.decode(rawMessage.data, function (msg) {\n          var topic = msg.topic,\n            event = msg.event,\n            payload = msg.payload,\n            ref = msg.ref;\n          if (topic === 'phoenix' && event === 'phx_reply') {\n            _this4.heartbeatCallback(msg.payload.status == 'ok' ? 'ok' : 'error');\n          }\n          if (ref && ref === _this4.pendingHeartbeatRef) {\n            _this4.pendingHeartbeatRef = null;\n          }\n          _this4.log('receive', `${payload.status || ''} ${topic} ${event} ${ref && '(' + ref + ')' || ''}`, payload);\n          Array.from(_this4.channels).filter(function (channel) {\n            return channel._isMember(topic);\n          }).forEach(function (channel) {\n            return channel._trigger(event, payload, ref);\n          });\n          _this4.stateChangeCallbacks.message.forEach(function (callback) {\n            return callback(msg);\n          });\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnOpen\",\n      value: function _onConnOpen() {\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this.reconnectTimer.reset();\n        if (!this.worker) {\n          this._startHeartbeat();\n        } else {\n          if (!this.workerRef) {\n            this._startWorkerHeartbeat();\n          }\n        }\n        this.stateChangeCallbacks.open.forEach(function (callback) {\n          return callback();\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_startHeartbeat\",\n      value: function _startHeartbeat() {\n        var _this5 = this;\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.heartbeatTimer = setInterval(function () {\n          return _this5.sendHeartbeat();\n        }, this.heartbeatIntervalMs);\n      }\n      /** @internal */\n    }, {\n      key: \"_startWorkerHeartbeat\",\n      value: function _startWorkerHeartbeat() {\n        var _this6 = this;\n        if (this.workerUrl) {\n          this.log('worker', `starting worker for from ${this.workerUrl}`);\n        } else {\n          this.log('worker', `starting default worker`);\n        }\n        var objectUrl = this._workerObjectUrl(this.workerUrl);\n        this.workerRef = new Worker(objectUrl);\n        this.workerRef.onerror = function (error) {\n          _this6.log('worker', 'worker error', error.message);\n          _this6.workerRef.terminate();\n        };\n        this.workerRef.onmessage = function (event) {\n          if (event.data.event === 'keepAlive') {\n            _this6.sendHeartbeat();\n          }\n        };\n        this.workerRef.postMessage({\n          event: 'start',\n          interval: this.heartbeatIntervalMs\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnClose\",\n      value: function _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach(function (callback) {\n          return callback(event);\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_onConnError\",\n      value: function _onConnError(error) {\n        this.log('transport', `${error}`);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach(function (callback) {\n          return callback(error);\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_triggerChanError\",\n      value: function _triggerChanError() {\n        this.channels.forEach(function (channel) {\n          return channel._trigger(constants_1.CHANNEL_EVENTS.error);\n        });\n      }\n      /** @internal */\n    }, {\n      key: \"_appendParams\",\n      value: function _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n          return url;\n        }\n        var prefix = url.match(/\\?/) ? '&' : '?';\n        var query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n      }\n    }, {\n      key: \"_workerObjectUrl\",\n      value: function _workerObjectUrl(url) {\n        var result_url;\n        if (url) {\n          result_url = url;\n        } else {\n          var blob = new Blob([WORKER_SCRIPT], {\n            type: 'application/javascript'\n          });\n          result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n      }\n    }]);\n  }();\n  exports.default = RealtimeClient;\n});","lineCount":670,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_asyncToGenerator"],[4,23,1,13],[4,26,1,13,"require"],[4,33,1,13],[4,34,1,13,"_dependencyMap"],[4,48,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[7,2,2,0],[7,6,2,4,"__createBinding"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__createBinding"],[7,52,2,51],[7,57,2,57,"Object"],[7,63,2,63],[7,64,2,64,"create"],[7,70,2,70],[7,73,2,74],[7,83,2,83,"o"],[7,84,2,84],[7,86,2,86,"m"],[7,87,2,87],[7,89,2,89,"k"],[7,90,2,90],[7,92,2,92,"k2"],[7,94,2,94],[7,96,2,96],[8,4,3,4],[8,8,3,8,"k2"],[8,10,3,10],[8,15,3,15,"undefined"],[8,24,3,24],[8,26,3,26,"k2"],[8,28,3,28],[8,31,3,31,"k"],[8,32,3,32],[9,4,4,4],[9,8,4,8,"desc"],[9,12,4,12],[9,15,4,15,"Object"],[9,21,4,21],[9,22,4,22,"getOwnPropertyDescriptor"],[9,46,4,46],[9,47,4,47,"m"],[9,48,4,48],[9,50,4,50,"k"],[9,51,4,51],[9,52,4,52],[10,4,5,4],[10,8,5,8],[10,9,5,9,"desc"],[10,13,5,13],[10,18,5,18],[10,23,5,23],[10,27,5,27,"desc"],[10,31,5,31],[10,34,5,34],[10,35,5,35,"m"],[10,36,5,36],[10,37,5,37,"__esModule"],[10,47,5,47],[10,50,5,50,"desc"],[10,54,5,54],[10,55,5,55,"writable"],[10,63,5,63],[10,67,5,67,"desc"],[10,71,5,71],[10,72,5,72,"configurable"],[10,84,5,84],[10,85,5,85],[10,87,5,87],[11,6,6,6,"desc"],[11,10,6,10],[11,13,6,13],[12,8,6,15,"enumerable"],[12,18,6,25],[12,20,6,27],[12,24,6,31],[13,8,6,33,"get"],[13,11,6,36],[13,13,6,38],[13,22,6,33,"get"],[13,25,6,36,"get"],[13,26,6,36],[13,28,6,49],[14,10,6,51],[14,17,6,58,"m"],[14,18,6,59],[14,19,6,60,"k"],[14,20,6,61],[14,21,6,62],[15,8,6,64],[16,6,6,66],[16,7,6,67],[17,4,7,4],[18,4,8,4,"Object"],[18,10,8,10],[18,11,8,11,"defineProperty"],[18,25,8,25],[18,26,8,26,"o"],[18,27,8,27],[18,29,8,29,"k2"],[18,31,8,31],[18,33,8,33,"desc"],[18,37,8,37],[18,38,8,38],[19,2,9,0],[19,3,9,1],[19,6,9,6],[19,16,9,15,"o"],[19,17,9,16],[19,19,9,18,"m"],[19,20,9,19],[19,22,9,21,"k"],[19,23,9,22],[19,25,9,24,"k2"],[19,27,9,26],[19,29,9,28],[20,4,10,4],[20,8,10,8,"k2"],[20,10,10,10],[20,15,10,15,"undefined"],[20,24,10,24],[20,26,10,26,"k2"],[20,28,10,28],[20,31,10,31,"k"],[20,32,10,32],[21,4,11,4,"o"],[21,5,11,5],[21,6,11,6,"k2"],[21,8,11,8],[21,9,11,9],[21,12,11,12,"m"],[21,13,11,13],[21,14,11,14,"k"],[21,15,11,15],[21,16,11,16],[22,2,12,0],[22,3,12,2],[22,4,12,3],[23,2,13,0],[23,6,13,4,"__setModuleDefault"],[23,24,13,22],[23,27,13,26],[23,31,13,30],[23,35,13,34],[23,39,13,38],[23,40,13,39,"__setModuleDefault"],[23,58,13,57],[23,63,13,63,"Object"],[23,69,13,69],[23,70,13,70,"create"],[23,76,13,76],[23,79,13,80],[23,89,13,89,"o"],[23,90,13,90],[23,92,13,92,"v"],[23,93,13,93],[23,95,13,95],[24,4,14,4,"Object"],[24,10,14,10],[24,11,14,11,"defineProperty"],[24,25,14,25],[24,26,14,26,"o"],[24,27,14,27],[24,29,14,29],[24,38,14,38],[24,40,14,40],[25,6,14,42,"enumerable"],[25,16,14,52],[25,18,14,54],[25,22,14,58],[26,6,14,60,"value"],[26,11,14,65],[26,13,14,67,"v"],[27,4,14,69],[27,5,14,70],[27,6,14,71],[28,2,15,0],[28,3,15,1],[28,6,15,5],[28,16,15,14,"o"],[28,17,15,15],[28,19,15,17,"v"],[28,20,15,18],[28,22,15,20],[29,4,16,4,"o"],[29,5,16,5],[29,6,16,6],[29,15,16,15],[29,16,16,16],[29,19,16,19,"v"],[29,20,16,20],[30,2,17,0],[30,3,17,1],[30,4,17,2],[31,2,18,0],[31,6,18,4,"__importStar"],[31,18,18,16],[31,21,18,20],[31,25,18,24],[31,29,18,28],[31,33,18,32],[31,34,18,33,"__importStar"],[31,46,18,45],[31,50,18,51],[31,62,18,63],[32,4,19,4],[32,8,19,8,"ownKeys"],[32,16,19,15],[32,19,19,18],[32,28,19,8,"ownKeys"],[32,35,19,15,"ownKeys"],[32,36,19,27,"o"],[32,37,19,28],[32,39,19,30],[33,6,20,8,"ownKeys"],[33,14,20,15],[33,17,20,18,"Object"],[33,23,20,24],[33,24,20,25,"getOwnPropertyNames"],[33,43,20,44],[33,47,20,48],[33,57,20,58,"o"],[33,58,20,59],[33,60,20,61],[34,8,21,12],[34,12,21,16,"ar"],[34,14,21,18],[34,17,21,21],[34,19,21,23],[35,8,22,12],[35,13,22,17],[35,17,22,21,"k"],[35,18,22,22],[35,22,22,26,"o"],[35,23,22,27],[35,25,22,29],[35,29,22,33,"Object"],[35,35,22,39],[35,36,22,40,"prototype"],[35,45,22,49],[35,46,22,50,"hasOwnProperty"],[35,60,22,64],[35,61,22,65,"call"],[35,65,22,69],[35,66,22,70,"o"],[35,67,22,71],[35,69,22,73,"k"],[35,70,22,74],[35,71,22,75],[35,73,22,77,"ar"],[35,75,22,79],[35,76,22,80,"ar"],[35,78,22,82],[35,79,22,83,"length"],[35,85,22,89],[35,86,22,90],[35,89,22,93,"k"],[35,90,22,94],[36,8,23,12],[36,15,23,19,"ar"],[36,17,23,21],[37,6,24,8],[37,7,24,9],[38,6,25,8],[38,13,25,15,"ownKeys"],[38,21,25,22],[38,22,25,23,"o"],[38,23,25,24],[38,24,25,25],[39,4,26,4],[39,5,26,5],[40,4,27,4],[40,11,27,11],[40,21,27,21,"mod"],[40,24,27,24],[40,26,27,26],[41,6,28,8],[41,10,28,12,"mod"],[41,13,28,15],[41,17,28,19,"mod"],[41,20,28,22],[41,21,28,23,"__esModule"],[41,31,28,33],[41,33,28,35],[41,40,28,42,"mod"],[41,43,28,45],[42,6,29,8],[42,10,29,12,"result"],[42,16,29,18],[42,19,29,21],[42,20,29,22],[42,21,29,23],[43,6,30,8],[43,10,30,12,"mod"],[43,13,30,15],[43,17,30,19],[43,21,30,23],[43,23,30,25],[43,28,30,30],[43,32,30,34,"k"],[43,33,30,35],[43,36,30,38,"ownKeys"],[43,44,30,45],[43,45,30,46,"mod"],[43,48,30,49],[43,49,30,50],[43,51,30,52,"i"],[43,52,30,53],[43,55,30,56],[43,56,30,57],[43,58,30,59,"i"],[43,59,30,60],[43,62,30,63,"k"],[43,63,30,64],[43,64,30,65,"length"],[43,70,30,71],[43,72,30,73,"i"],[43,73,30,74],[43,75,30,76],[43,77,30,78],[43,81,30,82,"k"],[43,82,30,83],[43,83,30,84,"i"],[43,84,30,85],[43,85,30,86],[43,90,30,91],[43,99,30,100],[43,101,30,102,"__createBinding"],[43,116,30,117],[43,117,30,118,"result"],[43,123,30,124],[43,125,30,126,"mod"],[43,128,30,129],[43,130,30,131,"k"],[43,131,30,132],[43,132,30,133,"i"],[43,133,30,134],[43,134,30,135],[43,135,30,136],[44,6,31,8,"__setModuleDefault"],[44,24,31,26],[44,25,31,27,"result"],[44,31,31,33],[44,33,31,35,"mod"],[44,36,31,38],[44,37,31,39],[45,6,32,8],[45,13,32,15,"result"],[45,19,32,21],[46,4,33,4],[46,5,33,5],[47,2,34,0],[47,3,34,1],[47,4,34,3],[47,5,34,4],[48,2,35,0],[48,6,35,4,"__importDefault"],[48,21,35,19],[48,24,35,23],[48,28,35,27],[48,32,35,31],[48,36,35,35],[48,37,35,36,"__importDefault"],[48,52,35,51],[48,56,35,56],[48,66,35,66,"mod"],[48,69,35,69],[48,71,35,71],[49,4,36,4],[49,11,36,12,"mod"],[49,14,36,15],[49,18,36,19,"mod"],[49,21,36,22],[49,22,36,23,"__esModule"],[49,32,36,33],[49,35,36,37,"mod"],[49,38,36,40],[49,41,36,43],[50,6,36,45],[50,15,36,54],[50,17,36,56,"mod"],[51,4,36,60],[51,5,36,61],[52,2,37,0],[52,3,37,1],[53,2,38,0,"Object"],[53,8,38,6],[53,9,38,7,"defineProperty"],[53,23,38,21],[53,24,38,22,"exports"],[53,31,38,29],[53,33,38,31],[53,45,38,43],[53,47,38,45],[54,4,38,47,"value"],[54,9,38,52],[54,11,38,54],[55,2,38,59],[55,3,38,60],[55,4,38,61],[56,2,39,0],[56,6,39,6,"isows_1"],[56,13,39,13],[56,16,39,16,"require"],[56,23,39,23],[56,24,39,23,"_dependencyMap"],[56,38,39,23],[56,50,39,31],[56,51,39,32],[57,2,40,0],[57,6,40,6,"constants_1"],[57,17,40,17],[57,20,40,20,"require"],[57,27,40,27],[57,28,40,27,"_dependencyMap"],[57,42,40,27],[57,64,40,45],[57,65,40,46],[58,2,41,0],[58,6,41,6,"serializer_1"],[58,18,41,18],[58,21,41,21,"__importDefault"],[58,36,41,36],[58,37,41,37,"require"],[58,44,41,44],[58,45,41,44,"_dependencyMap"],[58,59,41,44],[58,82,41,63],[58,83,41,64],[58,84,41,65],[59,2,42,0],[59,6,42,6,"timer_1"],[59,13,42,13],[59,16,42,16,"__importDefault"],[59,31,42,31],[59,32,42,32,"require"],[59,39,42,39],[59,40,42,39,"_dependencyMap"],[59,54,42,39],[59,72,42,53],[59,73,42,54],[59,74,42,55],[60,2,43,0],[60,6,43,6,"transformers_1"],[60,20,43,20],[60,23,43,23,"require"],[60,30,43,30],[60,31,43,30,"_dependencyMap"],[60,45,43,30],[60,70,43,51],[60,71,43,52],[61,2,44,0],[61,6,44,6,"RealtimeChannel_1"],[61,23,44,23],[61,26,44,26,"__importDefault"],[61,41,44,41],[61,42,44,42,"require"],[61,49,44,49],[61,50,44,49,"_dependencyMap"],[61,64,44,49],[61,88,44,69],[61,89,44,70],[61,90,44,71],[62,2,45,0],[62,6,45,6,"noop"],[62,10,45,10],[62,13,45,13],[62,22,45,6,"noop"],[62,26,45,10,"noop"],[62,27,45,10],[62,29,45,19],[62,30,45,21],[62,31,45,22],[63,2,46,0],[63,6,46,6,"WORKER_SCRIPT"],[63,19,46,19],[63,22,46,22],[64,0,47,0],[65,0,48,0],[66,0,49,0],[67,0,50,0],[68,0,51,0],[68,6,51,6],[69,2,51,7],[69,6,52,6,"RealtimeClient"],[69,20,52,20],[70,4,53,4],[71,0,54,0],[72,0,55,0],[73,0,56,0],[74,0,57,0],[75,0,58,0],[76,0,59,0],[77,0,60,0],[78,0,61,0],[79,0,62,0],[80,0,63,0],[81,0,64,0],[82,0,65,0],[83,0,66,0],[84,0,67,0],[85,0,68,0],[86,0,69,0],[87,0,70,0],[88,4,71,4],[88,13,71,4,"RealtimeClient"],[88,28,71,16,"endPoint"],[88,36,71,24],[88,38,71,26,"options"],[88,45,71,33],[88,47,71,35],[89,6,71,35],[89,10,71,35,"_this"],[89,15,71,35],[90,6,71,35,"_classCallCheck"],[90,21,71,35],[90,28,71,35,"RealtimeClient"],[90,42,71,35],[91,6,72,8],[91,10,72,12,"_a"],[91,12,72,14],[92,6,73,8],[92,10,73,12],[92,11,73,13,"accessTokenValue"],[92,27,73,29],[92,30,73,32],[92,34,73,36],[93,6,74,8],[93,10,74,12],[93,11,74,13,"apiKey"],[93,17,74,19],[93,20,74,22],[93,24,74,26],[94,6,75,8],[94,10,75,12],[94,11,75,13,"channels"],[94,19,75,21],[94,22,75,24],[94,26,75,28,"Array"],[94,31,75,33],[94,32,75,34],[94,33,75,35],[95,6,76,8],[95,10,76,12],[95,11,76,13,"endPoint"],[95,19,76,21],[95,22,76,24],[95,24,76,26],[96,6,77,8],[96,10,77,12],[96,11,77,13,"httpEndpoint"],[96,23,77,25],[96,26,77,28],[96,28,77,30],[97,6,78,8],[98,6,79,8],[98,10,79,12],[98,11,79,13,"headers"],[98,18,79,20],[98,21,79,23],[98,22,79,24],[98,23,79,25],[99,6,80,8],[99,10,80,12],[99,11,80,13,"params"],[99,17,80,19],[99,20,80,22],[99,21,80,23],[99,22,80,24],[100,6,81,8],[100,10,81,12],[100,11,81,13,"timeout"],[100,18,81,20],[100,21,81,23,"constants_1"],[100,32,81,34],[100,33,81,35,"DEFAULT_TIMEOUT"],[100,48,81,50],[101,6,82,8],[101,10,82,12],[101,11,82,13,"heartbeatIntervalMs"],[101,30,82,32],[101,33,82,35],[101,38,82,40],[102,6,83,8],[102,10,83,12],[102,11,83,13,"heartbeatTimer"],[102,25,83,27],[102,28,83,30,"undefined"],[102,37,83,39],[103,6,84,8],[103,10,84,12],[103,11,84,13,"pendingHeartbeatRef"],[103,30,84,32],[103,33,84,35],[103,37,84,39],[104,6,85,8],[104,10,85,12],[104,11,85,13,"heartbeatCallback"],[104,28,85,30],[104,31,85,33,"noop"],[104,35,85,37],[105,6,86,8],[105,10,86,12],[105,11,86,13,"ref"],[105,14,86,16],[105,17,86,19],[105,18,86,20],[106,6,87,8],[106,10,87,12],[106,11,87,13,"logger"],[106,17,87,19],[106,20,87,22,"noop"],[106,24,87,26],[107,6,88,8],[107,10,88,12],[107,11,88,13,"conn"],[107,15,88,17],[107,18,88,20],[107,22,88,24],[108,6,89,8],[108,10,89,12],[108,11,89,13,"sendBuffer"],[108,21,89,23],[108,24,89,26],[108,26,89,28],[109,6,90,8],[109,10,90,12],[109,11,90,13,"serializer"],[109,21,90,23],[109,24,90,26],[109,28,90,30,"serializer_1"],[109,40,90,42],[109,41,90,43,"default"],[109,48,90,50],[109,49,90,51],[109,50,90,52],[110,6,91,8],[110,10,91,12],[110,11,91,13,"stateChangeCallbacks"],[110,31,91,33],[110,34,91,36],[111,8,92,12,"open"],[111,12,92,16],[111,14,92,18],[111,16,92,20],[112,8,93,12,"close"],[112,13,93,17],[112,15,93,19],[112,17,93,21],[113,8,94,12,"error"],[113,13,94,17],[113,15,94,19],[113,17,94,21],[114,8,95,12,"message"],[114,15,95,19],[114,17,95,21],[115,6,96,8],[115,7,96,9],[116,6,97,8],[116,10,97,12],[116,11,97,13,"accessToken"],[116,22,97,24],[116,25,97,27],[116,29,97,31],[117,6,98,8],[118,0,99,0],[119,0,100,0],[120,0,101,0],[121,0,102,0],[122,6,103,8],[122,10,103,12],[122,11,103,13,"_resolveFetch"],[122,24,103,26],[122,27,103,29],[122,37,103,30,"customFetch"],[122,48,103,41],[122,50,103,46],[123,8,104,12],[123,12,104,16,"_fetch"],[123,18,104,22],[124,8,105,12],[124,12,105,16,"customFetch"],[124,23,105,27],[124,25,105,29],[125,10,106,16,"_fetch"],[125,16,106,22],[125,19,106,25,"customFetch"],[125,30,106,36],[126,8,107,12],[126,9,107,13],[126,15,108,17],[126,19,108,21],[126,26,108,28,"fetch"],[126,31,108,33],[126,36,108,38],[126,47,108,49],[126,49,108,51],[127,10,109,16,"_fetch"],[127,16,109,22],[127,19,109,25],[127,28,109,16,"_fetch"],[127,34,109,22,"_fetch"],[127,35,109,22],[128,12,109,22],[128,21,109,22,"_len"],[128,25,109,22],[128,28,109,22,"arguments"],[128,37,109,22],[128,38,109,22,"length"],[128,44,109,22],[128,46,109,29,"args"],[128,50,109,33],[128,57,109,33,"Array"],[128,62,109,33],[128,63,109,33,"_len"],[128,67,109,33],[128,70,109,33,"_key"],[128,74,109,33],[128,80,109,33,"_key"],[128,84,109,33],[128,87,109,33,"_len"],[128,91,109,33],[128,93,109,33,"_key"],[128,97,109,33],[129,14,109,29,"args"],[129,18,109,33],[129,19,109,33,"_key"],[129,23,109,33],[129,27,109,33,"arguments"],[129,36,109,33],[129,37,109,33,"_key"],[129,41,109,33],[130,12,109,33],[131,12,109,33],[131,19,109,38,"Promise"],[131,26,109,45],[131,27,109,46,"resolve"],[131,34,109,53],[131,35,109,54],[131,38,109,57],[131,60,109,79],[131,62,109,81],[131,63,109,82],[131,64,109,83,"then"],[131,68,109,87],[131,69,109,88],[131,79,109,88,"s"],[131,80,109,89],[132,14,109,89],[132,21,109,93,"__importStar"],[132,33,109,105],[132,44,109,105,"line"],[132,48,109,105],[133,16,109,105],[133,26,109,105,"Error"],[133,31,109,105],[133,69,109,105,"line"],[133,73,109,105],[134,14,109,105],[134,20,109,116],[134,21,109,117],[135,12,109,117],[135,14,109,118],[135,15,109,119,"then"],[135,19,109,123],[135,20,109,124],[135,30,109,124,"_ref"],[135,34,109,124],[136,14,109,124],[136,18,109,136,"fetch"],[136,23,109,141],[136,26,109,141,"_ref"],[136,30,109,141],[136,31,109,127,"default"],[136,38,109,134],[137,14,109,134],[137,21,109,148,"fetch"],[137,26,109,153],[137,27,109,153,"apply"],[137,32,109,153],[137,41,109,157,"args"],[137,45,109,161],[137,46,109,162],[138,12,109,162],[138,14,109,163],[139,10,109,163],[140,8,110,12],[140,9,110,13],[140,15,111,17],[141,10,112,16,"_fetch"],[141,16,112,22],[141,19,112,25,"fetch"],[141,24,112,30],[142,8,113,12],[143,8,114,12],[143,15,114,19],[144,10,114,19],[144,17,114,32,"_fetch"],[144,23,114,38],[144,24,114,38,"apply"],[144,29,114,38],[144,38,114,38,"arguments"],[144,47,114,46],[144,48,114,47],[145,8,114,47],[146,6,115,8],[146,7,115,9],[147,6,116,8],[147,10,116,12],[147,11,116,13,"endPoint"],[147,19,116,21],[147,22,116,24],[147,25,116,27,"endPoint"],[147,33,116,35],[147,37,116,39,"constants_1"],[147,48,116,50],[147,49,116,51,"TRANSPORTS"],[147,59,116,61],[147,60,116,62,"websocket"],[147,69,116,71],[147,71,116,73],[148,6,117,8],[148,10,117,12],[148,11,117,13,"httpEndpoint"],[148,23,117,25],[148,26,117,28],[148,27,117,29],[148,28,117,30],[148,30,117,32,"transformers_1"],[148,44,117,46],[148,45,117,47,"httpEndpointURL"],[148,60,117,62],[148,62,117,64,"endPoint"],[148,70,117,72],[148,71,117,73],[149,6,118,8],[149,10,118,12,"options"],[149,17,118,19],[149,22,118,24],[149,26,118,28],[149,30,118,32,"options"],[149,37,118,39],[149,42,118,44],[149,47,118,49],[149,48,118,50],[149,51,118,53],[149,56,118,58],[149,57,118,59],[149,60,118,62,"options"],[149,67,118,69],[149,68,118,70,"transport"],[149,77,118,79],[149,79,118,81],[150,8,119,12],[150,12,119,16],[150,13,119,17,"transport"],[150,22,119,26],[150,25,119,29,"options"],[150,32,119,36],[150,33,119,37,"transport"],[150,42,119,46],[151,6,120,8],[151,7,120,9],[151,13,121,13],[152,8,122,12],[152,12,122,16],[152,13,122,17,"transport"],[152,22,122,26],[152,25,122,29],[152,29,122,33],[153,6,123,8],[154,6,124,8],[154,10,124,12,"options"],[154,17,124,19],[154,22,124,24],[154,26,124,28],[154,30,124,32,"options"],[154,37,124,39],[154,42,124,44],[154,47,124,49],[154,48,124,50],[154,51,124,53],[154,56,124,58],[154,57,124,59],[154,60,124,62,"options"],[154,67,124,69],[154,68,124,70,"params"],[154,74,124,76],[154,76,125,12],[154,80,125,16],[154,81,125,17,"params"],[154,87,125,23],[154,90,125,26,"options"],[154,97,125,33],[154,98,125,34,"params"],[154,104,125,40],[155,6,126,8],[155,10,126,12,"options"],[155,17,126,19],[155,22,126,24],[155,26,126,28],[155,30,126,32,"options"],[155,37,126,39],[155,42,126,44],[155,47,126,49],[155,48,126,50],[155,51,126,53],[155,56,126,58],[155,57,126,59],[155,60,126,62,"options"],[155,67,126,69],[155,68,126,70,"timeout"],[155,75,126,77],[155,77,127,12],[155,81,127,16],[155,82,127,17,"timeout"],[155,89,127,24],[155,92,127,27,"options"],[155,99,127,34],[155,100,127,35,"timeout"],[155,107,127,42],[156,6,128,8],[156,10,128,12,"options"],[156,17,128,19],[156,22,128,24],[156,26,128,28],[156,30,128,32,"options"],[156,37,128,39],[156,42,128,44],[156,47,128,49],[156,48,128,50],[156,51,128,53],[156,56,128,58],[156,57,128,59],[156,60,128,62,"options"],[156,67,128,69],[156,68,128,70,"logger"],[156,74,128,76],[156,76,129,12],[156,80,129,16],[156,81,129,17,"logger"],[156,87,129,23],[156,90,129,26,"options"],[156,97,129,33],[156,98,129,34,"logger"],[156,104,129,40],[157,6,130,8],[157,10,130,12],[157,11,130,13,"options"],[157,18,130,20],[157,23,130,25],[157,27,130,29],[157,31,130,33,"options"],[157,38,130,40],[157,43,130,45],[157,48,130,50],[157,49,130,51],[157,52,130,54],[157,57,130,59],[157,58,130,60],[157,61,130,63,"options"],[157,68,130,70],[157,69,130,71,"logLevel"],[157,77,130,79],[157,83,130,85,"options"],[157,90,130,92],[157,95,130,97],[157,99,130,101],[157,103,130,105,"options"],[157,110,130,112],[157,115,130,117],[157,120,130,122],[157,121,130,123],[157,124,130,126],[157,129,130,131],[157,130,130,132],[157,133,130,135,"options"],[157,140,130,142],[157,141,130,143,"log_level"],[157,150,130,152],[157,151,130,153],[157,153,130,155],[158,8,131,12],[158,12,131,16],[158,13,131,17,"logLevel"],[158,21,131,25],[158,24,131,28,"options"],[158,31,131,35],[158,32,131,36,"logLevel"],[158,40,131,44],[158,44,131,48,"options"],[158,51,131,55],[158,52,131,56,"log_level"],[158,61,131,65],[159,8,132,12],[159,12,132,16],[159,13,132,17,"params"],[159,19,132,23],[159,22,132,26,"Object"],[159,28,132,32],[159,29,132,33,"assign"],[159,35,132,39],[159,36,132,40,"Object"],[159,42,132,46],[159,43,132,47,"assign"],[159,49,132,53],[159,50,132,54],[159,51,132,55],[159,52,132,56],[159,54,132,58],[159,58,132,62],[159,59,132,63,"params"],[159,65,132,69],[159,66,132,70],[159,68,132,72],[160,10,132,74,"log_level"],[160,19,132,83],[160,21,132,85],[160,25,132,89],[160,26,132,90,"logLevel"],[161,8,132,99],[161,9,132,100],[161,10,132,101],[162,6,133,8],[163,6,134,8],[163,10,134,12,"options"],[163,17,134,19],[163,22,134,24],[163,26,134,28],[163,30,134,32,"options"],[163,37,134,39],[163,42,134,44],[163,47,134,49],[163,48,134,50],[163,51,134,53],[163,56,134,58],[163,57,134,59],[163,60,134,62,"options"],[163,67,134,69],[163,68,134,70,"heartbeatIntervalMs"],[163,87,134,89],[163,89,135,12],[163,93,135,16],[163,94,135,17,"heartbeatIntervalMs"],[163,113,135,36],[163,116,135,39,"options"],[163,123,135,46],[163,124,135,47,"heartbeatIntervalMs"],[163,143,135,66],[164,6,136,8],[164,10,136,14,"accessTokenValue"],[164,26,136,30],[164,29,136,33],[164,30,136,34,"_a"],[164,32,136,36],[164,35,136,39,"options"],[164,42,136,46],[164,47,136,51],[164,51,136,55],[164,55,136,59,"options"],[164,62,136,66],[164,67,136,71],[164,72,136,76],[164,73,136,77],[164,76,136,80],[164,81,136,85],[164,82,136,86],[164,85,136,89,"options"],[164,92,136,96],[164,93,136,97,"params"],[164,99,136,103],[164,105,136,109],[164,109,136,113],[164,113,136,117,"_a"],[164,115,136,119],[164,120,136,124],[164,125,136,129],[164,126,136,130],[164,129,136,133],[164,134,136,138],[164,135,136,139],[164,138,136,142,"_a"],[164,140,136,144],[164,141,136,145,"apikey"],[164,147,136,151],[165,6,137,8],[165,10,137,12,"accessTokenValue"],[165,26,137,28],[165,28,137,30],[166,8,138,12],[166,12,138,16],[166,13,138,17,"accessTokenValue"],[166,29,138,33],[166,32,138,36,"accessTokenValue"],[166,48,138,52],[167,8,139,12],[167,12,139,16],[167,13,139,17,"apiKey"],[167,19,139,23],[167,22,139,26,"accessTokenValue"],[167,38,139,42],[168,6,140,8],[169,6,141,8],[169,10,141,12],[169,11,141,13,"reconnectAfterMs"],[169,27,141,29],[169,30,141,32],[169,31,141,33,"options"],[169,38,141,40],[169,43,141,45],[169,47,141,49],[169,51,141,53,"options"],[169,58,141,60],[169,63,141,65],[169,68,141,70],[169,69,141,71],[169,72,141,74],[169,77,141,79],[169,78,141,80],[169,81,141,83,"options"],[169,88,141,90],[169,89,141,91,"reconnectAfterMs"],[169,105,141,107],[169,109,142,14,"options"],[169,116,142,21],[169,117,142,22,"reconnectAfterMs"],[169,133,142,38],[169,136,143,14],[169,146,143,15,"tries"],[169,151,143,20],[169,153,143,25],[170,8,144,16],[170,15,144,23],[170,16,144,24],[170,20,144,28],[170,22,144,30],[170,26,144,34],[170,28,144,36],[170,32,144,40],[170,34,144,42],[170,39,144,47],[170,40,144,48],[170,41,144,49,"tries"],[170,46,144,54],[170,49,144,57],[170,50,144,58],[170,51,144,59],[170,55,144,63],[170,60,144,68],[171,6,145,12],[171,7,145,13],[172,6,146,8],[172,10,146,12],[172,11,146,13,"encode"],[172,17,146,19],[172,20,146,22],[172,21,146,23,"options"],[172,28,146,30],[172,33,146,35],[172,37,146,39],[172,41,146,43,"options"],[172,48,146,50],[172,53,146,55],[172,58,146,60],[172,59,146,61],[172,62,146,64],[172,67,146,69],[172,68,146,70],[172,71,146,73,"options"],[172,78,146,80],[172,79,146,81,"encode"],[172,85,146,87],[172,89,147,14,"options"],[172,96,147,21],[172,97,147,22,"encode"],[172,103,147,28],[172,106,148,14],[172,116,148,15,"payload"],[172,123,148,22],[172,125,148,24,"callback"],[172,133,148,32],[172,135,148,37],[173,8,149,16],[173,15,149,23,"callback"],[173,23,149,31],[173,24,149,32,"JSON"],[173,28,149,36],[173,29,149,37,"stringify"],[173,38,149,46],[173,39,149,47,"payload"],[173,46,149,54],[173,47,149,55],[173,48,149,56],[174,6,150,12],[174,7,150,13],[175,6,151,8],[175,10,151,12],[175,11,151,13,"decode"],[175,17,151,19],[175,20,151,22],[175,21,151,23,"options"],[175,28,151,30],[175,33,151,35],[175,37,151,39],[175,41,151,43,"options"],[175,48,151,50],[175,53,151,55],[175,58,151,60],[175,59,151,61],[175,62,151,64],[175,67,151,69],[175,68,151,70],[175,71,151,73,"options"],[175,78,151,80],[175,79,151,81,"decode"],[175,85,151,87],[175,89,152,14,"options"],[175,96,152,21],[175,97,152,22,"decode"],[175,103,152,28],[175,106,153,14],[175,110,153,18],[175,111,153,19,"serializer"],[175,121,153,29],[175,122,153,30,"decode"],[175,128,153,36],[175,129,153,37,"bind"],[175,133,153,41],[175,134,153,42],[175,138,153,46],[175,139,153,47,"serializer"],[175,149,153,57],[175,150,153,58],[176,6,154,8],[176,10,154,12],[176,11,154,13,"reconnectTimer"],[176,25,154,27],[176,28,154,30],[176,32,154,34,"timer_1"],[176,39,154,41],[176,40,154,42,"default"],[176,47,154,49],[176,61,154,49,"_asyncToGenerator"],[176,78,154,49],[176,79,154,50],[176,92,154,62],[177,8,155,12,"_this"],[177,13,155,16],[177,14,155,17,"disconnect"],[177,24,155,27],[177,25,155,28],[177,26,155,29],[178,8,156,12,"_this"],[178,13,156,16],[178,14,156,17,"connect"],[178,21,156,24],[178,22,156,25],[178,23,156,26],[179,6,157,8],[179,7,157,9],[179,10,157,11],[179,14,157,15],[179,15,157,16,"reconnectAfterMs"],[179,31,157,32],[179,32,157,33],[180,6,158,8],[180,10,158,12],[180,11,158,13,"fetch"],[180,16,158,18],[180,19,158,21],[180,23,158,25],[180,24,158,26,"_resolveFetch"],[180,37,158,39],[180,38,158,40,"options"],[180,45,158,47],[180,50,158,52],[180,54,158,56],[180,58,158,60,"options"],[180,65,158,67],[180,70,158,72],[180,75,158,77],[180,76,158,78],[180,79,158,81],[180,84,158,86],[180,85,158,87],[180,88,158,90,"options"],[180,95,158,97],[180,96,158,98,"fetch"],[180,101,158,103],[180,102,158,104],[181,6,159,8],[181,10,159,12,"options"],[181,17,159,19],[181,22,159,24],[181,26,159,28],[181,30,159,32,"options"],[181,37,159,39],[181,42,159,44],[181,47,159,49],[181,48,159,50],[181,51,159,53],[181,56,159,58],[181,57,159,59],[181,60,159,62,"options"],[181,67,159,69],[181,68,159,70,"worker"],[181,74,159,76],[181,76,159,78],[182,8,160,12],[182,12,160,16],[182,19,160,23,"window"],[182,25,160,29],[182,30,160,34],[182,41,160,45],[182,45,160,49],[182,46,160,50,"window"],[182,52,160,56],[182,53,160,57,"Worker"],[182,59,160,63],[182,61,160,65],[183,10,161,16],[183,16,161,22],[183,20,161,26,"Error"],[183,25,161,31],[183,26,161,32],[183,55,161,61],[183,56,161,62],[184,8,162,12],[185,8,163,12],[185,12,163,16],[185,13,163,17,"worker"],[185,19,163,23],[185,22,163,26],[185,23,163,27,"options"],[185,30,163,34],[185,35,163,39],[185,39,163,43],[185,43,163,47,"options"],[185,50,163,54],[185,55,163,59],[185,60,163,64],[185,61,163,65],[185,64,163,68],[185,69,163,73],[185,70,163,74],[185,73,163,77,"options"],[185,80,163,84],[185,81,163,85,"worker"],[185,87,163,91],[185,92,163,96],[185,97,163,101],[186,8,164,12],[186,12,164,16],[186,13,164,17,"workerUrl"],[186,22,164,26],[186,25,164,29,"options"],[186,32,164,36],[186,37,164,41],[186,41,164,45],[186,45,164,49,"options"],[186,52,164,56],[186,57,164,61],[186,62,164,66],[186,63,164,67],[186,66,164,70],[186,71,164,75],[186,72,164,76],[186,75,164,79,"options"],[186,82,164,86],[186,83,164,87,"workerUrl"],[186,92,164,96],[187,6,165,8],[188,6,166,8],[188,10,166,12],[188,11,166,13,"accessToken"],[188,22,166,24],[188,25,166,27],[188,26,166,28,"options"],[188,33,166,35],[188,38,166,40],[188,42,166,44],[188,46,166,48,"options"],[188,53,166,55],[188,58,166,60],[188,63,166,65],[188,64,166,66],[188,67,166,69],[188,72,166,74],[188,73,166,75],[188,76,166,78,"options"],[188,83,166,85],[188,84,166,86,"accessToken"],[188,95,166,97],[188,100,166,102],[188,104,166,106],[189,4,167,4],[190,4,168,4],[191,0,169,0],[192,0,170,0],[193,4,168,4],[193,11,168,4,"_createClass"],[193,23,168,4],[193,24,168,4,"RealtimeClient"],[193,38,168,4],[194,6,168,4,"key"],[194,9,168,4],[195,6,168,4,"value"],[195,11,168,4],[195,13,171,4],[195,22,171,4,"connect"],[195,29,171,11,"connect"],[195,30,171,11],[195,32,171,14],[196,8,172,8],[196,12,172,12],[196,16,172,16],[196,17,172,17,"conn"],[196,21,172,21],[196,23,172,23],[197,10,173,12],[198,8,174,8],[199,8,175,8],[199,12,175,12],[199,13,175,13],[199,17,175,17],[199,18,175,18,"transport"],[199,27,175,27],[199,29,175,29],[200,10,176,12],[200,14,176,16],[200,15,176,17,"transport"],[200,24,176,26],[200,27,176,29,"isows_1"],[200,34,176,36],[200,35,176,37,"WebSocket"],[200,44,176,46],[201,8,177,8],[202,8,178,8],[202,12,178,12],[202,13,178,13],[202,17,178,17],[202,18,178,18,"transport"],[202,27,178,27],[202,29,178,29],[203,10,179,12],[203,16,179,18],[203,20,179,22,"Error"],[203,25,179,27],[203,26,179,28],[203,49,179,51],[203,50,179,52],[204,8,180,8],[205,8,181,8],[205,12,181,12],[205,13,181,13,"conn"],[205,17,181,17],[205,20,181,20],[205,24,181,24],[205,28,181,28],[205,29,181,29,"transport"],[205,38,181,38],[205,39,181,39],[205,43,181,43],[205,44,181,44,"endpointURL"],[205,55,181,55],[205,56,181,56],[205,57,181,57],[205,58,181,58],[206,8,182,8],[206,12,182,12],[206,13,182,13,"setupConnection"],[206,28,182,28],[206,29,182,29],[206,30,182,30],[207,6,183,4],[208,6,184,4],[209,0,185,0],[210,0,186,0],[211,0,187,0],[212,4,184,4],[213,6,184,4,"key"],[213,9,184,4],[214,6,184,4,"value"],[214,11,184,4],[214,13,188,4],[214,22,188,4,"endpointURL"],[214,33,188,15,"endpointURL"],[214,34,188,15],[214,36,188,18],[215,8,189,8],[215,15,189,15],[215,19,189,19],[215,20,189,20,"_appendParams"],[215,33,189,33],[215,34,189,34],[215,38,189,38],[215,39,189,39,"endPoint"],[215,47,189,47],[215,49,189,49,"Object"],[215,55,189,55],[215,56,189,56,"assign"],[215,62,189,62],[215,63,189,63],[215,64,189,64],[215,65,189,65],[215,67,189,67],[215,71,189,71],[215,72,189,72,"params"],[215,78,189,78],[215,80,189,80],[216,10,189,82,"vsn"],[216,13,189,85],[216,15,189,87,"constants_1"],[216,26,189,98],[216,27,189,99,"VSN"],[217,8,189,103],[217,9,189,104],[217,10,189,105],[217,11,189,106],[218,6,190,4],[219,6,191,4],[220,0,192,0],[221,0,193,0],[222,0,194,0],[223,0,195,0],[224,0,196,0],[225,4,191,4],[226,6,191,4,"key"],[226,9,191,4],[227,6,191,4,"value"],[227,11,191,4],[227,13,197,4],[227,22,197,4,"disconnect"],[227,32,197,14,"disconnect"],[227,33,197,15,"code"],[227,37,197,19],[227,39,197,21,"reason"],[227,45,197,27],[227,47,197,29],[228,8,198,8],[228,12,198,12],[228,16,198,16],[228,17,198,17,"conn"],[228,21,198,21],[228,23,198,23],[229,10,199,12],[229,14,199,16],[229,15,199,17,"conn"],[229,19,199,21],[229,20,199,22,"onclose"],[229,27,199,29],[229,30,199,32],[229,42,199,44],[229,43,199,46],[229,44,199,47],[229,45,199,48],[229,46,199,49],[230,10,200,12],[230,14,200,16,"code"],[230,18,200,20],[230,20,200,22],[231,12,201,16],[231,16,201,20],[231,17,201,21,"conn"],[231,21,201,25],[231,22,201,26,"close"],[231,27,201,31],[231,28,201,32,"code"],[231,32,201,36],[231,34,201,38,"reason"],[231,40,201,44],[231,45,201,49],[231,49,201,53],[231,53,201,57,"reason"],[231,59,201,63],[231,64,201,68],[231,69,201,73],[231,70,201,74],[231,73,201,77,"reason"],[231,79,201,83],[231,82,201,86],[231,84,201,88],[231,85,201,89],[232,10,202,12],[232,11,202,13],[232,17,203,17],[233,12,204,16],[233,16,204,20],[233,17,204,21,"conn"],[233,21,204,25],[233,22,204,26,"close"],[233,27,204,31],[233,28,204,32],[233,29,204,33],[234,10,205,12],[235,10,206,12],[235,14,206,16],[235,15,206,17,"conn"],[235,19,206,21],[235,22,206,24],[235,26,206,28],[236,10,207,12],[237,10,208,12],[237,14,208,16],[237,15,208,17,"heartbeatTimer"],[237,29,208,31],[237,33,208,35,"clearInterval"],[237,46,208,48],[237,47,208,49],[237,51,208,53],[237,52,208,54,"heartbeatTimer"],[237,66,208,68],[237,67,208,69],[238,10,209,12],[238,14,209,16],[238,15,209,17,"reconnectTimer"],[238,29,209,31],[238,30,209,32,"reset"],[238,35,209,37],[238,36,209,38],[238,37,209,39],[239,10,210,12],[239,14,210,16],[239,15,210,17,"channels"],[239,23,210,25],[239,24,210,26,"forEach"],[239,31,210,33],[239,32,210,34],[239,42,210,35,"channel"],[239,49,210,42],[240,12,210,42],[240,19,210,47,"channel"],[240,26,210,54],[240,27,210,55,"teardown"],[240,35,210,63],[240,36,210,64],[240,37,210,65],[241,10,210,65],[241,12,210,66],[242,8,211,8],[243,6,212,4],[244,6,213,4],[245,0,214,0],[246,0,215,0],[247,4,213,4],[248,6,213,4,"key"],[248,9,213,4],[249,6,213,4,"value"],[249,11,213,4],[249,13,216,4],[249,22,216,4,"getChannels"],[249,33,216,15,"getChannels"],[249,34,216,15],[249,36,216,18],[250,8,217,8],[250,15,217,15],[250,19,217,19],[250,20,217,20,"channels"],[250,28,217,28],[251,6,218,4],[252,6,219,4],[253,0,220,0],[254,0,221,0],[255,0,222,0],[256,4,219,4],[257,6,219,4,"key"],[257,9,219,4],[258,6,219,4,"value"],[258,11,219,4],[259,8,219,4],[259,12,219,4,"_removeChannel"],[259,26,219,4],[259,29,219,4,"_asyncToGenerator"],[259,46,219,4],[259,47,223,4],[259,58,223,24,"channel"],[259,65,223,31],[259,67,223,33],[260,10,224,8],[260,14,224,14,"status"],[260,20,224,20],[260,29,224,29,"channel"],[260,36,224,36],[260,37,224,37,"unsubscribe"],[260,48,224,48],[260,49,224,49],[260,50,224,50],[261,10,225,8],[261,14,225,12],[261,18,225,16],[261,19,225,17,"channels"],[261,27,225,25],[261,28,225,26,"length"],[261,34,225,32],[261,39,225,37],[261,40,225,38],[261,42,225,40],[262,12,226,12],[262,16,226,16],[262,17,226,17,"disconnect"],[262,27,226,27],[262,28,226,28],[262,29,226,29],[263,10,227,8],[264,10,228,8],[264,17,228,15,"status"],[264,23,228,21],[265,8,229,4],[265,9,229,5],[266,8,229,5],[266,17,223,10,"removeChannel"],[266,30,223,23,"removeChannel"],[266,31,223,23,"_x"],[266,33,223,23],[267,10,223,23],[267,17,223,23,"_removeChannel"],[267,31,223,23],[267,32,223,23,"apply"],[267,37,223,23],[267,44,223,23,"arguments"],[267,53,223,23],[268,8,223,23],[269,8,223,23],[269,15,223,10,"removeChannel"],[269,28,223,23],[270,6,223,23],[271,6,230,4],[272,0,231,0],[273,0,232,0],[274,6,230,4],[275,4,230,4],[276,6,230,4,"key"],[276,9,230,4],[277,6,230,4,"value"],[277,11,230,4],[278,8,230,4],[278,12,230,4,"_removeAllChannels"],[278,30,230,4],[278,33,230,4,"_asyncToGenerator"],[278,50,230,4],[278,51,233,4],[278,64,233,30],[279,10,234,8],[279,14,234,14,"values_1"],[279,22,234,22],[279,31,234,31,"Promise"],[279,38,234,38],[279,39,234,39,"all"],[279,42,234,42],[279,43,234,43],[279,47,234,47],[279,48,234,48,"channels"],[279,56,234,56],[279,57,234,57,"map"],[279,60,234,60],[279,61,234,61],[279,71,234,62,"channel"],[279,78,234,69],[280,12,234,69],[280,19,234,74,"channel"],[280,26,234,81],[280,27,234,82,"unsubscribe"],[280,38,234,93],[280,39,234,94],[280,40,234,95],[281,10,234,95],[281,12,234,96],[281,13,234,97],[282,10,235,8],[282,14,235,12],[282,15,235,13,"channels"],[282,23,235,21],[282,26,235,24],[282,28,235,26],[283,10,236,8],[283,14,236,12],[283,15,236,13,"disconnect"],[283,25,236,23],[283,26,236,24],[283,27,236,25],[284,10,237,8],[284,17,237,15,"values_1"],[284,25,237,23],[285,8,238,4],[285,9,238,5],[286,8,238,5],[286,17,233,10,"removeAllChannels"],[286,34,233,27,"removeAllChannels"],[286,35,233,27],[287,10,233,27],[287,17,233,27,"_removeAllChannels"],[287,35,233,27],[287,36,233,27,"apply"],[287,41,233,27],[287,48,233,27,"arguments"],[287,57,233,27],[288,8,233,27],[289,8,233,27],[289,15,233,10,"removeAllChannels"],[289,32,233,27],[290,6,233,27],[291,6,239,4],[292,0,240,0],[293,0,241,0],[294,0,242,0],[295,0,243,0],[296,6,239,4],[297,4,239,4],[298,6,239,4,"key"],[298,9,239,4],[299,6,239,4,"value"],[299,11,239,4],[299,13,244,4],[299,22,244,4,"log"],[299,25,244,7,"log"],[299,26,244,8,"kind"],[299,30,244,12],[299,32,244,14,"msg"],[299,35,244,17],[299,37,244,19,"data"],[299,41,244,23],[299,43,244,25],[300,8,245,8],[300,12,245,12],[300,13,245,13,"logger"],[300,19,245,19],[300,20,245,20,"kind"],[300,24,245,24],[300,26,245,26,"msg"],[300,29,245,29],[300,31,245,31,"data"],[300,35,245,35],[300,36,245,36],[301,6,246,4],[302,6,247,4],[303,0,248,0],[304,0,249,0],[305,4,247,4],[306,6,247,4,"key"],[306,9,247,4],[307,6,247,4,"value"],[307,11,247,4],[307,13,250,4],[307,22,250,4,"connectionState"],[307,37,250,19,"connectionState"],[307,38,250,19],[307,40,250,22],[308,8,251,8],[308,16,251,16],[308,20,251,20],[308,21,251,21,"conn"],[308,25,251,25],[308,29,251,29],[308,33,251,33],[308,34,251,34,"conn"],[308,38,251,38],[308,39,251,39,"readyState"],[308,49,251,49],[309,10,252,12],[309,15,252,17,"constants_1"],[309,26,252,28],[309,27,252,29,"SOCKET_STATES"],[309,40,252,42],[309,41,252,43,"connecting"],[309,51,252,53],[310,12,253,16],[310,19,253,23,"constants_1"],[310,30,253,34],[310,31,253,35,"CONNECTION_STATE"],[310,47,253,51],[310,48,253,52,"Connecting"],[310,58,253,62],[311,10,254,12],[311,15,254,17,"constants_1"],[311,26,254,28],[311,27,254,29,"SOCKET_STATES"],[311,40,254,42],[311,41,254,43,"open"],[311,45,254,47],[312,12,255,16],[312,19,255,23,"constants_1"],[312,30,255,34],[312,31,255,35,"CONNECTION_STATE"],[312,47,255,51],[312,48,255,52,"Open"],[312,52,255,56],[313,10,256,12],[313,15,256,17,"constants_1"],[313,26,256,28],[313,27,256,29,"SOCKET_STATES"],[313,40,256,42],[313,41,256,43,"closing"],[313,48,256,50],[314,12,257,16],[314,19,257,23,"constants_1"],[314,30,257,34],[314,31,257,35,"CONNECTION_STATE"],[314,47,257,51],[314,48,257,52,"Closing"],[314,55,257,59],[315,10,258,12],[316,12,259,16],[316,19,259,23,"constants_1"],[316,30,259,34],[316,31,259,35,"CONNECTION_STATE"],[316,47,259,51],[316,48,259,52,"Closed"],[316,54,259,58],[317,8,260,8],[318,6,261,4],[319,6,262,4],[320,0,263,0],[321,0,264,0],[322,4,262,4],[323,6,262,4,"key"],[323,9,262,4],[324,6,262,4,"value"],[324,11,262,4],[324,13,265,4],[324,22,265,4,"isConnected"],[324,33,265,15,"isConnected"],[324,34,265,15],[324,36,265,18],[325,8,266,8],[325,15,266,15],[325,19,266,19],[325,20,266,20,"connectionState"],[325,35,266,35],[325,36,266,36],[325,37,266,37],[325,42,266,42,"constants_1"],[325,53,266,53],[325,54,266,54,"CONNECTION_STATE"],[325,70,266,70],[325,71,266,71,"Open"],[325,75,266,75],[326,6,267,4],[327,4,267,5],[328,6,267,5,"key"],[328,9,267,5],[329,6,267,5,"value"],[329,11,267,5],[329,13,268,4],[329,22,268,4,"channel"],[329,29,268,11,"channel"],[329,30,268,12,"topic"],[329,35,268,17],[329,37,268,44],[330,8,268,44],[330,12,268,19,"params"],[330,18,268,25],[330,21,268,25,"arguments"],[330,30,268,25],[330,31,268,25,"length"],[330,37,268,25],[330,45,268,25,"arguments"],[330,54,268,25],[330,62,268,25,"undefined"],[330,71,268,25],[330,74,268,25,"arguments"],[330,83,268,25],[330,89,268,28],[331,10,268,30,"config"],[331,16,268,36],[331,18,268,38],[331,19,268,39],[332,8,268,41],[332,9,268,42],[333,8,269,8],[333,12,269,14,"realtimeTopic"],[333,25,269,27],[333,28,269,30],[333,40,269,42,"topic"],[333,45,269,47],[333,47,269,49],[334,8,270,8],[334,12,270,14,"exists"],[334,18,270,20],[334,21,270,23],[334,25,270,27],[334,26,270,28,"getChannels"],[334,37,270,39],[334,38,270,40],[334,39,270,41],[334,40,270,42,"find"],[334,44,270,46],[334,45,270,47],[334,55,270,48,"c"],[334,56,270,49],[335,10,270,49],[335,17,270,54,"c"],[335,18,270,55],[335,19,270,56,"topic"],[335,24,270,61],[335,29,270,66,"realtimeTopic"],[335,42,270,79],[336,8,270,79],[336,10,270,80],[337,8,271,8],[337,12,271,12],[337,13,271,13,"exists"],[337,19,271,19],[337,21,271,21],[338,10,272,12],[338,14,272,18,"chan"],[338,18,272,22],[338,21,272,25],[338,25,272,29,"RealtimeChannel_1"],[338,42,272,46],[338,43,272,47,"default"],[338,50,272,54],[338,51,272,55],[338,63,272,67,"topic"],[338,68,272,72],[338,70,272,74],[338,72,272,76,"params"],[338,78,272,82],[338,80,272,84],[338,84,272,88],[338,85,272,89],[339,10,273,12],[339,14,273,16],[339,15,273,17,"channels"],[339,23,273,25],[339,24,273,26,"push"],[339,28,273,30],[339,29,273,31,"chan"],[339,33,273,35],[339,34,273,36],[340,10,274,12],[340,17,274,19,"chan"],[340,21,274,23],[341,8,275,8],[341,9,275,9],[341,15,276,13],[342,10,277,12],[342,17,277,19,"exists"],[342,23,277,25],[343,8,278,8],[344,6,279,4],[345,6,280,4],[346,0,281,0],[347,0,282,0],[348,0,283,0],[349,0,284,0],[350,4,280,4],[351,6,280,4,"key"],[351,9,280,4],[352,6,280,4,"value"],[352,11,280,4],[352,13,285,4],[352,22,285,4,"push"],[352,26,285,8,"push"],[352,27,285,9,"data"],[352,31,285,13],[352,33,285,15],[353,8,285,15],[353,12,285,15,"_this2"],[353,18,285,15],[354,8,286,8],[354,12,286,16,"topic"],[354,17,286,21],[354,20,286,47,"data"],[354,24,286,51],[354,25,286,16,"topic"],[354,30,286,21],[355,10,286,23,"event"],[355,15,286,28],[355,18,286,47,"data"],[355,22,286,51],[355,23,286,23,"event"],[355,28,286,28],[356,10,286,30,"payload"],[356,17,286,37],[356,20,286,47,"data"],[356,24,286,51],[356,25,286,30,"payload"],[356,32,286,37],[357,10,286,39,"ref"],[357,13,286,42],[357,16,286,47,"data"],[357,20,286,51],[357,21,286,39,"ref"],[357,24,286,42],[358,8,287,8],[358,12,287,14,"callback"],[358,20,287,22],[358,23,287,25],[358,32,287,14,"callback"],[358,40,287,22,"callback"],[358,41,287,22],[358,43,287,31],[359,10,288,12,"_this2"],[359,16,288,16],[359,17,288,17,"encode"],[359,23,288,23],[359,24,288,24,"data"],[359,28,288,28],[359,30,288,30],[359,40,288,31,"result"],[359,46,288,37],[359,48,288,42],[360,12,289,16],[360,16,289,20,"_a"],[360,18,289,22],[361,12,290,16],[361,13,290,17,"_a"],[361,15,290,19],[361,18,290,22,"_this2"],[361,24,290,26],[361,25,290,27,"conn"],[361,29,290,31],[361,35,290,37],[361,39,290,41],[361,43,290,45,"_a"],[361,45,290,47],[361,50,290,52],[361,55,290,57],[361,56,290,58],[361,59,290,61],[361,64,290,66],[361,65,290,67],[361,68,290,70,"_a"],[361,70,290,72],[361,71,290,73,"send"],[361,75,290,77],[361,76,290,78,"result"],[361,82,290,84],[361,83,290,85],[362,10,291,12],[362,11,291,13],[362,12,291,14],[363,8,292,8],[363,9,292,9],[364,8,293,8],[364,12,293,12],[364,13,293,13,"log"],[364,16,293,16],[364,17,293,17],[364,23,293,23],[364,25,293,25],[364,28,293,28,"topic"],[364,33,293,33],[364,37,293,37,"event"],[364,42,293,42],[364,47,293,47,"ref"],[364,50,293,50],[364,53,293,53],[364,55,293,55,"payload"],[364,62,293,62],[364,63,293,63],[365,8,294,8],[365,12,294,12],[365,16,294,16],[365,17,294,17,"isConnected"],[365,28,294,28],[365,29,294,29],[365,30,294,30],[365,32,294,32],[366,10,295,12,"callback"],[366,18,295,20],[366,19,295,21],[366,20,295,22],[367,8,296,8],[367,9,296,9],[367,15,297,13],[368,10,298,12],[368,14,298,16],[368,15,298,17,"sendBuffer"],[368,25,298,27],[368,26,298,28,"push"],[368,30,298,32],[368,31,298,33,"callback"],[368,39,298,41],[368,40,298,42],[369,8,299,8],[370,6,300,4],[371,6,301,4],[372,0,302,0],[373,0,303,0],[374,0,304,0],[375,0,305,0],[376,0,306,0],[377,0,307,0],[378,0,308,0],[379,0,309,0],[380,4,301,4],[381,6,301,4,"key"],[381,9,301,4],[382,6,301,4,"value"],[382,11,301,4],[383,8,301,4],[383,12,301,4,"_setAuth"],[383,20,301,4],[383,23,301,4,"_asyncToGenerator"],[383,40,301,4],[383,41,310,4],[383,54,310,32],[384,10,310,32],[384,14,310,18,"token"],[384,19,310,23],[384,22,310,23,"arguments"],[384,31,310,23],[384,32,310,23,"length"],[384,38,310,23],[384,46,310,23,"arguments"],[384,55,310,23],[384,63,310,23,"undefined"],[384,72,310,23],[384,75,310,23,"arguments"],[384,84,310,23],[384,90,310,26],[384,94,310,30],[385,10,311,8],[385,14,311,12,"tokenToSend"],[385,25,311,23],[385,28,311,26,"token"],[385,33,311,31],[385,37,312,13],[385,41,312,17],[385,42,312,18,"accessToken"],[385,53,312,29],[385,64,312,40],[385,68,312,44],[385,69,312,45,"accessToken"],[385,80,312,56],[385,81,312,57],[385,82,312,58],[385,83,312,60],[385,87,313,12],[385,91,313,16],[385,92,313,17,"accessTokenValue"],[385,108,313,33],[386,10,314,8],[386,14,314,12],[386,18,314,16],[386,19,314,17,"accessTokenValue"],[386,35,314,33],[386,39,314,37,"tokenToSend"],[386,50,314,48],[386,52,314,50],[387,12,315,12],[387,16,315,16],[387,17,315,17,"accessTokenValue"],[387,33,315,33],[387,36,315,36,"tokenToSend"],[387,47,315,47],[388,12,316,12],[388,16,316,16],[388,17,316,17,"channels"],[388,25,316,25],[388,26,316,26,"forEach"],[388,33,316,33],[388,34,316,34],[388,44,316,35,"channel"],[388,51,316,42],[388,53,316,47],[389,14,317,16],[389,18,317,22,"payload"],[389,25,317,29],[389,28,317,32],[390,16,318,20,"access_token"],[390,28,318,32],[390,30,318,34,"tokenToSend"],[390,41,318,45],[391,16,319,20,"version"],[391,23,319,27],[391,25,319,29,"constants_1"],[391,36,319,40],[391,37,319,41,"DEFAULT_VERSION"],[392,14,320,16],[392,15,320,17],[393,14,321,16,"tokenToSend"],[393,25,321,27],[393,29,321,31,"channel"],[393,36,321,38],[393,37,321,39,"updateJoinPayload"],[393,54,321,56],[393,55,321,57,"payload"],[393,62,321,64],[393,63,321,65],[394,14,322,16],[394,18,322,20,"channel"],[394,25,322,27],[394,26,322,28,"joinedOnce"],[394,36,322,38],[394,40,322,42,"channel"],[394,47,322,49],[394,48,322,50,"_isJoined"],[394,57,322,59],[394,58,322,60],[394,59,322,61],[394,61,322,63],[395,16,323,20,"channel"],[395,23,323,27],[395,24,323,28,"_push"],[395,29,323,33],[395,30,323,34,"constants_1"],[395,41,323,45],[395,42,323,46,"CHANNEL_EVENTS"],[395,56,323,60],[395,57,323,61,"access_token"],[395,69,323,73],[395,71,323,75],[396,18,324,24,"access_token"],[396,30,324,36],[396,32,324,38,"tokenToSend"],[397,16,325,20],[397,17,325,21],[397,18,325,22],[398,14,326,16],[399,12,327,12],[399,13,327,13],[399,14,327,14],[400,10,328,8],[401,8,329,4],[401,9,329,5],[402,8,329,5],[402,17,310,10,"setAuth"],[402,24,310,17,"setAuth"],[402,25,310,17],[403,10,310,17],[403,17,310,17,"_setAuth"],[403,25,310,17],[403,26,310,17,"apply"],[403,31,310,17],[403,38,310,17,"arguments"],[403,47,310,17],[404,8,310,17],[405,8,310,17],[405,15,310,10,"setAuth"],[405,22,310,17],[406,6,310,17],[407,6,330,4],[408,0,331,0],[409,0,332,0],[410,6,330,4],[411,4,330,4],[412,6,330,4,"key"],[412,9,330,4],[413,6,330,4,"value"],[413,11,330,4],[414,8,330,4],[414,12,330,4,"_sendHeartbeat"],[414,26,330,4],[414,29,330,4,"_asyncToGenerator"],[414,46,330,4],[414,47,333,4],[414,60,333,26],[415,10,334,8],[415,14,334,12,"_a"],[415,16,334,14],[416,10,335,8],[416,14,335,12],[416,15,335,13],[416,19,335,17],[416,20,335,18,"isConnected"],[416,31,335,29],[416,32,335,30],[416,33,335,31],[416,35,335,33],[417,12,336,12],[417,16,336,16],[417,17,336,17,"heartbeatCallback"],[417,34,336,34],[417,35,336,35],[417,49,336,49],[417,50,336,50],[418,12,337,12],[419,10,338,8],[420,10,339,8],[420,14,339,12],[420,18,339,16],[420,19,339,17,"pendingHeartbeatRef"],[420,38,339,36],[420,40,339,38],[421,12,340,12],[421,16,340,16],[421,17,340,17,"pendingHeartbeatRef"],[421,36,340,36],[421,39,340,39],[421,43,340,43],[422,12,341,12],[422,16,341,16],[422,17,341,17,"log"],[422,20,341,20],[422,21,341,21],[422,32,341,32],[422,34,341,34],[422,92,341,92],[422,93,341,93],[423,12,342,12],[423,16,342,16],[423,17,342,17,"heartbeatCallback"],[423,34,342,34],[423,35,342,35],[423,44,342,44],[423,45,342,45],[424,12,343,12],[424,13,343,13,"_a"],[424,15,343,15],[424,18,343,18],[424,22,343,22],[424,23,343,23,"conn"],[424,27,343,27],[424,33,343,33],[424,37,343,37],[424,41,343,41,"_a"],[424,43,343,43],[424,48,343,48],[424,53,343,53],[424,54,343,54],[424,57,343,57],[424,62,343,62],[424,63,343,63],[424,66,343,66,"_a"],[424,68,343,68],[424,69,343,69,"close"],[424,74,343,74],[424,75,343,75,"constants_1"],[424,86,343,86],[424,87,343,87,"WS_CLOSE_NORMAL"],[424,102,343,102],[424,104,343,104],[424,122,343,122],[424,123,343,123],[425,12,344,12],[426,10,345,8],[427,10,346,8],[427,14,346,12],[427,15,346,13,"pendingHeartbeatRef"],[427,34,346,32],[427,37,346,35],[427,41,346,39],[427,42,346,40,"_makeRef"],[427,50,346,48],[427,51,346,49],[427,52,346,50],[428,10,347,8],[428,14,347,12],[428,15,347,13,"push"],[428,19,347,17],[428,20,347,18],[429,12,348,12,"topic"],[429,17,348,17],[429,19,348,19],[429,28,348,28],[430,12,349,12,"event"],[430,17,349,17],[430,19,349,19],[430,30,349,30],[431,12,350,12,"payload"],[431,19,350,19],[431,21,350,21],[431,22,350,22],[431,23,350,23],[432,12,351,12,"ref"],[432,15,351,15],[432,17,351,17],[432,21,351,21],[432,22,351,22,"pendingHeartbeatRef"],[433,10,352,8],[433,11,352,9],[433,12,352,10],[434,10,353,8],[434,14,353,12],[434,15,353,13,"heartbeatCallback"],[434,32,353,30],[434,33,353,31],[434,39,353,37],[434,40,353,38],[435,10,354,8],[435,16,354,14],[435,20,354,18],[435,21,354,19,"setAuth"],[435,28,354,26],[435,29,354,27],[435,30,354,28],[436,8,355,4],[436,9,355,5],[437,8,355,5],[437,17,333,10,"sendHeartbeat"],[437,30,333,23,"sendHeartbeat"],[437,31,333,23],[438,10,333,23],[438,17,333,23,"_sendHeartbeat"],[438,31,333,23],[438,32,333,23,"apply"],[438,37,333,23],[438,44,333,23,"arguments"],[438,53,333,23],[439,8,333,23],[440,8,333,23],[440,15,333,10,"sendHeartbeat"],[440,28,333,23],[441,6,333,23],[442,4,333,23],[443,6,333,23,"key"],[443,9,333,23],[444,6,333,23,"value"],[444,11,333,23],[444,13,356,4],[444,22,356,4,"onHeartbeat"],[444,33,356,15,"onHeartbeat"],[444,34,356,16,"callback"],[444,42,356,24],[444,44,356,26],[445,8,357,8],[445,12,357,12],[445,13,357,13,"heartbeatCallback"],[445,30,357,30],[445,33,357,33,"callback"],[445,41,357,41],[446,6,358,4],[447,6,359,4],[448,0,360,0],[449,0,361,0],[450,4,359,4],[451,6,359,4,"key"],[451,9,359,4],[452,6,359,4,"value"],[452,11,359,4],[452,13,362,4],[452,22,362,4,"flushSendBuffer"],[452,37,362,19,"flushSendBuffer"],[452,38,362,19],[452,40,362,22],[453,8,363,8],[453,12,363,12],[453,16,363,16],[453,17,363,17,"isConnected"],[453,28,363,28],[453,29,363,29],[453,30,363,30],[453,34,363,34],[453,38,363,38],[453,39,363,39,"sendBuffer"],[453,49,363,49],[453,50,363,50,"length"],[453,56,363,56],[453,59,363,59],[453,60,363,60],[453,62,363,62],[454,10,364,12],[454,14,364,16],[454,15,364,17,"sendBuffer"],[454,25,364,27],[454,26,364,28,"forEach"],[454,33,364,35],[454,34,364,36],[454,44,364,37,"callback"],[454,52,364,45],[455,12,364,45],[455,19,364,50,"callback"],[455,27,364,58],[455,28,364,59],[455,29,364,60],[456,10,364,60],[456,12,364,61],[457,10,365,12],[457,14,365,16],[457,15,365,17,"sendBuffer"],[457,25,365,27],[457,28,365,30],[457,30,365,32],[458,8,366,8],[459,6,367,4],[460,6,368,4],[461,0,369,0],[462,0,370,0],[463,0,371,0],[464,0,372,0],[465,4,368,4],[466,6,368,4,"key"],[466,9,368,4],[467,6,368,4,"value"],[467,11,368,4],[467,13,373,4],[467,22,373,4,"_makeRef"],[467,30,373,12,"_makeRef"],[467,31,373,12],[467,33,373,15],[468,8,374,8],[468,12,374,12,"newRef"],[468,18,374,18],[468,21,374,21],[468,25,374,25],[468,26,374,26,"ref"],[468,29,374,29],[468,32,374,32],[468,33,374,33],[469,8,375,8],[469,12,375,12,"newRef"],[469,18,375,18],[469,23,375,23],[469,27,375,27],[469,28,375,28,"ref"],[469,31,375,31],[469,33,375,33],[470,10,376,12],[470,14,376,16],[470,15,376,17,"ref"],[470,18,376,20],[470,21,376,23],[470,22,376,24],[471,8,377,8],[471,9,377,9],[471,15,378,13],[472,10,379,12],[472,14,379,16],[472,15,379,17,"ref"],[472,18,379,20],[472,21,379,23,"newRef"],[472,27,379,29],[473,8,380,8],[474,8,381,8],[474,15,381,15],[474,19,381,19],[474,20,381,20,"ref"],[474,23,381,23],[474,24,381,24,"toString"],[474,32,381,32],[474,33,381,33],[474,34,381,34],[475,6,382,4],[476,6,383,4],[477,0,384,0],[478,0,385,0],[479,0,386,0],[480,0,387,0],[481,4,383,4],[482,6,383,4,"key"],[482,9,383,4],[483,6,383,4,"value"],[483,11,383,4],[483,13,388,4],[483,22,388,4,"_leaveOpenTopic"],[483,37,388,19,"_leaveOpenTopic"],[483,38,388,20,"topic"],[483,43,388,25],[483,45,388,27],[484,8,389,8],[484,12,389,12,"dupChannel"],[484,22,389,22],[484,25,389,25],[484,29,389,29],[484,30,389,30,"channels"],[484,38,389,38],[484,39,389,39,"find"],[484,43,389,43],[484,44,389,44],[484,54,389,45,"c"],[484,55,389,46],[485,10,389,46],[485,17,389,51,"c"],[485,18,389,52],[485,19,389,53,"topic"],[485,24,389,58],[485,29,389,63,"topic"],[485,34,389,68],[485,39,389,73,"c"],[485,40,389,74],[485,41,389,75,"_isJoined"],[485,50,389,84],[485,51,389,85],[485,52,389,86],[485,56,389,90,"c"],[485,57,389,91],[485,58,389,92,"_isJoining"],[485,68,389,102],[485,69,389,103],[485,70,389,104],[485,71,389,105],[486,8,389,105],[486,10,389,106],[487,8,390,8],[487,12,390,12,"dupChannel"],[487,22,390,22],[487,24,390,24],[488,10,391,12],[488,14,391,16],[488,15,391,17,"log"],[488,18,391,20],[488,19,391,21],[488,30,391,32],[488,32,391,34],[488,60,391,62,"topic"],[488,65,391,67],[488,68,391,70],[488,69,391,71],[489,10,392,12,"dupChannel"],[489,20,392,22],[489,21,392,23,"unsubscribe"],[489,32,392,34],[489,33,392,35],[489,34,392,36],[490,8,393,8],[491,6,394,4],[492,6,395,4],[493,0,396,0],[494,0,397,0],[495,0,398,0],[496,0,399,0],[497,0,400,0],[498,0,401,0],[499,4,395,4],[500,6,395,4,"key"],[500,9,395,4],[501,6,395,4,"value"],[501,11,395,4],[501,13,402,4],[501,22,402,4,"_remove"],[501,29,402,11,"_remove"],[501,30,402,12,"channel"],[501,37,402,19],[501,39,402,21],[502,8,403,8],[502,12,403,12],[502,13,403,13,"channels"],[502,21,403,21],[502,24,403,24],[502,28,403,28],[502,29,403,29,"channels"],[502,37,403,37],[502,38,403,38,"filter"],[502,44,403,44],[502,45,403,45],[502,55,403,46,"c"],[502,56,403,47],[503,10,403,47],[503,17,403,52,"c"],[503,18,403,53],[503,19,403,54,"topic"],[503,24,403,59],[503,29,403,64,"channel"],[503,36,403,71],[503,37,403,72,"topic"],[503,42,403,77],[504,8,403,77],[504,10,403,78],[505,6,404,4],[506,6,405,4],[507,0,406,0],[508,0,407,0],[509,0,408,0],[510,0,409,0],[511,4,405,4],[512,6,405,4,"key"],[512,9,405,4],[513,6,405,4,"value"],[513,11,405,4],[513,13,410,4],[513,22,410,4,"setupConnection"],[513,37,410,19,"setupConnection"],[513,38,410,19],[513,40,410,22],[514,8,410,22],[514,12,410,22,"_this3"],[514,18,410,22],[515,8,411,8],[515,12,411,12],[515,16,411,16],[515,17,411,17,"conn"],[515,21,411,21],[515,23,411,23],[516,10,412,12],[516,14,412,16],[516,15,412,17,"conn"],[516,19,412,21],[516,20,412,22,"binaryType"],[516,30,412,32],[516,33,412,35],[516,46,412,48],[517,10,413,12],[517,14,413,16],[517,15,413,17,"conn"],[517,19,413,21],[517,20,413,22,"onopen"],[517,26,413,28],[517,29,413,31],[518,12,413,31],[518,19,413,37,"_this3"],[518,25,413,41],[518,26,413,42,"_onConnOpen"],[518,37,413,53],[518,38,413,54],[518,39,413,55],[519,10,413,55],[520,10,414,12],[520,14,414,16],[520,15,414,17,"conn"],[520,19,414,21],[520,20,414,22,"onerror"],[520,27,414,29],[520,30,414,32],[520,40,414,33,"error"],[520,45,414,38],[521,12,414,38],[521,19,414,43,"_this3"],[521,25,414,47],[521,26,414,48,"_onConnError"],[521,38,414,60],[521,39,414,61,"error"],[521,44,414,66],[521,45,414,67],[522,10,414,67],[523,10,415,12],[523,14,415,16],[523,15,415,17,"conn"],[523,19,415,21],[523,20,415,22,"onmessage"],[523,29,415,31],[523,32,415,34],[523,42,415,35,"event"],[523,47,415,40],[524,12,415,40],[524,19,415,45,"_this3"],[524,25,415,49],[524,26,415,50,"_onConnMessage"],[524,40,415,64],[524,41,415,65,"event"],[524,46,415,70],[524,47,415,71],[525,10,415,71],[526,10,416,12],[526,14,416,16],[526,15,416,17,"conn"],[526,19,416,21],[526,20,416,22,"onclose"],[526,27,416,29],[526,30,416,32],[526,40,416,33,"event"],[526,45,416,38],[527,12,416,38],[527,19,416,43,"_this3"],[527,25,416,47],[527,26,416,48,"_onConnClose"],[527,38,416,60],[527,39,416,61,"event"],[527,44,416,66],[527,45,416,67],[528,10,416,67],[529,8,417,8],[530,6,418,4],[531,6,419,4],[532,4,419,4],[533,6,419,4,"key"],[533,9,419,4],[534,6,419,4,"value"],[534,11,419,4],[534,13,420,4],[534,22,420,4,"_onConnMessage"],[534,36,420,18,"_onConnMessage"],[534,37,420,19,"rawMessage"],[534,47,420,29],[534,49,420,31],[535,8,420,31],[535,12,420,31,"_this4"],[535,18,420,31],[536,8,421,8],[536,12,421,12],[536,13,421,13,"decode"],[536,19,421,19],[536,20,421,20,"rawMessage"],[536,30,421,30],[536,31,421,31,"data"],[536,35,421,35],[536,37,421,37],[536,47,421,38,"msg"],[536,50,421,41],[536,52,421,46],[537,10,422,12],[537,14,422,18,"topic"],[537,19,422,23],[537,22,422,49,"msg"],[537,25,422,52],[537,26,422,18,"topic"],[537,31,422,23],[538,12,422,25,"event"],[538,17,422,30],[538,20,422,49,"msg"],[538,23,422,52],[538,24,422,25,"event"],[538,29,422,30],[539,12,422,32,"payload"],[539,19,422,39],[539,22,422,49,"msg"],[539,25,422,52],[539,26,422,32,"payload"],[539,33,422,39],[540,12,422,41,"ref"],[540,15,422,44],[540,18,422,49,"msg"],[540,21,422,52],[540,22,422,41,"ref"],[540,25,422,44],[541,10,423,12],[541,14,423,16,"topic"],[541,19,423,21],[541,24,423,26],[541,33,423,35],[541,37,423,39,"event"],[541,42,423,44],[541,47,423,49],[541,58,423,60],[541,60,423,62],[542,12,424,16,"_this4"],[542,18,424,20],[542,19,424,21,"heartbeatCallback"],[542,36,424,38],[542,37,424,39,"msg"],[542,40,424,42],[542,41,424,43,"payload"],[542,48,424,50],[542,49,424,51,"status"],[542,55,424,57],[542,59,424,61],[542,63,424,65],[542,66,424,68],[542,70,424,72],[542,73,424,75],[542,80,424,82],[542,81,424,83],[543,10,425,12],[544,10,426,12],[544,14,426,16,"ref"],[544,17,426,19],[544,21,426,23,"ref"],[544,24,426,26],[544,29,426,31,"_this4"],[544,35,426,35],[544,36,426,36,"pendingHeartbeatRef"],[544,55,426,55],[544,57,426,57],[545,12,427,16,"_this4"],[545,18,427,20],[545,19,427,21,"pendingHeartbeatRef"],[545,38,427,40],[545,41,427,43],[545,45,427,47],[546,10,428,12],[547,10,429,12,"_this4"],[547,16,429,16],[547,17,429,17,"log"],[547,20,429,20],[547,21,429,21],[547,30,429,30],[547,32,429,32],[547,35,429,35,"payload"],[547,42,429,42],[547,43,429,43,"status"],[547,49,429,49],[547,53,429,53],[547,55,429,55],[547,59,429,59,"topic"],[547,64,429,64],[547,68,429,68,"event"],[547,73,429,73],[547,77,429,78,"ref"],[547,80,429,81],[547,84,429,85],[547,87,429,88],[547,90,429,91,"ref"],[547,93,429,94],[547,96,429,97],[547,99,429,100],[547,103,429,105],[547,105,429,107],[547,107,429,109],[547,109,429,111,"payload"],[547,116,429,118],[547,117,429,119],[548,10,430,12,"Array"],[548,15,430,17],[548,16,430,18,"from"],[548,20,430,22],[548,21,430,23,"_this4"],[548,27,430,27],[548,28,430,28,"channels"],[548,36,430,36],[548,37,430,37],[548,38,431,17,"filter"],[548,44,431,23],[548,45,431,24],[548,55,431,25,"channel"],[548,62,431,32],[549,12,431,32],[549,19,431,37,"channel"],[549,26,431,44],[549,27,431,45,"_isMember"],[549,36,431,54],[549,37,431,55,"topic"],[549,42,431,60],[549,43,431,61],[550,10,431,61],[550,12,431,62],[550,13,432,17,"forEach"],[550,20,432,24],[550,21,432,25],[550,31,432,26,"channel"],[550,38,432,33],[551,12,432,33],[551,19,432,38,"channel"],[551,26,432,45],[551,27,432,46,"_trigger"],[551,35,432,54],[551,36,432,55,"event"],[551,41,432,60],[551,43,432,62,"payload"],[551,50,432,69],[551,52,432,71,"ref"],[551,55,432,74],[551,56,432,75],[552,10,432,75],[552,12,432,76],[553,10,433,12,"_this4"],[553,16,433,16],[553,17,433,17,"stateChangeCallbacks"],[553,37,433,37],[553,38,433,38,"message"],[553,45,433,45],[553,46,433,46,"forEach"],[553,53,433,53],[553,54,433,54],[553,64,433,55,"callback"],[553,72,433,63],[554,12,433,63],[554,19,433,68,"callback"],[554,27,433,76],[554,28,433,77,"msg"],[554,31,433,80],[554,32,433,81],[555,10,433,81],[555,12,433,82],[556,8,434,8],[556,9,434,9],[556,10,434,10],[557,6,435,4],[558,6,436,4],[559,4,436,4],[560,6,436,4,"key"],[560,9,436,4],[561,6,436,4,"value"],[561,11,436,4],[561,13,437,4],[561,22,437,4,"_onConnOpen"],[561,33,437,15,"_onConnOpen"],[561,34,437,15],[561,36,437,18],[562,8,438,8],[562,12,438,12],[562,13,438,13,"log"],[562,16,438,16],[562,17,438,17],[562,28,438,28],[562,30,438,30],[562,46,438,46],[562,50,438,50],[562,51,438,51,"endpointURL"],[562,62,438,62],[562,63,438,63],[562,64,438,64],[562,66,438,66],[562,67,438,67],[563,8,439,8],[563,12,439,12],[563,13,439,13,"flushSendBuffer"],[563,28,439,28],[563,29,439,29],[563,30,439,30],[564,8,440,8],[564,12,440,12],[564,13,440,13,"reconnectTimer"],[564,27,440,27],[564,28,440,28,"reset"],[564,33,440,33],[564,34,440,34],[564,35,440,35],[565,8,441,8],[565,12,441,12],[565,13,441,13],[565,17,441,17],[565,18,441,18,"worker"],[565,24,441,24],[565,26,441,26],[566,10,442,12],[566,14,442,16],[566,15,442,17,"_startHeartbeat"],[566,30,442,32],[566,31,442,33],[566,32,442,34],[567,8,443,8],[567,9,443,9],[567,15,444,13],[568,10,445,12],[568,14,445,16],[568,15,445,17],[568,19,445,21],[568,20,445,22,"workerRef"],[568,29,445,31],[568,31,445,33],[569,12,446,16],[569,16,446,20],[569,17,446,21,"_startWorkerHeartbeat"],[569,38,446,42],[569,39,446,43],[569,40,446,44],[570,10,447,12],[571,8,448,8],[572,8,449,8],[572,12,449,12],[572,13,449,13,"stateChangeCallbacks"],[572,33,449,33],[572,34,449,34,"open"],[572,38,449,38],[572,39,449,39,"forEach"],[572,46,449,46],[572,47,449,47],[572,57,449,48,"callback"],[572,65,449,56],[573,10,449,56],[573,17,449,61,"callback"],[573,25,449,69],[573,26,449,70],[573,27,449,71],[574,8,449,71],[574,10,449,72],[575,6,450,4],[576,6,451,4],[577,4,451,4],[578,6,451,4,"key"],[578,9,451,4],[579,6,451,4,"value"],[579,11,451,4],[579,13,452,4],[579,22,452,4,"_startHeartbeat"],[579,37,452,19,"_startHeartbeat"],[579,38,452,19],[579,40,452,22],[580,8,452,22],[580,12,452,22,"_this5"],[580,18,452,22],[581,8,453,8],[581,12,453,12],[581,13,453,13,"heartbeatTimer"],[581,27,453,27],[581,31,453,31,"clearInterval"],[581,44,453,44],[581,45,453,45],[581,49,453,49],[581,50,453,50,"heartbeatTimer"],[581,64,453,64],[581,65,453,65],[582,8,454,8],[582,12,454,12],[582,13,454,13,"heartbeatTimer"],[582,27,454,27],[582,30,454,30,"setInterval"],[582,41,454,41],[582,42,454,42],[583,10,454,42],[583,17,454,48,"_this5"],[583,23,454,52],[583,24,454,53,"sendHeartbeat"],[583,37,454,66],[583,38,454,67],[583,39,454,68],[584,8,454,68],[584,11,454,70],[584,15,454,74],[584,16,454,75,"heartbeatIntervalMs"],[584,35,454,94],[584,36,454,95],[585,6,455,4],[586,6,456,4],[587,4,456,4],[588,6,456,4,"key"],[588,9,456,4],[589,6,456,4,"value"],[589,11,456,4],[589,13,457,4],[589,22,457,4,"_startWorkerHeartbeat"],[589,43,457,25,"_startWorkerHeartbeat"],[589,44,457,25],[589,46,457,28],[590,8,457,28],[590,12,457,28,"_this6"],[590,18,457,28],[591,8,458,8],[591,12,458,12],[591,16,458,16],[591,17,458,17,"workerUrl"],[591,26,458,26],[591,28,458,28],[592,10,459,12],[592,14,459,16],[592,15,459,17,"log"],[592,18,459,20],[592,19,459,21],[592,27,459,29],[592,29,459,31],[592,57,459,59],[592,61,459,63],[592,62,459,64,"workerUrl"],[592,71,459,73],[592,73,459,75],[592,74,459,76],[593,8,460,8],[593,9,460,9],[593,15,461,13],[594,10,462,12],[594,14,462,16],[594,15,462,17,"log"],[594,18,462,20],[594,19,462,21],[594,27,462,29],[594,29,462,31],[594,54,462,56],[594,55,462,57],[595,8,463,8],[596,8,464,8],[596,12,464,14,"objectUrl"],[596,21,464,23],[596,24,464,26],[596,28,464,30],[596,29,464,31,"_workerObjectUrl"],[596,45,464,47],[596,46,464,48],[596,50,464,52],[596,51,464,53,"workerUrl"],[596,60,464,62],[596,61,464,63],[597,8,465,8],[597,12,465,12],[597,13,465,13,"workerRef"],[597,22,465,22],[597,25,465,25],[597,29,465,29,"Worker"],[597,35,465,35],[597,36,465,36,"objectUrl"],[597,45,465,45],[597,46,465,46],[598,8,466,8],[598,12,466,12],[598,13,466,13,"workerRef"],[598,22,466,22],[598,23,466,23,"onerror"],[598,30,466,30],[598,33,466,33],[598,43,466,34,"error"],[598,48,466,39],[598,50,466,44],[599,10,467,12,"_this6"],[599,16,467,16],[599,17,467,17,"log"],[599,20,467,20],[599,21,467,21],[599,29,467,29],[599,31,467,31],[599,45,467,45],[599,47,467,47,"error"],[599,52,467,52],[599,53,467,53,"message"],[599,60,467,60],[599,61,467,61],[600,10,468,12,"_this6"],[600,16,468,16],[600,17,468,17,"workerRef"],[600,26,468,26],[600,27,468,27,"terminate"],[600,36,468,36],[600,37,468,37],[600,38,468,38],[601,8,469,8],[601,9,469,9],[602,8,470,8],[602,12,470,12],[602,13,470,13,"workerRef"],[602,22,470,22],[602,23,470,23,"onmessage"],[602,32,470,32],[602,35,470,35],[602,45,470,36,"event"],[602,50,470,41],[602,52,470,46],[603,10,471,12],[603,14,471,16,"event"],[603,19,471,21],[603,20,471,22,"data"],[603,24,471,26],[603,25,471,27,"event"],[603,30,471,32],[603,35,471,37],[603,46,471,48],[603,48,471,50],[604,12,472,16,"_this6"],[604,18,472,20],[604,19,472,21,"sendHeartbeat"],[604,32,472,34],[604,33,472,35],[604,34,472,36],[605,10,473,12],[606,8,474,8],[606,9,474,9],[607,8,475,8],[607,12,475,12],[607,13,475,13,"workerRef"],[607,22,475,22],[607,23,475,23,"postMessage"],[607,34,475,34],[607,35,475,35],[608,10,476,12,"event"],[608,15,476,17],[608,17,476,19],[608,24,476,26],[609,10,477,12,"interval"],[609,18,477,20],[609,20,477,22],[609,24,477,26],[609,25,477,27,"heartbeatIntervalMs"],[610,8,478,8],[610,9,478,9],[610,10,478,10],[611,6,479,4],[612,6,480,4],[613,4,480,4],[614,6,480,4,"key"],[614,9,480,4],[615,6,480,4,"value"],[615,11,480,4],[615,13,481,4],[615,22,481,4,"_onConnClose"],[615,34,481,16,"_onConnClose"],[615,35,481,17,"event"],[615,40,481,22],[615,42,481,24],[616,8,482,8],[616,12,482,12],[616,13,482,13,"log"],[616,16,482,16],[616,17,482,17],[616,28,482,28],[616,30,482,30],[616,37,482,37],[616,39,482,39,"event"],[616,44,482,44],[616,45,482,45],[617,8,483,8],[617,12,483,12],[617,13,483,13,"_triggerChanError"],[617,30,483,30],[617,31,483,31],[617,32,483,32],[618,8,484,8],[618,12,484,12],[618,13,484,13,"heartbeatTimer"],[618,27,484,27],[618,31,484,31,"clearInterval"],[618,44,484,44],[618,45,484,45],[618,49,484,49],[618,50,484,50,"heartbeatTimer"],[618,64,484,64],[618,65,484,65],[619,8,485,8],[619,12,485,12],[619,13,485,13,"reconnectTimer"],[619,27,485,27],[619,28,485,28,"scheduleTimeout"],[619,43,485,43],[619,44,485,44],[619,45,485,45],[620,8,486,8],[620,12,486,12],[620,13,486,13,"stateChangeCallbacks"],[620,33,486,33],[620,34,486,34,"close"],[620,39,486,39],[620,40,486,40,"forEach"],[620,47,486,47],[620,48,486,48],[620,58,486,49,"callback"],[620,66,486,57],[621,10,486,57],[621,17,486,62,"callback"],[621,25,486,70],[621,26,486,71,"event"],[621,31,486,76],[621,32,486,77],[622,8,486,77],[622,10,486,78],[623,6,487,4],[624,6,488,4],[625,4,488,4],[626,6,488,4,"key"],[626,9,488,4],[627,6,488,4,"value"],[627,11,488,4],[627,13,489,4],[627,22,489,4,"_onConnError"],[627,34,489,16,"_onConnError"],[627,35,489,17,"error"],[627,40,489,22],[627,42,489,24],[628,8,490,8],[628,12,490,12],[628,13,490,13,"log"],[628,16,490,16],[628,17,490,17],[628,28,490,28],[628,30,490,30],[628,33,490,33,"error"],[628,38,490,38],[628,40,490,40],[628,41,490,41],[629,8,491,8],[629,12,491,12],[629,13,491,13,"_triggerChanError"],[629,30,491,30],[629,31,491,31],[629,32,491,32],[630,8,492,8],[630,12,492,12],[630,13,492,13,"stateChangeCallbacks"],[630,33,492,33],[630,34,492,34,"error"],[630,39,492,39],[630,40,492,40,"forEach"],[630,47,492,47],[630,48,492,48],[630,58,492,49,"callback"],[630,66,492,57],[631,10,492,57],[631,17,492,62,"callback"],[631,25,492,70],[631,26,492,71,"error"],[631,31,492,76],[631,32,492,77],[632,8,492,77],[632,10,492,78],[633,6,493,4],[634,6,494,4],[635,4,494,4],[636,6,494,4,"key"],[636,9,494,4],[637,6,494,4,"value"],[637,11,494,4],[637,13,495,4],[637,22,495,4,"_triggerChanError"],[637,39,495,21,"_triggerChanError"],[637,40,495,21],[637,42,495,24],[638,8,496,8],[638,12,496,12],[638,13,496,13,"channels"],[638,21,496,21],[638,22,496,22,"forEach"],[638,29,496,29],[638,30,496,30],[638,40,496,31,"channel"],[638,47,496,38],[639,10,496,38],[639,17,496,43,"channel"],[639,24,496,50],[639,25,496,51,"_trigger"],[639,33,496,59],[639,34,496,60,"constants_1"],[639,45,496,71],[639,46,496,72,"CHANNEL_EVENTS"],[639,60,496,86],[639,61,496,87,"error"],[639,66,496,92],[639,67,496,93],[640,8,496,93],[640,10,496,94],[641,6,497,4],[642,6,498,4],[643,4,498,4],[644,6,498,4,"key"],[644,9,498,4],[645,6,498,4,"value"],[645,11,498,4],[645,13,499,4],[645,22,499,4,"_appendParams"],[645,35,499,17,"_appendParams"],[645,36,499,18,"url"],[645,39,499,21],[645,41,499,23,"params"],[645,47,499,29],[645,49,499,31],[646,8,500,8],[646,12,500,12,"Object"],[646,18,500,18],[646,19,500,19,"keys"],[646,23,500,23],[646,24,500,24,"params"],[646,30,500,30],[646,31,500,31],[646,32,500,32,"length"],[646,38,500,38],[646,43,500,43],[646,44,500,44],[646,46,500,46],[647,10,501,12],[647,17,501,19,"url"],[647,20,501,22],[648,8,502,8],[649,8,503,8],[649,12,503,14,"prefix"],[649,18,503,20],[649,21,503,23,"url"],[649,24,503,26],[649,25,503,27,"match"],[649,30,503,32],[649,31,503,33],[649,35,503,37],[649,36,503,38],[649,39,503,41],[649,42,503,44],[649,45,503,47],[649,48,503,50],[650,8,504,8],[650,12,504,14,"query"],[650,17,504,19],[650,20,504,22],[650,24,504,26,"URLSearchParams"],[650,39,504,41],[650,40,504,42,"params"],[650,46,504,48],[650,47,504,49],[651,8,505,8],[651,15,505,15],[651,18,505,18,"url"],[651,21,505,21],[651,24,505,24,"prefix"],[651,30,505,30],[651,33,505,33,"query"],[651,38,505,38],[651,40,505,40],[652,6,506,4],[653,4,506,5],[654,6,506,5,"key"],[654,9,506,5],[655,6,506,5,"value"],[655,11,506,5],[655,13,507,4],[655,22,507,4,"_workerObjectUrl"],[655,38,507,20,"_workerObjectUrl"],[655,39,507,21,"url"],[655,42,507,24],[655,44,507,26],[656,8,508,8],[656,12,508,12,"result_url"],[656,22,508,22],[657,8,509,8],[657,12,509,12,"url"],[657,15,509,15],[657,17,509,17],[658,10,510,12,"result_url"],[658,20,510,22],[658,23,510,25,"url"],[658,26,510,28],[659,8,511,8],[659,9,511,9],[659,15,512,13],[660,10,513,12],[660,14,513,18,"blob"],[660,18,513,22],[660,21,513,25],[660,25,513,29,"Blob"],[660,29,513,33],[660,30,513,34],[660,31,513,35,"WORKER_SCRIPT"],[660,44,513,48],[660,45,513,49],[660,47,513,51],[661,12,513,53,"type"],[661,16,513,57],[661,18,513,59],[662,10,513,84],[662,11,513,85],[662,12,513,86],[663,10,514,12,"result_url"],[663,20,514,22],[663,23,514,25,"URL"],[663,26,514,28],[663,27,514,29,"createObjectURL"],[663,42,514,44],[663,43,514,45,"blob"],[663,47,514,49],[663,48,514,50],[664,8,515,8],[665,8,516,8],[665,15,516,15,"result_url"],[665,25,516,25],[666,6,517,4],[667,4,517,5],[668,2,517,5],[669,2,519,0,"exports"],[669,9,519,7],[669,10,519,8,"default"],[669,17,519,15],[669,20,519,18,"RealtimeClient"],[669,34,519,32],[670,0,519,33],[670,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","noop","RealtimeClient","constructor","_resolveFetch","_fetch","Promise.resolve.then$argument_0","Promise.resolve.then.then$argument_0","timer_1._default$argument_0","connect","endpointURL","disconnect","conn.onclose","channels.forEach$argument_0","getChannels","removeChannel","removeAllChannels","channels.map$argument_0","log","connectionState","isConnected","channel","getChannels.find$argument_0","push","callback","encode$argument_1","setAuth","sendHeartbeat","onHeartbeat","flushSendBuffer","sendBuffer.forEach$argument_0","_makeRef","_leaveOpenTopic","channels.find$argument_0","_remove","channels.filter$argument_0","setupConnection","conn.onopen","conn.onerror","conn.onmessage","_onConnMessage","decode$argument_1","Array.from.filter$argument_0","Array.from.filter.forEach$argument_0","stateChangeCallbacks.message.forEach$argument_0","_onConnOpen","stateChangeCallbacks.open.forEach$argument_0","_startHeartbeat","setInterval$argument_0","_startWorkerHeartbeat","workerRef.onerror","workerRef.onmessage","_onConnClose","stateChangeCallbacks.close.forEach$argument_0","_onConnError","stateChangeCallbacks.error.forEach$argument_0","_triggerChanError","_appendParams","_workerObjectUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;aIQ,SJ;AKO;ICmB;6BCgC;yBCM,+DC,6BD,OE,sCF,CD;mBNK,4BM;SDC;cL4B;aKE;cLG;aKE;kDKI;SLG;KDU;IOI;KPY;IQK;KRE;ISO;gCCE,eD;kCEW,+BF;KTE;IYI;KZE;IaK;KbM;IcI;6DCC,kCD;KdI;IgBM;KhBE;IiBI;KjBW;IkBI;KlBE;ImBC;+CCE,gCD;KnBS;IqBM;yBCE;8BCC;aDG;SDC;KrBQ;IwBU;kCbM;aaW;KxBE;IyBI;KzBsB;I0BC;K1BE;I2BI;oCCE,wBD;K3BG;I6BM;K7BS;I8BM;4CCC,6DD;K9BK;IgCQ;6CCC,gCD;KhCC;IkCM;+BCG,wBD;gCEC,mCF;kCGC,qCH;gCxBC,mCwB;KlCE;IsCE;qCCC;wBCU,qCD;yBEC,kDF;sDGC,2BH;SDC;KtCC;I2CE;+CCY,wBD;K3CC;I6CE;0CCE,0BD;K7CC;I+CE;iCCS;SDG;mCEC;SFI;K/CK;IkDE;gDCK,6BD;KlDC;IoDE;gDCG,6BD;KpDC;IsDE;8B3CC,+D2C;KtDC;IuDE;KvDO;IwDC;KxDU;CLC"}},"type":"js/module"}]}