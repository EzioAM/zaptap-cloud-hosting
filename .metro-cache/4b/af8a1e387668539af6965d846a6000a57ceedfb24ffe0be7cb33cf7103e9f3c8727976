{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"css-what","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":57,"index":57}}],"key":"FEuNpzzBFcweP99ydYcGgGm7g9g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = sortByProcedure;\n  exports.isTraversal = isTraversal;\n  var _toConsumableArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _cssWhat = require(_dependencyMap[2], \"css-what\");\n  var procedure = new Map([[_cssWhat.SelectorType.Universal, 50], [_cssWhat.SelectorType.Tag, 30], [_cssWhat.SelectorType.Attribute, 1], [_cssWhat.SelectorType.Pseudo, 0]]);\n  function isTraversal(token) {\n    return !procedure.has(token.type);\n  }\n  var attributes = new Map([[_cssWhat.AttributeAction.Exists, 10], [_cssWhat.AttributeAction.Equals, 8], [_cssWhat.AttributeAction.Not, 7], [_cssWhat.AttributeAction.Start, 6], [_cssWhat.AttributeAction.End, 6], [_cssWhat.AttributeAction.Any, 5]]);\n  /**\n   * Sort the parts of the passed selector,\n   * as there is potential for optimization\n   * (some types of selectors are faster than others)\n   *\n   * @param arr Selector to sort\n   */\n  function sortByProcedure(arr) {\n    var procs = arr.map(getProcedure);\n    for (var i = 1; i < arr.length; i++) {\n      var procNew = procs[i];\n      if (procNew < 0) continue;\n      for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n        var token = arr[j + 1];\n        arr[j + 1] = arr[j];\n        arr[j] = token;\n        procs[j + 1] = procs[j];\n        procs[j] = procNew;\n      }\n    }\n  }\n  function getProcedure(token) {\n    var _a, _b;\n    var proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;\n    if (token.type === _cssWhat.SelectorType.Attribute) {\n      proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;\n      if (token.action === _cssWhat.AttributeAction.Equals && token.name === \"id\") {\n        // Prefer ID selectors (eg. #ID)\n        proc = 9;\n      }\n      if (token.ignoreCase) {\n        /*\n         * IgnoreCase adds some overhead, prefer \"normal\" token\n         * this is a binary operation, to ensure it's still an int\n         */\n        proc >>= 1;\n      }\n    } else if (token.type === _cssWhat.SelectorType.Pseudo) {\n      if (!token.data) {\n        proc = 3;\n      } else if (token.name === \"has\" || token.name === \"contains\") {\n        proc = 0; // Expensive in any case\n      } else if (Array.isArray(token.data)) {\n        // Eg. :matches, :not\n        proc = Math.min.apply(Math, (0, _toConsumableArray2.default)(token.data.map(function (d) {\n          return Math.min.apply(Math, (0, _toConsumableArray2.default)(d.map(getProcedure)));\n        })));\n        // If we have traversals, try to avoid executing this selector\n        if (proc < 0) {\n          proc = 0;\n        }\n      } else {\n        proc = 2;\n      }\n    }\n    return proc;\n  }\n});","lineCount":72,"map":[[9,2,1,0],[9,6,1,0,"_cssWhat"],[9,14,1,0],[9,17,1,0,"require"],[9,24,1,0],[9,25,1,0,"_dependencyMap"],[9,39,1,0],[10,2,2,0],[10,6,2,6,"procedure"],[10,15,2,15],[10,18,2,18],[10,22,2,22,"Map"],[10,25,2,25],[10,26,2,26],[10,27,3,4],[10,28,3,5,"SelectorType"],[10,49,3,17],[10,50,3,18,"Universal"],[10,59,3,27],[10,61,3,29],[10,63,3,31],[10,64,3,32],[10,66,4,4],[10,67,4,5,"SelectorType"],[10,88,4,17],[10,89,4,18,"Tag"],[10,92,4,21],[10,94,4,23],[10,96,4,25],[10,97,4,26],[10,99,5,4],[10,100,5,5,"SelectorType"],[10,121,5,17],[10,122,5,18,"Attribute"],[10,131,5,27],[10,133,5,29],[10,134,5,30],[10,135,5,31],[10,137,6,4],[10,138,6,5,"SelectorType"],[10,159,6,17],[10,160,6,18,"Pseudo"],[10,166,6,24],[10,168,6,26],[10,169,6,27],[10,170,6,28],[10,171,7,1],[10,172,7,2],[11,2,8,7],[11,11,8,16,"isTraversal"],[11,22,8,27,"isTraversal"],[11,23,8,28,"token"],[11,28,8,33],[11,30,8,35],[12,4,9,4],[12,11,9,11],[12,12,9,12,"procedure"],[12,21,9,21],[12,22,9,22,"has"],[12,25,9,25],[12,26,9,26,"token"],[12,31,9,31],[12,32,9,32,"type"],[12,36,9,36],[12,37,9,37],[13,2,10,0],[14,2,11,0],[14,6,11,6,"attributes"],[14,16,11,16],[14,19,11,19],[14,23,11,23,"Map"],[14,26,11,26],[14,27,11,27],[14,28,12,4],[14,29,12,5,"AttributeAction"],[14,53,12,20],[14,54,12,21,"Exists"],[14,60,12,27],[14,62,12,29],[14,64,12,31],[14,65,12,32],[14,67,13,4],[14,68,13,5,"AttributeAction"],[14,92,13,20],[14,93,13,21,"Equals"],[14,99,13,27],[14,101,13,29],[14,102,13,30],[14,103,13,31],[14,105,14,4],[14,106,14,5,"AttributeAction"],[14,130,14,20],[14,131,14,21,"Not"],[14,134,14,24],[14,136,14,26],[14,137,14,27],[14,138,14,28],[14,140,15,4],[14,141,15,5,"AttributeAction"],[14,165,15,20],[14,166,15,21,"Start"],[14,171,15,26],[14,173,15,28],[14,174,15,29],[14,175,15,30],[14,177,16,4],[14,178,16,5,"AttributeAction"],[14,202,16,20],[14,203,16,21,"End"],[14,206,16,24],[14,208,16,26],[14,209,16,27],[14,210,16,28],[14,212,17,4],[14,213,17,5,"AttributeAction"],[14,237,17,20],[14,238,17,21,"Any"],[14,241,17,24],[14,243,17,26],[14,244,17,27],[14,245,17,28],[14,246,18,1],[14,247,18,2],[15,2,19,0],[16,0,20,0],[17,0,21,0],[18,0,22,0],[19,0,23,0],[20,0,24,0],[21,0,25,0],[22,2,26,15],[22,11,26,24,"sortByProcedure"],[22,26,26,39,"sortByProcedure"],[22,27,26,40,"arr"],[22,30,26,43],[22,32,26,45],[23,4,27,4],[23,8,27,10,"procs"],[23,13,27,15],[23,16,27,18,"arr"],[23,19,27,21],[23,20,27,22,"map"],[23,23,27,25],[23,24,27,26,"getProcedure"],[23,36,27,38],[23,37,27,39],[24,4,28,4],[24,9,28,9],[24,13,28,13,"i"],[24,14,28,14],[24,17,28,17],[24,18,28,18],[24,20,28,20,"i"],[24,21,28,21],[24,24,28,24,"arr"],[24,27,28,27],[24,28,28,28,"length"],[24,34,28,34],[24,36,28,36,"i"],[24,37,28,37],[24,39,28,39],[24,41,28,41],[25,6,29,8],[25,10,29,14,"procNew"],[25,17,29,21],[25,20,29,24,"procs"],[25,25,29,29],[25,26,29,30,"i"],[25,27,29,31],[25,28,29,32],[26,6,30,8],[26,10,30,12,"procNew"],[26,17,30,19],[26,20,30,22],[26,21,30,23],[26,23,31,12],[27,6,32,8],[27,11,32,13],[27,15,32,17,"j"],[27,16,32,18],[27,19,32,21,"i"],[27,20,32,22],[27,23,32,25],[27,24,32,26],[27,26,32,28,"j"],[27,27,32,29],[27,31,32,33],[27,32,32,34],[27,36,32,38,"procNew"],[27,43,32,45],[27,46,32,48,"procs"],[27,51,32,53],[27,52,32,54,"j"],[27,53,32,55],[27,54,32,56],[27,56,32,58,"j"],[27,57,32,59],[27,59,32,61],[27,61,32,63],[28,8,33,12],[28,12,33,18,"token"],[28,17,33,23],[28,20,33,26,"arr"],[28,23,33,29],[28,24,33,30,"j"],[28,25,33,31],[28,28,33,34],[28,29,33,35],[28,30,33,36],[29,8,34,12,"arr"],[29,11,34,15],[29,12,34,16,"j"],[29,13,34,17],[29,16,34,20],[29,17,34,21],[29,18,34,22],[29,21,34,25,"arr"],[29,24,34,28],[29,25,34,29,"j"],[29,26,34,30],[29,27,34,31],[30,8,35,12,"arr"],[30,11,35,15],[30,12,35,16,"j"],[30,13,35,17],[30,14,35,18],[30,17,35,21,"token"],[30,22,35,26],[31,8,36,12,"procs"],[31,13,36,17],[31,14,36,18,"j"],[31,15,36,19],[31,18,36,22],[31,19,36,23],[31,20,36,24],[31,23,36,27,"procs"],[31,28,36,32],[31,29,36,33,"j"],[31,30,36,34],[31,31,36,35],[32,8,37,12,"procs"],[32,13,37,17],[32,14,37,18,"j"],[32,15,37,19],[32,16,37,20],[32,19,37,23,"procNew"],[32,26,37,30],[33,6,38,8],[34,4,39,4],[35,2,40,0],[36,2,41,0],[36,11,41,9,"getProcedure"],[36,23,41,21,"getProcedure"],[36,24,41,22,"token"],[36,29,41,27],[36,31,41,29],[37,4,42,4],[37,8,42,8,"_a"],[37,10,42,10],[37,12,42,12,"_b"],[37,14,42,14],[38,4,43,4],[38,8,43,8,"proc"],[38,12,43,12],[38,15,43,15],[38,16,43,16,"_a"],[38,18,43,18],[38,21,43,21,"procedure"],[38,30,43,30],[38,31,43,31,"get"],[38,34,43,34],[38,35,43,35,"token"],[38,40,43,40],[38,41,43,41,"type"],[38,45,43,45],[38,46,43,46],[38,52,43,52],[38,56,43,56],[38,60,43,60,"_a"],[38,62,43,62],[38,67,43,67],[38,72,43,72],[38,73,43,73],[38,76,43,76,"_a"],[38,78,43,78],[38,81,43,81],[38,82,43,82],[38,83,43,83],[39,4,44,4],[39,8,44,8,"token"],[39,13,44,13],[39,14,44,14,"type"],[39,18,44,18],[39,23,44,23,"SelectorType"],[39,44,44,35],[39,45,44,36,"Attribute"],[39,54,44,45],[39,56,44,47],[40,6,45,8,"proc"],[40,10,45,12],[40,13,45,15],[40,14,45,16,"_b"],[40,16,45,18],[40,19,45,21,"attributes"],[40,29,45,31],[40,30,45,32,"get"],[40,33,45,35],[40,34,45,36,"token"],[40,39,45,41],[40,40,45,42,"action"],[40,46,45,48],[40,47,45,49],[40,53,45,55],[40,57,45,59],[40,61,45,63,"_b"],[40,63,45,65],[40,68,45,70],[40,73,45,75],[40,74,45,76],[40,77,45,79,"_b"],[40,79,45,81],[40,82,45,84],[40,83,45,85],[41,6,46,8],[41,10,46,12,"token"],[41,15,46,17],[41,16,46,18,"action"],[41,22,46,24],[41,27,46,29,"AttributeAction"],[41,51,46,44],[41,52,46,45,"Equals"],[41,58,46,51],[41,62,46,55,"token"],[41,67,46,60],[41,68,46,61,"name"],[41,72,46,65],[41,77,46,70],[41,81,46,74],[41,83,46,76],[42,8,47,12],[43,8,48,12,"proc"],[43,12,48,16],[43,15,48,19],[43,16,48,20],[44,6,49,8],[45,6,50,8],[45,10,50,12,"token"],[45,15,50,17],[45,16,50,18,"ignoreCase"],[45,26,50,28],[45,28,50,30],[46,8,51,12],[47,0,52,0],[48,0,53,0],[49,0,54,0],[50,8,55,12,"proc"],[50,12,55,16],[50,17,55,21],[50,18,55,22],[51,6,56,8],[52,4,57,4],[52,5,57,5],[52,11,58,9],[52,15,58,13,"token"],[52,20,58,18],[52,21,58,19,"type"],[52,25,58,23],[52,30,58,28,"SelectorType"],[52,51,58,40],[52,52,58,41,"Pseudo"],[52,58,58,47],[52,60,58,49],[53,6,59,8],[53,10,59,12],[53,11,59,13,"token"],[53,16,59,18],[53,17,59,19,"data"],[53,21,59,23],[53,23,59,25],[54,8,60,12,"proc"],[54,12,60,16],[54,15,60,19],[54,16,60,20],[55,6,61,8],[55,7,61,9],[55,13,62,13],[55,17,62,17,"token"],[55,22,62,22],[55,23,62,23,"name"],[55,27,62,27],[55,32,62,32],[55,37,62,37],[55,41,62,41,"token"],[55,46,62,46],[55,47,62,47,"name"],[55,51,62,51],[55,56,62,56],[55,66,62,66],[55,68,62,68],[56,8,63,12,"proc"],[56,12,63,16],[56,15,63,19],[56,16,63,20],[56,17,63,21],[56,18,63,22],[57,6,64,8],[57,7,64,9],[57,13,65,13],[57,17,65,17,"Array"],[57,22,65,22],[57,23,65,23,"isArray"],[57,30,65,30],[57,31,65,31,"token"],[57,36,65,36],[57,37,65,37,"data"],[57,41,65,41],[57,42,65,42],[57,44,65,44],[58,8,66,12],[59,8,67,12,"proc"],[59,12,67,16],[59,15,67,19,"Math"],[59,19,67,23],[59,20,67,24,"min"],[59,23,67,27],[59,24,67,27,"apply"],[59,29,67,27],[59,30,67,19,"Math"],[59,34,67,23],[59,40,67,23,"_toConsumableArray2"],[59,59,67,23],[59,60,67,23,"default"],[59,67,67,23],[59,69,67,31,"token"],[59,74,67,36],[59,75,67,37,"data"],[59,79,67,41],[59,80,67,42,"map"],[59,83,67,45],[59,84,67,46],[59,94,67,47,"d"],[59,95,67,48],[60,10,67,48],[60,17,67,53,"Math"],[60,21,67,57],[60,22,67,58,"min"],[60,25,67,61],[60,26,67,61,"apply"],[60,31,67,61],[60,32,67,53,"Math"],[60,36,67,57],[60,42,67,57,"_toConsumableArray2"],[60,61,67,57],[60,62,67,57,"default"],[60,69,67,57],[60,71,67,65,"d"],[60,72,67,66],[60,73,67,67,"map"],[60,76,67,70],[60,77,67,71,"getProcedure"],[60,89,67,83],[60,90,67,84],[60,92,67,85],[61,8,67,85],[61,10,67,86],[61,12,67,87],[62,8,68,12],[63,8,69,12],[63,12,69,16,"proc"],[63,16,69,20],[63,19,69,23],[63,20,69,24],[63,22,69,26],[64,10,70,16,"proc"],[64,14,70,20],[64,17,70,23],[64,18,70,24],[65,8,71,12],[66,6,72,8],[66,7,72,9],[66,13,73,13],[67,8,74,12,"proc"],[67,12,74,16],[67,15,74,19],[67,16,74,20],[68,6,75,8],[69,4,76,4],[70,4,77,4],[70,11,77,11,"proc"],[70,15,77,15],[71,2,78,0],[72,0,78,1],[72,3]],"functionMap":{"names":["<global>","isTraversal","sortByProcedure","getProcedure","token.data.map$argument_0"],"mappings":"AAA;OCO;CDE;eEgB;CFc;AGC;8CC0B,uCD;CHW"}},"type":"js/module"}]}