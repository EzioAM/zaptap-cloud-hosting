{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@react-native-community/netinfo","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":90,"index":90}}],"key":"PqZcYTlMIVnzFjdViPzMiGUu7Hg=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":92},"end":{"line":2,"column":56,"index":148}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"./OfflineQueue","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":150},"end":{"line":3,"column":63,"index":213}}],"key":"4Cru2n2CgjzCeMo25dNvktttf8w=","exportNames":["*"]}},{"name":"../analytics/AnalyticsService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":215},"end":{"line":4,"column":55,"index":270}}],"key":"9lSExDzipJQ6FrXGqQHAvtkxQ6s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.syncManager = exports.SyncManager = undefined;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));\n  var _netinfo = _interopRequireDefault(require(_dependencyMap[4]));\n  var _reactNative = require(_dependencyMap[5]);\n  var _OfflineQueue = require(_dependencyMap[6]);\n  var _AnalyticsService = require(_dependencyMap[7]);\n  /**\r\n   * Network connection information\r\n   */\n  /**\r\n   * Sync operation progress tracking\r\n   */\n  /**\r\n   * Sync configuration\r\n   */\n  /**\r\n   * Operation processor interface - implement this for each operation type\r\n   */\n  /**\r\n   * Sync event types\r\n   */\n  /**\r\n   * Sync event data\r\n   */\n  /**\r\n   * Event listener callback\r\n   */\n  /**\r\n   * Comprehensive sync manager for handling offline/online synchronization\r\n   */\n  var SyncManager = exports.SyncManager = /*#__PURE__*/function () {\n    function SyncManager() {\n      (0, _classCallCheck2.default)(this, SyncManager);\n      this.networkInfo = null;\n      this.syncInProgress = false;\n      this.appState = 'active';\n      this.syncInterval = null;\n      this.processors = new Map();\n      this.eventListeners = new Map();\n      this.config = {\n        batchSize: 10,\n        syncInterval: 30000,\n        // 30 seconds\n        priorityOrder: ['high', 'normal', 'low'],\n        conflictResolution: 'server_wins',\n        maxConcurrentOperations: 3,\n        enableBackgroundSync: true,\n        syncOnAppForeground: true\n      };\n      this.currentSyncProgress = {\n        total: 0,\n        completed: 0,\n        failed: 0,\n        inProgress: false\n      };\n      this.initializeNetworkMonitoring();\n      this.initializeAppStateMonitoring();\n      this.startPeriodicSync();\n    }\n\n    /**\r\n     * Singleton pattern implementation\r\n     */\n    return (0, _createClass2.default)(SyncManager, [{\n      key: \"initializeNetworkMonitoring\",\n      value:\n      /**\r\n       * Initialize network monitoring\r\n       */\n      function initializeNetworkMonitoring() {\n        // Listen for network state changes\n        _netinfo.default.addEventListener(this.handleNetworkStateChange.bind(this));\n\n        // Get initial network state\n        _netinfo.default.fetch().then(this.handleNetworkStateChange.bind(this));\n      }\n\n      /**\r\n       * Handle network state changes\r\n       */\n    }, {\n      key: \"handleNetworkStateChange\",\n      value: function handleNetworkStateChange(state) {\n        var previouslyConnected = this.networkInfo?.isConnected || false;\n        this.networkInfo = {\n          isConnected: state.isConnected || false,\n          type: state.type,\n          isInternetReachable: state.isInternetReachable,\n          details: state.details\n        };\n        _AnalyticsService.logger.info('SyncManager: Network state changed', {\n          type: state.type,\n          isConnected: state.isConnected,\n          isInternetReachable: state.isInternetReachable\n        });\n\n        // Emit network change event\n        this.emitEvent('network_changed', this.networkInfo);\n\n        // Start sync if we just came online\n        if (!previouslyConnected && this.networkInfo.isConnected && this.networkInfo.isInternetReachable) {\n          _AnalyticsService.logger.info('SyncManager: Connection restored, starting sync');\n          this.startSync().catch(error => {\n            _AnalyticsService.logger.error('SyncManager: Failed to start sync after connection restored', {\n              error\n            });\n          });\n        }\n      }\n\n      /**\r\n       * Initialize app state monitoring for foreground/background sync\r\n       */\n    }, {\n      key: \"initializeAppStateMonitoring\",\n      value: function initializeAppStateMonitoring() {\n        _reactNative.AppState.addEventListener('change', this.handleAppStateChange.bind(this));\n        this.appState = _reactNative.AppState.currentState;\n      }\n\n      /**\r\n       * Handle app state changes\r\n       */\n    }, {\n      key: \"handleAppStateChange\",\n      value: function handleAppStateChange(nextAppState) {\n        var wasInBackground = this.appState !== 'active';\n        this.appState = nextAppState;\n\n        // Start sync when app comes to foreground\n        if (wasInBackground && nextAppState === 'active' && this.config.syncOnAppForeground) {\n          _AnalyticsService.logger.info('SyncManager: App came to foreground, starting sync');\n          this.startSync().catch(error => {\n            _AnalyticsService.logger.error('SyncManager: Failed to start sync on app foreground', {\n              error\n            });\n          });\n        }\n      }\n\n      /**\r\n       * Start periodic sync based on configuration\r\n       */\n    }, {\n      key: \"startPeriodicSync\",\n      value: function startPeriodicSync() {\n        if (this.syncInterval) {\n          clearInterval(this.syncInterval);\n        }\n        if (this.config.syncInterval > 0) {\n          this.syncInterval = setInterval(() => {\n            if (this.canSync() && !this.syncInProgress) {\n              this.startSync().catch(error => {\n                _AnalyticsService.logger.error('SyncManager: Periodic sync failed', {\n                  error\n                });\n              });\n            }\n          }, this.config.syncInterval);\n        }\n      }\n\n      /**\r\n       * Check if sync can be performed\r\n       */\n    }, {\n      key: \"canSync\",\n      value: function canSync() {\n        if (!this.networkInfo) {\n          return false;\n        }\n\n        // Check if we have internet connectivity\n        if (!this.networkInfo.isConnected || this.networkInfo.isInternetReachable === false) {\n          return false;\n        }\n\n        // Check if background sync is enabled when app is in background\n        if (this.appState !== 'active' && !this.config.enableBackgroundSync) {\n          return false;\n        }\n        return true;\n      }\n\n      /**\r\n       * Register operation processor\r\n       */\n    }, {\n      key: \"registerProcessor\",\n      value: function registerProcessor(operationType, processor) {\n        this.processors.set(operationType, processor);\n        _AnalyticsService.logger.info('SyncManager: Processor registered', {\n          operationType\n        });\n      }\n\n      /**\r\n       * Unregister operation processor\r\n       */\n    }, {\n      key: \"unregisterProcessor\",\n      value: function unregisterProcessor(operationType) {\n        this.processors.delete(operationType);\n        _AnalyticsService.logger.info('SyncManager: Processor unregistered', {\n          operationType\n        });\n      }\n\n      /**\r\n       * Start synchronization process\r\n       */\n    }, {\n      key: \"startSync\",\n      value: (function () {\n        var _startSync = (0, _asyncToGenerator2.default)(function* () {\n          if (this.syncInProgress) {\n            _AnalyticsService.logger.info('SyncManager: Sync already in progress, skipping');\n            return;\n          }\n          if (!this.canSync()) {\n            _AnalyticsService.logger.info('SyncManager: Cannot sync - network not available or app in background');\n            return;\n          }\n          this.syncInProgress = true;\n          var startTime = Date.now();\n          try {\n            _AnalyticsService.logger.info('SyncManager: Starting synchronization');\n            this.emitEvent('sync_started');\n            yield this.performSync();\n            var duration = Date.now() - startTime;\n            _AnalyticsService.logger.info('SyncManager: Synchronization completed', {\n              duration,\n              completed: this.currentSyncProgress.completed,\n              failed: this.currentSyncProgress.failed\n            });\n            this.emitEvent('sync_completed', {\n              duration,\n              completed: this.currentSyncProgress.completed,\n              failed: this.currentSyncProgress.failed\n            });\n          } catch (error) {\n            var _duration = Date.now() - startTime;\n            _AnalyticsService.logger.error('SyncManager: Synchronization failed', {\n              error,\n              duration: _duration\n            });\n            this.emitEvent('sync_failed', {\n              error: error.message,\n              duration: _duration\n            });\n          } finally {\n            this.syncInProgress = false;\n            this.resetSyncProgress();\n          }\n        });\n        function startSync() {\n          return _startSync.apply(this, arguments);\n        }\n        return startSync;\n      }()\n      /**\r\n       * Perform the actual synchronization\r\n       */\n      )\n    }, {\n      key: \"performSync\",\n      value: (function () {\n        var _performSync = (0, _asyncToGenerator2.default)(function* () {\n          var _this = this;\n          var readyOperations = _OfflineQueue.offlineQueue.getReadyOperations();\n          if (readyOperations.length === 0) {\n            _AnalyticsService.logger.info('SyncManager: No operations ready for sync');\n            return;\n          }\n\n          // Initialize sync progress\n          this.currentSyncProgress = {\n            total: readyOperations.length,\n            completed: 0,\n            failed: 0,\n            inProgress: true\n          };\n          _AnalyticsService.logger.info('SyncManager: Processing operations', {\n            total: readyOperations.length\n          });\n\n          // Process operations in batches by priority\n          var _loop = function* (priority) {\n            var priorityOperations = readyOperations.filter(op => op.priority === priority);\n            if (priorityOperations.length > 0) {\n              yield _this.processBatch(priorityOperations);\n            }\n          };\n          for (var priority of this.config.priorityOrder) {\n            yield* _loop(priority);\n          }\n        });\n        function performSync() {\n          return _performSync.apply(this, arguments);\n        }\n        return performSync;\n      }()\n      /**\r\n       * Process a batch of operations\r\n       */\n      )\n    }, {\n      key: \"processBatch\",\n      value: (function () {\n        var _processBatch = (0, _asyncToGenerator2.default)(function* (operations) {\n          var batches = this.chunkArray(operations, this.config.batchSize);\n          for (var batch of batches) {\n            if (!this.canSync()) {\n              _AnalyticsService.logger.info('SyncManager: Network lost during batch processing, stopping');\n              break;\n            }\n            yield this.processConcurrentOperations(batch);\n          }\n        });\n        function processBatch(_x) {\n          return _processBatch.apply(this, arguments);\n        }\n        return processBatch;\n      }()\n      /**\r\n       * Process operations concurrently with limit\r\n       */\n      )\n    }, {\n      key: \"processConcurrentOperations\",\n      value: (function () {\n        var _processConcurrentOperations = (0, _asyncToGenerator2.default)(function* (operations) {\n          var chunks = this.chunkArray(operations, this.config.maxConcurrentOperations);\n          for (var chunk of chunks) {\n            var promises = chunk.map(operation => this.processOperation(operation));\n            yield Promise.allSettled(promises);\n          }\n        });\n        function processConcurrentOperations(_x2) {\n          return _processConcurrentOperations.apply(this, arguments);\n        }\n        return processConcurrentOperations;\n      }()\n      /**\r\n       * Process a single operation\r\n       */\n      )\n    }, {\n      key: \"processOperation\",\n      value: (function () {\n        var _processOperation = (0, _asyncToGenerator2.default)(function* (operation) {\n          var processor = this.processors.get(operation.type);\n          if (!processor) {\n            var error = `No processor found for operation type: ${operation.type}`;\n            _AnalyticsService.logger.error('SyncManager: Operation processing failed', {\n              operationId: operation.id,\n              type: operation.type,\n              error\n            });\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'failed', error);\n            yield _OfflineQueue.offlineQueue.incrementRetryCount(operation.id);\n            this.currentSyncProgress.failed++;\n            this.emitEvent('operation_failed', {\n              operationId: operation.id,\n              error\n            });\n            return;\n          }\n          if (!processor.canProcess(operation)) {\n            _AnalyticsService.logger.info('SyncManager: Operation cannot be processed at this time', {\n              operationId: operation.id,\n              type: operation.type\n            });\n            return;\n          }\n          try {\n            // Update operation status to processing\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'processing');\n\n            // Update sync progress\n            this.currentSyncProgress.currentOperation = `${operation.type}:${operation.id}`;\n            this.emitEvent('sync_progress', {\n              ...this.currentSyncProgress\n            });\n            _AnalyticsService.logger.info('SyncManager: Processing operation', {\n              operationId: operation.id,\n              type: operation.type,\n              attempt: operation.retryCount + 1\n            });\n\n            // Process the operation\n            yield processor.process(operation);\n\n            // Mark as completed\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'completed');\n            this.currentSyncProgress.completed++;\n            this.emitEvent('operation_completed', {\n              operationId: operation.id,\n              type: operation.type\n            });\n            _AnalyticsService.logger.info('SyncManager: Operation processed successfully', {\n              operationId: operation.id,\n              type: operation.type\n            });\n          } catch (error) {\n            _AnalyticsService.logger.error('SyncManager: Operation processing failed', {\n              operationId: operation.id,\n              type: operation.type,\n              error: error.message,\n              attempt: operation.retryCount + 1\n            });\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'failed', error.message);\n\n            // Increment retry count if not exceeded\n            if (operation.retryCount < operation.maxRetries) {\n              yield _OfflineQueue.offlineQueue.incrementRetryCount(operation.id);\n            }\n            this.currentSyncProgress.failed++;\n            this.emitEvent('operation_failed', {\n              operationId: operation.id,\n              type: operation.type,\n              error: error.message\n            });\n          }\n        });\n        function processOperation(_x3) {\n          return _processOperation.apply(this, arguments);\n        }\n        return processOperation;\n      }()\n      /**\r\n       * Reset sync progress\r\n       */\n      )\n    }, {\n      key: \"resetSyncProgress\",\n      value: function resetSyncProgress() {\n        this.currentSyncProgress = {\n          total: 0,\n          completed: 0,\n          failed: 0,\n          inProgress: false\n        };\n      }\n\n      /**\r\n       * Get current network information\r\n       */\n    }, {\n      key: \"getNetworkInfo\",\n      value: function getNetworkInfo() {\n        return this.networkInfo;\n      }\n\n      /**\r\n       * Get current sync progress\r\n       */\n    }, {\n      key: \"getSyncProgress\",\n      value: function getSyncProgress() {\n        return {\n          ...this.currentSyncProgress\n        };\n      }\n\n      /**\r\n       * Check if currently syncing\r\n       */\n    }, {\n      key: \"isSyncing\",\n      value: function isSyncing() {\n        return this.syncInProgress;\n      }\n\n      /**\r\n       * Force sync (even if conditions not met)\r\n       */\n    }, {\n      key: \"forceSync\",\n      value: (function () {\n        var _forceSync = (0, _asyncToGenerator2.default)(function* () {\n          _AnalyticsService.logger.info('SyncManager: Force sync requested');\n          this.syncInProgress = false; // Reset flag to allow force sync\n          yield this.startSync();\n        });\n        function forceSync() {\n          return _forceSync.apply(this, arguments);\n        }\n        return forceSync;\n      }()\n      /**\r\n       * Stop sync process\r\n       */\n      )\n    }, {\n      key: \"stopSync\",\n      value: function stopSync() {\n        if (this.syncInterval) {\n          clearInterval(this.syncInterval);\n          this.syncInterval = null;\n        }\n        _AnalyticsService.logger.info('SyncManager: Sync stopped');\n      }\n\n      /**\r\n       * Update sync configuration\r\n       */\n    }, {\n      key: \"updateConfig\",\n      value: function updateConfig(newConfig) {\n        Object.assign(this.config, newConfig);\n\n        // Restart periodic sync if interval changed\n        if (newConfig.syncInterval !== undefined) {\n          this.startPeriodicSync();\n        }\n        _AnalyticsService.logger.info('SyncManager: Configuration updated', newConfig);\n      }\n\n      /**\r\n       * Add event listener\r\n       */\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(eventType, listener) {\n        if (!this.eventListeners.has(eventType)) {\n          this.eventListeners.set(eventType, new Set());\n        }\n        this.eventListeners.get(eventType).add(listener);\n      }\n\n      /**\r\n       * Remove event listener\r\n       */\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(eventType, listener) {\n        var listeners = this.eventListeners.get(eventType);\n        if (listeners) {\n          listeners.delete(listener);\n        }\n      }\n\n      /**\r\n       * Emit event to listeners\r\n       */\n    }, {\n      key: \"emitEvent\",\n      value: function emitEvent(type, data) {\n        var event = {\n          type,\n          data,\n          timestamp: Date.now()\n        };\n        var listeners = this.eventListeners.get(type);\n        if (listeners) {\n          listeners.forEach(listener => {\n            try {\n              listener(event);\n            } catch (error) {\n              _AnalyticsService.logger.error('SyncManager: Event listener error', {\n                eventType: type,\n                error\n              });\n            }\n          });\n        }\n      }\n\n      /**\r\n       * Utility function to chunk array into smaller arrays\r\n       */\n    }, {\n      key: \"chunkArray\",\n      value: function chunkArray(array, chunkSize) {\n        var chunks = [];\n        for (var i = 0; i < array.length; i += chunkSize) {\n          chunks.push(array.slice(i, i + chunkSize));\n        }\n        return chunks;\n      }\n\n      /**\r\n       * Get sync statistics\r\n       */\n    }, {\n      key: \"getSyncStats\",\n      value: function getSyncStats() {\n        return {\n          queueStats: _OfflineQueue.offlineQueue.getQueueStats(),\n          networkInfo: this.networkInfo,\n          syncProgress: this.currentSyncProgress,\n          isSyncing: this.syncInProgress\n        };\n      }\n\n      /**\r\n       * Cleanup on app termination\r\n       */\n    }, {\n      key: \"cleanup\",\n      value: function cleanup() {\n        this.stopSync();\n        this.eventListeners.clear();\n        _AnalyticsService.logger.info('SyncManager: Cleanup completed');\n      }\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance() {\n        if (!SyncManager.instance) {\n          SyncManager.instance = new SyncManager();\n        }\n        return SyncManager.instance;\n      }\n    }]);\n  }(); // Export singleton instance\n  var syncManager = exports.syncManager = SyncManager.getInstance();\n});","lineCount":625,"map":[[10,2,1,0],[10,6,1,0,"_netinfo"],[10,14,1,0],[10,17,1,0,"_interopRequireDefault"],[10,39,1,0],[10,40,1,0,"require"],[10,47,1,0],[10,48,1,0,"_dependencyMap"],[10,62,1,0],[11,2,2,0],[11,6,2,0,"_reactNative"],[11,18,2,0],[11,21,2,0,"require"],[11,28,2,0],[11,29,2,0,"_dependencyMap"],[11,43,2,0],[12,2,3,0],[12,6,3,0,"_OfflineQueue"],[12,19,3,0],[12,22,3,0,"require"],[12,29,3,0],[12,30,3,0,"_dependencyMap"],[12,44,3,0],[13,2,4,0],[13,6,4,0,"_AnalyticsService"],[13,23,4,0],[13,26,4,0,"require"],[13,33,4,0],[13,34,4,0,"_dependencyMap"],[13,48,4,0],[14,2,6,0],[15,0,7,0],[16,0,8,0],[17,2,16,0],[18,0,17,0],[19,0,18,0],[20,2,28,0],[21,0,29,0],[22,0,30,0],[23,2,41,0],[24,0,42,0],[25,0,43,0],[26,2,50,0],[27,0,51,0],[28,0,52,0],[29,2,62,0],[30,0,63,0],[31,0,64,0],[32,2,71,0],[33,0,72,0],[34,0,73,0],[35,2,76,0],[36,0,77,0],[37,0,78,0],[38,2,76,0],[38,6,79,13,"SyncManager"],[38,17,79,24],[38,20,79,24,"exports"],[38,27,79,24],[38,28,79,24,"SyncManager"],[38,39,79,24],[39,4,105,2],[39,13,105,2,"SyncManager"],[39,25,105,2],[39,27,105,24],[40,6,105,24],[40,10,105,24,"_classCallCheck2"],[40,26,105,24],[40,27,105,24,"default"],[40,34,105,24],[40,42,105,24,"SyncManager"],[40,53,105,24],[41,6,105,24],[41,11,81,10,"networkInfo"],[41,22,81,21],[41,25,81,44],[41,29,81,48],[42,6,81,48],[42,11,82,10,"syncInProgress"],[42,25,82,24],[42,28,82,27],[42,33,82,32],[43,6,82,32],[43,11,83,10,"appState"],[43,19,83,18],[43,22,83,37],[43,30,83,45],[44,6,83,45],[44,11,84,10,"syncInterval"],[44,23,84,22],[44,26,84,48],[44,30,84,52],[45,6,84,52],[45,11,85,10,"processors"],[45,21,85,20],[45,24,85,23],[45,28,85,27,"Map"],[45,31,85,30],[45,32,85,59],[45,33,85,60],[46,6,85,60],[46,11,86,10,"eventListeners"],[46,25,86,24],[46,28,86,27],[46,32,86,31,"Map"],[46,35,86,34],[46,36,86,67],[46,37,86,68],[47,6,86,68],[47,11,88,19,"config"],[47,17,88,25],[47,20,88,40],[48,8,89,4,"batchSize"],[48,17,89,13],[48,19,89,15],[48,21,89,17],[49,8,90,4,"syncInterval"],[49,20,90,16],[49,22,90,18],[49,27,90,23],[50,8,90,25],[51,8,91,4,"priorityOrder"],[51,21,91,17],[51,23,91,19],[51,24,91,20],[51,30,91,26],[51,32,91,28],[51,40,91,36],[51,42,91,38],[51,47,91,43],[51,48,91,44],[52,8,92,4,"conflictResolution"],[52,26,92,22],[52,28,92,24],[52,41,92,37],[53,8,93,4,"maxConcurrentOperations"],[53,31,93,27],[53,33,93,29],[53,34,93,30],[54,8,94,4,"enableBackgroundSync"],[54,28,94,24],[54,30,94,26],[54,34,94,30],[55,8,95,4,"syncOnAppForeground"],[55,27,95,23],[55,29,95,25],[56,6,96,2],[56,7,96,3],[57,6,96,3],[57,11,98,10,"currentSyncProgress"],[57,30,98,29],[57,33,98,46],[58,8,99,4,"total"],[58,13,99,9],[58,15,99,11],[58,16,99,12],[59,8,100,4,"completed"],[59,17,100,13],[59,19,100,15],[59,20,100,16],[60,8,101,4,"failed"],[60,14,101,10],[60,16,101,12],[60,17,101,13],[61,8,102,4,"inProgress"],[61,18,102,14],[61,20,102,16],[62,6,103,2],[62,7,103,3],[63,6,106,4],[63,10,106,8],[63,11,106,9,"initializeNetworkMonitoring"],[63,38,106,36],[63,39,106,37],[63,40,106,38],[64,6,107,4],[64,10,107,8],[64,11,107,9,"initializeAppStateMonitoring"],[64,39,107,37],[64,40,107,38],[64,41,107,39],[65,6,108,4],[65,10,108,8],[65,11,108,9,"startPeriodicSync"],[65,28,108,26],[65,29,108,27],[65,30,108,28],[66,4,109,2],[68,4,111,2],[69,0,112,0],[70,0,113,0],[71,4,111,2],[71,15,111,2,"_createClass2"],[71,28,111,2],[71,29,111,2,"default"],[71,36,111,2],[71,38,111,2,"SyncManager"],[71,49,111,2],[72,6,111,2,"key"],[72,9,111,2],[73,6,111,2,"value"],[73,11,111,2],[74,6,121,2],[75,0,122,0],[76,0,123,0],[77,6,124,2],[77,15,124,10,"initializeNetworkMonitoring"],[77,42,124,37,"initializeNetworkMonitoring"],[77,43,124,37],[77,45,124,46],[78,8,125,4],[79,8,126,4,"NetInfo"],[79,24,126,11],[79,25,126,12,"addEventListener"],[79,41,126,28],[79,42,126,29],[79,46,126,33],[79,47,126,34,"handleNetworkStateChange"],[79,71,126,58],[79,72,126,59,"bind"],[79,76,126,63],[79,77,126,64],[79,81,126,68],[79,82,126,69],[79,83,126,70],[81,8,128,4],[82,8,129,4,"NetInfo"],[82,24,129,11],[82,25,129,12,"fetch"],[82,30,129,17],[82,31,129,18],[82,32,129,19],[82,33,129,20,"then"],[82,37,129,24],[82,38,129,25],[82,42,129,29],[82,43,129,30,"handleNetworkStateChange"],[82,67,129,54],[82,68,129,55,"bind"],[82,72,129,59],[82,73,129,60],[82,77,129,64],[82,78,129,65],[82,79,129,66],[83,6,130,2],[85,6,132,2],[86,0,133,0],[87,0,134,0],[88,4,132,2],[89,6,132,2,"key"],[89,9,132,2],[90,6,132,2,"value"],[90,11,132,2],[90,13,135,2],[90,22,135,10,"handleNetworkStateChange"],[90,46,135,34,"handleNetworkStateChange"],[90,47,135,35,"state"],[90,52,135,54],[90,54,135,62],[91,8,136,4],[91,12,136,10,"previouslyConnected"],[91,31,136,29],[91,34,136,32],[91,38,136,36],[91,39,136,37,"networkInfo"],[91,50,136,48],[91,52,136,50,"isConnected"],[91,63,136,61],[91,67,136,65],[91,72,136,70],[92,8,138,4],[92,12,138,8],[92,13,138,9,"networkInfo"],[92,24,138,20],[92,27,138,23],[93,10,139,6,"isConnected"],[93,21,139,17],[93,23,139,19,"state"],[93,28,139,24],[93,29,139,25,"isConnected"],[93,40,139,36],[93,44,139,40],[93,49,139,45],[94,10,140,6,"type"],[94,14,140,10],[94,16,140,12,"state"],[94,21,140,17],[94,22,140,18,"type"],[94,26,140,22],[95,10,141,6,"isInternetReachable"],[95,29,141,25],[95,31,141,27,"state"],[95,36,141,32],[95,37,141,33,"isInternetReachable"],[95,56,141,52],[96,10,142,6,"details"],[96,17,142,13],[96,19,142,15,"state"],[96,24,142,20],[96,25,142,21,"details"],[97,8,143,4],[97,9,143,5],[98,8,145,4,"logger"],[98,32,145,10],[98,33,145,11,"info"],[98,37,145,15],[98,38,145,16],[98,74,145,52],[98,76,145,54],[99,10,146,6,"type"],[99,14,146,10],[99,16,146,12,"state"],[99,21,146,17],[99,22,146,18,"type"],[99,26,146,22],[100,10,147,6,"isConnected"],[100,21,147,17],[100,23,147,19,"state"],[100,28,147,24],[100,29,147,25,"isConnected"],[100,40,147,36],[101,10,148,6,"isInternetReachable"],[101,29,148,25],[101,31,148,27,"state"],[101,36,148,32],[101,37,148,33,"isInternetReachable"],[102,8,149,4],[102,9,149,5],[102,10,149,6],[104,8,151,4],[105,8,152,4],[105,12,152,8],[105,13,152,9,"emitEvent"],[105,22,152,18],[105,23,152,19],[105,40,152,36],[105,42,152,38],[105,46,152,42],[105,47,152,43,"networkInfo"],[105,58,152,54],[105,59,152,55],[107,8,154,4],[108,8,155,4],[108,12,155,8],[108,13,155,9,"previouslyConnected"],[108,32,155,28],[108,36,155,32],[108,40,155,36],[108,41,155,37,"networkInfo"],[108,52,155,48],[108,53,155,49,"isConnected"],[108,64,155,60],[108,68,155,64],[108,72,155,68],[108,73,155,69,"networkInfo"],[108,84,155,80],[108,85,155,81,"isInternetReachable"],[108,104,155,100],[108,106,155,102],[109,10,156,6,"logger"],[109,34,156,12],[109,35,156,13,"info"],[109,39,156,17],[109,40,156,18],[109,89,156,67],[109,90,156,68],[110,10,157,6],[110,14,157,10],[110,15,157,11,"startSync"],[110,24,157,20],[110,25,157,21],[110,26,157,22],[110,27,157,23,"catch"],[110,32,157,28],[110,33,157,29,"error"],[110,38,157,34],[110,42,157,38],[111,12,158,8,"logger"],[111,36,158,14],[111,37,158,15,"error"],[111,42,158,20],[111,43,158,21],[111,104,158,82],[111,106,158,84],[112,14,158,86,"error"],[113,12,158,92],[113,13,158,93],[113,14,158,94],[114,10,159,6],[114,11,159,7],[114,12,159,8],[115,8,160,4],[116,6,161,2],[118,6,163,2],[119,0,164,0],[120,0,165,0],[121,4,163,2],[122,6,163,2,"key"],[122,9,163,2],[123,6,163,2,"value"],[123,11,163,2],[123,13,166,2],[123,22,166,10,"initializeAppStateMonitoring"],[123,50,166,38,"initializeAppStateMonitoring"],[123,51,166,38],[123,53,166,47],[124,8,167,4,"AppState"],[124,29,167,12],[124,30,167,13,"addEventListener"],[124,46,167,29],[124,47,167,30],[124,55,167,38],[124,57,167,40],[124,61,167,44],[124,62,167,45,"handleAppStateChange"],[124,82,167,65],[124,83,167,66,"bind"],[124,87,167,70],[124,88,167,71],[124,92,167,75],[124,93,167,76],[124,94,167,77],[125,8,168,4],[125,12,168,8],[125,13,168,9,"appState"],[125,21,168,17],[125,24,168,20,"AppState"],[125,45,168,28],[125,46,168,29,"currentState"],[125,58,168,41],[126,6,169,2],[128,6,171,2],[129,0,172,0],[130,0,173,0],[131,4,171,2],[132,6,171,2,"key"],[132,9,171,2],[133,6,171,2,"value"],[133,11,171,2],[133,13,174,2],[133,22,174,10,"handleAppStateChange"],[133,42,174,30,"handleAppStateChange"],[133,43,174,31,"nextAppState"],[133,55,174,59],[133,57,174,67],[134,8,175,4],[134,12,175,10,"wasInBackground"],[134,27,175,25],[134,30,175,28],[134,34,175,32],[134,35,175,33,"appState"],[134,43,175,41],[134,48,175,46],[134,56,175,54],[135,8,176,4],[135,12,176,8],[135,13,176,9,"appState"],[135,21,176,17],[135,24,176,20,"nextAppState"],[135,36,176,32],[137,8,178,4],[138,8,179,4],[138,12,179,8,"wasInBackground"],[138,27,179,23],[138,31,179,27,"nextAppState"],[138,43,179,39],[138,48,179,44],[138,56,179,52],[138,60,179,56],[138,64,179,60],[138,65,179,61,"config"],[138,71,179,67],[138,72,179,68,"syncOnAppForeground"],[138,91,179,87],[138,93,179,89],[139,10,180,6,"logger"],[139,34,180,12],[139,35,180,13,"info"],[139,39,180,17],[139,40,180,18],[139,92,180,70],[139,93,180,71],[140,10,181,6],[140,14,181,10],[140,15,181,11,"startSync"],[140,24,181,20],[140,25,181,21],[140,26,181,22],[140,27,181,23,"catch"],[140,32,181,28],[140,33,181,29,"error"],[140,38,181,34],[140,42,181,38],[141,12,182,8,"logger"],[141,36,182,14],[141,37,182,15,"error"],[141,42,182,20],[141,43,182,21],[141,96,182,74],[141,98,182,76],[142,14,182,78,"error"],[143,12,182,84],[143,13,182,85],[143,14,182,86],[144,10,183,6],[144,11,183,7],[144,12,183,8],[145,8,184,4],[146,6,185,2],[148,6,187,2],[149,0,188,0],[150,0,189,0],[151,4,187,2],[152,6,187,2,"key"],[152,9,187,2],[153,6,187,2,"value"],[153,11,187,2],[153,13,190,2],[153,22,190,10,"startPeriodicSync"],[153,39,190,27,"startPeriodicSync"],[153,40,190,27],[153,42,190,36],[154,8,191,4],[154,12,191,8],[154,16,191,12],[154,17,191,13,"syncInterval"],[154,29,191,25],[154,31,191,27],[155,10,192,6,"clearInterval"],[155,23,192,19],[155,24,192,20],[155,28,192,24],[155,29,192,25,"syncInterval"],[155,41,192,37],[155,42,192,38],[156,8,193,4],[157,8,195,4],[157,12,195,8],[157,16,195,12],[157,17,195,13,"config"],[157,23,195,19],[157,24,195,20,"syncInterval"],[157,36,195,32],[157,39,195,35],[157,40,195,36],[157,42,195,38],[158,10,196,6],[158,14,196,10],[158,15,196,11,"syncInterval"],[158,27,196,23],[158,30,196,26,"setInterval"],[158,41,196,37],[158,42,196,38],[158,48,196,44],[159,12,197,8],[159,16,197,12],[159,20,197,16],[159,21,197,17,"canSync"],[159,28,197,24],[159,29,197,25],[159,30,197,26],[159,34,197,30],[159,35,197,31],[159,39,197,35],[159,40,197,36,"syncInProgress"],[159,54,197,50],[159,56,197,52],[160,14,198,10],[160,18,198,14],[160,19,198,15,"startSync"],[160,28,198,24],[160,29,198,25],[160,30,198,26],[160,31,198,27,"catch"],[160,36,198,32],[160,37,198,33,"error"],[160,42,198,38],[160,46,198,42],[161,16,199,12,"logger"],[161,40,199,18],[161,41,199,19,"error"],[161,46,199,24],[161,47,199,25],[161,82,199,60],[161,84,199,62],[162,18,199,64,"error"],[163,16,199,70],[163,17,199,71],[163,18,199,72],[164,14,200,10],[164,15,200,11],[164,16,200,12],[165,12,201,8],[166,10,202,6],[166,11,202,7],[166,13,202,9],[166,17,202,13],[166,18,202,14,"config"],[166,24,202,20],[166,25,202,21,"syncInterval"],[166,37,202,33],[166,38,202,34],[167,8,203,4],[168,6,204,2],[170,6,206,2],[171,0,207,0],[172,0,208,0],[173,4,206,2],[174,6,206,2,"key"],[174,9,206,2],[175,6,206,2,"value"],[175,11,206,2],[175,13,209,2],[175,22,209,10,"canSync"],[175,29,209,17,"canSync"],[175,30,209,17],[175,32,209,29],[176,8,210,4],[176,12,210,8],[176,13,210,9],[176,17,210,13],[176,18,210,14,"networkInfo"],[176,29,210,25],[176,31,210,27],[177,10,211,6],[177,17,211,13],[177,22,211,18],[178,8,212,4],[180,8,214,4],[181,8,215,4],[181,12,215,8],[181,13,215,9],[181,17,215,13],[181,18,215,14,"networkInfo"],[181,29,215,25],[181,30,215,26,"isConnected"],[181,41,215,37],[181,45,215,41],[181,49,215,45],[181,50,215,46,"networkInfo"],[181,61,215,57],[181,62,215,58,"isInternetReachable"],[181,81,215,77],[181,86,215,82],[181,91,215,87],[181,93,215,89],[182,10,216,6],[182,17,216,13],[182,22,216,18],[183,8,217,4],[185,8,219,4],[186,8,220,4],[186,12,220,8],[186,16,220,12],[186,17,220,13,"appState"],[186,25,220,21],[186,30,220,26],[186,38,220,34],[186,42,220,38],[186,43,220,39],[186,47,220,43],[186,48,220,44,"config"],[186,54,220,50],[186,55,220,51,"enableBackgroundSync"],[186,75,220,71],[186,77,220,73],[187,10,221,6],[187,17,221,13],[187,22,221,18],[188,8,222,4],[189,8,224,4],[189,15,224,11],[189,19,224,15],[190,6,225,2],[192,6,227,2],[193,0,228,0],[194,0,229,0],[195,4,227,2],[196,6,227,2,"key"],[196,9,227,2],[197,6,227,2,"value"],[197,11,227,2],[197,13,230,2],[197,22,230,9,"registerProcessor"],[197,39,230,26,"registerProcessor"],[197,40,230,27,"operationType"],[197,53,230,48],[197,55,230,50,"processor"],[197,64,230,79],[197,66,230,87],[198,8,231,4],[198,12,231,8],[198,13,231,9,"processors"],[198,23,231,19],[198,24,231,20,"set"],[198,27,231,23],[198,28,231,24,"operationType"],[198,41,231,37],[198,43,231,39,"processor"],[198,52,231,48],[198,53,231,49],[199,8,232,4,"logger"],[199,32,232,10],[199,33,232,11,"info"],[199,37,232,15],[199,38,232,16],[199,73,232,51],[199,75,232,53],[200,10,232,55,"operationType"],[201,8,232,69],[201,9,232,70],[201,10,232,71],[202,6,233,2],[204,6,235,2],[205,0,236,0],[206,0,237,0],[207,4,235,2],[208,6,235,2,"key"],[208,9,235,2],[209,6,235,2,"value"],[209,11,235,2],[209,13,238,2],[209,22,238,9,"unregisterProcessor"],[209,41,238,28,"unregisterProcessor"],[209,42,238,29,"operationType"],[209,55,238,50],[209,57,238,58],[210,8,239,4],[210,12,239,8],[210,13,239,9,"processors"],[210,23,239,19],[210,24,239,20,"delete"],[210,30,239,26],[210,31,239,27,"operationType"],[210,44,239,40],[210,45,239,41],[211,8,240,4,"logger"],[211,32,240,10],[211,33,240,11,"info"],[211,37,240,15],[211,38,240,16],[211,75,240,53],[211,77,240,55],[212,10,240,57,"operationType"],[213,8,240,71],[213,9,240,72],[213,10,240,73],[214,6,241,2],[216,6,243,2],[217,0,244,0],[218,0,245,0],[219,4,243,2],[220,6,243,2,"key"],[220,9,243,2],[221,6,243,2,"value"],[221,11,243,2],[222,8,243,2],[222,12,243,2,"_startSync"],[222,22,243,2],[222,29,243,2,"_asyncToGenerator2"],[222,47,243,2],[222,48,243,2,"default"],[222,55,243,2],[222,57,246,2],[222,70,246,42],[223,10,247,4],[223,14,247,8],[223,18,247,12],[223,19,247,13,"syncInProgress"],[223,33,247,27],[223,35,247,29],[224,12,248,6,"logger"],[224,36,248,12],[224,37,248,13,"info"],[224,41,248,17],[224,42,248,18],[224,91,248,67],[224,92,248,68],[225,12,249,6],[226,10,250,4],[227,10,252,4],[227,14,252,8],[227,15,252,9],[227,19,252,13],[227,20,252,14,"canSync"],[227,27,252,21],[227,28,252,22],[227,29,252,23],[227,31,252,25],[228,12,253,6,"logger"],[228,36,253,12],[228,37,253,13,"info"],[228,41,253,17],[228,42,253,18],[228,113,253,89],[228,114,253,90],[229,12,254,6],[230,10,255,4],[231,10,257,4],[231,14,257,8],[231,15,257,9,"syncInProgress"],[231,29,257,23],[231,32,257,26],[231,36,257,30],[232,10,258,4],[232,14,258,10,"startTime"],[232,23,258,19],[232,26,258,22,"Date"],[232,30,258,26],[232,31,258,27,"now"],[232,34,258,30],[232,35,258,31],[232,36,258,32],[233,10,260,4],[233,14,260,8],[234,12,261,6,"logger"],[234,36,261,12],[234,37,261,13,"info"],[234,41,261,17],[234,42,261,18],[234,81,261,57],[234,82,261,58],[235,12,262,6],[235,16,262,10],[235,17,262,11,"emitEvent"],[235,26,262,20],[235,27,262,21],[235,41,262,35],[235,42,262,36],[236,12,264,6],[236,18,264,12],[236,22,264,16],[236,23,264,17,"performSync"],[236,34,264,28],[236,35,264,29],[236,36,264,30],[237,12,266,6],[237,16,266,12,"duration"],[237,24,266,20],[237,27,266,23,"Date"],[237,31,266,27],[237,32,266,28,"now"],[237,35,266,31],[237,36,266,32],[237,37,266,33],[237,40,266,36,"startTime"],[237,49,266,45],[238,12,267,6,"logger"],[238,36,267,12],[238,37,267,13,"info"],[238,41,267,17],[238,42,267,18],[238,82,267,58],[238,84,267,60],[239,14,268,8,"duration"],[239,22,268,16],[240,14,269,8,"completed"],[240,23,269,17],[240,25,269,19],[240,29,269,23],[240,30,269,24,"currentSyncProgress"],[240,49,269,43],[240,50,269,44,"completed"],[240,59,269,53],[241,14,270,8,"failed"],[241,20,270,14],[241,22,270,16],[241,26,270,20],[241,27,270,21,"currentSyncProgress"],[241,46,270,40],[241,47,270,41,"failed"],[242,12,271,6],[242,13,271,7],[242,14,271,8],[243,12,273,6],[243,16,273,10],[243,17,273,11,"emitEvent"],[243,26,273,20],[243,27,273,21],[243,43,273,37],[243,45,273,39],[244,14,274,8,"duration"],[244,22,274,16],[245,14,275,8,"completed"],[245,23,275,17],[245,25,275,19],[245,29,275,23],[245,30,275,24,"currentSyncProgress"],[245,49,275,43],[245,50,275,44,"completed"],[245,59,275,53],[246,14,276,8,"failed"],[246,20,276,14],[246,22,276,16],[246,26,276,20],[246,27,276,21,"currentSyncProgress"],[246,46,276,40],[246,47,276,41,"failed"],[247,12,277,6],[247,13,277,7],[247,14,277,8],[248,10,279,4],[248,11,279,5],[248,12,279,6],[248,19,279,13,"error"],[248,24,279,18],[248,26,279,20],[249,12,280,6],[249,16,280,12,"duration"],[249,25,280,20],[249,28,280,23,"Date"],[249,32,280,27],[249,33,280,28,"now"],[249,36,280,31],[249,37,280,32],[249,38,280,33],[249,41,280,36,"startTime"],[249,50,280,45],[250,12,281,6,"logger"],[250,36,281,12],[250,37,281,13,"error"],[250,42,281,18],[250,43,281,19],[250,80,281,56],[250,82,281,58],[251,14,281,60,"error"],[251,19,281,65],[252,14,281,67,"duration"],[252,22,281,75],[252,24,281,67,"duration"],[253,12,281,76],[253,13,281,77],[253,14,281,78],[254,12,282,6],[254,16,282,10],[254,17,282,11,"emitEvent"],[254,26,282,20],[254,27,282,21],[254,40,282,34],[254,42,282,36],[255,14,282,38,"error"],[255,19,282,43],[255,21,282,45,"error"],[255,26,282,50],[255,27,282,51,"message"],[255,34,282,58],[256,14,282,60,"duration"],[256,22,282,68],[256,24,282,60,"duration"],[257,12,282,69],[257,13,282,70],[257,14,282,71],[258,10,283,4],[258,11,283,5],[258,20,283,14],[259,12,284,6],[259,16,284,10],[259,17,284,11,"syncInProgress"],[259,31,284,25],[259,34,284,28],[259,39,284,33],[260,12,285,6],[260,16,285,10],[260,17,285,11,"resetSyncProgress"],[260,34,285,28],[260,35,285,29],[260,36,285,30],[261,10,286,4],[262,8,287,2],[262,9,287,3],[263,8,287,3],[263,17,246,15,"startSync"],[263,26,246,24,"startSync"],[263,27,246,24],[264,10,246,24],[264,17,246,24,"_startSync"],[264,27,246,24],[264,28,246,24,"apply"],[264,33,246,24],[264,40,246,24,"arguments"],[264,49,246,24],[265,8,246,24],[266,8,246,24],[266,15,246,15,"startSync"],[266,24,246,24],[267,6,246,24],[268,6,289,2],[269,0,290,0],[270,0,291,0],[271,6,289,2],[272,4,289,2],[273,6,289,2,"key"],[273,9,289,2],[274,6,289,2,"value"],[274,11,289,2],[275,8,289,2],[275,12,289,2,"_performSync"],[275,24,289,2],[275,31,289,2,"_asyncToGenerator2"],[275,49,289,2],[275,50,289,2,"default"],[275,57,289,2],[275,59,292,2],[275,72,292,45],[276,10,292,45],[276,14,292,45,"_this"],[276,19,292,45],[277,10,293,4],[277,14,293,10,"readyOperations"],[277,29,293,25],[277,32,293,28,"offlineQueue"],[277,58,293,40],[277,59,293,41,"getReadyOperations"],[277,77,293,59],[277,78,293,60],[277,79,293,61],[278,10,295,4],[278,14,295,8,"readyOperations"],[278,29,295,23],[278,30,295,24,"length"],[278,36,295,30],[278,41,295,35],[278,42,295,36],[278,44,295,38],[279,12,296,6,"logger"],[279,36,296,12],[279,37,296,13,"info"],[279,41,296,17],[279,42,296,18],[279,85,296,61],[279,86,296,62],[280,12,297,6],[281,10,298,4],[283,10,300,4],[284,10,301,4],[284,14,301,8],[284,15,301,9,"currentSyncProgress"],[284,34,301,28],[284,37,301,31],[285,12,302,6,"total"],[285,17,302,11],[285,19,302,13,"readyOperations"],[285,34,302,28],[285,35,302,29,"length"],[285,41,302,35],[286,12,303,6,"completed"],[286,21,303,15],[286,23,303,17],[286,24,303,18],[287,12,304,6,"failed"],[287,18,304,12],[287,20,304,14],[287,21,304,15],[288,12,305,6,"inProgress"],[288,22,305,16],[288,24,305,18],[289,10,306,4],[289,11,306,5],[290,10,308,4,"logger"],[290,34,308,10],[290,35,308,11,"info"],[290,39,308,15],[290,40,308,16],[290,76,308,52],[290,78,308,54],[291,12,308,56,"total"],[291,17,308,61],[291,19,308,63,"readyOperations"],[291,34,308,78],[291,35,308,79,"length"],[292,10,308,86],[292,11,308,87],[292,12,308,88],[294,10,310,4],[295,10,310,4],[295,14,310,4,"_loop"],[295,19,310,4],[295,32,310,4,"_loop"],[295,33,310,4,"priority"],[295,41,310,4],[295,43,311,54],[296,12,312,6],[296,16,312,12,"priorityOperations"],[296,34,312,30],[296,37,312,33,"readyOperations"],[296,52,312,48],[296,53,312,49,"filter"],[296,59,312,55],[296,60,312,56,"op"],[296,62,312,58],[296,66,312,62,"op"],[296,68,312,64],[296,69,312,65,"priority"],[296,77,312,73],[296,82,312,78,"priority"],[296,90,312,86],[296,91,312,87],[297,12,314,6],[297,16,314,10,"priorityOperations"],[297,34,314,28],[297,35,314,29,"length"],[297,41,314,35],[297,44,314,38],[297,45,314,39],[297,47,314,41],[298,14,315,8],[298,20,315,14,"_this"],[298,25,315,18],[298,26,315,19,"processBatch"],[298,38,315,31],[298,39,315,32,"priorityOperations"],[298,57,315,50],[298,58,315,51],[299,12,316,6],[300,10,317,4],[300,11,317,5],[301,10,311,4],[301,15,311,9],[301,19,311,15,"priority"],[301,27,311,23],[301,31,311,27],[301,35,311,31],[301,36,311,32,"config"],[301,42,311,38],[301,43,311,39,"priorityOrder"],[301,56,311,52],[302,12,311,52],[302,19,311,52,"_loop"],[302,24,311,52],[302,25,311,52,"priority"],[302,33,311,52],[303,10,311,52],[304,8,318,2],[304,9,318,3],[305,8,318,3],[305,17,292,16,"performSync"],[305,28,292,27,"performSync"],[305,29,292,27],[306,10,292,27],[306,17,292,27,"_performSync"],[306,29,292,27],[306,30,292,27,"apply"],[306,35,292,27],[306,42,292,27,"arguments"],[306,51,292,27],[307,8,292,27],[308,8,292,27],[308,15,292,16,"performSync"],[308,26,292,27],[309,6,292,27],[310,6,320,2],[311,0,321,0],[312,0,322,0],[313,6,320,2],[314,4,320,2],[315,6,320,2,"key"],[315,9,320,2],[316,6,320,2,"value"],[316,11,320,2],[317,8,320,2],[317,12,320,2,"_processBatch"],[317,25,320,2],[317,32,320,2,"_asyncToGenerator2"],[317,50,320,2],[317,51,320,2,"default"],[317,58,320,2],[317,60,323,2],[317,71,323,29,"operations"],[317,81,323,58],[317,83,323,75],[318,10,324,4],[318,14,324,10,"batches"],[318,21,324,17],[318,24,324,20],[318,28,324,24],[318,29,324,25,"chunkArray"],[318,39,324,35],[318,40,324,36,"operations"],[318,50,324,46],[318,52,324,48],[318,56,324,52],[318,57,324,53,"config"],[318,63,324,59],[318,64,324,60,"batchSize"],[318,73,324,69],[318,74,324,70],[319,10,326,4],[319,15,326,9],[319,19,326,15,"batch"],[319,24,326,20],[319,28,326,24,"batches"],[319,35,326,31],[319,37,326,33],[320,12,327,6],[320,16,327,10],[320,17,327,11],[320,21,327,15],[320,22,327,16,"canSync"],[320,29,327,23],[320,30,327,24],[320,31,327,25],[320,33,327,27],[321,14,328,8,"logger"],[321,38,328,14],[321,39,328,15,"info"],[321,43,328,19],[321,44,328,20],[321,105,328,81],[321,106,328,82],[322,14,329,8],[323,12,330,6],[324,12,332,6],[324,18,332,12],[324,22,332,16],[324,23,332,17,"processConcurrentOperations"],[324,50,332,44],[324,51,332,45,"batch"],[324,56,332,50],[324,57,332,51],[325,10,333,4],[326,8,334,2],[326,9,334,3],[327,8,334,3],[327,17,323,16,"processBatch"],[327,29,323,28,"processBatch"],[327,30,323,28,"_x"],[327,32,323,28],[328,10,323,28],[328,17,323,28,"_processBatch"],[328,30,323,28],[328,31,323,28,"apply"],[328,36,323,28],[328,43,323,28,"arguments"],[328,52,323,28],[329,8,323,28],[330,8,323,28],[330,15,323,16,"processBatch"],[330,27,323,28],[331,6,323,28],[332,6,336,2],[333,0,337,0],[334,0,338,0],[335,6,336,2],[336,4,336,2],[337,6,336,2,"key"],[337,9,336,2],[338,6,336,2,"value"],[338,11,336,2],[339,8,336,2],[339,12,336,2,"_processConcurrentOperations"],[339,40,336,2],[339,47,336,2,"_asyncToGenerator2"],[339,65,336,2],[339,66,336,2,"default"],[339,73,336,2],[339,75,339,2],[339,86,339,44,"operations"],[339,96,339,73],[339,98,339,90],[340,10,340,4],[340,14,340,10,"chunks"],[340,20,340,16],[340,23,340,19],[340,27,340,23],[340,28,340,24,"chunkArray"],[340,38,340,34],[340,39,340,35,"operations"],[340,49,340,45],[340,51,340,47],[340,55,340,51],[340,56,340,52,"config"],[340,62,340,58],[340,63,340,59,"maxConcurrentOperations"],[340,86,340,82],[340,87,340,83],[341,10,342,4],[341,15,342,9],[341,19,342,15,"chunk"],[341,24,342,20],[341,28,342,24,"chunks"],[341,34,342,30],[341,36,342,32],[342,12,343,6],[342,16,343,12,"promises"],[342,24,343,20],[342,27,343,23,"chunk"],[342,32,343,28],[342,33,343,29,"map"],[342,36,343,32],[342,37,343,33,"operation"],[342,46,343,42],[342,50,343,46],[342,54,343,50],[342,55,343,51,"processOperation"],[342,71,343,67],[342,72,343,68,"operation"],[342,81,343,77],[342,82,343,78],[342,83,343,79],[343,12,344,6],[343,18,344,12,"Promise"],[343,25,344,19],[343,26,344,20,"allSettled"],[343,36,344,30],[343,37,344,31,"promises"],[343,45,344,39],[343,46,344,40],[344,10,345,4],[345,8,346,2],[345,9,346,3],[346,8,346,3],[346,17,339,16,"processConcurrentOperations"],[346,44,339,43,"processConcurrentOperations"],[346,45,339,43,"_x2"],[346,48,339,43],[347,10,339,43],[347,17,339,43,"_processConcurrentOperations"],[347,45,339,43],[347,46,339,43,"apply"],[347,51,339,43],[347,58,339,43,"arguments"],[347,67,339,43],[348,8,339,43],[349,8,339,43],[349,15,339,16,"processConcurrentOperations"],[349,42,339,43],[350,6,339,43],[351,6,348,2],[352,0,349,0],[353,0,350,0],[354,6,348,2],[355,4,348,2],[356,6,348,2,"key"],[356,9,348,2],[357,6,348,2,"value"],[357,11,348,2],[358,8,348,2],[358,12,348,2,"_processOperation"],[358,29,348,2],[358,36,348,2,"_asyncToGenerator2"],[358,54,348,2],[358,55,348,2,"default"],[358,62,348,2],[358,64,351,2],[358,75,351,33,"operation"],[358,84,351,59],[358,86,351,76],[359,10,352,4],[359,14,352,10,"processor"],[359,23,352,19],[359,26,352,22],[359,30,352,26],[359,31,352,27,"processors"],[359,41,352,37],[359,42,352,38,"get"],[359,45,352,41],[359,46,352,42,"operation"],[359,55,352,51],[359,56,352,52,"type"],[359,60,352,56],[359,61,352,57],[360,10,354,4],[360,14,354,8],[360,15,354,9,"processor"],[360,24,354,18],[360,26,354,20],[361,12,355,6],[361,16,355,12,"error"],[361,21,355,17],[361,24,355,20],[361,66,355,62,"operation"],[361,75,355,71],[361,76,355,72,"type"],[361,80,355,76],[361,82,355,78],[362,12,356,6,"logger"],[362,36,356,12],[362,37,356,13,"error"],[362,42,356,18],[362,43,356,19],[362,85,356,61],[362,87,356,63],[363,14,357,8,"operationId"],[363,25,357,19],[363,27,357,21,"operation"],[363,36,357,30],[363,37,357,31,"id"],[363,39,357,33],[364,14,358,8,"type"],[364,18,358,12],[364,20,358,14,"operation"],[364,29,358,23],[364,30,358,24,"type"],[364,34,358,28],[365,14,359,8,"error"],[366,12,360,6],[366,13,360,7],[366,14,360,8],[367,12,362,6],[367,18,362,12,"offlineQueue"],[367,44,362,24],[367,45,362,25,"updateOperationStatus"],[367,66,362,46],[367,67,362,47,"operation"],[367,76,362,56],[367,77,362,57,"id"],[367,79,362,59],[367,81,362,61],[367,89,362,69],[367,91,362,71,"error"],[367,96,362,76],[367,97,362,77],[368,12,363,6],[368,18,363,12,"offlineQueue"],[368,44,363,24],[368,45,363,25,"incrementRetryCount"],[368,64,363,44],[368,65,363,45,"operation"],[368,74,363,54],[368,75,363,55,"id"],[368,77,363,57],[368,78,363,58],[369,12,365,6],[369,16,365,10],[369,17,365,11,"currentSyncProgress"],[369,36,365,30],[369,37,365,31,"failed"],[369,43,365,37],[369,45,365,39],[370,12,366,6],[370,16,366,10],[370,17,366,11,"emitEvent"],[370,26,366,20],[370,27,366,21],[370,45,366,39],[370,47,366,41],[371,14,366,43,"operationId"],[371,25,366,54],[371,27,366,56,"operation"],[371,36,366,65],[371,37,366,66,"id"],[371,39,366,68],[372,14,366,70,"error"],[373,12,366,76],[373,13,366,77],[373,14,366,78],[374,12,367,6],[375,10,368,4],[376,10,370,4],[376,14,370,8],[376,15,370,9,"processor"],[376,24,370,18],[376,25,370,19,"canProcess"],[376,35,370,29],[376,36,370,30,"operation"],[376,45,370,39],[376,46,370,40],[376,48,370,42],[377,12,371,6,"logger"],[377,36,371,12],[377,37,371,13,"info"],[377,41,371,17],[377,42,371,18],[377,99,371,75],[377,101,371,77],[378,14,372,8,"operationId"],[378,25,372,19],[378,27,372,21,"operation"],[378,36,372,30],[378,37,372,31,"id"],[378,39,372,33],[379,14,373,8,"type"],[379,18,373,12],[379,20,373,14,"operation"],[379,29,373,23],[379,30,373,24,"type"],[380,12,374,6],[380,13,374,7],[380,14,374,8],[381,12,375,6],[382,10,376,4],[383,10,378,4],[383,14,378,8],[384,12,379,6],[385,12,380,6],[385,18,380,12,"offlineQueue"],[385,44,380,24],[385,45,380,25,"updateOperationStatus"],[385,66,380,46],[385,67,380,47,"operation"],[385,76,380,56],[385,77,380,57,"id"],[385,79,380,59],[385,81,380,61],[385,93,380,73],[385,94,380,74],[387,12,382,6],[388,12,383,6],[388,16,383,10],[388,17,383,11,"currentSyncProgress"],[388,36,383,30],[388,37,383,31,"currentOperation"],[388,53,383,47],[388,56,383,50],[388,59,383,53,"operation"],[388,68,383,62],[388,69,383,63,"type"],[388,73,383,67],[388,77,383,71,"operation"],[388,86,383,80],[388,87,383,81,"id"],[388,89,383,83],[388,91,383,85],[389,12,384,6],[389,16,384,10],[389,17,384,11,"emitEvent"],[389,26,384,20],[389,27,384,21],[389,42,384,36],[389,44,384,38],[390,14,384,40],[390,17,384,43],[390,21,384,47],[390,22,384,48,"currentSyncProgress"],[391,12,384,68],[391,13,384,69],[391,14,384,70],[392,12,386,6,"logger"],[392,36,386,12],[392,37,386,13,"info"],[392,41,386,17],[392,42,386,18],[392,77,386,53],[392,79,386,55],[393,14,387,8,"operationId"],[393,25,387,19],[393,27,387,21,"operation"],[393,36,387,30],[393,37,387,31,"id"],[393,39,387,33],[394,14,388,8,"type"],[394,18,388,12],[394,20,388,14,"operation"],[394,29,388,23],[394,30,388,24,"type"],[394,34,388,28],[395,14,389,8,"attempt"],[395,21,389,15],[395,23,389,17,"operation"],[395,32,389,26],[395,33,389,27,"retryCount"],[395,43,389,37],[395,46,389,40],[396,12,390,6],[396,13,390,7],[396,14,390,8],[398,12,392,6],[399,12,393,6],[399,18,393,12,"processor"],[399,27,393,21],[399,28,393,22,"process"],[399,35,393,29],[399,36,393,30,"operation"],[399,45,393,39],[399,46,393,40],[401,12,395,6],[402,12,396,6],[402,18,396,12,"offlineQueue"],[402,44,396,24],[402,45,396,25,"updateOperationStatus"],[402,66,396,46],[402,67,396,47,"operation"],[402,76,396,56],[402,77,396,57,"id"],[402,79,396,59],[402,81,396,61],[402,92,396,72],[402,93,396,73],[403,12,398,6],[403,16,398,10],[403,17,398,11,"currentSyncProgress"],[403,36,398,30],[403,37,398,31,"completed"],[403,46,398,40],[403,48,398,42],[404,12,399,6],[404,16,399,10],[404,17,399,11,"emitEvent"],[404,26,399,20],[404,27,399,21],[404,48,399,42],[404,50,399,44],[405,14,400,8,"operationId"],[405,25,400,19],[405,27,400,21,"operation"],[405,36,400,30],[405,37,400,31,"id"],[405,39,400,33],[406,14,401,8,"type"],[406,18,401,12],[406,20,401,14,"operation"],[406,29,401,23],[406,30,401,24,"type"],[407,12,402,6],[407,13,402,7],[407,14,402,8],[408,12,404,6,"logger"],[408,36,404,12],[408,37,404,13,"info"],[408,41,404,17],[408,42,404,18],[408,89,404,65],[408,91,404,67],[409,14,405,8,"operationId"],[409,25,405,19],[409,27,405,21,"operation"],[409,36,405,30],[409,37,405,31,"id"],[409,39,405,33],[410,14,406,8,"type"],[410,18,406,12],[410,20,406,14,"operation"],[410,29,406,23],[410,30,406,24,"type"],[411,12,407,6],[411,13,407,7],[411,14,407,8],[412,10,409,4],[412,11,409,5],[412,12,409,6],[412,19,409,13,"error"],[412,24,409,18],[412,26,409,20],[413,12,410,6,"logger"],[413,36,410,12],[413,37,410,13,"error"],[413,42,410,18],[413,43,410,19],[413,85,410,61],[413,87,410,63],[414,14,411,8,"operationId"],[414,25,411,19],[414,27,411,21,"operation"],[414,36,411,30],[414,37,411,31,"id"],[414,39,411,33],[415,14,412,8,"type"],[415,18,412,12],[415,20,412,14,"operation"],[415,29,412,23],[415,30,412,24,"type"],[415,34,412,28],[416,14,413,8,"error"],[416,19,413,13],[416,21,413,15,"error"],[416,26,413,20],[416,27,413,21,"message"],[416,34,413,28],[417,14,414,8,"attempt"],[417,21,414,15],[417,23,414,17,"operation"],[417,32,414,26],[417,33,414,27,"retryCount"],[417,43,414,37],[417,46,414,40],[418,12,415,6],[418,13,415,7],[418,14,415,8],[419,12,417,6],[419,18,417,12,"offlineQueue"],[419,44,417,24],[419,45,417,25,"updateOperationStatus"],[419,66,417,46],[419,67,417,47,"operation"],[419,76,417,56],[419,77,417,57,"id"],[419,79,417,59],[419,81,417,61],[419,89,417,69],[419,91,417,71,"error"],[419,96,417,76],[419,97,417,77,"message"],[419,104,417,84],[419,105,417,85],[421,12,419,6],[422,12,420,6],[422,16,420,10,"operation"],[422,25,420,19],[422,26,420,20,"retryCount"],[422,36,420,30],[422,39,420,33,"operation"],[422,48,420,42],[422,49,420,43,"maxRetries"],[422,59,420,53],[422,61,420,55],[423,14,421,8],[423,20,421,14,"offlineQueue"],[423,46,421,26],[423,47,421,27,"incrementRetryCount"],[423,66,421,46],[423,67,421,47,"operation"],[423,76,421,56],[423,77,421,57,"id"],[423,79,421,59],[423,80,421,60],[424,12,422,6],[425,12,424,6],[425,16,424,10],[425,17,424,11,"currentSyncProgress"],[425,36,424,30],[425,37,424,31,"failed"],[425,43,424,37],[425,45,424,39],[426,12,425,6],[426,16,425,10],[426,17,425,11,"emitEvent"],[426,26,425,20],[426,27,425,21],[426,45,425,39],[426,47,425,41],[427,14,426,8,"operationId"],[427,25,426,19],[427,27,426,21,"operation"],[427,36,426,30],[427,37,426,31,"id"],[427,39,426,33],[428,14,427,8,"type"],[428,18,427,12],[428,20,427,14,"operation"],[428,29,427,23],[428,30,427,24,"type"],[428,34,427,28],[429,14,428,8,"error"],[429,19,428,13],[429,21,428,15,"error"],[429,26,428,20],[429,27,428,21,"message"],[430,12,429,6],[430,13,429,7],[430,14,429,8],[431,10,430,4],[432,8,431,2],[432,9,431,3],[433,8,431,3],[433,17,351,16,"processOperation"],[433,33,351,32,"processOperation"],[433,34,351,32,"_x3"],[433,37,351,32],[434,10,351,32],[434,17,351,32,"_processOperation"],[434,34,351,32],[434,35,351,32,"apply"],[434,40,351,32],[434,47,351,32,"arguments"],[434,56,351,32],[435,8,351,32],[436,8,351,32],[436,15,351,16,"processOperation"],[436,31,351,32],[437,6,351,32],[438,6,433,2],[439,0,434,0],[440,0,435,0],[441,6,433,2],[442,4,433,2],[443,6,433,2,"key"],[443,9,433,2],[444,6,433,2,"value"],[444,11,433,2],[444,13,436,2],[444,22,436,10,"resetSyncProgress"],[444,39,436,27,"resetSyncProgress"],[444,40,436,27],[444,42,436,36],[445,8,437,4],[445,12,437,8],[445,13,437,9,"currentSyncProgress"],[445,32,437,28],[445,35,437,31],[446,10,438,6,"total"],[446,15,438,11],[446,17,438,13],[446,18,438,14],[447,10,439,6,"completed"],[447,19,439,15],[447,21,439,17],[447,22,439,18],[448,10,440,6,"failed"],[448,16,440,12],[448,18,440,14],[448,19,440,15],[449,10,441,6,"inProgress"],[449,20,441,16],[449,22,441,18],[450,8,442,4],[450,9,442,5],[451,6,443,2],[453,6,445,2],[454,0,446,0],[455,0,447,0],[456,4,445,2],[457,6,445,2,"key"],[457,9,445,2],[458,6,445,2,"value"],[458,11,445,2],[458,13,448,2],[458,22,448,9,"getNetworkInfo"],[458,36,448,23,"getNetworkInfo"],[458,37,448,23],[458,39,448,46],[459,8,449,4],[459,15,449,11],[459,19,449,15],[459,20,449,16,"networkInfo"],[459,31,449,27],[460,6,450,2],[462,6,452,2],[463,0,453,0],[464,0,454,0],[465,4,452,2],[466,6,452,2,"key"],[466,9,452,2],[467,6,452,2,"value"],[467,11,452,2],[467,13,455,2],[467,22,455,9,"getSyncProgress"],[467,37,455,24,"getSyncProgress"],[467,38,455,24],[467,40,455,41],[468,8,456,4],[468,15,456,11],[469,10,456,13],[469,13,456,16],[469,17,456,20],[469,18,456,21,"currentSyncProgress"],[470,8,456,41],[470,9,456,42],[471,6,457,2],[473,6,459,2],[474,0,460,0],[475,0,461,0],[476,4,459,2],[477,6,459,2,"key"],[477,9,459,2],[478,6,459,2,"value"],[478,11,459,2],[478,13,462,2],[478,22,462,9,"isSyncing"],[478,31,462,18,"isSyncing"],[478,32,462,18],[478,34,462,30],[479,8,463,4],[479,15,463,11],[479,19,463,15],[479,20,463,16,"syncInProgress"],[479,34,463,30],[480,6,464,2],[482,6,466,2],[483,0,467,0],[484,0,468,0],[485,4,466,2],[486,6,466,2,"key"],[486,9,466,2],[487,6,466,2,"value"],[487,11,466,2],[488,8,466,2],[488,12,466,2,"_forceSync"],[488,22,466,2],[488,29,466,2,"_asyncToGenerator2"],[488,47,466,2],[488,48,466,2,"default"],[488,55,466,2],[488,57,469,2],[488,70,469,42],[489,10,470,4,"logger"],[489,34,470,10],[489,35,470,11,"info"],[489,39,470,15],[489,40,470,16],[489,75,470,51],[489,76,470,52],[490,10,471,4],[490,14,471,8],[490,15,471,9,"syncInProgress"],[490,29,471,23],[490,32,471,26],[490,37,471,31],[490,38,471,32],[490,39,471,33],[491,10,472,4],[491,16,472,10],[491,20,472,14],[491,21,472,15,"startSync"],[491,30,472,24],[491,31,472,25],[491,32,472,26],[492,8,473,2],[492,9,473,3],[493,8,473,3],[493,17,469,15,"forceSync"],[493,26,469,24,"forceSync"],[493,27,469,24],[494,10,469,24],[494,17,469,24,"_forceSync"],[494,27,469,24],[494,28,469,24,"apply"],[494,33,469,24],[494,40,469,24,"arguments"],[494,49,469,24],[495,8,469,24],[496,8,469,24],[496,15,469,15,"forceSync"],[496,24,469,24],[497,6,469,24],[498,6,475,2],[499,0,476,0],[500,0,477,0],[501,6,475,2],[502,4,475,2],[503,6,475,2,"key"],[503,9,475,2],[504,6,475,2,"value"],[504,11,475,2],[504,13,478,2],[504,22,478,9,"stopSync"],[504,30,478,17,"stopSync"],[504,31,478,17],[504,33,478,26],[505,8,479,4],[505,12,479,8],[505,16,479,12],[505,17,479,13,"syncInterval"],[505,29,479,25],[505,31,479,27],[506,10,480,6,"clearInterval"],[506,23,480,19],[506,24,480,20],[506,28,480,24],[506,29,480,25,"syncInterval"],[506,41,480,37],[506,42,480,38],[507,10,481,6],[507,14,481,10],[507,15,481,11,"syncInterval"],[507,27,481,23],[507,30,481,26],[507,34,481,30],[508,8,482,4],[509,8,483,4,"logger"],[509,32,483,10],[509,33,483,11,"info"],[509,37,483,15],[509,38,483,16],[509,65,483,43],[509,66,483,44],[510,6,484,2],[512,6,486,2],[513,0,487,0],[514,0,488,0],[515,4,486,2],[516,6,486,2,"key"],[516,9,486,2],[517,6,486,2,"value"],[517,11,486,2],[517,13,489,2],[517,22,489,9,"updateConfig"],[517,34,489,21,"updateConfig"],[517,35,489,22,"newConfig"],[517,44,489,52],[517,46,489,60],[518,8,490,4,"Object"],[518,14,490,10],[518,15,490,11,"assign"],[518,21,490,17],[518,22,490,18],[518,26,490,22],[518,27,490,23,"config"],[518,33,490,29],[518,35,490,31,"newConfig"],[518,44,490,40],[518,45,490,41],[520,8,492,4],[521,8,493,4],[521,12,493,8,"newConfig"],[521,21,493,17],[521,22,493,18,"syncInterval"],[521,34,493,30],[521,39,493,35,"undefined"],[521,48,493,44],[521,50,493,46],[522,10,494,6],[522,14,494,10],[522,15,494,11,"startPeriodicSync"],[522,32,494,28],[522,33,494,29],[522,34,494,30],[523,8,495,4],[524,8,497,4,"logger"],[524,32,497,10],[524,33,497,11,"info"],[524,37,497,15],[524,38,497,16],[524,74,497,52],[524,76,497,54,"newConfig"],[524,85,497,63],[524,86,497,64],[525,6,498,2],[527,6,500,2],[528,0,501,0],[529,0,502,0],[530,4,500,2],[531,6,500,2,"key"],[531,9,500,2],[532,6,500,2,"value"],[532,11,500,2],[532,13,503,2],[532,22,503,9,"addEventListener"],[532,38,503,25,"addEventListener"],[532,39,503,26,"eventType"],[532,48,503,50],[532,50,503,52,"listener"],[532,58,503,79],[532,60,503,87],[533,8,504,4],[533,12,504,8],[533,13,504,9],[533,17,504,13],[533,18,504,14,"eventListeners"],[533,32,504,28],[533,33,504,29,"has"],[533,36,504,32],[533,37,504,33,"eventType"],[533,46,504,42],[533,47,504,43],[533,49,504,45],[534,10,505,6],[534,14,505,10],[534,15,505,11,"eventListeners"],[534,29,505,25],[534,30,505,26,"set"],[534,33,505,29],[534,34,505,30,"eventType"],[534,43,505,39],[534,45,505,41],[534,49,505,45,"Set"],[534,52,505,48],[534,53,505,49],[534,54,505,50],[534,55,505,51],[535,8,506,4],[536,8,507,4],[536,12,507,8],[536,13,507,9,"eventListeners"],[536,27,507,23],[536,28,507,24,"get"],[536,31,507,27],[536,32,507,28,"eventType"],[536,41,507,37],[536,42,507,38],[536,43,507,40,"add"],[536,46,507,43],[536,47,507,44,"listener"],[536,55,507,52],[536,56,507,53],[537,6,508,2],[539,6,510,2],[540,0,511,0],[541,0,512,0],[542,4,510,2],[543,6,510,2,"key"],[543,9,510,2],[544,6,510,2,"value"],[544,11,510,2],[544,13,513,2],[544,22,513,9,"removeEventListener"],[544,41,513,28,"removeEventListener"],[544,42,513,29,"eventType"],[544,51,513,53],[544,53,513,55,"listener"],[544,61,513,82],[544,63,513,90],[545,8,514,4],[545,12,514,10,"listeners"],[545,21,514,19],[545,24,514,22],[545,28,514,26],[545,29,514,27,"eventListeners"],[545,43,514,41],[545,44,514,42,"get"],[545,47,514,45],[545,48,514,46,"eventType"],[545,57,514,55],[545,58,514,56],[546,8,515,4],[546,12,515,8,"listeners"],[546,21,515,17],[546,23,515,19],[547,10,516,6,"listeners"],[547,19,516,15],[547,20,516,16,"delete"],[547,26,516,22],[547,27,516,23,"listener"],[547,35,516,31],[547,36,516,32],[548,8,517,4],[549,6,518,2],[551,6,520,2],[552,0,521,0],[553,0,522,0],[554,4,520,2],[555,6,520,2,"key"],[555,9,520,2],[556,6,520,2,"value"],[556,11,520,2],[556,13,523,2],[556,22,523,10,"emitEvent"],[556,31,523,19,"emitEvent"],[556,32,523,20,"type"],[556,36,523,39],[556,38,523,41,"data"],[556,42,523,51],[556,44,523,59],[557,8,524,4],[557,12,524,10,"event"],[557,17,524,26],[557,20,524,29],[558,10,525,6,"type"],[558,14,525,10],[559,10,526,6,"data"],[559,14,526,10],[560,10,527,6,"timestamp"],[560,19,527,15],[560,21,527,17,"Date"],[560,25,527,21],[560,26,527,22,"now"],[560,29,527,25],[560,30,527,26],[561,8,528,4],[561,9,528,5],[562,8,530,4],[562,12,530,10,"listeners"],[562,21,530,19],[562,24,530,22],[562,28,530,26],[562,29,530,27,"eventListeners"],[562,43,530,41],[562,44,530,42,"get"],[562,47,530,45],[562,48,530,46,"type"],[562,52,530,50],[562,53,530,51],[563,8,531,4],[563,12,531,8,"listeners"],[563,21,531,17],[563,23,531,19],[564,10,532,6,"listeners"],[564,19,532,15],[564,20,532,16,"forEach"],[564,27,532,23],[564,28,532,24,"listener"],[564,36,532,32],[564,40,532,36],[565,12,533,8],[565,16,533,12],[566,14,534,10,"listener"],[566,22,534,18],[566,23,534,19,"event"],[566,28,534,24],[566,29,534,25],[567,12,535,8],[567,13,535,9],[567,14,535,10],[567,21,535,17,"error"],[567,26,535,22],[567,28,535,24],[568,14,536,10,"logger"],[568,38,536,16],[568,39,536,17,"error"],[568,44,536,22],[568,45,536,23],[568,80,536,58],[568,82,536,60],[569,16,536,62,"eventType"],[569,25,536,71],[569,27,536,73,"type"],[569,31,536,77],[570,16,536,79,"error"],[571,14,536,85],[571,15,536,86],[571,16,536,87],[572,12,537,8],[573,10,538,6],[573,11,538,7],[573,12,538,8],[574,8,539,4],[575,6,540,2],[577,6,542,2],[578,0,543,0],[579,0,544,0],[580,4,542,2],[581,6,542,2,"key"],[581,9,542,2],[582,6,542,2,"value"],[582,11,542,2],[582,13,545,2],[582,22,545,10,"chunkArray"],[582,32,545,20,"chunkArray"],[582,33,545,24,"array"],[582,38,545,34],[582,40,545,36,"chunkSize"],[582,49,545,53],[582,51,545,62],[583,8,546,4],[583,12,546,10,"chunks"],[583,18,546,23],[583,21,546,26],[583,23,546,28],[584,8,547,4],[584,13,547,9],[584,17,547,13,"i"],[584,18,547,14],[584,21,547,17],[584,22,547,18],[584,24,547,20,"i"],[584,25,547,21],[584,28,547,24,"array"],[584,33,547,29],[584,34,547,30,"length"],[584,40,547,36],[584,42,547,38,"i"],[584,43,547,39],[584,47,547,43,"chunkSize"],[584,56,547,52],[584,58,547,54],[585,10,548,6,"chunks"],[585,16,548,12],[585,17,548,13,"push"],[585,21,548,17],[585,22,548,18,"array"],[585,27,548,23],[585,28,548,24,"slice"],[585,33,548,29],[585,34,548,30,"i"],[585,35,548,31],[585,37,548,33,"i"],[585,38,548,34],[585,41,548,37,"chunkSize"],[585,50,548,46],[585,51,548,47],[585,52,548,48],[586,8,549,4],[587,8,550,4],[587,15,550,11,"chunks"],[587,21,550,17],[588,6,551,2],[590,6,553,2],[591,0,554,0],[592,0,555,0],[593,4,553,2],[594,6,553,2,"key"],[594,9,553,2],[595,6,553,2,"value"],[595,11,553,2],[595,13,556,2],[595,22,556,9,"getSyncStats"],[595,34,556,21,"getSyncStats"],[595,35,556,21],[595,37,561,4],[596,8,562,4],[596,15,562,11],[597,10,563,6,"queueStats"],[597,20,563,16],[597,22,563,18,"offlineQueue"],[597,48,563,30],[597,49,563,31,"getQueueStats"],[597,62,563,44],[597,63,563,45],[597,64,563,46],[598,10,564,6,"networkInfo"],[598,21,564,17],[598,23,564,19],[598,27,564,23],[598,28,564,24,"networkInfo"],[598,39,564,35],[599,10,565,6,"syncProgress"],[599,22,565,18],[599,24,565,20],[599,28,565,24],[599,29,565,25,"currentSyncProgress"],[599,48,565,44],[600,10,566,6,"isSyncing"],[600,19,566,15],[600,21,566,17],[600,25,566,21],[600,26,566,22,"syncInProgress"],[601,8,567,4],[601,9,567,5],[602,6,568,2],[604,6,570,2],[605,0,571,0],[606,0,572,0],[607,4,570,2],[608,6,570,2,"key"],[608,9,570,2],[609,6,570,2,"value"],[609,11,570,2],[609,13,573,2],[609,22,573,9,"cleanup"],[609,29,573,16,"cleanup"],[609,30,573,16],[609,32,573,25],[610,8,574,4],[610,12,574,8],[610,13,574,9,"stopSync"],[610,21,574,17],[610,22,574,18],[610,23,574,19],[611,8,575,4],[611,12,575,8],[611,13,575,9,"eventListeners"],[611,27,575,23],[611,28,575,24,"clear"],[611,33,575,29],[611,34,575,30],[611,35,575,31],[612,8,576,4,"logger"],[612,32,576,10],[612,33,576,11,"info"],[612,37,576,15],[612,38,576,16],[612,70,576,48],[612,71,576,49],[613,6,577,2],[614,4,577,3],[615,6,577,3,"key"],[615,9,577,3],[616,6,577,3,"value"],[616,11,577,3],[616,13,114,2],[616,22,114,16,"getInstance"],[616,33,114,27,"getInstance"],[616,34,114,27],[616,36,114,43],[617,8,115,4],[617,12,115,8],[617,13,115,9,"SyncManager"],[617,24,115,20],[617,25,115,21,"instance"],[617,33,115,29],[617,35,115,31],[618,10,116,6,"SyncManager"],[618,21,116,17],[618,22,116,18,"instance"],[618,30,116,26],[618,33,116,29],[618,37,116,33,"SyncManager"],[618,48,116,44],[618,49,116,45],[618,50,116,46],[619,8,117,4],[620,8,118,4],[620,15,118,11,"SyncManager"],[620,26,118,22],[620,27,118,23,"instance"],[620,35,118,31],[621,6,119,2],[622,4,119,3],[623,2,119,3],[623,7,580,0],[624,2,581,7],[624,6,581,13,"syncManager"],[624,17,581,24],[624,20,581,24,"exports"],[624,27,581,24],[624,28,581,24,"syncManager"],[624,39,581,24],[624,42,581,27,"SyncManager"],[624,53,581,38],[624,54,581,39,"getInstance"],[624,65,581,50],[624,66,581,51],[624,67,581,52],[625,0,581,53],[625,3]],"functionMap":{"names":["<global>","SyncManager","constructor","getInstance","initializeNetworkMonitoring","handleNetworkStateChange","startSync._catch$argument_0","initializeAppStateMonitoring","handleAppStateChange","startPeriodicSync","setInterval$argument_0","canSync","registerProcessor","unregisterProcessor","startSync","performSync","readyOperations.filter$argument_0","processBatch","processConcurrentOperations","chunk.map$argument_0","processOperation","resetSyncProgress","getNetworkInfo","getSyncProgress","isSyncing","forceSync","stopSync","updateConfig","addEventListener","removeEventListener","emitEvent","listeners.forEach$argument_0","chunkArray","getSyncStats","cleanup"],"mappings":"AAA;OC8E;EC0B;GDI;EEK;GFK;EGK;GHM;EIK;6BCsB;ODE;GJE;EMK;GNG;EOK;6BFO;OEE;GPE;EQK;sCCM;iCJE;WIE;ODE;GRE;EUK;GVgB;EWK;GXG;EYK;GZG;EaK;GbyC;EcK;wDCoB,8BD;GdM;EgBK;GhBW;EiBK;iCCI,6CD;GjBG;EmBK;GnBgF;EoBK;GpBO;EqBK;GrBE;EsBK;GtBE;EuBK;GvBE;EwBK;GxBI;EyBK;GzBM;E0BK;G1BS;E2BK;G3BK;E4BK;G5BK;E6BK;wBCS;ODM;G7BE;E+BK;G/BM;EgCK;GhCY;EiCK;GjCI;CDC"}},"type":"js/module"}]}