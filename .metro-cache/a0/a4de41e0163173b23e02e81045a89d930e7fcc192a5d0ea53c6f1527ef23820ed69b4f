{"dependencies":[{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var util = require(_dependencyMap[0], \"./util\");\n  function createNdefRecord(tnf, type, id, payload) {\n    if (tnf === undefined || type === undefined || id === undefined || payload === undefined) {\n      throw new Error('missing required param');\n    }\n\n    // store type as String so it's easier to compare\n    if (type instanceof Array) {\n      type = util.bytesToString(type);\n    }\n\n    // in the future, id could be a String\n    if (!(id instanceof Array)) {\n      id = util.stringToBytes(id);\n    }\n\n    // Payload must be binary\n    if (!(payload instanceof Array)) {\n      payload = util.stringToBytes(payload);\n    }\n    return {\n      tnf: tnf,\n      type: type,\n      id: id,\n      payload: payload\n    };\n  }\n  function encodeNdefMessage(ndefRecords) {\n    var encodeTnf = function encodeTnf(_ref) {\n      var mb = _ref.mb,\n        me = _ref.me,\n        cf = _ref.cf,\n        sr = _ref.sr,\n        il = _ref.il,\n        tnf = _ref.tnf;\n      var value = tnf;\n      if (mb) {\n        value = value | 0x80;\n      }\n      if (me) {\n        value = value | 0x40;\n      }\n\n      // note if cf: me, mb, li must be false and tnf must be 0x6\n      if (cf) {\n        value = value | 0x20;\n      }\n      if (sr) {\n        value = value | 0x10;\n      }\n      if (il) {\n        value = value | 0x8;\n      }\n      return value;\n    };\n    var encoded = [],\n      tnf_byte,\n      record_type,\n      payload_length,\n      id_length,\n      i,\n      mb,\n      me,\n      // messageBegin, messageEnd\n      cf = false,\n      // chunkFlag TODO implement\n      sr,\n      // boolean shortRecord\n      il; // boolean idLengthFieldIsPresent\n\n    for (i = 0; i < ndefRecords.length; i++) {\n      mb = i === 0;\n      me = i === ndefRecords.length - 1;\n      sr = ndefRecords[i].payload.length < 0xff;\n      il = ndefRecords[i].id.length > 0;\n      tnf_byte = encodeTnf({\n        mb: mb,\n        me: me,\n        cf: cf,\n        sr: sr,\n        il: il,\n        tnf: ndefRecords[i].tnf\n      });\n      encoded.push(tnf_byte);\n\n      // type is stored as String, converting to bytes for storage\n      record_type = util.stringToBytes(ndefRecords[i].type);\n      encoded.push(record_type.length);\n      if (sr) {\n        payload_length = ndefRecords[i].payload.length;\n        encoded.push(payload_length);\n      } else {\n        payload_length = ndefRecords[i].payload.length;\n        // 4 bytes\n        encoded.push(payload_length >> 24);\n        encoded.push(payload_length >> 16);\n        encoded.push(payload_length >> 8);\n        encoded.push(payload_length & 0xff);\n      }\n      if (il) {\n        id_length = ndefRecords[i].id.length;\n        encoded.push(id_length);\n      }\n      encoded = encoded.concat(record_type);\n      if (il) {\n        encoded = encoded.concat(ndefRecords[i].id);\n      }\n      encoded = encoded.concat(ndefRecords[i].payload);\n    }\n    return encoded;\n  }\n  function decodeNdefMessage(ndefBytes) {\n    var decodeTnf = function decodeTnf(tnf_byte) {\n      return {\n        mb: (tnf_byte & 0x80) !== 0,\n        me: (tnf_byte & 0x40) !== 0,\n        cf: (tnf_byte & 0x20) !== 0,\n        sr: (tnf_byte & 0x10) !== 0,\n        il: (tnf_byte & 0x8) !== 0,\n        tnf: tnf_byte & 0x7\n      };\n    };\n\n    // ndefBytes can be an array of bytes e.g. [0x03, 0x31, 0xd1] or a Buffer\n    var bytes;\n    if (ndefBytes instanceof Array) {\n      bytes = ndefBytes.slice(0);\n    } else {\n      throw new Error('ndef.decodeMessage requires a Buffer or an Array of bytes');\n    }\n    bytes = bytes.slice(0); // clone since parsing is destructive\n    var ndef_message = [],\n      tnf_byte,\n      header,\n      type_length = 0,\n      payload_length = 0,\n      id_length = 0,\n      record_type = [],\n      id = [],\n      payload = [];\n    while (bytes.length) {\n      tnf_byte = bytes.shift();\n      header = decodeTnf(tnf_byte);\n      type_length = bytes.shift();\n      if (header.sr) {\n        payload_length = bytes.shift();\n      } else {\n        // next 4 bytes are length\n        payload_length = (0xff & bytes.shift()) << 24 | (0xff & bytes.shift()) << 16 | (0xff & bytes.shift()) << 8 | 0xff & bytes.shift();\n      }\n      id_length = header.il ? bytes.shift() : 0;\n      record_type = bytes.splice(0, type_length);\n      id = bytes.splice(0, id_length);\n      payload = bytes.splice(0, payload_length);\n      ndef_message.push(createNdefRecord(header.tnf, record_type, id, payload));\n      if (header.me) {\n        break;\n      } // last message\n    }\n    return ndef_message;\n  }\n  function equalToRecordType(record, tnf, type) {\n    if (record.tnf === tnf) {\n      if (Array.isArray(record.type)) {\n        return util.bytesToString(record.type) === type;\n      } else {\n        return record.type === type;\n      }\n    }\n    return record.tnf === tnf && record.type === type;\n  }\n  module.exports = {\n    createNdefRecord: createNdefRecord,\n    encodeNdefMessage: encodeNdefMessage,\n    decodeNdefMessage: decodeNdefMessage,\n    equalToRecordType: equalToRecordType\n  };\n});","lineCount":179,"map":[[2,2,1,0],[2,6,1,6,"util"],[2,10,1,10],[2,13,1,13,"require"],[2,20,1,20],[2,21,1,20,"_dependencyMap"],[2,35,1,20],[2,48,1,29],[2,49,1,30],[3,2,3,0],[3,11,3,9,"createNdefRecord"],[3,27,3,25,"createNdefRecord"],[3,28,3,26,"tnf"],[3,31,3,29],[3,33,3,31,"type"],[3,37,3,35],[3,39,3,37,"id"],[3,41,3,39],[3,43,3,41,"payload"],[3,50,3,48],[3,52,3,50],[4,4,4,2],[4,8,5,4,"tnf"],[4,11,5,7],[4,16,5,12,"undefined"],[4,25,5,21],[4,29,6,4,"type"],[4,33,6,8],[4,38,6,13,"undefined"],[4,47,6,22],[4,51,7,4,"id"],[4,53,7,6],[4,58,7,11,"undefined"],[4,67,7,20],[4,71,8,4,"payload"],[4,78,8,11],[4,83,8,16,"undefined"],[4,92,8,25],[4,94,9,4],[5,6,10,4],[5,12,10,10],[5,16,10,14,"Error"],[5,21,10,19],[5,22,10,20],[5,46,10,44],[5,47,10,45],[6,4,11,2],[8,4,13,2],[9,4,14,2],[9,8,14,6,"type"],[9,12,14,10],[9,24,14,22,"Array"],[9,29,14,27],[9,31,14,29],[10,6,15,4,"type"],[10,10,15,8],[10,13,15,11,"util"],[10,17,15,15],[10,18,15,16,"bytesToString"],[10,31,15,29],[10,32,15,30,"type"],[10,36,15,34],[10,37,15,35],[11,4,16,2],[13,4,18,2],[14,4,19,2],[14,8,19,6],[14,10,19,8,"id"],[14,12,19,10],[14,24,19,22,"Array"],[14,29,19,27],[14,30,19,28],[14,32,19,30],[15,6,20,4,"id"],[15,8,20,6],[15,11,20,9,"util"],[15,15,20,13],[15,16,20,14,"stringToBytes"],[15,29,20,27],[15,30,20,28,"id"],[15,32,20,30],[15,33,20,31],[16,4,21,2],[18,4,23,2],[19,4,24,2],[19,8,24,6],[19,10,24,8,"payload"],[19,17,24,15],[19,29,24,27,"Array"],[19,34,24,32],[19,35,24,33],[19,37,24,35],[20,6,25,4,"payload"],[20,13,25,11],[20,16,25,14,"util"],[20,20,25,18],[20,21,25,19,"stringToBytes"],[20,34,25,32],[20,35,25,33,"payload"],[20,42,25,40],[20,43,25,41],[21,4,26,2],[22,4,28,2],[22,11,28,9],[23,6,29,4,"tnf"],[23,9,29,7],[23,11,29,9,"tnf"],[23,14,29,12],[24,6,30,4,"type"],[24,10,30,8],[24,12,30,10,"type"],[24,16,30,14],[25,6,31,4,"id"],[25,8,31,6],[25,10,31,8,"id"],[25,12,31,10],[26,6,32,4,"payload"],[26,13,32,11],[26,15,32,13,"payload"],[27,4,33,2],[27,5,33,3],[28,2,34,0],[29,2,36,0],[29,11,36,9,"encodeNdefMessage"],[29,28,36,26,"encodeNdefMessage"],[29,29,36,27,"ndefRecords"],[29,40,36,38],[29,42,36,40],[30,4,37,2],[30,8,37,8,"encodeTnf"],[30,17,37,17],[30,20,37,20],[30,29,37,8,"encodeTnf"],[30,38,37,17,"encodeTnf"],[30,39,37,17,"_ref"],[30,43,37,17],[30,45,37,51],[31,6,37,51],[31,10,37,22,"mb"],[31,12,37,24],[31,15,37,24,"_ref"],[31,19,37,24],[31,20,37,22,"mb"],[31,22,37,24],[32,8,37,26,"me"],[32,10,37,28],[32,13,37,28,"_ref"],[32,17,37,28],[32,18,37,26,"me"],[32,20,37,28],[33,8,37,30,"cf"],[33,10,37,32],[33,13,37,32,"_ref"],[33,17,37,32],[33,18,37,30,"cf"],[33,20,37,32],[34,8,37,34,"sr"],[34,10,37,36],[34,13,37,36,"_ref"],[34,17,37,36],[34,18,37,34,"sr"],[34,20,37,36],[35,8,37,38,"il"],[35,10,37,40],[35,13,37,40,"_ref"],[35,17,37,40],[35,18,37,38,"il"],[35,20,37,40],[36,8,37,42,"tnf"],[36,11,37,45],[36,14,37,45,"_ref"],[36,18,37,45],[36,19,37,42,"tnf"],[36,22,37,45],[37,6,38,4],[37,10,38,8,"value"],[37,15,38,13],[37,18,38,16,"tnf"],[37,21,38,19],[38,6,40,4],[38,10,40,8,"mb"],[38,12,40,10],[38,14,40,12],[39,8,41,6,"value"],[39,13,41,11],[39,16,41,14,"value"],[39,21,41,19],[39,24,41,22],[39,28,41,26],[40,6,42,4],[41,6,44,4],[41,10,44,8,"me"],[41,12,44,10],[41,14,44,12],[42,8,45,6,"value"],[42,13,45,11],[42,16,45,14,"value"],[42,21,45,19],[42,24,45,22],[42,28,45,26],[43,6,46,4],[45,6,48,4],[46,6,49,4],[46,10,49,8,"cf"],[46,12,49,10],[46,14,49,12],[47,8,50,6,"value"],[47,13,50,11],[47,16,50,14,"value"],[47,21,50,19],[47,24,50,22],[47,28,50,26],[48,6,51,4],[49,6,53,4],[49,10,53,8,"sr"],[49,12,53,10],[49,14,53,12],[50,8,54,6,"value"],[50,13,54,11],[50,16,54,14,"value"],[50,21,54,19],[50,24,54,22],[50,28,54,26],[51,6,55,4],[52,6,57,4],[52,10,57,8,"il"],[52,12,57,10],[52,14,57,12],[53,8,58,6,"value"],[53,13,58,11],[53,16,58,14,"value"],[53,21,58,19],[53,24,58,22],[53,27,58,25],[54,6,59,4],[55,6,61,4],[55,13,61,11,"value"],[55,18,61,16],[56,4,62,2],[56,5,62,3],[57,4,64,2],[57,8,64,6,"encoded"],[57,15,64,13],[57,18,64,16],[57,20,64,18],[58,6,65,4,"tnf_byte"],[58,14,65,12],[59,6,66,4,"record_type"],[59,17,66,15],[60,6,67,4,"payload_length"],[60,20,67,18],[61,6,68,4,"id_length"],[61,15,68,13],[62,6,69,4,"i"],[62,7,69,5],[63,6,70,4,"mb"],[63,8,70,6],[64,6,71,4,"me"],[64,8,71,6],[65,6,71,8],[66,6,72,4,"cf"],[66,8,72,6],[66,11,72,9],[66,16,72,14],[67,6,72,16],[68,6,73,4,"sr"],[68,8,73,6],[69,6,73,8],[70,6,74,4,"il"],[70,8,74,6],[70,9,74,7],[70,10,74,8],[72,4,76,2],[72,9,76,7,"i"],[72,10,76,8],[72,13,76,11],[72,14,76,12],[72,16,76,14,"i"],[72,17,76,15],[72,20,76,18,"ndefRecords"],[72,31,76,29],[72,32,76,30,"length"],[72,38,76,36],[72,40,76,38,"i"],[72,41,76,39],[72,43,76,41],[72,45,76,43],[73,6,77,4,"mb"],[73,8,77,6],[73,11,77,9,"i"],[73,12,77,10],[73,17,77,15],[73,18,77,16],[74,6,78,4,"me"],[74,8,78,6],[74,11,78,9,"i"],[74,12,78,10],[74,17,78,15,"ndefRecords"],[74,28,78,26],[74,29,78,27,"length"],[74,35,78,33],[74,38,78,36],[74,39,78,37],[75,6,79,4,"sr"],[75,8,79,6],[75,11,79,9,"ndefRecords"],[75,22,79,20],[75,23,79,21,"i"],[75,24,79,22],[75,25,79,23],[75,26,79,24,"payload"],[75,33,79,31],[75,34,79,32,"length"],[75,40,79,38],[75,43,79,41],[75,47,79,45],[76,6,80,4,"il"],[76,8,80,6],[76,11,80,9,"ndefRecords"],[76,22,80,20],[76,23,80,21,"i"],[76,24,80,22],[76,25,80,23],[76,26,80,24,"id"],[76,28,80,26],[76,29,80,27,"length"],[76,35,80,33],[76,38,80,36],[76,39,80,37],[77,6,81,4,"tnf_byte"],[77,14,81,12],[77,17,81,15,"encodeTnf"],[77,26,81,24],[77,27,81,25],[78,8,81,26,"mb"],[78,10,81,28],[78,12,81,26,"mb"],[78,14,81,28],[79,8,81,30,"me"],[79,10,81,32],[79,12,81,30,"me"],[79,14,81,32],[80,8,81,34,"cf"],[80,10,81,36],[80,12,81,34,"cf"],[80,14,81,36],[81,8,81,38,"sr"],[81,10,81,40],[81,12,81,38,"sr"],[81,14,81,40],[82,8,81,42,"il"],[82,10,81,44],[82,12,81,42,"il"],[82,14,81,44],[83,8,81,46,"tnf"],[83,11,81,49],[83,13,81,51,"ndefRecords"],[83,24,81,62],[83,25,81,63,"i"],[83,26,81,64],[83,27,81,65],[83,28,81,66,"tnf"],[84,6,81,69],[84,7,81,70],[84,8,81,71],[85,6,82,4,"encoded"],[85,13,82,11],[85,14,82,12,"push"],[85,18,82,16],[85,19,82,17,"tnf_byte"],[85,27,82,25],[85,28,82,26],[87,6,84,4],[88,6,85,4,"record_type"],[88,17,85,15],[88,20,85,18,"util"],[88,24,85,22],[88,25,85,23,"stringToBytes"],[88,38,85,36],[88,39,85,37,"ndefRecords"],[88,50,85,48],[88,51,85,49,"i"],[88,52,85,50],[88,53,85,51],[88,54,85,52,"type"],[88,58,85,56],[88,59,85,57],[89,6,86,4,"encoded"],[89,13,86,11],[89,14,86,12,"push"],[89,18,86,16],[89,19,86,17,"record_type"],[89,30,86,28],[89,31,86,29,"length"],[89,37,86,35],[89,38,86,36],[90,6,88,4],[90,10,88,8,"sr"],[90,12,88,10],[90,14,88,12],[91,8,89,6,"payload_length"],[91,22,89,20],[91,25,89,23,"ndefRecords"],[91,36,89,34],[91,37,89,35,"i"],[91,38,89,36],[91,39,89,37],[91,40,89,38,"payload"],[91,47,89,45],[91,48,89,46,"length"],[91,54,89,52],[92,8,90,6,"encoded"],[92,15,90,13],[92,16,90,14,"push"],[92,20,90,18],[92,21,90,19,"payload_length"],[92,35,90,33],[92,36,90,34],[93,6,91,4],[93,7,91,5],[93,13,91,11],[94,8,92,6,"payload_length"],[94,22,92,20],[94,25,92,23,"ndefRecords"],[94,36,92,34],[94,37,92,35,"i"],[94,38,92,36],[94,39,92,37],[94,40,92,38,"payload"],[94,47,92,45],[94,48,92,46,"length"],[94,54,92,52],[95,8,93,6],[96,8,94,6,"encoded"],[96,15,94,13],[96,16,94,14,"push"],[96,20,94,18],[96,21,94,19,"payload_length"],[96,35,94,33],[96,39,94,37],[96,41,94,39],[96,42,94,40],[97,8,95,6,"encoded"],[97,15,95,13],[97,16,95,14,"push"],[97,20,95,18],[97,21,95,19,"payload_length"],[97,35,95,33],[97,39,95,37],[97,41,95,39],[97,42,95,40],[98,8,96,6,"encoded"],[98,15,96,13],[98,16,96,14,"push"],[98,20,96,18],[98,21,96,19,"payload_length"],[98,35,96,33],[98,39,96,37],[98,40,96,38],[98,41,96,39],[99,8,97,6,"encoded"],[99,15,97,13],[99,16,97,14,"push"],[99,20,97,18],[99,21,97,19,"payload_length"],[99,35,97,33],[99,38,97,36],[99,42,97,40],[99,43,97,41],[100,6,98,4],[101,6,100,4],[101,10,100,8,"il"],[101,12,100,10],[101,14,100,12],[102,8,101,6,"id_length"],[102,17,101,15],[102,20,101,18,"ndefRecords"],[102,31,101,29],[102,32,101,30,"i"],[102,33,101,31],[102,34,101,32],[102,35,101,33,"id"],[102,37,101,35],[102,38,101,36,"length"],[102,44,101,42],[103,8,102,6,"encoded"],[103,15,102,13],[103,16,102,14,"push"],[103,20,102,18],[103,21,102,19,"id_length"],[103,30,102,28],[103,31,102,29],[104,6,103,4],[105,6,105,4,"encoded"],[105,13,105,11],[105,16,105,14,"encoded"],[105,23,105,21],[105,24,105,22,"concat"],[105,30,105,28],[105,31,105,29,"record_type"],[105,42,105,40],[105,43,105,41],[106,6,107,4],[106,10,107,8,"il"],[106,12,107,10],[106,14,107,12],[107,8,108,6,"encoded"],[107,15,108,13],[107,18,108,16,"encoded"],[107,25,108,23],[107,26,108,24,"concat"],[107,32,108,30],[107,33,108,31,"ndefRecords"],[107,44,108,42],[107,45,108,43,"i"],[107,46,108,44],[107,47,108,45],[107,48,108,46,"id"],[107,50,108,48],[107,51,108,49],[108,6,109,4],[109,6,111,4,"encoded"],[109,13,111,11],[109,16,111,14,"encoded"],[109,23,111,21],[109,24,111,22,"concat"],[109,30,111,28],[109,31,111,29,"ndefRecords"],[109,42,111,40],[109,43,111,41,"i"],[109,44,111,42],[109,45,111,43],[109,46,111,44,"payload"],[109,53,111,51],[109,54,111,52],[110,4,112,2],[111,4,114,2],[111,11,114,9,"encoded"],[111,18,114,16],[112,2,115,0],[113,2,117,0],[113,11,117,9,"decodeNdefMessage"],[113,28,117,26,"decodeNdefMessage"],[113,29,117,27,"ndefBytes"],[113,38,117,36],[113,40,117,38],[114,4,118,2],[114,8,118,8,"decodeTnf"],[114,17,118,17],[114,20,118,20],[114,29,118,8,"decodeTnf"],[114,38,118,17,"decodeTnf"],[114,39,118,21,"tnf_byte"],[114,47,118,29],[115,6,118,29],[115,13,118,35],[116,8,119,4,"mb"],[116,10,119,6],[116,12,119,8],[116,13,119,9,"tnf_byte"],[116,21,119,17],[116,24,119,20],[116,28,119,24],[116,34,119,30],[116,35,119,31],[117,8,120,4,"me"],[117,10,120,6],[117,12,120,8],[117,13,120,9,"tnf_byte"],[117,21,120,17],[117,24,120,20],[117,28,120,24],[117,34,120,30],[117,35,120,31],[118,8,121,4,"cf"],[118,10,121,6],[118,12,121,8],[118,13,121,9,"tnf_byte"],[118,21,121,17],[118,24,121,20],[118,28,121,24],[118,34,121,30],[118,35,121,31],[119,8,122,4,"sr"],[119,10,122,6],[119,12,122,8],[119,13,122,9,"tnf_byte"],[119,21,122,17],[119,24,122,20],[119,28,122,24],[119,34,122,30],[119,35,122,31],[120,8,123,4,"il"],[120,10,123,6],[120,12,123,8],[120,13,123,9,"tnf_byte"],[120,21,123,17],[120,24,123,20],[120,27,123,23],[120,33,123,29],[120,34,123,30],[121,8,124,4,"tnf"],[121,11,124,7],[121,13,124,9,"tnf_byte"],[121,21,124,17],[121,24,124,20],[122,6,125,2],[122,7,125,3],[123,4,125,3],[123,5,125,4],[125,4,127,2],[126,4,128,2],[126,8,128,6,"bytes"],[126,13,128,11],[127,4,129,2],[127,8,129,6,"ndefBytes"],[127,17,129,15],[127,29,129,27,"Array"],[127,34,129,32],[127,36,129,34],[128,6,130,4,"bytes"],[128,11,130,9],[128,14,130,12,"ndefBytes"],[128,23,130,21],[128,24,130,22,"slice"],[128,29,130,27],[128,30,130,28],[128,31,130,29],[128,32,130,30],[129,4,131,2],[129,5,131,3],[129,11,131,9],[130,6,132,4],[130,12,132,10],[130,16,132,14,"Error"],[130,21,132,19],[130,22,133,6],[130,81,134,4],[130,82,134,5],[131,4,135,2],[132,4,137,2,"bytes"],[132,9,137,7],[132,12,137,10,"bytes"],[132,17,137,15],[132,18,137,16,"slice"],[132,23,137,21],[132,24,137,22],[132,25,137,23],[132,26,137,24],[132,27,137,25],[132,28,137,26],[133,4,138,2],[133,8,138,6,"ndef_message"],[133,20,138,18],[133,23,138,21],[133,25,138,23],[134,6,139,4,"tnf_byte"],[134,14,139,12],[135,6,140,4,"header"],[135,12,140,10],[136,6,141,4,"type_length"],[136,17,141,15],[136,20,141,18],[136,21,141,19],[137,6,142,4,"payload_length"],[137,20,142,18],[137,23,142,21],[137,24,142,22],[138,6,143,4,"id_length"],[138,15,143,13],[138,18,143,16],[138,19,143,17],[139,6,144,4,"record_type"],[139,17,144,15],[139,20,144,18],[139,22,144,20],[140,6,145,4,"id"],[140,8,145,6],[140,11,145,9],[140,13,145,11],[141,6,146,4,"payload"],[141,13,146,11],[141,16,146,14],[141,18,146,16],[142,4,148,2],[142,11,148,9,"bytes"],[142,16,148,14],[142,17,148,15,"length"],[142,23,148,21],[142,25,148,23],[143,6,149,4,"tnf_byte"],[143,14,149,12],[143,17,149,15,"bytes"],[143,22,149,20],[143,23,149,21,"shift"],[143,28,149,26],[143,29,149,27],[143,30,149,28],[144,6,150,4,"header"],[144,12,150,10],[144,15,150,13,"decodeTnf"],[144,24,150,22],[144,25,150,23,"tnf_byte"],[144,33,150,31],[144,34,150,32],[145,6,152,4,"type_length"],[145,17,152,15],[145,20,152,18,"bytes"],[145,25,152,23],[145,26,152,24,"shift"],[145,31,152,29],[145,32,152,30],[145,33,152,31],[146,6,154,4],[146,10,154,8,"header"],[146,16,154,14],[146,17,154,15,"sr"],[146,19,154,17],[146,21,154,19],[147,8,155,6,"payload_length"],[147,22,155,20],[147,25,155,23,"bytes"],[147,30,155,28],[147,31,155,29,"shift"],[147,36,155,34],[147,37,155,35],[147,38,155,36],[148,6,156,4],[148,7,156,5],[148,13,156,11],[149,8,157,6],[150,8,158,6,"payload_length"],[150,22,158,20],[150,25,159,9],[150,26,159,10],[150,30,159,14],[150,33,159,17,"bytes"],[150,38,159,22],[150,39,159,23,"shift"],[150,44,159,28],[150,45,159,29],[150,46,159,30],[150,51,159,35],[150,53,159,37],[150,56,160,9],[150,57,160,10],[150,61,160,14],[150,64,160,17,"bytes"],[150,69,160,22],[150,70,160,23,"shift"],[150,75,160,28],[150,76,160,29],[150,77,160,30],[150,82,160,35],[150,84,160,38],[150,87,161,9],[150,88,161,10],[150,92,161,14],[150,95,161,17,"bytes"],[150,100,161,22],[150,101,161,23,"shift"],[150,106,161,28],[150,107,161,29],[150,108,161,30],[150,113,161,35],[150,114,161,37],[150,117,162,9],[150,121,162,13],[150,124,162,16,"bytes"],[150,129,162,21],[150,130,162,22,"shift"],[150,135,162,27],[150,136,162,28],[150,137,162,30],[151,6,163,4],[152,6,165,4,"id_length"],[152,15,165,13],[152,18,165,16,"header"],[152,24,165,22],[152,25,165,23,"il"],[152,27,165,25],[152,30,165,28,"bytes"],[152,35,165,33],[152,36,165,34,"shift"],[152,41,165,39],[152,42,165,40],[152,43,165,41],[152,46,165,44],[152,47,165,45],[153,6,167,4,"record_type"],[153,17,167,15],[153,20,167,18,"bytes"],[153,25,167,23],[153,26,167,24,"splice"],[153,32,167,30],[153,33,167,31],[153,34,167,32],[153,36,167,34,"type_length"],[153,47,167,45],[153,48,167,46],[154,6,168,4,"id"],[154,8,168,6],[154,11,168,9,"bytes"],[154,16,168,14],[154,17,168,15,"splice"],[154,23,168,21],[154,24,168,22],[154,25,168,23],[154,27,168,25,"id_length"],[154,36,168,34],[154,37,168,35],[155,6,169,4,"payload"],[155,13,169,11],[155,16,169,14,"bytes"],[155,21,169,19],[155,22,169,20,"splice"],[155,28,169,26],[155,29,169,27],[155,30,169,28],[155,32,169,30,"payload_length"],[155,46,169,44],[155,47,169,45],[156,6,171,4,"ndef_message"],[156,18,171,16],[156,19,171,17,"push"],[156,23,171,21],[156,24,171,22,"createNdefRecord"],[156,40,171,38],[156,41,171,39,"header"],[156,47,171,45],[156,48,171,46,"tnf"],[156,51,171,49],[156,53,171,51,"record_type"],[156,64,171,62],[156,66,171,64,"id"],[156,68,171,66],[156,70,171,68,"payload"],[156,77,171,75],[156,78,171,76],[156,79,171,77],[157,6,173,4],[157,10,173,8,"header"],[157,16,173,14],[157,17,173,15,"me"],[157,19,173,17],[157,21,173,19],[158,8,174,6],[159,6,175,4],[159,7,175,5],[159,8,175,6],[160,4,176,2],[161,4,178,2],[161,11,178,9,"ndef_message"],[161,23,178,21],[162,2,179,0],[163,2,181,0],[163,11,181,9,"equalToRecordType"],[163,28,181,26,"equalToRecordType"],[163,29,181,27,"record"],[163,35,181,33],[163,37,181,35,"tnf"],[163,40,181,38],[163,42,181,40,"type"],[163,46,181,44],[163,48,181,46],[164,4,182,2],[164,8,182,6,"record"],[164,14,182,12],[164,15,182,13,"tnf"],[164,18,182,16],[164,23,182,21,"tnf"],[164,26,182,24],[164,28,182,26],[165,6,183,4],[165,10,183,8,"Array"],[165,15,183,13],[165,16,183,14,"isArray"],[165,23,183,21],[165,24,183,22,"record"],[165,30,183,28],[165,31,183,29,"type"],[165,35,183,33],[165,36,183,34],[165,38,183,36],[166,8,184,6],[166,15,184,13,"util"],[166,19,184,17],[166,20,184,18,"bytesToString"],[166,33,184,31],[166,34,184,32,"record"],[166,40,184,38],[166,41,184,39,"type"],[166,45,184,43],[166,46,184,44],[166,51,184,49,"type"],[166,55,184,53],[167,6,185,4],[167,7,185,5],[167,13,185,11],[168,8,186,6],[168,15,186,13,"record"],[168,21,186,19],[168,22,186,20,"type"],[168,26,186,24],[168,31,186,29,"type"],[168,35,186,33],[169,6,187,4],[170,4,188,2],[171,4,189,2],[171,11,189,9,"record"],[171,17,189,15],[171,18,189,16,"tnf"],[171,21,189,19],[171,26,189,24,"tnf"],[171,29,189,27],[171,33,189,31,"record"],[171,39,189,37],[171,40,189,38,"type"],[171,44,189,42],[171,49,189,47,"type"],[171,53,189,51],[172,2,190,0],[173,2,192,0,"module"],[173,8,192,6],[173,9,192,7,"exports"],[173,16,192,14],[173,19,192,17],[174,4,193,2,"createNdefRecord"],[174,20,193,18],[174,22,193,2,"createNdefRecord"],[174,38,193,18],[175,4,194,2,"encodeNdefMessage"],[175,21,194,19],[175,23,194,2,"encodeNdefMessage"],[175,40,194,19],[176,4,195,2,"decodeNdefMessage"],[176,21,195,19],[176,23,195,2,"decodeNdefMessage"],[176,40,195,19],[177,4,196,2,"equalToRecordType"],[177,21,196,19],[177,23,196,2,"equalToRecordType"],[178,2,197,0],[178,3,197,1],[179,0,197,2],[179,3]],"functionMap":{"names":["<global>","createNdefRecord","encodeNdefMessage","encodeTnf","decodeNdefMessage","decodeTnf","equalToRecordType"],"mappings":"AAA;ACE;CD+B;AEE;oBCC;GDyB;CFqD;AIE;oBCC;IDO;CJsD;AME;CNS"}},"type":"js/module"}]}