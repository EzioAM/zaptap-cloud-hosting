{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PerformanceMeasurement = undefined;\n  exports.measurePerformance = measurePerformance;\n  exports.usePerformanceTracking = undefined;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));\n  /**\n  import { EventLogger } from './/EventLogger';\n   * Performance measurement utilities for app launch time optimization\n   * Provides tools to measure and verify launch time improvements\n   */\n  var PerformanceMeasurement = exports.PerformanceMeasurement = /*#__PURE__*/function () {\n    function PerformanceMeasurement() {\n      (0, _classCallCheck2.default)(this, PerformanceMeasurement);\n    }\n    return (0, _createClass2.default)(PerformanceMeasurement, null, [{\n      key: \"initialize\",\n      value:\n      /**\n       * Initialize performance measurement\n       */\n      function initialize() {\n        if (this.isInitialized) return;\n        this.appStartTime = Date.now();\n        this.measurementPoints.clear();\n        this.measurementPoints.set('app_start', this.appStartTime);\n        this.isInitialized = true;\n      }\n\n      /**\n       * Get detailed performance report with optimization benchmarks\n       */\n    }, {\n      key: \"getDetailedReport\",\n      value: function getDetailedReport() {\n        var totalLaunchTime = this.getAppLaunchTime();\n        var target = 2000; // 2 second target\n        var improvement = target - totalLaunchTime;\n        var status = 'needs_improvement';\n        if (totalLaunchTime < 1500) status = 'excellent';else if (totalLaunchTime < 2000) status = 'good';\n\n        // Calculate phase breakdown\n        var phases = [{\n          name: 'Bootstrap',\n          start: 'app_bootstrap_start',\n          end: 'services_loaded'\n        }, {\n          name: 'Services Init',\n          start: 'services_loaded',\n          end: 'app_initialization_complete'\n        }, {\n          name: 'First Render',\n          start: 'app_render_start',\n          end: 'app_initialization_complete'\n        }];\n        var breakdown = phases.map(phase => {\n          var duration = this.getTimeBetween(phase.start, phase.end) || 0;\n          return {\n            phase: phase.name,\n            duration,\n            percentage: totalLaunchTime > 0 ? Math.round(duration / totalLaunchTime * 100) : 0\n          };\n        });\n        return {\n          totalLaunchTime,\n          benchmarks: {\n            target,\n            current: totalLaunchTime,\n            improvement,\n            status\n          },\n          breakdown\n        };\n      }\n\n      /**\n       * Get time between two measurement points\n       */\n    }, {\n      key: \"getTimeBetween\",\n      value: function getTimeBetween(startPoint, endPoint) {\n        var start = this.measurementPoints.get(startPoint);\n        var end = this.measurementPoints.get(endPoint);\n        if (!start || !end) return null;\n        return end - start;\n      }\n\n      /**\n       * Mark a performance point\n       */\n    }, {\n      key: \"mark\",\n      value: function mark(pointName) {\n        var now = Date.now();\n        this.measurementPoints.set(pointName, now);\n      }\n\n      /**\n       * Measure time between two points\n       */\n    }, {\n      key: \"measure\",\n      value: function measure(name, startPoint, endPoint) {\n        var start = this.measurementPoints.get(startPoint);\n        var end = this.measurementPoints.get(endPoint);\n        if (!start || !end) {\n          EventLogger.warn('PerformanceMeasurement', 'Performance measurement failed: missing points ${startPoint} or ${endPoint}');\n          return null;\n        }\n        var duration = end - start;\n        return duration;\n      }\n\n      /**\n       * Get total app launch time\n       */\n    }, {\n      key: \"getAppLaunchTime\",\n      value: function getAppLaunchTime() {\n        var now = Date.now();\n        return now - this.appStartTime;\n      }\n\n      /**\n       * Check if launch time exceeds threshold\n       */\n    }, {\n      key: \"checkLaunchTimeThreshold\",\n      value: function checkLaunchTimeThreshold() {\n        var thresholdMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2000;\n        var launchTime = this.getAppLaunchTime();\n        var passed = launchTime <= thresholdMs;\n        return {\n          passed,\n          launchTime,\n          threshold: thresholdMs\n        };\n      }\n\n      /**\n       * Get performance summary\n       */\n    }, {\n      key: \"getSummary\",\n      value: function getSummary() {\n        var points = {};\n        var relativeTimes = {};\n        this.measurementPoints.forEach((time, name) => {\n          points[name] = time;\n          relativeTimes[name] = time - this.appStartTime;\n        });\n        return {\n          appLaunchTime: this.getAppLaunchTime(),\n          measurementPoints: points,\n          relativeTimes\n        };\n      }\n\n      /**\n       * Reset all measurements\n       */\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.appStartTime = Date.now();\n        this.measurementPoints.clear();\n        this.measurementPoints.set('app_start', this.appStartTime);\n      }\n\n      /**\n       * Export measurements as JSON for analysis\n       */\n    }, {\n      key: \"exportMeasurements\",\n      value: function exportMeasurements() {\n        var summary = this.getSummary();\n        return JSON.stringify(summary, null, 2);\n      }\n\n      /**\n       * Track component mount time\n       */\n    }, {\n      key: \"trackComponentMount\",\n      value: function trackComponentMount(componentName) {\n        var startTime = Date.now();\n        this.mark(`${componentName}_mount_start`);\n        return () => {\n          var endTime = Date.now();\n          this.mark(`${componentName}_mount_end`);\n          var mountTime = endTime - startTime;\n        };\n      }\n\n      /**\n       * Track async operation time\n       */\n    }, {\n      key: \"trackAsyncOperation\",\n      value: (function () {\n        var _trackAsyncOperation = (0, _asyncToGenerator2.default)(function* (operationName, operation) {\n          var startTime = Date.now();\n          this.mark(`${operationName}_start`);\n          try {\n            var result = yield operation();\n            var endTime = Date.now();\n            this.mark(`${operationName}_end`);\n            var duration = endTime - startTime;\n            return result;\n          } catch (error) {\n            var _endTime = Date.now();\n            this.mark(`${operationName}_error`);\n            var _duration = _endTime - startTime;\n            throw error;\n          }\n        });\n        function trackAsyncOperation(_x, _x2) {\n          return _trackAsyncOperation.apply(this, arguments);\n        }\n        return trackAsyncOperation;\n      }()\n      /**\n       * Create a performance-aware setTimeout\n       */\n      )\n    }, {\n      key: \"performanceTimeout\",\n      value: function performanceTimeout(callback, delay, name) {\n        var startTime = Date.now();\n        if (name) {\n          this.mark(`timeout_${name}_scheduled`);\n        }\n        return setTimeout(() => {\n          var actualDelay = Date.now() - startTime;\n          if (name) {\n            this.mark(`timeout_${name}_executed`);\n          }\n          callback();\n        }, delay);\n      }\n\n      /**\n       * Measure render performance\n       */\n    }, {\n      key: \"measureRender\",\n      value: function measureRender(componentName) {\n        var startTime;\n        return {\n          start: () => {\n            startTime = Date.now();\n            this.mark(`render_${componentName}_start`);\n          },\n          end: () => {\n            var endTime = Date.now();\n            this.mark(`render_${componentName}_end`);\n            var renderTime = endTime - startTime;\n            return renderTime;\n          }\n        };\n      }\n    }]);\n  }();\n  /**\n   * Performance measurement hook for React components\n   */\n  PerformanceMeasurement.appStartTime = Date.now();\n  PerformanceMeasurement.measurementPoints = new Map();\n  PerformanceMeasurement.isInitialized = false;\n  var usePerformanceTracking = componentName => {\n    var cleanup = PerformanceMeasurement.trackComponentMount(componentName);\n    return {\n      mark: pointName => PerformanceMeasurement.mark(`${componentName}_${pointName}`),\n      measure: (name, start, end) => PerformanceMeasurement.measure(name, `${componentName}_${start}`, `${componentName}_${end}`),\n      cleanup\n    };\n  };\n\n  /**\n   * Performance measurement decorator for methods\n   */\n  exports.usePerformanceTracking = usePerformanceTracking;\n  function measurePerformance(name) {\n    return function (target, propertyKey, descriptor) {\n      var originalMethod = descriptor.value;\n      var methodName = name || `${target.constructor.name}.${propertyKey}`;\n      descriptor.value = /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return PerformanceMeasurement.trackAsyncOperation(methodName, () => originalMethod.apply(this, args));\n      });\n      return descriptor;\n    };\n  }\n\n  // Initialize on import\n  PerformanceMeasurement.initialize();\n});","lineCount":304,"map":[[12,2,1,0],[13,0,2,0],[14,0,3,0],[15,0,4,0],[16,0,5,0],[17,2,1,0],[17,6,7,13,"PerformanceMeasurement"],[17,28,7,35],[17,31,7,35,"exports"],[17,38,7,35],[17,39,7,35,"PerformanceMeasurement"],[17,61,7,35],[18,4,7,35],[18,13,7,35,"PerformanceMeasurement"],[18,36,7,35],[19,6,7,35],[19,10,7,35,"_classCallCheck2"],[19,26,7,35],[19,27,7,35,"default"],[19,34,7,35],[19,42,7,35,"PerformanceMeasurement"],[19,64,7,35],[20,4,7,35],[21,4,7,35],[21,15,7,35,"_createClass2"],[21,28,7,35],[21,29,7,35,"default"],[21,36,7,35],[21,38,7,35,"PerformanceMeasurement"],[21,60,7,35],[22,6,7,35,"key"],[22,9,7,35],[23,6,7,35,"value"],[23,11,7,35],[24,6,12,2],[25,0,13,0],[26,0,14,0],[27,6,15,2],[27,15,15,16,"initialize"],[27,25,15,26,"initialize"],[27,26,15,26],[27,28,15,35],[28,8,16,4],[28,12,16,8],[28,16,16,12],[28,17,16,13,"isInitialized"],[28,30,16,26],[28,32,16,28],[29,8,18,4],[29,12,18,8],[29,13,18,9,"appStartTime"],[29,25,18,21],[29,28,18,24,"Date"],[29,32,18,28],[29,33,18,29,"now"],[29,36,18,32],[29,37,18,33],[29,38,18,34],[30,8,19,4],[30,12,19,8],[30,13,19,9,"measurementPoints"],[30,30,19,26],[30,31,19,27,"clear"],[30,36,19,32],[30,37,19,33],[30,38,19,34],[31,8,20,4],[31,12,20,8],[31,13,20,9,"measurementPoints"],[31,30,20,26],[31,31,20,27,"set"],[31,34,20,30],[31,35,20,31],[31,46,20,42],[31,48,20,44],[31,52,20,48],[31,53,20,49,"appStartTime"],[31,65,20,61],[31,66,20,62],[32,8,21,4],[32,12,21,8],[32,13,21,9,"isInitialized"],[32,26,21,22],[32,29,21,25],[32,33,21,29],[33,6,26,2],[35,6,28,2],[36,0,29,0],[37,0,30,0],[38,4,28,2],[39,6,28,2,"key"],[39,9,28,2],[40,6,28,2,"value"],[40,11,28,2],[40,13,31,2],[40,22,31,16,"getDetailedReport"],[40,39,31,33,"getDetailedReport"],[40,40,31,33],[40,42,44,4],[41,8,45,4],[41,12,45,10,"totalLaunchTime"],[41,27,45,25],[41,30,45,28],[41,34,45,32],[41,35,45,33,"getAppLaunchTime"],[41,51,45,49],[41,52,45,50],[41,53,45,51],[42,8,46,4],[42,12,46,10,"target"],[42,18,46,16],[42,21,46,19],[42,25,46,23],[42,26,46,24],[42,27,46,25],[43,8,47,4],[43,12,47,10,"improvement"],[43,23,47,21],[43,26,47,24,"target"],[43,32,47,30],[43,35,47,33,"totalLaunchTime"],[43,50,47,48],[44,8,49,4],[44,12,49,8,"status"],[44,18,49,58],[44,21,49,61],[44,40,49,80],[45,8,50,4],[45,12,50,8,"totalLaunchTime"],[45,27,50,23],[45,30,50,26],[45,34,50,30],[45,36,50,32,"status"],[45,42,50,38],[45,45,50,41],[45,56,50,52],[45,57,50,53],[45,62,51,9],[45,66,51,13,"totalLaunchTime"],[45,81,51,28],[45,84,51,31],[45,88,51,35],[45,90,51,37,"status"],[45,96,51,43],[45,99,51,46],[45,105,51,52],[47,8,53,4],[48,8,54,4],[48,12,54,10,"phases"],[48,18,54,16],[48,21,54,19],[48,22,55,6],[49,10,55,8,"name"],[49,14,55,12],[49,16,55,14],[49,27,55,25],[50,10,55,27,"start"],[50,15,55,32],[50,17,55,34],[50,38,55,55],[51,10,55,57,"end"],[51,13,55,60],[51,15,55,62],[52,8,55,80],[52,9,55,81],[52,11,56,6],[53,10,56,8,"name"],[53,14,56,12],[53,16,56,14],[53,31,56,29],[54,10,56,31,"start"],[54,15,56,36],[54,17,56,38],[54,34,56,55],[55,10,56,57,"end"],[55,13,56,60],[55,15,56,62],[56,8,56,92],[56,9,56,93],[56,11,57,6],[57,10,57,8,"name"],[57,14,57,12],[57,16,57,14],[57,30,57,28],[58,10,57,30,"start"],[58,15,57,35],[58,17,57,37],[58,35,57,55],[59,10,57,57,"end"],[59,13,57,60],[59,15,57,62],[60,8,57,92],[60,9,57,93],[60,10,58,5],[61,8,60,4],[61,12,60,10,"breakdown"],[61,21,60,19],[61,24,60,22,"phases"],[61,30,60,28],[61,31,60,29,"map"],[61,34,60,32],[61,35,60,33,"phase"],[61,40,60,38],[61,44,60,42],[62,10,61,6],[62,14,61,12,"duration"],[62,22,61,20],[62,25,61,23],[62,29,61,27],[62,30,61,28,"getTimeBetween"],[62,44,61,42],[62,45,61,43,"phase"],[62,50,61,48],[62,51,61,49,"start"],[62,56,61,54],[62,58,61,56,"phase"],[62,63,61,61],[62,64,61,62,"end"],[62,67,61,65],[62,68,61,66],[62,72,61,70],[62,73,61,71],[63,10,62,6],[63,17,62,13],[64,12,63,8,"phase"],[64,17,63,13],[64,19,63,15,"phase"],[64,24,63,20],[64,25,63,21,"name"],[64,29,63,25],[65,12,64,8,"duration"],[65,20,64,16],[66,12,65,8,"percentage"],[66,22,65,18],[66,24,65,20,"totalLaunchTime"],[66,39,65,35],[66,42,65,38],[66,43,65,39],[66,46,65,42,"Math"],[66,50,65,46],[66,51,65,47,"round"],[66,56,65,52],[66,57,65,54,"duration"],[66,65,65,62],[66,68,65,65,"totalLaunchTime"],[66,83,65,80],[66,86,65,84],[66,89,65,87],[66,90,65,88],[66,93,65,91],[67,10,66,6],[67,11,66,7],[68,8,67,4],[68,9,67,5],[68,10,67,6],[69,8,69,4],[69,15,69,11],[70,10,70,6,"totalLaunchTime"],[70,25,70,21],[71,10,71,6,"benchmarks"],[71,20,71,16],[71,22,71,18],[72,12,72,8,"target"],[72,18,72,14],[73,12,73,8,"current"],[73,19,73,15],[73,21,73,17,"totalLaunchTime"],[73,36,73,32],[74,12,74,8,"improvement"],[74,23,74,19],[75,12,75,8,"status"],[76,10,76,6],[76,11,76,7],[77,10,77,6,"breakdown"],[78,8,78,4],[78,9,78,5],[79,6,79,2],[81,6,81,2],[82,0,82,0],[83,0,83,0],[84,4,81,2],[85,6,81,2,"key"],[85,9,81,2],[86,6,81,2,"value"],[86,11,81,2],[86,13,84,2],[86,22,84,16,"getTimeBetween"],[86,36,84,30,"getTimeBetween"],[86,37,84,31,"startPoint"],[86,47,84,49],[86,49,84,51,"endPoint"],[86,57,84,67],[86,59,84,84],[87,8,85,4],[87,12,85,10,"start"],[87,17,85,15],[87,20,85,18],[87,24,85,22],[87,25,85,23,"measurementPoints"],[87,42,85,40],[87,43,85,41,"get"],[87,46,85,44],[87,47,85,45,"startPoint"],[87,57,85,55],[87,58,85,56],[88,8,86,4],[88,12,86,10,"end"],[88,15,86,13],[88,18,86,16],[88,22,86,20],[88,23,86,21,"measurementPoints"],[88,40,86,38],[88,41,86,39,"get"],[88,44,86,42],[88,45,86,43,"endPoint"],[88,53,86,51],[88,54,86,52],[89,8,88,4],[89,12,88,8],[89,13,88,9,"start"],[89,18,88,14],[89,22,88,18],[89,23,88,19,"end"],[89,26,88,22],[89,28,88,24],[89,35,88,31],[89,39,88,35],[90,8,89,4],[90,15,89,11,"end"],[90,18,89,14],[90,21,89,17,"start"],[90,26,89,22],[91,6,90,2],[93,6,92,2],[94,0,93,0],[95,0,94,0],[96,4,92,2],[97,6,92,2,"key"],[97,9,92,2],[98,6,92,2,"value"],[98,11,92,2],[98,13,95,2],[98,22,95,16,"mark"],[98,26,95,20,"mark"],[98,27,95,21,"pointName"],[98,36,95,38],[98,38,95,46],[99,8,96,4],[99,12,96,10,"now"],[99,15,96,13],[99,18,96,16,"Date"],[99,22,96,20],[99,23,96,21,"now"],[99,26,96,24],[99,27,96,25],[99,28,96,26],[100,8,97,4],[100,12,97,8],[100,13,97,9,"measurementPoints"],[100,30,97,26],[100,31,97,27,"set"],[100,34,97,30],[100,35,97,31,"pointName"],[100,44,97,40],[100,46,97,42,"now"],[100,49,97,45],[100,50,97,46],[101,6,103,2],[103,6,105,2],[104,0,106,0],[105,0,107,0],[106,4,105,2],[107,6,105,2,"key"],[107,9,105,2],[108,6,105,2,"value"],[108,11,105,2],[108,13,108,2],[108,22,108,16,"measure"],[108,29,108,23,"measure"],[108,30,109,4,"name"],[108,34,109,16],[108,36,110,4,"startPoint"],[108,46,110,22],[108,48,111,4,"endPoint"],[108,56,111,20],[108,58,112,19],[109,8,113,4],[109,12,113,10,"start"],[109,17,113,15],[109,20,113,18],[109,24,113,22],[109,25,113,23,"measurementPoints"],[109,42,113,40],[109,43,113,41,"get"],[109,46,113,44],[109,47,113,45,"startPoint"],[109,57,113,55],[109,58,113,56],[110,8,114,4],[110,12,114,10,"end"],[110,15,114,13],[110,18,114,16],[110,22,114,20],[110,23,114,21,"measurementPoints"],[110,40,114,38],[110,41,114,39,"get"],[110,44,114,42],[110,45,114,43,"endPoint"],[110,53,114,51],[110,54,114,52],[111,8,116,4],[111,12,116,8],[111,13,116,9,"start"],[111,18,116,14],[111,22,116,18],[111,23,116,19,"end"],[111,26,116,22],[111,28,116,24],[112,10,117,6,"EventLogger"],[112,21,117,17],[112,22,117,18,"warn"],[112,26,117,22],[112,27,117,23],[112,51,117,47],[112,53,117,49],[112,130,117,126],[112,131,117,127],[113,10,118,6],[113,17,118,13],[113,21,118,17],[114,8,119,4],[115,8,121,4],[115,12,121,10,"duration"],[115,20,121,18],[115,23,121,21,"end"],[115,26,121,24],[115,29,121,27,"start"],[115,34,121,32],[116,8,127,4],[116,15,127,11,"duration"],[116,23,127,19],[117,6,128,2],[119,6,130,2],[120,0,131,0],[121,0,132,0],[122,4,130,2],[123,6,130,2,"key"],[123,9,130,2],[124,6,130,2,"value"],[124,11,130,2],[124,13,133,2],[124,22,133,16,"getAppLaunchTime"],[124,38,133,32,"getAppLaunchTime"],[124,39,133,32],[124,41,133,43],[125,8,134,4],[125,12,134,10,"now"],[125,15,134,13],[125,18,134,16,"Date"],[125,22,134,20],[125,23,134,21,"now"],[125,26,134,24],[125,27,134,25],[125,28,134,26],[126,8,135,4],[126,15,135,11,"now"],[126,18,135,14],[126,21,135,17],[126,25,135,21],[126,26,135,22,"appStartTime"],[126,38,135,34],[127,6,136,2],[129,6,138,2],[130,0,139,0],[131,0,140,0],[132,4,138,2],[133,6,138,2,"key"],[133,9,138,2],[134,6,138,2,"value"],[134,11,138,2],[134,13,141,2],[134,22,141,16,"checkLaunchTimeThreshold"],[134,46,141,40,"checkLaunchTimeThreshold"],[134,47,141,40],[134,49,145,4],[135,8,145,4],[135,12,141,41,"thresholdMs"],[135,23,141,60],[135,26,141,60,"arguments"],[135,35,141,60],[135,36,141,60,"length"],[135,42,141,60],[135,50,141,60,"arguments"],[135,59,141,60],[135,67,141,60,"undefined"],[135,76,141,60],[135,79,141,60,"arguments"],[135,88,141,60],[135,94,141,63],[135,98,141,67],[136,8,146,4],[136,12,146,10,"launchTime"],[136,22,146,20],[136,25,146,23],[136,29,146,27],[136,30,146,28,"getAppLaunchTime"],[136,46,146,44],[136,47,146,45],[136,48,146,46],[137,8,147,4],[137,12,147,10,"passed"],[137,18,147,16],[137,21,147,19,"launchTime"],[137,31,147,29],[137,35,147,33,"thresholdMs"],[137,46,147,44],[138,8,154,4],[138,15,154,11],[139,10,155,6,"passed"],[139,16,155,12],[140,10,156,6,"launchTime"],[140,20,156,16],[141,10,157,6,"threshold"],[141,19,157,15],[141,21,157,17,"thresholdMs"],[142,8,158,4],[142,9,158,5],[143,6,159,2],[145,6,161,2],[146,0,162,0],[147,0,163,0],[148,4,161,2],[149,6,161,2,"key"],[149,9,161,2],[150,6,161,2,"value"],[150,11,161,2],[150,13,164,2],[150,22,164,16,"getSummary"],[150,32,164,26,"getSummary"],[150,33,164,26],[150,35,168,4],[151,8,169,4],[151,12,169,10,"points"],[151,18,169,40],[151,21,169,43],[151,22,169,44],[151,23,169,45],[152,8,170,4],[152,12,170,10,"relativeTimes"],[152,25,170,47],[152,28,170,50],[152,29,170,51],[152,30,170,52],[153,8,172,4],[153,12,172,8],[153,13,172,9,"measurementPoints"],[153,30,172,26],[153,31,172,27,"forEach"],[153,38,172,34],[153,39,172,35],[153,40,172,36,"time"],[153,44,172,40],[153,46,172,42,"name"],[153,50,172,46],[153,55,172,51],[154,10,173,6,"points"],[154,16,173,12],[154,17,173,13,"name"],[154,21,173,17],[154,22,173,18],[154,25,173,21,"time"],[154,29,173,25],[155,10,174,6,"relativeTimes"],[155,23,174,19],[155,24,174,20,"name"],[155,28,174,24],[155,29,174,25],[155,32,174,28,"time"],[155,36,174,32],[155,39,174,35],[155,43,174,39],[155,44,174,40,"appStartTime"],[155,56,174,52],[156,8,175,4],[156,9,175,5],[156,10,175,6],[157,8,177,4],[157,15,177,11],[158,10,178,6,"appLaunchTime"],[158,23,178,19],[158,25,178,21],[158,29,178,25],[158,30,178,26,"getAppLaunchTime"],[158,46,178,42],[158,47,178,43],[158,48,178,44],[159,10,179,6,"measurementPoints"],[159,27,179,23],[159,29,179,25,"points"],[159,35,179,31],[160,10,180,6,"relativeTimes"],[161,8,181,4],[161,9,181,5],[162,6,182,2],[164,6,184,2],[165,0,185,0],[166,0,186,0],[167,4,184,2],[168,6,184,2,"key"],[168,9,184,2],[169,6,184,2,"value"],[169,11,184,2],[169,13,187,2],[169,22,187,16,"reset"],[169,27,187,21,"reset"],[169,28,187,21],[169,30,187,30],[170,8,188,4],[170,12,188,8],[170,13,188,9,"appStartTime"],[170,25,188,21],[170,28,188,24,"Date"],[170,32,188,28],[170,33,188,29,"now"],[170,36,188,32],[170,37,188,33],[170,38,188,34],[171,8,189,4],[171,12,189,8],[171,13,189,9,"measurementPoints"],[171,30,189,26],[171,31,189,27,"clear"],[171,36,189,32],[171,37,189,33],[171,38,189,34],[172,8,190,4],[172,12,190,8],[172,13,190,9,"measurementPoints"],[172,30,190,26],[172,31,190,27,"set"],[172,34,190,30],[172,35,190,31],[172,46,190,42],[172,48,190,44],[172,52,190,48],[172,53,190,49,"appStartTime"],[172,65,190,61],[172,66,190,62],[173,6,195,2],[175,6,197,2],[176,0,198,0],[177,0,199,0],[178,4,197,2],[179,6,197,2,"key"],[179,9,197,2],[180,6,197,2,"value"],[180,11,197,2],[180,13,200,2],[180,22,200,16,"exportMeasurements"],[180,40,200,34,"exportMeasurements"],[180,41,200,34],[180,43,200,45],[181,8,201,4],[181,12,201,10,"summary"],[181,19,201,17],[181,22,201,20],[181,26,201,24],[181,27,201,25,"getSummary"],[181,37,201,35],[181,38,201,36],[181,39,201,37],[182,8,202,4],[182,15,202,11,"JSON"],[182,19,202,15],[182,20,202,16,"stringify"],[182,29,202,25],[182,30,202,26,"summary"],[182,37,202,33],[182,39,202,35],[182,43,202,39],[182,45,202,41],[182,46,202,42],[182,47,202,43],[183,6,203,2],[185,6,205,2],[186,0,206,0],[187,0,207,0],[188,4,205,2],[189,6,205,2,"key"],[189,9,205,2],[190,6,205,2,"value"],[190,11,205,2],[190,13,208,2],[190,22,208,16,"trackComponentMount"],[190,41,208,35,"trackComponentMount"],[190,42,208,36,"componentName"],[190,55,208,57],[190,57,208,71],[191,8,209,4],[191,12,209,10,"startTime"],[191,21,209,19],[191,24,209,22,"Date"],[191,28,209,26],[191,29,209,27,"now"],[191,32,209,30],[191,33,209,31],[191,34,209,32],[192,8,210,4],[192,12,210,8],[192,13,210,9,"mark"],[192,17,210,13],[192,18,210,14],[192,21,210,17,"componentName"],[192,34,210,30],[192,48,210,44],[192,49,210,45],[193,8,212,4],[193,15,212,11],[193,21,212,17],[194,10,213,6],[194,14,213,12,"endTime"],[194,21,213,19],[194,24,213,22,"Date"],[194,28,213,26],[194,29,213,27,"now"],[194,32,213,30],[194,33,213,31],[194,34,213,32],[195,10,214,6],[195,14,214,10],[195,15,214,11,"mark"],[195,19,214,15],[195,20,214,16],[195,23,214,19,"componentName"],[195,36,214,32],[195,48,214,44],[195,49,214,45],[196,10,215,6],[196,14,215,12,"mountTime"],[196,23,215,21],[196,26,215,24,"endTime"],[196,33,215,31],[196,36,215,34,"startTime"],[196,45,215,43],[197,8,220,4],[197,9,220,5],[198,6,221,2],[200,6,223,2],[201,0,224,0],[202,0,225,0],[203,4,223,2],[204,6,223,2,"key"],[204,9,223,2],[205,6,223,2,"value"],[205,11,223,2],[206,8,223,2],[206,12,223,2,"_trackAsyncOperation"],[206,32,223,2],[206,39,223,2,"_asyncToGenerator2"],[206,57,223,2],[206,58,223,2,"default"],[206,65,223,2],[206,67,226,2],[206,78,227,4,"operationName"],[206,91,227,25],[206,93,228,4,"operation"],[206,102,228,31],[206,104,229,16],[207,10,230,4],[207,14,230,10,"startTime"],[207,23,230,19],[207,26,230,22,"Date"],[207,30,230,26],[207,31,230,27,"now"],[207,34,230,30],[207,35,230,31],[207,36,230,32],[208,10,231,4],[208,14,231,8],[208,15,231,9,"mark"],[208,19,231,13],[208,20,231,14],[208,23,231,17,"operationName"],[208,36,231,30],[208,44,231,38],[208,45,231,39],[209,10,233,4],[209,14,233,8],[210,12,234,6],[210,16,234,12,"result"],[210,22,234,18],[210,31,234,27,"operation"],[210,40,234,36],[210,41,234,37],[210,42,234,38],[211,12,235,6],[211,16,235,12,"endTime"],[211,23,235,19],[211,26,235,22,"Date"],[211,30,235,26],[211,31,235,27,"now"],[211,34,235,30],[211,35,235,31],[211,36,235,32],[212,12,236,6],[212,16,236,10],[212,17,236,11,"mark"],[212,21,236,15],[212,22,236,16],[212,25,236,19,"operationName"],[212,38,236,32],[212,44,236,38],[212,45,236,39],[213,12,237,6],[213,16,237,12,"duration"],[213,24,237,20],[213,27,237,23,"endTime"],[213,34,237,30],[213,37,237,33,"startTime"],[213,46,237,42],[214,12,243,6],[214,19,243,13,"result"],[214,25,243,19],[215,10,244,4],[215,11,244,5],[215,12,244,6],[215,19,244,13,"error"],[215,24,244,18],[215,26,244,20],[216,12,245,6],[216,16,245,12,"endTime"],[216,24,245,19],[216,27,245,22,"Date"],[216,31,245,26],[216,32,245,27,"now"],[216,35,245,30],[216,36,245,31],[216,37,245,32],[217,12,246,6],[217,16,246,10],[217,17,246,11,"mark"],[217,21,246,15],[217,22,246,16],[217,25,246,19,"operationName"],[217,38,246,32],[217,46,246,40],[217,47,246,41],[218,12,247,6],[218,16,247,12,"duration"],[218,25,247,20],[218,28,247,23,"endTime"],[218,36,247,30],[218,39,247,33,"startTime"],[218,48,247,42],[219,12,253,6],[219,18,253,12,"error"],[219,23,253,17],[220,10,254,4],[221,8,255,2],[221,9,255,3],[222,8,255,3],[222,17,226,22,"trackAsyncOperation"],[222,36,226,41,"trackAsyncOperation"],[222,37,226,41,"_x"],[222,39,226,41],[222,41,226,41,"_x2"],[222,44,226,41],[223,10,226,41],[223,17,226,41,"_trackAsyncOperation"],[223,37,226,41],[223,38,226,41,"apply"],[223,43,226,41],[223,50,226,41,"arguments"],[223,59,226,41],[224,8,226,41],[225,8,226,41],[225,15,226,22,"trackAsyncOperation"],[225,34,226,41],[226,6,226,41],[227,6,257,2],[228,0,258,0],[229,0,259,0],[230,6,257,2],[231,4,257,2],[232,6,257,2,"key"],[232,9,257,2],[233,6,257,2,"value"],[233,11,257,2],[233,13,260,2],[233,22,260,16,"performanceTimeout"],[233,40,260,34,"performanceTimeout"],[233,41,261,4,"callback"],[233,49,261,24],[233,51,262,4,"delay"],[233,56,262,17],[233,58,263,4,"name"],[233,62,263,17],[233,64,264,20],[234,8,265,4],[234,12,265,10,"startTime"],[234,21,265,19],[234,24,265,22,"Date"],[234,28,265,26],[234,29,265,27,"now"],[234,32,265,30],[234,33,265,31],[234,34,265,32],[235,8,266,4],[235,12,266,8,"name"],[235,16,266,12],[235,18,266,14],[236,10,267,6],[236,14,267,10],[236,15,267,11,"mark"],[236,19,267,15],[236,20,267,16],[236,31,267,27,"name"],[236,35,267,31],[236,47,267,43],[236,48,267,44],[237,8,268,4],[238,8,270,4],[238,15,270,11,"setTimeout"],[238,25,270,21],[238,26,270,22],[238,32,270,28],[239,10,271,6],[239,14,271,12,"actualDelay"],[239,25,271,23],[239,28,271,26,"Date"],[239,32,271,30],[239,33,271,31,"now"],[239,36,271,34],[239,37,271,35],[239,38,271,36],[239,41,271,39,"startTime"],[239,50,271,48],[240,10,272,6],[240,14,272,10,"name"],[240,18,272,14],[240,20,272,16],[241,12,273,8],[241,16,273,12],[241,17,273,13,"mark"],[241,21,273,17],[241,22,273,18],[241,33,273,29,"name"],[241,37,273,33],[241,48,273,44],[241,49,273,45],[242,10,277,6],[243,10,278,6,"callback"],[243,18,278,14],[243,19,278,15],[243,20,278,16],[244,8,279,4],[244,9,279,5],[244,11,279,7,"delay"],[244,16,279,12],[244,17,279,13],[245,6,280,2],[247,6,282,2],[248,0,283,0],[249,0,284,0],[250,4,282,2],[251,6,282,2,"key"],[251,9,282,2],[252,6,282,2,"value"],[252,11,282,2],[252,13,285,2],[252,22,285,16,"measureRender"],[252,35,285,29,"measureRender"],[252,36,285,30,"componentName"],[252,49,285,51],[252,51,288,4],[253,8,289,4],[253,12,289,8,"startTime"],[253,21,289,25],[254,8,291,4],[254,15,291,11],[255,10,292,6,"start"],[255,15,292,11],[255,17,292,13,"start"],[255,18,292,13],[255,23,292,19],[256,12,293,8,"startTime"],[256,21,293,17],[256,24,293,20,"Date"],[256,28,293,24],[256,29,293,25,"now"],[256,32,293,28],[256,33,293,29],[256,34,293,30],[257,12,294,8],[257,16,294,12],[257,17,294,13,"mark"],[257,21,294,17],[257,22,294,18],[257,32,294,28,"componentName"],[257,45,294,41],[257,53,294,49],[257,54,294,50],[258,10,295,6],[258,11,295,7],[259,10,296,6,"end"],[259,13,296,9],[259,15,296,11,"end"],[259,16,296,11],[259,21,296,17],[260,12,297,8],[260,16,297,14,"endTime"],[260,23,297,21],[260,26,297,24,"Date"],[260,30,297,28],[260,31,297,29,"now"],[260,34,297,32],[260,35,297,33],[260,36,297,34],[261,12,298,8],[261,16,298,12],[261,17,298,13,"mark"],[261,21,298,17],[261,22,298,18],[261,32,298,28,"componentName"],[261,45,298,41],[261,51,298,47],[261,52,298,48],[262,12,299,8],[262,16,299,14,"renderTime"],[262,26,299,24],[262,29,299,27,"endTime"],[262,36,299,34],[262,39,299,37,"startTime"],[262,48,299,46],[263,12,305,8],[263,19,305,15,"renderTime"],[263,29,305,25],[264,10,306,6],[265,8,307,4],[265,9,307,5],[266,6,308,2],[267,4,308,3],[268,2,308,3],[269,2,311,0],[270,0,312,0],[271,0,313,0],[272,2,7,13,"PerformanceMeasurement"],[272,24,7,35],[272,25,8,17,"appStartTime"],[272,37,8,29],[272,40,8,40,"Date"],[272,44,8,44],[272,45,8,45,"now"],[272,48,8,48],[272,49,8,49],[272,50,8,50],[273,2,7,13,"PerformanceMeasurement"],[273,24,7,35],[273,25,9,17,"measurementPoints"],[273,42,9,34],[273,45,9,58],[273,49,9,62,"Map"],[273,52,9,65],[273,53,9,66],[273,54,9,67],[274,2,7,13,"PerformanceMeasurement"],[274,24,7,35],[274,25,10,17,"isInitialized"],[274,38,10,30],[274,41,10,33],[274,46,10,38],[275,2,314,7],[275,6,314,13,"usePerformanceTracking"],[275,28,314,35],[275,31,314,39,"componentName"],[275,44,314,60],[275,48,314,65],[276,4,315,2],[276,8,315,8,"cleanup"],[276,15,315,15],[276,18,315,18,"PerformanceMeasurement"],[276,40,315,40],[276,41,315,41,"trackComponentMount"],[276,60,315,60],[276,61,315,61,"componentName"],[276,74,315,74],[276,75,315,75],[277,4,317,2],[277,11,317,9],[278,6,318,4,"mark"],[278,10,318,8],[278,12,318,11,"pointName"],[278,21,318,28],[278,25,318,33,"PerformanceMeasurement"],[278,47,318,55],[278,48,318,56,"mark"],[278,52,318,60],[278,53,318,61],[278,56,318,64,"componentName"],[278,69,318,77],[278,73,318,81,"pointName"],[278,82,318,90],[278,84,318,92],[278,85,318,93],[279,6,319,4,"measure"],[279,13,319,11],[279,15,319,13,"measure"],[279,16,319,14,"name"],[279,20,319,26],[279,22,319,28,"start"],[279,27,319,41],[279,29,319,43,"end"],[279,32,319,54],[279,37,320,6,"PerformanceMeasurement"],[279,59,320,28],[279,60,320,29,"measure"],[279,67,320,36],[279,68,320,37,"name"],[279,72,320,41],[279,74,320,43],[279,77,320,46,"componentName"],[279,90,320,59],[279,94,320,63,"start"],[279,99,320,68],[279,101,320,70],[279,103,320,72],[279,106,320,75,"componentName"],[279,119,320,88],[279,123,320,92,"end"],[279,126,320,95],[279,128,320,97],[279,129,320,98],[280,6,321,4,"cleanup"],[281,4,322,2],[281,5,322,3],[282,2,323,0],[282,3,323,1],[284,2,325,0],[285,0,326,0],[286,0,327,0],[287,2,325,0,"exports"],[287,9,325,0],[287,10,325,0,"usePerformanceTracking"],[287,32,325,0],[287,35,325,0,"usePerformanceTracking"],[287,57,325,0],[288,2,328,7],[288,11,328,16,"measurePerformance"],[288,29,328,34,"measurePerformance"],[288,30,328,35,"name"],[288,34,328,48],[288,36,328,50],[289,4,329,2],[289,11,329,9],[289,21,329,19,"target"],[289,27,329,30],[289,29,329,32,"propertyKey"],[289,40,329,51],[289,42,329,53,"descriptor"],[289,52,329,83],[289,54,329,85],[290,6,330,4],[290,10,330,10,"originalMethod"],[290,24,330,24],[290,27,330,27,"descriptor"],[290,37,330,37],[290,38,330,38,"value"],[290,43,330,43],[291,6,331,4],[291,10,331,10,"methodName"],[291,20,331,20],[291,23,331,23,"name"],[291,27,331,27],[291,31,331,31],[291,34,331,34,"target"],[291,40,331,40],[291,41,331,41,"constructor"],[291,52,331,52],[291,53,331,53,"name"],[291,57,331,57],[291,61,331,61,"propertyKey"],[291,72,331,72],[291,74,331,74],[292,6,333,4,"descriptor"],[292,16,333,14],[292,17,333,15,"value"],[292,22,333,20],[292,42,333,20,"_asyncToGenerator2"],[292,60,333,20],[292,61,333,20,"default"],[292,68,333,20],[292,70,333,23],[292,83,333,55],[293,8,333,55],[293,17,333,55,"_len"],[293,21,333,55],[293,24,333,55,"arguments"],[293,33,333,55],[293,34,333,55,"length"],[293,40,333,55],[293,42,333,42,"args"],[293,46,333,46],[293,53,333,46,"Array"],[293,58,333,46],[293,59,333,46,"_len"],[293,63,333,46],[293,66,333,46,"_key"],[293,70,333,46],[293,76,333,46,"_key"],[293,80,333,46],[293,83,333,46,"_len"],[293,87,333,46],[293,89,333,46,"_key"],[293,93,333,46],[294,10,333,42,"args"],[294,14,333,46],[294,15,333,46,"_key"],[294,19,333,46],[294,23,333,46,"arguments"],[294,32,333,46],[294,33,333,46,"_key"],[294,37,333,46],[295,8,333,46],[296,8,334,6],[296,15,334,13,"PerformanceMeasurement"],[296,37,334,35],[296,38,334,36,"trackAsyncOperation"],[296,57,334,55],[296,58,335,8,"methodName"],[296,68,335,18],[296,70,336,8],[296,76,336,14,"originalMethod"],[296,90,336,28],[296,91,336,29,"apply"],[296,96,336,34],[296,97,336,35],[296,101,336,39],[296,103,336,41,"args"],[296,107,336,45],[296,108,337,6],[296,109,337,7],[297,6,338,4],[297,7,338,5],[298,6,340,4],[298,13,340,11,"descriptor"],[298,23,340,21],[299,4,341,2],[299,5,341,3],[300,2,342,0],[302,2,344,0],[303,2,345,0,"PerformanceMeasurement"],[303,24,345,22],[303,25,345,23,"initialize"],[303,35,345,33],[303,36,345,34],[303,37,345,35],[304,0,345,36],[304,3]],"functionMap":{"names":["<global>","PerformanceMeasurement","initialize","getDetailedReport","phases.map$argument_0","getTimeBetween","mark","measure","getAppLaunchTime","checkLaunchTimeThreshold","getSummary","measurementPoints.forEach$argument_0","reset","exportMeasurements","trackComponentMount","<anonymous>","trackAsyncOperation","performanceTimeout","setTimeout$argument_0","measureRender","start","end","usePerformanceTracking","measurePerformance","descriptor.value","trackAsyncOperation$argument_1"],"mappings":"AAA;OCM;ECQ;GDW;EEK;iCC6B;KDO;GFY;EIK;GJM;EKK;GLQ;EMK;GNoB;EOK;GPG;EQK;GRkB;ESK;mCCQ;KDG;GTO;EWK;GXQ;EYK;GZG;EaK;WCI;KDQ;GbC;EeK;Gf6B;EgBK;sBCU;KDS;GhBC;EkBK;aCO;ODG;WEC;OFU;GlBE;CDC;sCsBK;UhBI,mFgB;afC;kGeC;CtBG;OuBK;SRC;uBSI;QCG,sCD;KTE;GQG;CvBC"}},"type":"js/module"}]}