{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"../supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"q3G/dBcB/lyqe2ZqsudXc9dkd4E=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":54,"index":101}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.sharingAnalyticsService = exports.SharingAnalyticsService = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _client = require(_dependencyMap[5], \"../supabase/client\");\n  var _EventLogger = require(_dependencyMap[6], \"../../utils/EventLogger\");\n  var SharingAnalyticsService = exports.SharingAnalyticsService = /*#__PURE__*/function () {\n    function SharingAnalyticsService() {\n      (0, _classCallCheck2.default)(this, SharingAnalyticsService);\n    }\n    return (0, _createClass2.default)(SharingAnalyticsService, [{\n      key: \"trackShareEvent\",\n      value: (\n      /**\n       * Track a share event\n       */\n      function () {\n        var _trackShareEvent = (0, _asyncToGenerator2.default)(function* (event) {\n          try {\n            var _yield$supabase$from$ = yield _client.supabase.from('sharing_logs').insert({\n                automation_id: event.automationId,\n                method: event.method,\n                shared_by: event.sharedBy,\n                recipients: event.recipients || [],\n                share_data: {\n                  shareId: event.shareId,\n                  metadata: event.metadata || {}\n                }\n              }),\n              error = _yield$supabase$from$.error;\n            if (error) {\n              _EventLogger.EventLogger.error('Analytics', 'Failed to track share event:', error);\n            }\n          } catch (error) {\n            _EventLogger.EventLogger.error('Analytics', 'Error tracking share event:', error);\n          }\n        });\n        function trackShareEvent(_x) {\n          return _trackShareEvent.apply(this, arguments);\n        }\n        return trackShareEvent;\n      }()\n      /**\n       * Track a view event for a shared automation\n       */\n      )\n    }, {\n      key: \"trackViewEvent\",\n      value: (function () {\n        var _trackViewEvent = (0, _asyncToGenerator2.default)(function* (shareId, viewerInfo) {\n          try {\n            // Increment view count in public_shares\n            yield _client.supabase.rpc('increment_share_access_count', {\n              p_share_id: shareId\n            });\n\n            // Log detailed view event if we have a view_logs table\n            var _yield$supabase$from$2 = yield _client.supabase.from('share_views').insert({\n                share_id: shareId,\n                viewer_info: viewerInfo || {},\n                viewed_at: new Date().toISOString()\n              }),\n              error = _yield$supabase$from$2.error;\n            if (error && !error.message.includes('does not exist')) {\n              _EventLogger.EventLogger.error('Analytics', 'Failed to track view event:', error);\n            }\n          } catch (error) {\n            _EventLogger.EventLogger.error('Analytics', 'Error tracking view event:', error);\n          }\n        });\n        function trackViewEvent(_x2, _x3) {\n          return _trackViewEvent.apply(this, arguments);\n        }\n        return trackViewEvent;\n      }()\n      /**\n       * Get comprehensive analytics for an automation\n       */\n      )\n    }, {\n      key: \"getAutomationAnalytics\",\n      value: (function () {\n        var _getAutomationAnalytics = (0, _asyncToGenerator2.default)(function* (automationId) {\n          try {\n            // Get all shares for this automation\n            var _yield$supabase$from$3 = yield _client.supabase.from('public_shares').select('*').eq('automation_id', automationId),\n              shares = _yield$supabase$from$3.data,\n              sharesError = _yield$supabase$from$3.error;\n            if (sharesError) throw sharesError;\n\n            // Get sharing logs\n            var _yield$supabase$from$4 = yield _client.supabase.from('sharing_logs').select('*').eq('automation_id', automationId).order('shared_at', {\n                ascending: false\n              }),\n              logs = _yield$supabase$from$4.data,\n              logsError = _yield$supabase$from$4.error;\n            if (logsError) throw logsError;\n\n            // Calculate analytics\n            var totalShares = (logs == null ? void 0 : logs.length) || 0;\n            var totalViews = (shares || []).reduce(function (sum, share) {\n              return sum + (share.access_count || 0);\n            }, 0);\n\n            // Share methods breakdown\n            var sharesByMethod = (logs || []).reduce(function (acc, log) {\n              acc[log.method] = (acc[log.method] || 0) + 1;\n              return acc;\n            }, {});\n\n            // Get execution data\n            var _yield$supabase$from$5 = yield _client.supabase.from('executions').select('*').eq('automation_id', automationId).eq('source', 'web'),\n              executions = _yield$supabase$from$5.data;\n            var webExecutions = (executions == null ? void 0 : executions.length) || 0;\n            var conversionRate = totalViews > 0 ? webExecutions / totalViews * 100 : 0;\n\n            // Calculate hourly statistics\n            var hourlyStats = this.calculateHourlyStats(logs || []);\n\n            // Calculate daily growth\n            var dailyStats = yield this.calculateDailyStats(automationId);\n\n            // Recent shares\n            var recentShares = (logs || []).slice(0, 10).map(function (log) {\n              return {\n                id: log.id,\n                automationId: log.automation_id,\n                method: log.method,\n                sharedBy: log.shared_by,\n                sharedAt: new Date(log.shared_at),\n                recipients: log.recipients,\n                metadata: log.share_data\n              };\n            });\n            return {\n              automationId: automationId,\n              totalShares: totalShares,\n              totalViews: totalViews,\n              uniqueViewers: Math.floor(totalViews * 0.7),\n              // Estimate unique viewers\n              sharesByMethod: sharesByMethod,\n              viewsByPlatform: {},\n              // Would need view tracking to populate\n              viewsByLocation: {},\n              // Would need geo tracking to populate\n              conversionRate: conversionRate,\n              engagementRate: totalViews > 0 ? webExecutions / totalViews * 100 : 0,\n              recentShares: recentShares,\n              popularShareTimes: hourlyStats,\n              shareGrowth: dailyStats\n            };\n          } catch (error) {\n            _EventLogger.EventLogger.error('Analytics', 'Failed to get automation analytics:', error);\n            return this.getEmptyAnalytics(automationId);\n          }\n        });\n        function getAutomationAnalytics(_x4) {\n          return _getAutomationAnalytics.apply(this, arguments);\n        }\n        return getAutomationAnalytics;\n      }()\n      /**\n       * Get analytics for all user's shared automations\n       */\n      )\n    }, {\n      key: \"getUserSharingAnalytics\",\n      value: (function () {\n        var _getUserSharingAnalytics = (0, _asyncToGenerator2.default)(function* (userId) {\n          try {\n            // Get all user's automations\n            var _yield$supabase$from$6 = yield _client.supabase.from('automations').select('id, title').eq('created_by', userId),\n              automations = _yield$supabase$from$6.data;\n            if (!automations || automations.length === 0) {\n              return {\n                totalShares: 0,\n                totalViews: 0,\n                topAutomations: [],\n                sharesByMethod: {}\n              };\n            }\n            var automationIds = automations.map(function (a) {\n              return a.id;\n            });\n\n            // Get all shares for user's automations\n            var _yield$supabase$from$7 = yield _client.supabase.from('public_shares').select('automation_id, access_count').in('automation_id', automationIds),\n              shares = _yield$supabase$from$7.data;\n\n            // Get all sharing logs\n            var _yield$supabase$from$8 = yield _client.supabase.from('sharing_logs').select('automation_id, method').in('automation_id', automationIds),\n              logs = _yield$supabase$from$8.data;\n\n            // Calculate totals\n            var totalViews = (shares || []).reduce(function (sum, share) {\n              return sum + (share.access_count || 0);\n            }, 0);\n            var totalShares = (logs == null ? void 0 : logs.length) || 0;\n\n            // Share methods breakdown\n            var sharesByMethod = (logs || []).reduce(function (acc, log) {\n              acc[log.method] = (acc[log.method] || 0) + 1;\n              return acc;\n            }, {});\n\n            // Top automations by views\n            var automationStats = new Map();\n            (shares || []).forEach(function (share) {\n              var stats = automationStats.get(share.automation_id) || {\n                shares: 0,\n                views: 0\n              };\n              stats.views += share.access_count || 0;\n              automationStats.set(share.automation_id, stats);\n            });\n            (logs || []).forEach(function (log) {\n              var stats = automationStats.get(log.automation_id) || {\n                shares: 0,\n                views: 0\n              };\n              stats.shares += 1;\n              automationStats.set(log.automation_id, stats);\n            });\n            var topAutomations = Array.from(automationStats.entries()).map(function (_ref) {\n              var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n                automationId = _ref2[0],\n                stats = _ref2[1];\n              var automation = automations.find(function (a) {\n                return a.id === automationId;\n              });\n              return {\n                automationId: automationId,\n                title: (automation == null ? void 0 : automation.title) || 'Unknown',\n                shares: stats.shares,\n                views: stats.views\n              };\n            }).sort(function (a, b) {\n              return b.views - a.views;\n            }).slice(0, 5);\n            return {\n              totalShares: totalShares,\n              totalViews: totalViews,\n              topAutomations: topAutomations,\n              sharesByMethod: sharesByMethod\n            };\n          } catch (error) {\n            _EventLogger.EventLogger.error('Analytics', 'Failed to get user sharing analytics:', error);\n            return {\n              totalShares: 0,\n              totalViews: 0,\n              topAutomations: [],\n              sharesByMethod: {}\n            };\n          }\n        });\n        function getUserSharingAnalytics(_x5) {\n          return _getUserSharingAnalytics.apply(this, arguments);\n        }\n        return getUserSharingAnalytics;\n      }()\n      /**\n       * Get share performance metrics\n       */\n      )\n    }, {\n      key: \"getSharePerformance\",\n      value: (function () {\n        var _getSharePerformance = (0, _asyncToGenerator2.default)(function* (shareId) {\n          try {\n            // Get share data\n            var _yield$supabase$from$9 = yield _client.supabase.from('public_shares').select('*').eq('id', shareId).single(),\n              share = _yield$supabase$from$9.data,\n              error = _yield$supabase$from$9.error;\n            if (error || !share) {\n              throw new Error('Share not found');\n            }\n\n            // Get executions from this share\n            var _yield$supabase$from$0 = yield _client.supabase.from('executions').select('*').eq('automation_id', share.automation_id).eq('source', 'web').gte('started_at', share.created_at),\n              executions = _yield$supabase$from$0.data;\n            return {\n              views: share.access_count || 0,\n              executions: (executions == null ? void 0 : executions.length) || 0,\n              lastViewed: share.last_accessed_at ? new Date(share.last_accessed_at) : undefined,\n              viewsByDay: [] // Would need daily tracking to populate\n            };\n          } catch (error) {\n            _EventLogger.EventLogger.error('Analytics', 'Failed to get share performance:', error);\n            return {\n              views: 0,\n              executions: 0,\n              viewsByDay: []\n            };\n          }\n        });\n        function getSharePerformance(_x6) {\n          return _getSharePerformance.apply(this, arguments);\n        }\n        return getSharePerformance;\n      }() // Private helper methods\n      )\n    }, {\n      key: \"calculateHourlyStats\",\n      value: function calculateHourlyStats(logs) {\n        var hourlyMap = new Map();\n\n        // Initialize all hours\n        for (var hour = 0; hour < 24; hour++) {\n          hourlyMap.set(hour, {\n            shares: 0,\n            views: 0\n          });\n        }\n\n        // Count shares by hour\n        logs.forEach(function (log) {\n          var hour = new Date(log.shared_at).getHours();\n          var stats = hourlyMap.get(hour);\n          stats.shares += 1;\n        });\n        return Array.from(hourlyMap.entries()).map(function (_ref3) {\n          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n            hour = _ref4[0],\n            stats = _ref4[1];\n          return {\n            hour: hour,\n            shares: stats.shares,\n            views: stats.views\n          };\n        });\n      }\n    }, {\n      key: \"calculateDailyStats\",\n      value: function () {\n        var _calculateDailyStats = (0, _asyncToGenerator2.default)(function* (automationId) {\n          try {\n            // Get last 30 days of data\n            var thirtyDaysAgo = new Date();\n            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n            var _yield$supabase$from$1 = yield _client.supabase.from('sharing_logs').select('shared_at').eq('automation_id', automationId).gte('shared_at', thirtyDaysAgo.toISOString()),\n              logs = _yield$supabase$from$1.data;\n            var _yield$supabase$from$10 = yield _client.supabase.from('executions').select('started_at').eq('automation_id', automationId).eq('source', 'web').gte('started_at', thirtyDaysAgo.toISOString()),\n              executions = _yield$supabase$from$10.data;\n\n            // Group by day\n            var dailyMap = new Map();\n\n            // Initialize last 30 days\n            for (var i = 0; i < 30; i++) {\n              var date = new Date();\n              date.setDate(date.getDate() - i);\n              var dateStr = date.toISOString().split('T')[0];\n              dailyMap.set(dateStr, {\n                date: dateStr,\n                shares: 0,\n                views: 0,\n                executions: 0\n              });\n            }\n\n            // Count shares\n            (logs || []).forEach(function (log) {\n              var dateStr = new Date(log.shared_at).toISOString().split('T')[0];\n              var stats = dailyMap.get(dateStr);\n              if (stats) stats.shares += 1;\n            });\n\n            // Count executions\n            (executions || []).forEach(function (exec) {\n              var dateStr = new Date(exec.started_at).toISOString().split('T')[0];\n              var stats = dailyMap.get(dateStr);\n              if (stats) stats.executions += 1;\n            });\n            return Array.from(dailyMap.values()).sort(function (a, b) {\n              return a.date.localeCompare(b.date);\n            });\n          } catch (error) {\n            _EventLogger.EventLogger.error('Analytics', 'Failed to calculate daily stats:', error);\n            return [];\n          }\n        });\n        function calculateDailyStats(_x7) {\n          return _calculateDailyStats.apply(this, arguments);\n        }\n        return calculateDailyStats;\n      }()\n    }, {\n      key: \"getEmptyAnalytics\",\n      value: function getEmptyAnalytics(automationId) {\n        return {\n          automationId: automationId,\n          totalShares: 0,\n          totalViews: 0,\n          uniqueViewers: 0,\n          sharesByMethod: {},\n          viewsByPlatform: {},\n          viewsByLocation: {},\n          conversionRate: 0,\n          engagementRate: 0,\n          recentShares: [],\n          popularShareTimes: [],\n          shareGrowth: []\n        };\n      }\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance() {\n        if (!SharingAnalyticsService.instance) {\n          SharingAnalyticsService.instance = new SharingAnalyticsService();\n        }\n        return SharingAnalyticsService.instance;\n      }\n    }]);\n  }();\n  var sharingAnalyticsService = exports.sharingAnalyticsService = SharingAnalyticsService.getInstance();\n});","lineCount":422,"map":[[11,2,1,0],[11,6,1,0,"_client"],[11,13,1,0],[11,16,1,0,"require"],[11,23,1,0],[11,24,1,0,"_dependencyMap"],[11,38,1,0],[12,2,2,0],[12,6,2,0,"_EventLogger"],[12,18,2,0],[12,21,2,0,"require"],[12,28,2,0],[12,29,2,0,"_dependencyMap"],[12,43,2,0],[13,2,2,54],[13,6,59,13,"SharingAnalyticsService"],[13,29,59,36],[13,32,59,36,"exports"],[13,39,59,36],[13,40,59,36,"SharingAnalyticsService"],[13,63,59,36],[14,4,62,2],[14,13,62,2,"SharingAnalyticsService"],[14,37,62,2],[14,39,62,24],[15,6,62,24],[15,10,62,24,"_classCallCheck2"],[15,26,62,24],[15,27,62,24,"default"],[15,34,62,24],[15,42,62,24,"SharingAnalyticsService"],[15,65,62,24],[16,4,62,25],[17,4,62,26],[17,15,62,26,"_createClass2"],[17,28,62,26],[17,29,62,26,"default"],[17,36,62,26],[17,38,62,26,"SharingAnalyticsService"],[17,61,62,26],[18,6,62,26,"key"],[18,9,62,26],[19,6,62,26,"value"],[19,11,62,26],[20,6,71,2],[21,0,72,0],[22,0,73,0],[23,6,71,2],[24,8,71,2],[24,12,71,2,"_trackShareEvent"],[24,28,71,2],[24,35,71,2,"_asyncToGenerator2"],[24,53,71,2],[24,54,71,2,"default"],[24,61,71,2],[24,63,74,2],[24,74,74,24,"event"],[24,79,74,66],[24,81,74,83],[25,10,75,4],[25,14,75,8],[26,12,76,6],[26,16,76,6,"_yield$supabase$from$"],[26,37,76,6],[26,46,76,30,"supabase"],[26,62,76,38],[26,63,77,9,"from"],[26,67,77,13],[26,68,77,14],[26,82,77,28],[26,83,77,29],[26,84,78,9,"insert"],[26,90,78,15],[26,91,78,16],[27,16,79,10,"automation_id"],[27,29,79,23],[27,31,79,25,"event"],[27,36,79,30],[27,37,79,31,"automationId"],[27,49,79,43],[28,16,80,10,"method"],[28,22,80,16],[28,24,80,18,"event"],[28,29,80,23],[28,30,80,24,"method"],[28,36,80,30],[29,16,81,10,"shared_by"],[29,25,81,19],[29,27,81,21,"event"],[29,32,81,26],[29,33,81,27,"sharedBy"],[29,41,81,35],[30,16,82,10,"recipients"],[30,26,82,20],[30,28,82,22,"event"],[30,33,82,27],[30,34,82,28,"recipients"],[30,44,82,38],[30,48,82,42],[30,50,82,44],[31,16,83,10,"share_data"],[31,26,83,20],[31,28,83,22],[32,18,84,12,"shareId"],[32,25,84,19],[32,27,84,21,"event"],[32,32,84,26],[32,33,84,27,"shareId"],[32,40,84,34],[33,18,85,12,"metadata"],[33,26,85,20],[33,28,85,22,"event"],[33,33,85,27],[33,34,85,28,"metadata"],[33,42,85,36],[33,46,85,40],[33,47,85,41],[34,16,86,10],[35,14,87,8],[35,15,87,9],[35,16,87,10],[36,14,76,14,"error"],[36,19,76,19],[36,22,76,19,"_yield$supabase$from$"],[36,43,76,19],[36,44,76,14,"error"],[36,49,76,19],[37,12,89,6],[37,16,89,10,"error"],[37,21,89,15],[37,23,89,17],[38,14,90,8,"EventLogger"],[38,38,90,19],[38,39,90,20,"error"],[38,44,90,25],[38,45,90,26],[38,56,90,37],[38,58,90,39],[38,88,90,69],[38,90,90,71,"error"],[38,95,90,85],[38,96,90,86],[39,12,91,6],[40,10,92,4],[40,11,92,5],[40,12,92,6],[40,19,92,13,"error"],[40,24,92,18],[40,26,92,20],[41,12,93,6,"EventLogger"],[41,36,93,17],[41,37,93,18,"error"],[41,42,93,23],[41,43,93,24],[41,54,93,35],[41,56,93,37],[41,85,93,66],[41,87,93,68,"error"],[41,92,93,82],[41,93,93,83],[42,10,94,4],[43,8,95,2],[43,9,95,3],[44,8,95,3],[44,17,74,8,"trackShareEvent"],[44,32,74,23,"trackShareEvent"],[44,33,74,23,"_x"],[44,35,74,23],[45,10,74,23],[45,17,74,23,"_trackShareEvent"],[45,33,74,23],[45,34,74,23,"apply"],[45,39,74,23],[45,46,74,23,"arguments"],[45,55,74,23],[46,8,74,23],[47,8,74,23],[47,15,74,8,"trackShareEvent"],[47,30,74,23],[48,6,74,23],[49,6,97,2],[50,0,98,0],[51,0,99,0],[52,6,97,2],[53,4,97,2],[54,6,97,2,"key"],[54,9,97,2],[55,6,97,2,"value"],[55,11,97,2],[56,8,97,2],[56,12,97,2,"_trackViewEvent"],[56,27,97,2],[56,34,97,2,"_asyncToGenerator2"],[56,52,97,2],[56,53,97,2,"default"],[56,60,97,2],[56,62,100,2],[56,73,100,23,"shareId"],[56,80,100,38],[56,82,100,40,"viewerInfo"],[56,92,100,56],[56,94,100,73],[57,10,101,4],[57,14,101,8],[58,12,102,6],[59,12,103,6],[59,18,103,12,"supabase"],[59,34,103,20],[59,35,103,21,"rpc"],[59,38,103,24],[59,39,103,25],[59,69,103,55],[59,71,103,57],[60,14,103,59,"p_share_id"],[60,24,103,69],[60,26,103,71,"shareId"],[61,12,103,79],[61,13,103,80],[61,14,103,81],[63,12,105,6],[64,12,106,6],[64,16,106,6,"_yield$supabase$from$2"],[64,38,106,6],[64,47,106,30,"supabase"],[64,63,106,38],[64,64,107,9,"from"],[64,68,107,13],[64,69,107,14],[64,82,107,27],[64,83,107,28],[64,84,108,9,"insert"],[64,90,108,15],[64,91,108,16],[65,16,109,10,"share_id"],[65,24,109,18],[65,26,109,20,"shareId"],[65,33,109,27],[66,16,110,10,"viewer_info"],[66,27,110,21],[66,29,110,23,"viewerInfo"],[66,39,110,33],[66,43,110,37],[66,44,110,38],[66,45,110,39],[67,16,111,10,"viewed_at"],[67,25,111,19],[67,27,111,21],[67,31,111,25,"Date"],[67,35,111,29],[67,36,111,30],[67,37,111,31],[67,38,111,32,"toISOString"],[67,49,111,43],[67,50,111,44],[68,14,112,8],[68,15,112,9],[68,16,112,10],[69,14,106,14,"error"],[69,19,106,19],[69,22,106,19,"_yield$supabase$from$2"],[69,44,106,19],[69,45,106,14,"error"],[69,50,106,19],[70,12,114,6],[70,16,114,10,"error"],[70,21,114,15],[70,25,114,19],[70,26,114,20,"error"],[70,31,114,25],[70,32,114,26,"message"],[70,39,114,33],[70,40,114,34,"includes"],[70,48,114,42],[70,49,114,43],[70,65,114,59],[70,66,114,60],[70,68,114,62],[71,14,115,8,"EventLogger"],[71,38,115,19],[71,39,115,20,"error"],[71,44,115,25],[71,45,115,26],[71,56,115,37],[71,58,115,39],[71,87,115,68],[71,89,115,70,"error"],[71,94,115,84],[71,95,115,85],[72,12,116,6],[73,10,117,4],[73,11,117,5],[73,12,117,6],[73,19,117,13,"error"],[73,24,117,18],[73,26,117,20],[74,12,118,6,"EventLogger"],[74,36,118,17],[74,37,118,18,"error"],[74,42,118,23],[74,43,118,24],[74,54,118,35],[74,56,118,37],[74,84,118,65],[74,86,118,67,"error"],[74,91,118,81],[74,92,118,82],[75,10,119,4],[76,8,120,2],[76,9,120,3],[77,8,120,3],[77,17,100,8,"trackViewEvent"],[77,31,100,22,"trackViewEvent"],[77,32,100,22,"_x2"],[77,35,100,22],[77,37,100,22,"_x3"],[77,40,100,22],[78,10,100,22],[78,17,100,22,"_trackViewEvent"],[78,32,100,22],[78,33,100,22,"apply"],[78,38,100,22],[78,45,100,22,"arguments"],[78,54,100,22],[79,8,100,22],[80,8,100,22],[80,15,100,8,"trackViewEvent"],[80,29,100,22],[81,6,100,22],[82,6,122,2],[83,0,123,0],[84,0,124,0],[85,6,122,2],[86,4,122,2],[87,6,122,2,"key"],[87,9,122,2],[88,6,122,2,"value"],[88,11,122,2],[89,8,122,2],[89,12,122,2,"_getAutomationAnalytics"],[89,35,122,2],[89,42,122,2,"_asyncToGenerator2"],[89,60,122,2],[89,61,122,2,"default"],[89,68,122,2],[89,70,125,2],[89,81,125,31,"automationId"],[89,93,125,51],[89,95,125,78],[90,10,126,4],[90,14,126,8],[91,12,127,6],[92,12,128,6],[92,16,128,6,"_yield$supabase$from$3"],[92,38,128,6],[92,47,128,57,"supabase"],[92,63,128,65],[92,64,129,9,"from"],[92,68,129,13],[92,69,129,14],[92,84,129,29],[92,85,129,30],[92,86,130,9,"select"],[92,92,130,15],[92,93,130,16],[92,96,130,19],[92,97,130,20],[92,98,131,9,"eq"],[92,100,131,11],[92,101,131,12],[92,116,131,27],[92,118,131,29,"automationId"],[92,130,131,41],[92,131,131,42],[93,14,128,20,"shares"],[93,20,128,26],[93,23,128,26,"_yield$supabase$from$3"],[93,45,128,26],[93,46,128,14,"data"],[93,50,128,18],[94,14,128,35,"sharesError"],[94,25,128,46],[94,28,128,46,"_yield$supabase$from$3"],[94,50,128,46],[94,51,128,28,"error"],[94,56,128,33],[95,12,133,6],[95,16,133,10,"sharesError"],[95,27,133,21],[95,29,133,23],[95,35,133,29,"sharesError"],[95,46,133,40],[97,12,135,6],[98,12,136,6],[98,16,136,6,"_yield$supabase$from$4"],[98,38,136,6],[98,47,136,53,"supabase"],[98,63,136,61],[98,64,137,9,"from"],[98,68,137,13],[98,69,137,14],[98,83,137,28],[98,84,137,29],[98,85,138,9,"select"],[98,91,138,15],[98,92,138,16],[98,95,138,19],[98,96,138,20],[98,97,139,9,"eq"],[98,99,139,11],[98,100,139,12],[98,115,139,27],[98,117,139,29,"automationId"],[98,129,139,41],[98,130,139,42],[98,131,140,9,"order"],[98,136,140,14],[98,137,140,15],[98,148,140,26],[98,150,140,28],[99,16,140,30,"ascending"],[99,25,140,39],[99,27,140,41],[100,14,140,47],[100,15,140,48],[100,16,140,49],[101,14,136,20,"logs"],[101,18,136,24],[101,21,136,24,"_yield$supabase$from$4"],[101,43,136,24],[101,44,136,14,"data"],[101,48,136,18],[102,14,136,33,"logsError"],[102,23,136,42],[102,26,136,42,"_yield$supabase$from$4"],[102,48,136,42],[102,49,136,26,"error"],[102,54,136,31],[103,12,142,6],[103,16,142,10,"logsError"],[103,25,142,19],[103,27,142,21],[103,33,142,27,"logsError"],[103,42,142,36],[105,12,144,6],[106,12,145,6],[106,16,145,12,"totalShares"],[106,27,145,23],[106,30,145,26],[106,31,145,26,"logs"],[106,35,145,30],[106,55,145,26,"logs"],[106,59,145,30],[106,60,145,32,"length"],[106,66,145,38],[106,71,145,42],[106,72,145,43],[107,12,146,6],[107,16,146,12,"totalViews"],[107,26,146,22],[107,29,146,25],[107,30,146,26,"shares"],[107,36,146,32],[107,40,146,36],[107,42,146,38],[107,44,146,40,"reduce"],[107,50,146,46],[107,51,146,47],[107,61,146,48,"sum"],[107,64,146,51],[107,66,146,53,"share"],[107,71,146,58],[108,14,146,58],[108,21,146,63,"sum"],[108,24,146,66],[108,28,146,70,"share"],[108,33,146,75],[108,34,146,76,"access_count"],[108,46,146,88],[108,50,146,92],[108,51,146,93],[108,52,146,94],[109,12,146,94],[109,15,146,96],[109,16,146,97],[109,17,146,98],[111,12,148,6],[112,12,149,6],[112,16,149,12,"sharesByMethod"],[112,30,149,26],[112,33,149,29],[112,34,149,30,"logs"],[112,38,149,34],[112,42,149,38],[112,44,149,40],[112,46,149,42,"reduce"],[112,52,149,48],[112,53,149,49],[112,63,149,50,"acc"],[112,66,149,53],[112,68,149,55,"log"],[112,71,149,58],[112,73,149,63],[113,14,150,8,"acc"],[113,17,150,11],[113,18,150,12,"log"],[113,21,150,15],[113,22,150,16,"method"],[113,28,150,22],[113,29,150,23],[113,32,150,26],[113,33,150,27,"acc"],[113,36,150,30],[113,37,150,31,"log"],[113,40,150,34],[113,41,150,35,"method"],[113,47,150,41],[113,48,150,42],[113,52,150,46],[113,53,150,47],[113,57,150,51],[113,58,150,52],[114,14,151,8],[114,21,151,15,"acc"],[114,24,151,18],[115,12,152,6],[115,13,152,7],[115,15,152,9],[115,16,152,10],[115,17,152,37],[115,18,152,38],[117,12,154,6],[118,12,155,6],[118,16,155,6,"_yield$supabase$from$5"],[118,38,155,6],[118,47,155,41,"supabase"],[118,63,155,49],[118,64,156,9,"from"],[118,68,156,13],[118,69,156,14],[118,81,156,26],[118,82,156,27],[118,83,157,9,"select"],[118,89,157,15],[118,90,157,16],[118,93,157,19],[118,94,157,20],[118,95,158,9,"eq"],[118,97,158,11],[118,98,158,12],[118,113,158,27],[118,115,158,29,"automationId"],[118,127,158,41],[118,128,158,42],[118,129,159,9,"eq"],[118,131,159,11],[118,132,159,12],[118,140,159,20],[118,142,159,22],[118,147,159,27],[118,148,159,28],[119,14,155,20,"executions"],[119,24,155,30],[119,27,155,30,"_yield$supabase$from$5"],[119,49,155,30],[119,50,155,14,"data"],[119,54,155,18],[120,12,161,6],[120,16,161,12,"webExecutions"],[120,29,161,25],[120,32,161,28],[120,33,161,28,"executions"],[120,43,161,38],[120,63,161,28,"executions"],[120,73,161,38],[120,74,161,40,"length"],[120,80,161,46],[120,85,161,50],[120,86,161,51],[121,12,162,6],[121,16,162,12,"conversionRate"],[121,30,162,26],[121,33,162,29,"totalViews"],[121,43,162,39],[121,46,162,42],[121,47,162,43],[121,50,162,47,"webExecutions"],[121,63,162,60],[121,66,162,63,"totalViews"],[121,76,162,73],[121,79,162,77],[121,82,162,80],[121,85,162,83],[121,86,162,84],[123,12,164,6],[124,12,165,6],[124,16,165,12,"hourlyStats"],[124,27,165,23],[124,30,165,26],[124,34,165,30],[124,35,165,31,"calculateHourlyStats"],[124,55,165,51],[124,56,165,52,"logs"],[124,60,165,56],[124,64,165,60],[124,66,165,62],[124,67,165,63],[126,12,167,6],[127,12,168,6],[127,16,168,12,"dailyStats"],[127,26,168,22],[127,35,168,31],[127,39,168,35],[127,40,168,36,"calculateDailyStats"],[127,59,168,55],[127,60,168,56,"automationId"],[127,72,168,68],[127,73,168,69],[129,12,170,6],[130,12,171,6],[130,16,171,12,"recentShares"],[130,28,171,24],[130,31,171,27],[130,32,171,28,"logs"],[130,36,171,32],[130,40,171,36],[130,42,171,38],[130,44,171,40,"slice"],[130,49,171,45],[130,50,171,46],[130,51,171,47],[130,53,171,49],[130,55,171,51],[130,56,171,52],[130,57,171,53,"map"],[130,60,171,56],[130,61,171,57],[130,71,171,57,"log"],[130,74,171,60],[131,14,171,60],[131,21,171,65],[132,16,172,8,"id"],[132,18,172,10],[132,20,172,12,"log"],[132,23,172,15],[132,24,172,16,"id"],[132,26,172,18],[133,16,173,8,"automationId"],[133,28,173,20],[133,30,173,22,"log"],[133,33,173,25],[133,34,173,26,"automation_id"],[133,47,173,39],[134,16,174,8,"method"],[134,22,174,14],[134,24,174,16,"log"],[134,27,174,19],[134,28,174,20,"method"],[134,34,174,26],[135,16,175,8,"sharedBy"],[135,24,175,16],[135,26,175,18,"log"],[135,29,175,21],[135,30,175,22,"shared_by"],[135,39,175,31],[136,16,176,8,"sharedAt"],[136,24,176,16],[136,26,176,18],[136,30,176,22,"Date"],[136,34,176,26],[136,35,176,27,"log"],[136,38,176,30],[136,39,176,31,"shared_at"],[136,48,176,40],[136,49,176,41],[137,16,177,8,"recipients"],[137,26,177,18],[137,28,177,20,"log"],[137,31,177,23],[137,32,177,24,"recipients"],[137,42,177,34],[138,16,178,8,"metadata"],[138,24,178,16],[138,26,178,18,"log"],[138,29,178,21],[138,30,178,22,"share_data"],[139,14,179,6],[139,15,179,7],[140,12,179,7],[140,13,179,8],[140,14,179,9],[141,12,181,6],[141,19,181,13],[142,14,182,8,"automationId"],[142,26,182,20],[142,28,182,8,"automationId"],[142,40,182,20],[143,14,183,8,"totalShares"],[143,25,183,19],[143,27,183,8,"totalShares"],[143,38,183,19],[144,14,184,8,"totalViews"],[144,24,184,18],[144,26,184,8,"totalViews"],[144,36,184,18],[145,14,185,8,"uniqueViewers"],[145,27,185,21],[145,29,185,23,"Math"],[145,33,185,27],[145,34,185,28,"floor"],[145,39,185,33],[145,40,185,34,"totalViews"],[145,50,185,44],[145,53,185,47],[145,56,185,50],[145,57,185,51],[146,14,185,53],[147,14,186,8,"sharesByMethod"],[147,28,186,22],[147,30,186,8,"sharesByMethod"],[147,44,186,22],[148,14,187,8,"viewsByPlatform"],[148,29,187,23],[148,31,187,25],[148,32,187,26],[148,33,187,27],[149,14,187,29],[150,14,188,8,"viewsByLocation"],[150,29,188,23],[150,31,188,25],[150,32,188,26],[150,33,188,27],[151,14,188,29],[152,14,189,8,"conversionRate"],[152,28,189,22],[152,30,189,8,"conversionRate"],[152,44,189,22],[153,14,190,8,"engagementRate"],[153,28,190,22],[153,30,190,24,"totalViews"],[153,40,190,34],[153,43,190,37],[153,44,190,38],[153,47,190,42,"webExecutions"],[153,60,190,55],[153,63,190,58,"totalViews"],[153,73,190,68],[153,76,190,72],[153,79,190,75],[153,82,190,78],[153,83,190,79],[154,14,191,8,"recentShares"],[154,26,191,20],[154,28,191,8,"recentShares"],[154,40,191,20],[155,14,192,8,"popularShareTimes"],[155,31,192,25],[155,33,192,27,"hourlyStats"],[155,44,192,38],[156,14,193,8,"shareGrowth"],[156,25,193,19],[156,27,193,21,"dailyStats"],[157,12,194,6],[157,13,194,7],[158,10,196,4],[158,11,196,5],[158,12,196,6],[158,19,196,13,"error"],[158,24,196,18],[158,26,196,20],[159,12,197,6,"EventLogger"],[159,36,197,17],[159,37,197,18,"error"],[159,42,197,23],[159,43,197,24],[159,54,197,35],[159,56,197,37],[159,93,197,74],[159,95,197,76,"error"],[159,100,197,90],[159,101,197,91],[160,12,198,6],[160,19,198,13],[160,23,198,17],[160,24,198,18,"getEmptyAnalytics"],[160,41,198,35],[160,42,198,36,"automationId"],[160,54,198,48],[160,55,198,49],[161,10,199,4],[162,8,200,2],[162,9,200,3],[163,8,200,3],[163,17,125,8,"getAutomationAnalytics"],[163,39,125,30,"getAutomationAnalytics"],[163,40,125,30,"_x4"],[163,43,125,30],[164,10,125,30],[164,17,125,30,"_getAutomationAnalytics"],[164,40,125,30],[164,41,125,30,"apply"],[164,46,125,30],[164,53,125,30,"arguments"],[164,62,125,30],[165,8,125,30],[166,8,125,30],[166,15,125,8,"getAutomationAnalytics"],[166,37,125,30],[167,6,125,30],[168,6,202,2],[169,0,203,0],[170,0,204,0],[171,6,202,2],[172,4,202,2],[173,6,202,2,"key"],[173,9,202,2],[174,6,202,2,"value"],[174,11,202,2],[175,8,202,2],[175,12,202,2,"_getUserSharingAnalytics"],[175,36,202,2],[175,43,202,2,"_asyncToGenerator2"],[175,61,202,2],[175,62,202,2,"default"],[175,69,202,2],[175,71,205,2],[175,82,205,32,"userId"],[175,88,205,46],[175,90,215,5],[176,10,216,4],[176,14,216,8],[177,12,217,6],[178,12,218,6],[178,16,218,6,"_yield$supabase$from$6"],[178,38,218,6],[178,47,218,42,"supabase"],[178,63,218,50],[178,64,219,9,"from"],[178,68,219,13],[178,69,219,14],[178,82,219,27],[178,83,219,28],[178,84,220,9,"select"],[178,90,220,15],[178,91,220,16],[178,102,220,27],[178,103,220,28],[178,104,221,9,"eq"],[178,106,221,11],[178,107,221,12],[178,119,221,24],[178,121,221,26,"userId"],[178,127,221,32],[178,128,221,33],[179,14,218,20,"automations"],[179,25,218,31],[179,28,218,31,"_yield$supabase$from$6"],[179,50,218,31],[179,51,218,14,"data"],[179,55,218,18],[180,12,223,6],[180,16,223,10],[180,17,223,11,"automations"],[180,28,223,22],[180,32,223,26,"automations"],[180,43,223,37],[180,44,223,38,"length"],[180,50,223,44],[180,55,223,49],[180,56,223,50],[180,58,223,52],[181,14,224,8],[181,21,224,15],[182,16,225,10,"totalShares"],[182,27,225,21],[182,29,225,23],[182,30,225,24],[183,16,226,10,"totalViews"],[183,26,226,20],[183,28,226,22],[183,29,226,23],[184,16,227,10,"topAutomations"],[184,30,227,24],[184,32,227,26],[184,34,227,28],[185,16,228,10,"sharesByMethod"],[185,30,228,24],[185,32,228,26],[185,33,228,27],[186,14,229,8],[186,15,229,9],[187,12,230,6],[188,12,232,6],[188,16,232,12,"automationIds"],[188,29,232,25],[188,32,232,28,"automations"],[188,43,232,39],[188,44,232,40,"map"],[188,47,232,43],[188,48,232,44],[188,58,232,44,"a"],[188,59,232,45],[189,14,232,45],[189,21,232,49,"a"],[189,22,232,50],[189,23,232,51,"id"],[189,25,232,53],[190,12,232,53],[190,14,232,54],[192,12,234,6],[193,12,235,6],[193,16,235,6,"_yield$supabase$from$7"],[193,38,235,6],[193,47,235,37,"supabase"],[193,63,235,45],[193,64,236,9,"from"],[193,68,236,13],[193,69,236,14],[193,84,236,29],[193,85,236,30],[193,86,237,9,"select"],[193,92,237,15],[193,93,237,16],[193,122,237,45],[193,123,237,46],[193,124,238,9,"in"],[193,126,238,11],[193,127,238,12],[193,142,238,27],[193,144,238,29,"automationIds"],[193,157,238,42],[193,158,238,43],[194,14,235,20,"shares"],[194,20,235,26],[194,23,235,26,"_yield$supabase$from$7"],[194,45,235,26],[194,46,235,14,"data"],[194,50,235,18],[196,12,240,6],[197,12,241,6],[197,16,241,6,"_yield$supabase$from$8"],[197,38,241,6],[197,47,241,35,"supabase"],[197,63,241,43],[197,64,242,9,"from"],[197,68,242,13],[197,69,242,14],[197,83,242,28],[197,84,242,29],[197,85,243,9,"select"],[197,91,243,15],[197,92,243,16],[197,115,243,39],[197,116,243,40],[197,117,244,9,"in"],[197,119,244,11],[197,120,244,12],[197,135,244,27],[197,137,244,29,"automationIds"],[197,150,244,42],[197,151,244,43],[198,14,241,20,"logs"],[198,18,241,24],[198,21,241,24,"_yield$supabase$from$8"],[198,43,241,24],[198,44,241,14,"data"],[198,48,241,18],[200,12,246,6],[201,12,247,6],[201,16,247,12,"totalViews"],[201,26,247,22],[201,29,247,25],[201,30,247,26,"shares"],[201,36,247,32],[201,40,247,36],[201,42,247,38],[201,44,247,40,"reduce"],[201,50,247,46],[201,51,247,47],[201,61,247,48,"sum"],[201,64,247,51],[201,66,247,53,"share"],[201,71,247,58],[202,14,247,58],[202,21,247,63,"sum"],[202,24,247,66],[202,28,247,70,"share"],[202,33,247,75],[202,34,247,76,"access_count"],[202,46,247,88],[202,50,247,92],[202,51,247,93],[202,52,247,94],[203,12,247,94],[203,15,247,96],[203,16,247,97],[203,17,247,98],[204,12,248,6],[204,16,248,12,"totalShares"],[204,27,248,23],[204,30,248,26],[204,31,248,26,"logs"],[204,35,248,30],[204,55,248,26,"logs"],[204,59,248,30],[204,60,248,32,"length"],[204,66,248,38],[204,71,248,42],[204,72,248,43],[206,12,250,6],[207,12,251,6],[207,16,251,12,"sharesByMethod"],[207,30,251,26],[207,33,251,29],[207,34,251,30,"logs"],[207,38,251,34],[207,42,251,38],[207,44,251,40],[207,46,251,42,"reduce"],[207,52,251,48],[207,53,251,49],[207,63,251,50,"acc"],[207,66,251,53],[207,68,251,55,"log"],[207,71,251,58],[207,73,251,63],[208,14,252,8,"acc"],[208,17,252,11],[208,18,252,12,"log"],[208,21,252,15],[208,22,252,16,"method"],[208,28,252,22],[208,29,252,23],[208,32,252,26],[208,33,252,27,"acc"],[208,36,252,30],[208,37,252,31,"log"],[208,40,252,34],[208,41,252,35,"method"],[208,47,252,41],[208,48,252,42],[208,52,252,46],[208,53,252,47],[208,57,252,51],[208,58,252,52],[209,14,253,8],[209,21,253,15,"acc"],[209,24,253,18],[210,12,254,6],[210,13,254,7],[210,15,254,9],[210,16,254,10],[210,17,254,37],[210,18,254,38],[212,12,256,6],[213,12,257,6],[213,16,257,12,"automationStats"],[213,31,257,27],[213,34,257,30],[213,38,257,34,"Map"],[213,41,257,37],[213,42,257,81],[213,43,257,82],[214,12,259,6],[214,13,259,7,"shares"],[214,19,259,13],[214,23,259,17],[214,25,259,19],[214,27,259,21,"forEach"],[214,34,259,28],[214,35,259,29],[214,45,259,29,"share"],[214,50,259,34],[214,52,259,38],[215,14,260,8],[215,18,260,14,"stats"],[215,23,260,19],[215,26,260,22,"automationStats"],[215,41,260,37],[215,42,260,38,"get"],[215,45,260,41],[215,46,260,42,"share"],[215,51,260,47],[215,52,260,48,"automation_id"],[215,65,260,61],[215,66,260,62],[215,70,260,66],[216,16,260,68,"shares"],[216,22,260,74],[216,24,260,76],[216,25,260,77],[217,16,260,79,"views"],[217,21,260,84],[217,23,260,86],[218,14,260,88],[218,15,260,89],[219,14,261,8,"stats"],[219,19,261,13],[219,20,261,14,"views"],[219,25,261,19],[219,29,261,23,"share"],[219,34,261,28],[219,35,261,29,"access_count"],[219,47,261,41],[219,51,261,45],[219,52,261,46],[220,14,262,8,"automationStats"],[220,29,262,23],[220,30,262,24,"set"],[220,33,262,27],[220,34,262,28,"share"],[220,39,262,33],[220,40,262,34,"automation_id"],[220,53,262,47],[220,55,262,49,"stats"],[220,60,262,54],[220,61,262,55],[221,12,263,6],[221,13,263,7],[221,14,263,8],[222,12,265,6],[222,13,265,7,"logs"],[222,17,265,11],[222,21,265,15],[222,23,265,17],[222,25,265,19,"forEach"],[222,32,265,26],[222,33,265,27],[222,43,265,27,"log"],[222,46,265,30],[222,48,265,34],[223,14,266,8],[223,18,266,14,"stats"],[223,23,266,19],[223,26,266,22,"automationStats"],[223,41,266,37],[223,42,266,38,"get"],[223,45,266,41],[223,46,266,42,"log"],[223,49,266,45],[223,50,266,46,"automation_id"],[223,63,266,59],[223,64,266,60],[223,68,266,64],[224,16,266,66,"shares"],[224,22,266,72],[224,24,266,74],[224,25,266,75],[225,16,266,77,"views"],[225,21,266,82],[225,23,266,84],[226,14,266,86],[226,15,266,87],[227,14,267,8,"stats"],[227,19,267,13],[227,20,267,14,"shares"],[227,26,267,20],[227,30,267,24],[227,31,267,25],[228,14,268,8,"automationStats"],[228,29,268,23],[228,30,268,24,"set"],[228,33,268,27],[228,34,268,28,"log"],[228,37,268,31],[228,38,268,32,"automation_id"],[228,51,268,45],[228,53,268,47,"stats"],[228,58,268,52],[228,59,268,53],[229,12,269,6],[229,13,269,7],[229,14,269,8],[230,12,271,6],[230,16,271,12,"topAutomations"],[230,30,271,26],[230,33,271,29,"Array"],[230,38,271,34],[230,39,271,35,"from"],[230,43,271,39],[230,44,271,40,"automationStats"],[230,59,271,55],[230,60,271,56,"entries"],[230,67,271,63],[230,68,271,64],[230,69,271,65],[230,70,271,66],[230,71,272,9,"map"],[230,74,272,12],[230,75,272,13],[230,85,272,13,"_ref"],[230,89,272,13],[230,91,272,40],[231,14,272,40],[231,18,272,40,"_ref2"],[231,23,272,40],[231,30,272,40,"_slicedToArray2"],[231,45,272,40],[231,46,272,40,"default"],[231,53,272,40],[231,55,272,40,"_ref"],[231,59,272,40],[232,16,272,15,"automationId"],[232,28,272,27],[232,31,272,27,"_ref2"],[232,36,272,27],[233,16,272,29,"stats"],[233,21,272,34],[233,24,272,34,"_ref2"],[233,29,272,34],[234,14,273,10],[234,18,273,16,"automation"],[234,28,273,26],[234,31,273,29,"automations"],[234,42,273,40],[234,43,273,41,"find"],[234,47,273,45],[234,48,273,46],[234,58,273,46,"a"],[234,59,273,47],[235,16,273,47],[235,23,273,51,"a"],[235,24,273,52],[235,25,273,53,"id"],[235,27,273,55],[235,32,273,60,"automationId"],[235,44,273,72],[236,14,273,72],[236,16,273,73],[237,14,274,10],[237,21,274,17],[238,16,275,12,"automationId"],[238,28,275,24],[238,30,275,12,"automationId"],[238,42,275,24],[239,16,276,12,"title"],[239,21,276,17],[239,23,276,19],[239,24,276,19,"automation"],[239,34,276,29],[239,54,276,19,"automation"],[239,64,276,29],[239,65,276,31,"title"],[239,70,276,36],[239,75,276,40],[239,84,276,49],[240,16,277,12,"shares"],[240,22,277,18],[240,24,277,20,"stats"],[240,29,277,25],[240,30,277,26,"shares"],[240,36,277,32],[241,16,278,12,"views"],[241,21,278,17],[241,23,278,19,"stats"],[241,28,278,24],[241,29,278,25,"views"],[242,14,279,10],[242,15,279,11],[243,12,280,8],[243,13,280,9],[243,14,280,10],[243,15,281,9,"sort"],[243,19,281,13],[243,20,281,14],[243,30,281,15,"a"],[243,31,281,16],[243,33,281,18,"b"],[243,34,281,19],[244,14,281,19],[244,21,281,24,"b"],[244,22,281,25],[244,23,281,26,"views"],[244,28,281,31],[244,31,281,34,"a"],[244,32,281,35],[244,33,281,36,"views"],[244,38,281,41],[245,12,281,41],[245,14,281,42],[245,15,282,9,"slice"],[245,20,282,14],[245,21,282,15],[245,22,282,16],[245,24,282,18],[245,25,282,19],[245,26,282,20],[246,12,284,6],[246,19,284,13],[247,14,285,8,"totalShares"],[247,25,285,19],[247,27,285,8,"totalShares"],[247,38,285,19],[248,14,286,8,"totalViews"],[248,24,286,18],[248,26,286,8,"totalViews"],[248,36,286,18],[249,14,287,8,"topAutomations"],[249,28,287,22],[249,30,287,8,"topAutomations"],[249,44,287,22],[250,14,288,8,"sharesByMethod"],[250,28,288,22],[250,30,288,8,"sharesByMethod"],[251,12,289,6],[251,13,289,7],[252,10,291,4],[252,11,291,5],[252,12,291,6],[252,19,291,13,"error"],[252,24,291,18],[252,26,291,20],[253,12,292,6,"EventLogger"],[253,36,292,17],[253,37,292,18,"error"],[253,42,292,23],[253,43,292,24],[253,54,292,35],[253,56,292,37],[253,95,292,76],[253,97,292,78,"error"],[253,102,292,92],[253,103,292,93],[254,12,293,6],[254,19,293,13],[255,14,294,8,"totalShares"],[255,25,294,19],[255,27,294,21],[255,28,294,22],[256,14,295,8,"totalViews"],[256,24,295,18],[256,26,295,20],[256,27,295,21],[257,14,296,8,"topAutomations"],[257,28,296,22],[257,30,296,24],[257,32,296,26],[258,14,297,8,"sharesByMethod"],[258,28,297,22],[258,30,297,24],[258,31,297,25],[259,12,298,6],[259,13,298,7],[260,10,299,4],[261,8,300,2],[261,9,300,3],[262,8,300,3],[262,17,205,8,"getUserSharingAnalytics"],[262,40,205,31,"getUserSharingAnalytics"],[262,41,205,31,"_x5"],[262,44,205,31],[263,10,205,31],[263,17,205,31,"_getUserSharingAnalytics"],[263,41,205,31],[263,42,205,31,"apply"],[263,47,205,31],[263,54,205,31,"arguments"],[263,63,205,31],[264,8,205,31],[265,8,205,31],[265,15,205,8,"getUserSharingAnalytics"],[265,38,205,31],[266,6,205,31],[267,6,302,2],[268,0,303,0],[269,0,304,0],[270,6,302,2],[271,4,302,2],[272,6,302,2,"key"],[272,9,302,2],[273,6,302,2,"value"],[273,11,302,2],[274,8,302,2],[274,12,302,2,"_getSharePerformance"],[274,32,302,2],[274,39,302,2,"_asyncToGenerator2"],[274,57,302,2],[274,58,302,2,"default"],[274,65,302,2],[274,67,305,2],[274,78,305,28,"shareId"],[274,85,305,43],[274,87,310,5],[275,10,311,4],[275,14,311,8],[276,12,312,6],[277,12,313,6],[277,16,313,6,"_yield$supabase$from$9"],[277,38,313,6],[277,47,313,43,"supabase"],[277,63,313,51],[277,64,314,9,"from"],[277,68,314,13],[277,69,314,14],[277,84,314,29],[277,85,314,30],[277,86,315,9,"select"],[277,92,315,15],[277,93,315,16],[277,96,315,19],[277,97,315,20],[277,98,316,9,"eq"],[277,100,316,11],[277,101,316,12],[277,105,316,16],[277,107,316,18,"shareId"],[277,114,316,25],[277,115,316,26],[277,116,317,9,"single"],[277,122,317,15],[277,123,317,16],[277,124,317,17],[278,14,313,20,"share"],[278,19,313,25],[278,22,313,25,"_yield$supabase$from$9"],[278,44,313,25],[278,45,313,14,"data"],[278,49,313,18],[279,14,313,27,"error"],[279,19,313,32],[279,22,313,32,"_yield$supabase$from$9"],[279,44,313,32],[279,45,313,27,"error"],[279,50,313,32],[280,12,319,6],[280,16,319,10,"error"],[280,21,319,15],[280,25,319,19],[280,26,319,20,"share"],[280,31,319,25],[280,33,319,27],[281,14,320,8],[281,20,320,14],[281,24,320,18,"Error"],[281,29,320,23],[281,30,320,24],[281,47,320,41],[281,48,320,42],[282,12,321,6],[284,12,323,6],[285,12,324,6],[285,16,324,6,"_yield$supabase$from$0"],[285,38,324,6],[285,47,324,41,"supabase"],[285,63,324,49],[285,64,325,9,"from"],[285,68,325,13],[285,69,325,14],[285,81,325,26],[285,82,325,27],[285,83,326,9,"select"],[285,89,326,15],[285,90,326,16],[285,93,326,19],[285,94,326,20],[285,95,327,9,"eq"],[285,97,327,11],[285,98,327,12],[285,113,327,27],[285,115,327,29,"share"],[285,120,327,34],[285,121,327,35,"automation_id"],[285,134,327,48],[285,135,327,49],[285,136,328,9,"eq"],[285,138,328,11],[285,139,328,12],[285,147,328,20],[285,149,328,22],[285,154,328,27],[285,155,328,28],[285,156,329,9,"gte"],[285,159,329,12],[285,160,329,13],[285,172,329,25],[285,174,329,27,"share"],[285,179,329,32],[285,180,329,33,"created_at"],[285,190,329,43],[285,191,329,44],[286,14,324,20,"executions"],[286,24,324,30],[286,27,324,30,"_yield$supabase$from$0"],[286,49,324,30],[286,50,324,14,"data"],[286,54,324,18],[287,12,331,6],[287,19,331,13],[288,14,332,8,"views"],[288,19,332,13],[288,21,332,15,"share"],[288,26,332,20],[288,27,332,21,"access_count"],[288,39,332,33],[288,43,332,37],[288,44,332,38],[289,14,333,8,"executions"],[289,24,333,18],[289,26,333,20],[289,27,333,20,"executions"],[289,37,333,30],[289,57,333,20,"executions"],[289,67,333,30],[289,68,333,32,"length"],[289,74,333,38],[289,79,333,42],[289,80,333,43],[290,14,334,8,"lastViewed"],[290,24,334,18],[290,26,334,20,"share"],[290,31,334,25],[290,32,334,26,"last_accessed_at"],[290,48,334,42],[290,51,334,45],[290,55,334,49,"Date"],[290,59,334,53],[290,60,334,54,"share"],[290,65,334,59],[290,66,334,60,"last_accessed_at"],[290,82,334,76],[290,83,334,77],[290,86,334,80,"undefined"],[290,95,334,89],[291,14,335,8,"viewsByDay"],[291,24,335,18],[291,26,335,20],[291,28,335,22],[291,29,335,23],[292,12,336,6],[292,13,336,7],[293,10,338,4],[293,11,338,5],[293,12,338,6],[293,19,338,13,"error"],[293,24,338,18],[293,26,338,20],[294,12,339,6,"EventLogger"],[294,36,339,17],[294,37,339,18,"error"],[294,42,339,23],[294,43,339,24],[294,54,339,35],[294,56,339,37],[294,90,339,71],[294,92,339,73,"error"],[294,97,339,87],[294,98,339,88],[295,12,340,6],[295,19,340,13],[296,14,341,8,"views"],[296,19,341,13],[296,21,341,15],[296,22,341,16],[297,14,342,8,"executions"],[297,24,342,18],[297,26,342,20],[297,27,342,21],[298,14,343,8,"viewsByDay"],[298,24,343,18],[298,26,343,20],[299,12,344,6],[299,13,344,7],[300,10,345,4],[301,8,346,2],[301,9,346,3],[302,8,346,3],[302,17,305,8,"getSharePerformance"],[302,36,305,27,"getSharePerformance"],[302,37,305,27,"_x6"],[302,40,305,27],[303,10,305,27],[303,17,305,27,"_getSharePerformance"],[303,37,305,27],[303,38,305,27,"apply"],[303,43,305,27],[303,50,305,27,"arguments"],[303,59,305,27],[304,8,305,27],[305,8,305,27],[305,15,305,8,"getSharePerformance"],[305,34,305,27],[306,6,305,27],[306,10,348,2],[307,6,348,2],[308,4,348,2],[309,6,348,2,"key"],[309,9,348,2],[310,6,348,2,"value"],[310,11,348,2],[310,13,350,2],[310,22,350,10,"calculateHourlyStats"],[310,42,350,30,"calculateHourlyStats"],[310,43,350,31,"logs"],[310,47,350,42],[310,49,350,59],[311,8,351,4],[311,12,351,10,"hourlyMap"],[311,21,351,19],[311,24,351,22],[311,28,351,26,"Map"],[311,31,351,29],[311,32,351,73],[311,33,351,74],[313,8,353,4],[314,8,354,4],[314,13,354,9],[314,17,354,13,"hour"],[314,21,354,17],[314,24,354,20],[314,25,354,21],[314,27,354,23,"hour"],[314,31,354,27],[314,34,354,30],[314,36,354,32],[314,38,354,34,"hour"],[314,42,354,38],[314,44,354,40],[314,46,354,42],[315,10,355,6,"hourlyMap"],[315,19,355,15],[315,20,355,16,"set"],[315,23,355,19],[315,24,355,20,"hour"],[315,28,355,24],[315,30,355,26],[316,12,355,28,"shares"],[316,18,355,34],[316,20,355,36],[316,21,355,37],[317,12,355,39,"views"],[317,17,355,44],[317,19,355,46],[318,10,355,48],[318,11,355,49],[318,12,355,50],[319,8,356,4],[321,8,358,4],[322,8,359,4,"logs"],[322,12,359,8],[322,13,359,9,"forEach"],[322,20,359,16],[322,21,359,17],[322,31,359,17,"log"],[322,34,359,20],[322,36,359,24],[323,10,360,6],[323,14,360,12,"hour"],[323,18,360,16],[323,21,360,19],[323,25,360,23,"Date"],[323,29,360,27],[323,30,360,28,"log"],[323,33,360,31],[323,34,360,32,"shared_at"],[323,43,360,41],[323,44,360,42],[323,45,360,43,"getHours"],[323,53,360,51],[323,54,360,52],[323,55,360,53],[324,10,361,6],[324,14,361,12,"stats"],[324,19,361,17],[324,22,361,20,"hourlyMap"],[324,31,361,29],[324,32,361,30,"get"],[324,35,361,33],[324,36,361,34,"hour"],[324,40,361,38],[324,41,361,40],[325,10,362,6,"stats"],[325,15,362,11],[325,16,362,12,"shares"],[325,22,362,18],[325,26,362,22],[325,27,362,23],[326,8,363,4],[326,9,363,5],[326,10,363,6],[327,8,365,4],[327,15,365,11,"Array"],[327,20,365,16],[327,21,365,17,"from"],[327,25,365,21],[327,26,365,22,"hourlyMap"],[327,35,365,31],[327,36,365,32,"entries"],[327,43,365,39],[327,44,365,40],[327,45,365,41],[327,46,365,42],[327,47,365,43,"map"],[327,50,365,46],[327,51,365,47],[327,61,365,47,"_ref3"],[327,66,365,47],[328,10,365,47],[328,14,365,47,"_ref4"],[328,19,365,47],[328,26,365,47,"_slicedToArray2"],[328,41,365,47],[328,42,365,47,"default"],[328,49,365,47],[328,51,365,47,"_ref3"],[328,56,365,47],[329,12,365,49,"hour"],[329,16,365,53],[329,19,365,53,"_ref4"],[329,24,365,53],[330,12,365,55,"stats"],[330,17,365,60],[330,20,365,60,"_ref4"],[330,25,365,60],[331,10,365,60],[331,17,365,67],[332,12,366,6,"hour"],[332,16,366,10],[332,18,366,6,"hour"],[332,22,366,10],[333,12,367,6,"shares"],[333,18,367,12],[333,20,367,14,"stats"],[333,25,367,19],[333,26,367,20,"shares"],[333,32,367,26],[334,12,368,6,"views"],[334,17,368,11],[334,19,368,13,"stats"],[334,24,368,18],[334,25,368,19,"views"],[335,10,369,4],[335,11,369,5],[336,8,369,5],[336,9,369,6],[336,10,369,7],[337,6,370,2],[338,4,370,3],[339,6,370,3,"key"],[339,9,370,3],[340,6,370,3,"value"],[340,11,370,3],[341,8,370,3],[341,12,370,3,"_calculateDailyStats"],[341,32,370,3],[341,39,370,3,"_asyncToGenerator2"],[341,57,370,3],[341,58,370,3,"default"],[341,65,370,3],[341,67,372,2],[341,78,372,36,"automationId"],[341,90,372,56],[341,92,372,81],[342,10,373,4],[342,14,373,8],[343,12,374,6],[344,12,375,6],[344,16,375,12,"thirtyDaysAgo"],[344,29,375,25],[344,32,375,28],[344,36,375,32,"Date"],[344,40,375,36],[344,41,375,37],[344,42,375,38],[345,12,376,6,"thirtyDaysAgo"],[345,25,376,19],[345,26,376,20,"setDate"],[345,33,376,27],[345,34,376,28,"thirtyDaysAgo"],[345,47,376,41],[345,48,376,42,"getDate"],[345,55,376,49],[345,56,376,50],[345,57,376,51],[345,60,376,54],[345,62,376,56],[345,63,376,57],[346,12,378,6],[346,16,378,6,"_yield$supabase$from$1"],[346,38,378,6],[346,47,378,35,"supabase"],[346,63,378,43],[346,64,379,9,"from"],[346,68,379,13],[346,69,379,14],[346,83,379,28],[346,84,379,29],[346,85,380,9,"select"],[346,91,380,15],[346,92,380,16],[346,103,380,27],[346,104,380,28],[346,105,381,9,"eq"],[346,107,381,11],[346,108,381,12],[346,123,381,27],[346,125,381,29,"automationId"],[346,137,381,41],[346,138,381,42],[346,139,382,9,"gte"],[346,142,382,12],[346,143,382,13],[346,154,382,24],[346,156,382,26,"thirtyDaysAgo"],[346,169,382,39],[346,170,382,40,"toISOString"],[346,181,382,51],[346,182,382,52],[346,183,382,53],[346,184,382,54],[347,14,378,20,"logs"],[347,18,378,24],[347,21,378,24,"_yield$supabase$from$1"],[347,43,378,24],[347,44,378,14,"data"],[347,48,378,18],[348,12,384,6],[348,16,384,6,"_yield$supabase$from$10"],[348,39,384,6],[348,48,384,41,"supabase"],[348,64,384,49],[348,65,385,9,"from"],[348,69,385,13],[348,70,385,14],[348,82,385,26],[348,83,385,27],[348,84,386,9,"select"],[348,90,386,15],[348,91,386,16],[348,103,386,28],[348,104,386,29],[348,105,387,9,"eq"],[348,107,387,11],[348,108,387,12],[348,123,387,27],[348,125,387,29,"automationId"],[348,137,387,41],[348,138,387,42],[348,139,388,9,"eq"],[348,141,388,11],[348,142,388,12],[348,150,388,20],[348,152,388,22],[348,157,388,27],[348,158,388,28],[348,159,389,9,"gte"],[348,162,389,12],[348,163,389,13],[348,175,389,25],[348,177,389,27,"thirtyDaysAgo"],[348,190,389,40],[348,191,389,41,"toISOString"],[348,202,389,52],[348,203,389,53],[348,204,389,54],[348,205,389,55],[349,14,384,20,"executions"],[349,24,384,30],[349,27,384,30,"_yield$supabase$from$10"],[349,50,384,30],[349,51,384,14,"data"],[349,55,384,18],[351,12,391,6],[352,12,392,6],[352,16,392,12,"dailyMap"],[352,24,392,20],[352,27,392,23],[352,31,392,27,"Map"],[352,34,392,30],[352,35,392,51],[352,36,392,52],[354,12,394,6],[355,12,395,6],[355,17,395,11],[355,21,395,15,"i"],[355,22,395,16],[355,25,395,19],[355,26,395,20],[355,28,395,22,"i"],[355,29,395,23],[355,32,395,26],[355,34,395,28],[355,36,395,30,"i"],[355,37,395,31],[355,39,395,33],[355,41,395,35],[356,14,396,8],[356,18,396,14,"date"],[356,22,396,18],[356,25,396,21],[356,29,396,25,"Date"],[356,33,396,29],[356,34,396,30],[356,35,396,31],[357,14,397,8,"date"],[357,18,397,12],[357,19,397,13,"setDate"],[357,26,397,20],[357,27,397,21,"date"],[357,31,397,25],[357,32,397,26,"getDate"],[357,39,397,33],[357,40,397,34],[357,41,397,35],[357,44,397,38,"i"],[357,45,397,39],[357,46,397,40],[358,14,398,8],[358,18,398,14,"dateStr"],[358,25,398,21],[358,28,398,24,"date"],[358,32,398,28],[358,33,398,29,"toISOString"],[358,44,398,40],[358,45,398,41],[358,46,398,42],[358,47,398,43,"split"],[358,52,398,48],[358,53,398,49],[358,56,398,52],[358,57,398,53],[358,58,398,54],[358,59,398,55],[358,60,398,56],[359,14,399,8,"dailyMap"],[359,22,399,16],[359,23,399,17,"set"],[359,26,399,20],[359,27,399,21,"dateStr"],[359,34,399,28],[359,36,399,30],[360,16,400,10,"date"],[360,20,400,14],[360,22,400,16,"dateStr"],[360,29,400,23],[361,16,401,10,"shares"],[361,22,401,16],[361,24,401,18],[361,25,401,19],[362,16,402,10,"views"],[362,21,402,15],[362,23,402,17],[362,24,402,18],[363,16,403,10,"executions"],[363,26,403,20],[363,28,403,22],[364,14,404,8],[364,15,404,9],[364,16,404,10],[365,12,405,6],[367,12,407,6],[368,12,408,6],[368,13,408,7,"logs"],[368,17,408,11],[368,21,408,15],[368,23,408,17],[368,25,408,19,"forEach"],[368,32,408,26],[368,33,408,27],[368,43,408,27,"log"],[368,46,408,30],[368,48,408,34],[369,14,409,8],[369,18,409,14,"dateStr"],[369,25,409,21],[369,28,409,24],[369,32,409,28,"Date"],[369,36,409,32],[369,37,409,33,"log"],[369,40,409,36],[369,41,409,37,"shared_at"],[369,50,409,46],[369,51,409,47],[369,52,409,48,"toISOString"],[369,63,409,59],[369,64,409,60],[369,65,409,61],[369,66,409,62,"split"],[369,71,409,67],[369,72,409,68],[369,75,409,71],[369,76,409,72],[369,77,409,73],[369,78,409,74],[369,79,409,75],[370,14,410,8],[370,18,410,14,"stats"],[370,23,410,19],[370,26,410,22,"dailyMap"],[370,34,410,30],[370,35,410,31,"get"],[370,38,410,34],[370,39,410,35,"dateStr"],[370,46,410,42],[370,47,410,43],[371,14,411,8],[371,18,411,12,"stats"],[371,23,411,17],[371,25,411,19,"stats"],[371,30,411,24],[371,31,411,25,"shares"],[371,37,411,31],[371,41,411,35],[371,42,411,36],[372,12,412,6],[372,13,412,7],[372,14,412,8],[374,12,414,6],[375,12,415,6],[375,13,415,7,"executions"],[375,23,415,17],[375,27,415,21],[375,29,415,23],[375,31,415,25,"forEach"],[375,38,415,32],[375,39,415,33],[375,49,415,33,"exec"],[375,53,415,37],[375,55,415,41],[376,14,416,8],[376,18,416,14,"dateStr"],[376,25,416,21],[376,28,416,24],[376,32,416,28,"Date"],[376,36,416,32],[376,37,416,33,"exec"],[376,41,416,37],[376,42,416,38,"started_at"],[376,52,416,48],[376,53,416,49],[376,54,416,50,"toISOString"],[376,65,416,61],[376,66,416,62],[376,67,416,63],[376,68,416,64,"split"],[376,73,416,69],[376,74,416,70],[376,77,416,73],[376,78,416,74],[376,79,416,75],[376,80,416,76],[376,81,416,77],[377,14,417,8],[377,18,417,14,"stats"],[377,23,417,19],[377,26,417,22,"dailyMap"],[377,34,417,30],[377,35,417,31,"get"],[377,38,417,34],[377,39,417,35,"dateStr"],[377,46,417,42],[377,47,417,43],[378,14,418,8],[378,18,418,12,"stats"],[378,23,418,17],[378,25,418,19,"stats"],[378,30,418,24],[378,31,418,25,"executions"],[378,41,418,35],[378,45,418,39],[378,46,418,40],[379,12,419,6],[379,13,419,7],[379,14,419,8],[380,12,421,6],[380,19,421,13,"Array"],[380,24,421,18],[380,25,421,19,"from"],[380,29,421,23],[380,30,421,24,"dailyMap"],[380,38,421,32],[380,39,421,33,"values"],[380,45,421,39],[380,46,421,40],[380,47,421,41],[380,48,421,42],[380,49,422,9,"sort"],[380,53,422,13],[380,54,422,14],[380,64,422,15,"a"],[380,65,422,16],[380,67,422,18,"b"],[380,68,422,19],[381,14,422,19],[381,21,422,24,"a"],[381,22,422,25],[381,23,422,26,"date"],[381,27,422,30],[381,28,422,31,"localeCompare"],[381,41,422,44],[381,42,422,45,"b"],[381,43,422,46],[381,44,422,47,"date"],[381,48,422,51],[381,49,422,52],[382,12,422,52],[382,14,422,53],[383,10,424,4],[383,11,424,5],[383,12,424,6],[383,19,424,13,"error"],[383,24,424,18],[383,26,424,20],[384,12,425,6,"EventLogger"],[384,36,425,17],[384,37,425,18,"error"],[384,42,425,23],[384,43,425,24],[384,54,425,35],[384,56,425,37],[384,90,425,71],[384,92,425,73,"error"],[384,97,425,87],[384,98,425,88],[385,12,426,6],[385,19,426,13],[385,21,426,15],[386,10,427,4],[387,8,428,2],[387,9,428,3],[388,8,428,3],[388,17,372,16,"calculateDailyStats"],[388,36,372,35,"calculateDailyStats"],[388,37,372,35,"_x7"],[388,40,372,35],[389,10,372,35],[389,17,372,35,"_calculateDailyStats"],[389,37,372,35],[389,38,372,35,"apply"],[389,43,372,35],[389,50,372,35,"arguments"],[389,59,372,35],[390,8,372,35],[391,8,372,35],[391,15,372,16,"calculateDailyStats"],[391,34,372,35],[392,6,372,35],[393,4,372,35],[394,6,372,35,"key"],[394,9,372,35],[395,6,372,35,"value"],[395,11,372,35],[395,13,430,2],[395,22,430,10,"getEmptyAnalytics"],[395,39,430,27,"getEmptyAnalytics"],[395,40,430,28,"automationId"],[395,52,430,48],[395,54,430,66],[396,8,431,4],[396,15,431,11],[397,10,432,6,"automationId"],[397,22,432,18],[397,24,432,6,"automationId"],[397,36,432,18],[398,10,433,6,"totalShares"],[398,21,433,17],[398,23,433,19],[398,24,433,20],[399,10,434,6,"totalViews"],[399,20,434,16],[399,22,434,18],[399,23,434,19],[400,10,435,6,"uniqueViewers"],[400,23,435,19],[400,25,435,21],[400,26,435,22],[401,10,436,6,"sharesByMethod"],[401,24,436,20],[401,26,436,22],[401,27,436,23],[401,28,436,24],[402,10,437,6,"viewsByPlatform"],[402,25,437,21],[402,27,437,23],[402,28,437,24],[402,29,437,25],[403,10,438,6,"viewsByLocation"],[403,25,438,21],[403,27,438,23],[403,28,438,24],[403,29,438,25],[404,10,439,6,"conversionRate"],[404,24,439,20],[404,26,439,22],[404,27,439,23],[405,10,440,6,"engagementRate"],[405,24,440,20],[405,26,440,22],[405,27,440,23],[406,10,441,6,"recentShares"],[406,22,441,18],[406,24,441,20],[406,26,441,22],[407,10,442,6,"popularShareTimes"],[407,27,442,23],[407,29,442,25],[407,31,442,27],[408,10,443,6,"shareGrowth"],[408,21,443,17],[408,23,443,19],[409,8,444,4],[409,9,444,5],[410,6,445,2],[411,4,445,3],[412,6,445,3,"key"],[412,9,445,3],[413,6,445,3,"value"],[413,11,445,3],[413,13,64,2],[413,22,64,9,"getInstance"],[413,33,64,20,"getInstance"],[413,34,64,20],[413,36,64,48],[414,8,65,4],[414,12,65,8],[414,13,65,9,"SharingAnalyticsService"],[414,36,65,32],[414,37,65,33,"instance"],[414,45,65,41],[414,47,65,43],[415,10,66,6,"SharingAnalyticsService"],[415,33,66,29],[415,34,66,30,"instance"],[415,42,66,38],[415,45,66,41],[415,49,66,45,"SharingAnalyticsService"],[415,72,66,68],[415,73,66,69],[415,74,66,70],[416,8,67,4],[417,8,68,4],[417,15,68,11,"SharingAnalyticsService"],[417,38,68,34],[417,39,68,35,"instance"],[417,47,68,43],[418,6,69,2],[419,4,69,3],[420,2,69,3],[421,2,448,7],[421,6,448,13,"sharingAnalyticsService"],[421,29,448,36],[421,32,448,36,"exports"],[421,39,448,36],[421,40,448,36,"sharingAnalyticsService"],[421,63,448,36],[421,66,448,39,"SharingAnalyticsService"],[421,89,448,62],[421,90,448,63,"getInstance"],[421,101,448,74],[421,102,448,75],[421,103,448,76],[422,0,448,77],[422,3]],"functionMap":{"names":["<global>","SharingAnalyticsService","constructor","getInstance","trackShareEvent","trackViewEvent","getAutomationAnalytics","reduce$argument_0","slice.map$argument_0","getUserSharingAnalytics","automations.map$argument_0","forEach$argument_0","Array.from.map$argument_0","automations.find$argument_0","Array.from.map.sort$argument_0","getSharePerformance","calculateHourlyStats","logs.forEach$argument_0","calculateDailyStats","Array.from.sort$argument_0","getEmptyAnalytics"],"mappings":"AAA;OC0D;ECG,wBD;EEE;GFK;EGK;GHqB;EIK;GJoB;EKK;+CCqB,+CD;iDCG;ODG;yDEmB;QFQ;GLqB;EQK;4CC2B,SD;+CFe,+CE;iDFI;OEG;6BEK;OFI;2BEE;OFI;aGG;8CCC,0BD;SHO;cKC,2BL;GRmB;EcK;GdyC;EeI;iBCS;KDI;+CJE;MII;GfC;EiBE;2BPoC;OOI;iCPG;OOI;cCG,sCD;GjBM;EmBE;GnBe;CDC"}},"type":"js/module"}]}