{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.restoreConsoleError = exports.resetErrorTracking = exports.initializeErrorInterceptor = exports.getErrorStats = undefined;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));\n  /**\n  import { EventLogger } from './/EventLogger';\n   * Smart Error Interceptor\n   * \n   * This module intelligently manages console.error calls to reduce spam\n   * while maintaining visibility into real issues.\n   */\n  // Keep reference to original console.error\n  // Track errors by type and context\n\n  var errorTracker = new Map();\n\n  // Configuration\n  var ERROR_BATCH_WINDOW = 10000; // 10 seconds\n  var MAX_ERRORS_BEFORE_SUMMARY = 3; // Show first 3, then summarize\n  var SUMMARY_INTERVAL = 30000; // Show summary every 30 seconds\n\n  // Last summary time\n  var lastSummaryTime = 0;\n\n  /**\n   * Network error patterns\n   */\n  var NETWORK_ERROR_PATTERNS = ['Network request failed', 'Failed to fetch', 'NetworkError', 'AuthRetryableFetchError', 'fetch failed', 'ERR_NETWORK', 'ERR_INTERNET_DISCONNECTED', 'ECONNREFUSED', 'ETIMEDOUT', 'Unable to resolve host', 'Network is unreachable'];\n\n  /**\n   * Extract error context (like API endpoint or component)\n   */\n\n  /**\n   * Check if error is network-related\n   */\n\n  /**\n   * Show error summary\n   */\n  var showErrorSummary = () => {\n    var now = Date.now();\n    if (now - lastSummaryTime < SUMMARY_INTERVAL) {\n      return;\n    }\n    lastSummaryTime = now;\n    var networkErrors = Array.from(errorTracker.entries()).filter(_ref => {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n        key = _ref2[0];\n      return key.includes('api_') || key.includes('rpc_') || key.includes('network');\n    }).filter(_ref3 => {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n        info = _ref4[1];\n      return info.suppressed > 0;\n    });\n    if (networkErrors.length > 0) {\n      EventLogger.debug('errorInterceptor', '\\nðŸ“Š Network Error Summary (last 30s):');\n      networkErrors.forEach(_ref5 => {\n        var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),\n          key = _ref6[0],\n          info = _ref6[1];\n        var total = info.count + info.suppressed;\n        var endpoint = info.endpoint || key;\n        EventLogger.debug('errorInterceptor', '   - ${endpoint}: ${total} errors (${info.count} shown, ${info.suppressed} suppressed)');\n      });\n      EventLogger.debug('errorInterceptor', 'ðŸ’¡ Check your network connection or API availability\\n');\n    }\n  };\n\n  /**\n   * Initialize the error interceptor\n   */\n  var initializeErrorInterceptor = () => {\n    console.error = function () {};\n\n    // Set up periodic summary\n    setInterval(showErrorSummary, SUMMARY_INTERVAL);\n  };\n\n  /**\n   * Restore original console.error\n   */\n  exports.initializeErrorInterceptor = initializeErrorInterceptor;\n  var restoreConsoleError = () => {\n    console.error = function () {};\n  };\n\n  /**\n   * Reset error tracking\n   */\n  exports.restoreConsoleError = restoreConsoleError;\n  var resetErrorTracking = () => {\n    errorTracker.clear();\n    lastSummaryTime = 0;\n  };\n\n  /**\n   * Get error statistics\n   */\n  exports.resetErrorTracking = resetErrorTracking;\n  var getErrorStats = () => {\n    var stats = {};\n    errorTracker.forEach((info, key) => {\n      stats[key] = {\n        total: info.count + info.suppressed,\n        shown: info.count,\n        suppressed: info.suppressed,\n        endpoint: info.endpoint\n      };\n    });\n    return stats;\n  };\n  exports.getErrorStats = getErrorStats;\n});","lineCount":117,"map":[[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,2,9,0],[16,2,12,0],[18,2,21,0],[18,6,21,6,"errorTracker"],[18,18,21,18],[18,21,21,21],[18,25,21,25,"Map"],[18,28,21,28],[18,29,21,48],[18,30,21,49],[20,2,23,0],[21,2,24,0],[21,6,24,6,"ERROR_BATCH_WINDOW"],[21,24,24,24],[21,27,24,27],[21,32,24,32],[21,33,24,33],[21,34,24,34],[22,2,25,0],[22,6,25,6,"MAX_ERRORS_BEFORE_SUMMARY"],[22,31,25,31],[22,34,25,34],[22,35,25,35],[22,36,25,36],[22,37,25,37],[23,2,26,0],[23,6,26,6,"SUMMARY_INTERVAL"],[23,22,26,22],[23,25,26,25],[23,30,26,30],[23,31,26,31],[23,32,26,32],[25,2,28,0],[26,2,29,0],[26,6,29,4,"lastSummaryTime"],[26,21,29,19],[26,24,29,22],[26,25,29,23],[28,2,31,0],[29,0,32,0],[30,0,33,0],[31,2,34,0],[31,6,34,6,"NETWORK_ERROR_PATTERNS"],[31,28,34,28],[31,31,34,31],[31,32,35,2],[31,56,35,26],[31,58,36,2],[31,75,36,19],[31,77,37,2],[31,91,37,16],[31,93,38,2],[31,118,38,27],[31,120,39,2],[31,134,39,16],[31,136,40,2],[31,149,40,15],[31,151,41,2],[31,178,41,29],[31,180,42,2],[31,194,42,16],[31,196,43,2],[31,207,43,13],[31,209,44,2],[31,233,44,26],[31,235,45,2],[31,259,45,26],[31,260,46,1],[33,2,48,0],[34,0,49,0],[35,0,50,0],[37,2,90,0],[38,0,91,0],[39,0,92,0],[41,2,113,0],[42,0,114,0],[43,0,115,0],[44,2,116,0],[44,6,116,6,"showErrorSummary"],[44,22,116,22],[44,25,116,25,"showErrorSummary"],[44,26,116,25],[44,31,116,31],[45,4,117,2],[45,8,117,8,"now"],[45,11,117,11],[45,14,117,14,"Date"],[45,18,117,18],[45,19,117,19,"now"],[45,22,117,22],[45,23,117,23],[45,24,117,24],[46,4,118,2],[46,8,118,6,"now"],[46,11,118,9],[46,14,118,12,"lastSummaryTime"],[46,29,118,27],[46,32,118,30,"SUMMARY_INTERVAL"],[46,48,118,46],[46,50,118,48],[47,6,119,4],[48,4,120,2],[49,4,122,2,"lastSummaryTime"],[49,19,122,17],[49,22,122,20,"now"],[49,25,122,23],[50,4,124,2],[50,8,124,8,"networkErrors"],[50,21,124,21],[50,24,124,24,"Array"],[50,29,124,29],[50,30,124,30,"from"],[50,34,124,34],[50,35,124,35,"errorTracker"],[50,47,124,47],[50,48,124,48,"entries"],[50,55,124,55],[50,56,124,56],[50,57,124,57],[50,58,124,58],[50,59,125,5,"filter"],[50,65,125,11],[50,66,125,12,"_ref"],[50,70,125,12],[51,6,125,12],[51,10,125,12,"_ref2"],[51,15,125,12],[51,22,125,12,"_slicedToArray2"],[51,37,125,12],[51,38,125,12,"default"],[51,45,125,12],[51,47,125,12,"_ref"],[51,51,125,12],[52,8,125,14,"key"],[52,11,125,17],[52,14,125,17,"_ref2"],[52,19,125,17],[53,6,125,17],[53,13,125,23,"key"],[53,16,125,26],[53,17,125,27,"includes"],[53,25,125,35],[53,26,125,36],[53,32,125,42],[53,33,125,43],[53,37,125,47,"key"],[53,40,125,50],[53,41,125,51,"includes"],[53,49,125,59],[53,50,125,60],[53,56,125,66],[53,57,125,67],[53,61,125,71,"key"],[53,64,125,74],[53,65,125,75,"includes"],[53,73,125,83],[53,74,125,84],[53,83,125,93],[53,84,125,94],[54,4,125,94],[54,6,125,95],[54,7,126,5,"filter"],[54,13,126,11],[54,14,126,12,"_ref3"],[54,19,126,12],[55,6,126,12],[55,10,126,12,"_ref4"],[55,15,126,12],[55,22,126,12,"_slicedToArray2"],[55,37,126,12],[55,38,126,12,"default"],[55,45,126,12],[55,47,126,12,"_ref3"],[55,52,126,12],[56,8,126,16,"info"],[56,12,126,20],[56,15,126,20,"_ref4"],[56,20,126,20],[57,6,126,20],[57,13,126,26,"info"],[57,17,126,30],[57,18,126,31,"suppressed"],[57,28,126,41],[57,31,126,44],[57,32,126,45],[58,4,126,45],[58,6,126,46],[59,4,128,2],[59,8,128,6,"networkErrors"],[59,21,128,19],[59,22,128,20,"length"],[59,28,128,26],[59,31,128,29],[59,32,128,30],[59,34,128,32],[60,6,129,4,"EventLogger"],[60,17,129,15],[60,18,129,16,"debug"],[60,23,129,21],[60,24,129,22],[60,42,129,40],[60,44,129,42],[60,84,129,82],[60,85,129,83],[61,6,130,4,"networkErrors"],[61,19,130,17],[61,20,130,18,"forEach"],[61,27,130,25],[61,28,130,26,"_ref5"],[61,33,130,26],[61,37,130,43],[62,8,130,43],[62,12,130,43,"_ref6"],[62,17,130,43],[62,24,130,43,"_slicedToArray2"],[62,39,130,43],[62,40,130,43,"default"],[62,47,130,43],[62,49,130,43,"_ref5"],[62,54,130,43],[63,10,130,28,"key"],[63,13,130,31],[63,16,130,31,"_ref6"],[63,21,130,31],[64,10,130,33,"info"],[64,14,130,37],[64,17,130,37,"_ref6"],[64,22,130,37],[65,8,131,6],[65,12,131,12,"total"],[65,17,131,17],[65,20,131,20,"info"],[65,24,131,24],[65,25,131,25,"count"],[65,30,131,30],[65,33,131,33,"info"],[65,37,131,37],[65,38,131,38,"suppressed"],[65,48,131,48],[66,8,132,6],[66,12,132,12,"endpoint"],[66,20,132,20],[66,23,132,23,"info"],[66,27,132,27],[66,28,132,28,"endpoint"],[66,36,132,36],[66,40,132,40,"key"],[66,43,132,43],[67,8,133,6,"EventLogger"],[67,19,133,17],[67,20,133,18,"debug"],[67,25,133,23],[67,26,133,24],[67,44,133,42],[67,46,133,44],[67,134,133,132],[67,135,133,133],[68,6,134,4],[68,7,134,5],[68,8,134,6],[69,6,135,4,"EventLogger"],[69,17,135,15],[69,18,135,16,"debug"],[69,23,135,21],[69,24,135,22],[69,42,135,40],[69,44,135,42],[69,100,135,98],[69,101,135,99],[70,4,136,2],[71,2,137,0],[71,3,137,1],[73,2,139,0],[74,0,140,0],[75,0,141,0],[76,2,142,7],[76,6,142,13,"initializeErrorInterceptor"],[76,32,142,39],[76,35,142,42,"initializeErrorInterceptor"],[76,36,142,42],[76,41,142,48],[77,4,143,2,"console"],[77,11,143,9],[77,12,143,10,"error"],[77,17,143,15],[77,34,187,3],[79,4,189,2],[80,4,190,2,"setInterval"],[80,15,190,13],[80,16,190,14,"showErrorSummary"],[80,32,190,30],[80,34,190,32,"SUMMARY_INTERVAL"],[80,50,190,48],[80,51,190,49],[81,2,191,0],[81,3,191,1],[83,2,193,0],[84,0,194,0],[85,0,195,0],[86,2,193,0,"exports"],[86,9,193,0],[86,10,193,0,"initializeErrorInterceptor"],[86,36,193,0],[86,39,193,0,"initializeErrorInterceptor"],[86,65,193,0],[87,2,196,7],[87,6,196,13,"restoreConsoleError"],[87,25,196,32],[87,28,196,35,"restoreConsoleError"],[87,29,196,35],[87,34,196,41],[88,4,197,2,"console"],[88,11,197,9],[88,12,197,10,"error"],[88,17,197,15],[88,34,197,38],[89,2,198,0],[89,3,198,1],[91,2,200,0],[92,0,201,0],[93,0,202,0],[94,2,200,0,"exports"],[94,9,200,0],[94,10,200,0,"restoreConsoleError"],[94,29,200,0],[94,32,200,0,"restoreConsoleError"],[94,51,200,0],[95,2,203,7],[95,6,203,13,"resetErrorTracking"],[95,24,203,31],[95,27,203,34,"resetErrorTracking"],[95,28,203,34],[95,33,203,40],[96,4,204,2,"errorTracker"],[96,16,204,14],[96,17,204,15,"clear"],[96,22,204,20],[96,23,204,21],[96,24,204,22],[97,4,205,2,"lastSummaryTime"],[97,19,205,17],[97,22,205,20],[97,23,205,21],[98,2,206,0],[98,3,206,1],[100,2,208,0],[101,0,209,0],[102,0,210,0],[103,2,208,0,"exports"],[103,9,208,0],[103,10,208,0,"resetErrorTracking"],[103,28,208,0],[103,31,208,0,"resetErrorTracking"],[103,49,208,0],[104,2,211,7],[104,6,211,13,"getErrorStats"],[104,19,211,26],[104,22,211,29,"getErrorStats"],[104,23,211,29],[104,28,211,35],[105,4,212,2],[105,8,212,8,"stats"],[105,13,212,34],[105,16,212,37],[105,17,212,38],[105,18,212,39],[106,4,213,2,"errorTracker"],[106,16,213,14],[106,17,213,15,"forEach"],[106,24,213,22],[106,25,213,23],[106,26,213,24,"info"],[106,30,213,28],[106,32,213,30,"key"],[106,35,213,33],[106,40,213,38],[107,6,214,4,"stats"],[107,11,214,9],[107,12,214,10,"key"],[107,15,214,13],[107,16,214,14],[107,19,214,17],[108,8,215,6,"total"],[108,13,215,11],[108,15,215,13,"info"],[108,19,215,17],[108,20,215,18,"count"],[108,25,215,23],[108,28,215,26,"info"],[108,32,215,30],[108,33,215,31,"suppressed"],[108,43,215,41],[109,8,216,6,"shown"],[109,13,216,11],[109,15,216,13,"info"],[109,19,216,17],[109,20,216,18,"count"],[109,25,216,23],[110,8,217,6,"suppressed"],[110,18,217,16],[110,20,217,18,"info"],[110,24,217,22],[110,25,217,23,"suppressed"],[110,35,217,33],[111,8,218,6,"endpoint"],[111,16,218,14],[111,18,218,16,"info"],[111,22,218,20],[111,23,218,21,"endpoint"],[112,6,219,4],[112,7,219,5],[113,4,220,2],[113,5,220,3],[113,6,220,4],[114,4,221,2],[114,11,221,9,"stats"],[114,16,221,14],[115,2,222,0],[115,3,222,1],[116,2,222,2,"exports"],[116,9,222,2],[116,10,222,2,"getErrorStats"],[116,23,222,2],[116,26,222,2,"getErrorStats"],[116,39,222,2],[117,0,222,2],[117,3]],"functionMap":{"names":["<global>","extractErrorContext","isNetworkError","NETWORK_ERROR_PATTERNS.some$argument_0","args.map$argument_0","showErrorSummary","Array.from.filter$argument_0","Array.from.filter.filter$argument_0","networkErrors.forEach$argument_0","initializeErrorInterceptor","console.error","restoreConsoleError","resetErrorTracking","getErrorStats","errorTracker.forEach$argument_0"],"mappings":"AAA;4BCkD;CDqC;uBEK;sDCU,wCD;+BEM,kBF;qCCC,wCD;CFC;yBKK;YCS,kFD;YEC,iCF;0BGI;KHI;CLG;0CSK;kBCC;GD4C;CTI;mCWK;CXE;kCYK;CZG;6BaK;uBCE;GDO;CbE"}},"type":"js/module"}]}