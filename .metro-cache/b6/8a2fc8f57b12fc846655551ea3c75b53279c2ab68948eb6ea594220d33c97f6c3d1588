{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@reduxjs/toolkit/query/react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":57,"index":57}}],"key":"H8aYsQNJt9rS0BKlqltpEbUG6zo=","exportNames":["*"]}},{"name":"../../services/supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":58,"index":117}}],"key":"a99TehitYkPR4mct+ady0jxcI4I=","exportNames":["*"]}},{"name":"../../constants/defaults","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":58,"index":177}}],"key":"Ye25I9WTFVUZPXhwgfQ8l+VQTx4=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":179},"end":{"line":4,"column":54,"index":233}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useRefreshDashboardMutation = exports.useGetTodayStatsQuery = exports.useGetRecentActivityQuery = exports.useGetFeaturedAutomationQuery = exports.default = undefined;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _react = require(_dependencyMap[3]);\n  var _client = require(_dependencyMap[4]);\n  var _defaults = require(_dependencyMap[5]);\n  var _EventLogger = require(_dependencyMap[6]);\n  var dashboardApi = (0, _react.createApi)({\n    reducerPath: 'dashboardApi',\n    baseQuery: function () {\n      var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {\n        var url = _ref.url,\n          _ref$method = _ref.method,\n          method = _ref$method === undefined ? 'GET' : _ref$method,\n          body = _ref.body,\n          params = _ref.params;\n        try {\n          // Get current user\n          var _yield$supabase$auth$ = yield _client.supabase.auth.getUser(),\n            user = _yield$supabase$auth$.data.user;\n          if (!user) {\n            return {\n              error: {\n                status: 401,\n                data: 'Not authenticated'\n              }\n            };\n          }\n\n          // Handle RPC calls\n          if (url.startsWith('rpc/')) {\n            var functionName = url.replace('rpc/', '');\n            var _yield$supabase$rpc = yield _client.supabase.rpc(functionName, body),\n              _data = _yield$supabase$rpc.data,\n              _error = _yield$supabase$rpc.error;\n            if (_error) {\n              return {\n                error: {\n                  status: 500,\n                  data: _error.message\n                }\n              };\n            }\n            return {\n              data: _data\n            };\n          }\n\n          // Handle regular queries\n          var query = _client.supabase.from(url);\n\n          // Apply params\n          if (params) {\n            Object.entries(params).forEach(_ref3 => {\n              var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n                key = _ref4[0],\n                value = _ref4[1];\n              if (key === 'select') {\n                query = query.select(value);\n              } else if (key === 'order') {\n                var _split = value.split('.'),\n                  _split2 = (0, _slicedToArray2.default)(_split, 2),\n                  column = _split2[0],\n                  direction = _split2[1];\n                query = query.order(column, {\n                  ascending: direction === 'asc'\n                });\n              } else if (key === 'limit') {\n                query = query.limit(value);\n              } else {\n                // Handle filter params like user_id: 'eq.${userId}'\n                var _split3 = value.split('.'),\n                  _split4 = (0, _slicedToArray2.default)(_split3, 2),\n                  operator = _split4[0],\n                  filterValue = _split4[1];\n                if (operator === 'eq') {\n                  query = query.eq(key, filterValue);\n                }\n              }\n            });\n          }\n          var _yield$query = yield query,\n            data = _yield$query.data,\n            error = _yield$query.error;\n          if (error) {\n            return {\n              error: {\n                status: 500,\n                data: error.message\n              }\n            };\n          }\n          return {\n            data\n          };\n        } catch (error) {\n          return {\n            error: {\n              status: 500,\n              data: 'An unexpected error occurred'\n            }\n          };\n        }\n      });\n      return function baseQuery(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    tagTypes: ['Dashboard', 'Stats', 'Activity', 'Featured'],\n    endpoints: builder => ({\n      getTodayStats: builder.query({\n        queryFn: function () {\n          var _ref5 = (0, _asyncToGenerator2.default)(function* () {\n            try {\n              var _yield$supabase$auth$2 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$2.data.user;\n              if (!user) {\n                return {\n                  data: {\n                    totalExecutions: 0,\n                    successRate: 0,\n                    averageTime: 0,\n                    timeSaved: 0\n                  }\n                };\n              }\n              var today = new Date().toISOString().split('T')[0];\n              var _yield$supabase$from$ = yield _client.supabase.from('automation_executions').select('status, execution_time').eq('user_id', user.id).gte('created_at', `${today}T00:00:00`).lte('created_at', `${today}T23:59:59`),\n                executions = _yield$supabase$from$.data,\n                error = _yield$supabase$from$.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching today stats:', error);\n                // Return default values on error instead of throwing\n                return {\n                  data: {\n                    totalExecutions: 0,\n                    successRate: 0,\n                    averageTime: 0,\n                    timeSaved: 0\n                  }\n                };\n              }\n              if (!executions || executions.length === 0) {\n                return {\n                  data: {\n                    totalExecutions: 0,\n                    successRate: 0,\n                    averageTime: 0,\n                    timeSaved: 0\n                  }\n                };\n              }\n              var successful = executions.filter(e => e.status === 'success');\n              var totalTime = successful.reduce((acc, e) => acc + (e.execution_time || 0), 0);\n              return {\n                data: {\n                  totalExecutions: executions.length,\n                  successRate: Math.round(successful.length / executions.length * 100),\n                  averageTime: successful.length > 0 ? Math.round(totalTime / successful.length) : 0,\n                  timeSaved: Math.round(totalTime / 1000 * 5) // Estimate 5x time saved\n                }\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to fetch today stats:', error);\n              // Return default values on any error\n              return {\n                data: {\n                  totalExecutions: 0,\n                  successRate: 0,\n                  averageTime: 0,\n                  timeSaved: 0\n                }\n              };\n            }\n          });\n          return function queryFn() {\n            return _ref5.apply(this, arguments);\n          };\n        }(),\n        providesTags: ['Stats']\n      }),\n      getRecentActivity: builder.query({\n        queryFn: function () {\n          var _ref6 = (0, _asyncToGenerator2.default)(function* () {\n            try {\n              var _yield$supabase$auth$3 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$3.data.user;\n              if (!user) {\n                return {\n                  data: []\n                };\n              }\n              var _yield$supabase$from$2 = yield _client.supabase.from('automation_executions').select('id,status,execution_time,created_at,automation_id').eq('user_id', user.id).order('created_at', {\n                  ascending: false\n                }).limit(5),\n                executions = _yield$supabase$from$2.data,\n                error = _yield$supabase$from$2.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching recent activity:', error);\n                return {\n                  data: []\n                };\n              }\n              if (!executions || executions.length === 0) {\n                return {\n                  data: []\n                };\n              }\n\n              // Fetch automation details\n              var automationIds = executions.map(r => r.automation_id).filter(Boolean);\n              if (automationIds.length === 0) {\n                return {\n                  data: []\n                };\n              }\n              var _yield$supabase$from$3 = yield _client.supabase.from('automations').select('id, title').in('id', automationIds),\n                automations = _yield$supabase$from$3.data,\n                automationsError = _yield$supabase$from$3.error;\n              if (automationsError) {\n                _EventLogger.EventLogger.error('API', 'Error fetching automation details:', automationsError);\n              }\n              var automationMap = new Map(automations?.map(a => [a.id, a]) || []);\n              return {\n                data: executions.map(execution => ({\n                  id: execution.id,\n                  status: execution.status,\n                  executionTime: execution.execution_time || 0,\n                  createdAt: execution.created_at,\n                  automation: automationMap.get(execution.automation_id) || {\n                    title: 'Unknown Automation',\n                    icon: 'help-circle'\n                  }\n                }))\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to fetch recent activity:', error);\n              return {\n                data: []\n              };\n            }\n          });\n          return function queryFn() {\n            return _ref6.apply(this, arguments);\n          };\n        }(),\n        providesTags: ['Activity']\n      }),\n      getFeaturedAutomation: builder.query({\n        queryFn: function () {\n          var _ref7 = (0, _asyncToGenerator2.default)(function* () {\n            try {\n              var _yield$supabase$from$4 = yield _client.supabase.from('automations').select('id,title,description,category,tags,likes_count,downloads_count,created_by').eq('is_public', true).eq('is_template', true).order('likes_count', {\n                  ascending: false\n                }).limit(1),\n                automations = _yield$supabase$from$4.data,\n                error = _yield$supabase$from$4.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching featured automation:', error);\n                return {\n                  data: null\n                };\n              }\n              if (!automations || automations.length === 0) {\n                return {\n                  data: null\n                };\n              }\n              var automation = automations[0];\n\n              // Fetch user details\n              var _yield$supabase$from$5 = yield _client.supabase.from('users').select('name, avatar_url').eq('id', automation.created_by).single(),\n                userData = _yield$supabase$from$5.data,\n                userError = _yield$supabase$from$5.error;\n              if (userError) {\n                _EventLogger.EventLogger.error('API', 'Error fetching user details:', userError);\n              }\n              return {\n                data: {\n                  id: automation.id,\n                  title: automation.title,\n                  description: automation.description,\n                  category: automation.category || 'Productivity',\n                  tags: automation.tags || [],\n                  likesCount: automation.likes_count || 0,\n                  downloadsCount: automation.downloads_count || 0,\n                  createdBy: automation.created_by,\n                  user: {\n                    name: userData?.name || 'Anonymous',\n                    avatarUrl: userData?.avatar_url || _defaults.DEFAULT_AVATAR\n                  }\n                }\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to fetch featured automation:', error);\n              return {\n                data: null\n              };\n            }\n          });\n          return function queryFn() {\n            return _ref7.apply(this, arguments);\n          };\n        }(),\n        providesTags: ['Featured']\n      }),\n      refreshDashboard: builder.mutation({\n        queryFn: () => ({\n          data: null\n        }),\n        invalidatesTags: ['Stats', 'Activity', 'Featured']\n      })\n    })\n  });\n  var useGetTodayStatsQuery = exports.useGetTodayStatsQuery = dashboardApi.useGetTodayStatsQuery,\n    useGetRecentActivityQuery = exports.useGetRecentActivityQuery = dashboardApi.useGetRecentActivityQuery,\n    useGetFeaturedAutomationQuery = exports.useGetFeaturedAutomationQuery = dashboardApi.useGetFeaturedAutomationQuery,\n    useRefreshDashboardMutation = exports.useRefreshDashboardMutation = dashboardApi.useRefreshDashboardMutation;\n  var _default = exports.default = dashboardApi;\n});","lineCount":325,"map":[[9,2,1,0],[9,6,1,0,"_react"],[9,12,1,0],[9,15,1,0,"require"],[9,22,1,0],[9,23,1,0,"_dependencyMap"],[9,37,1,0],[10,2,2,0],[10,6,2,0,"_client"],[10,13,2,0],[10,16,2,0,"require"],[10,23,2,0],[10,24,2,0,"_dependencyMap"],[10,38,2,0],[11,2,3,0],[11,6,3,0,"_defaults"],[11,15,3,0],[11,18,3,0,"require"],[11,25,3,0],[11,26,3,0,"_dependencyMap"],[11,40,3,0],[12,2,4,0],[12,6,4,0,"_EventLogger"],[12,18,4,0],[12,21,4,0,"require"],[12,28,4,0],[12,29,4,0,"_dependencyMap"],[12,43,4,0],[13,2,39,0],[13,6,39,6,"dashboardApi"],[13,18,39,18],[13,21,39,21],[13,25,39,21,"createApi"],[13,41,39,30],[13,43,39,31],[14,4,40,2,"reducerPath"],[14,15,40,13],[14,17,40,15],[14,31,40,29],[15,4,41,2,"baseQuery"],[15,13,41,11],[16,6,41,11],[16,10,41,11,"_ref2"],[16,15,41,11],[16,22,41,11,"_asyncToGenerator2"],[16,40,41,11],[16,41,41,11,"default"],[16,48,41,11],[16,50,41,13],[16,61,41,13,"_ref"],[16,65,41,13],[16,67,41,62],[17,8,41,62],[17,12,41,22,"url"],[17,15,41,25],[17,18,41,25,"_ref"],[17,22,41,25],[17,23,41,22,"url"],[17,26,41,25],[18,10,41,25,"_ref$method"],[18,21,41,25],[18,24,41,25,"_ref"],[18,28,41,25],[18,29,41,27,"method"],[18,35,41,33],[19,10,41,27,"method"],[19,16,41,33],[19,19,41,33,"_ref$method"],[19,30,41,33],[19,35,41,33,"undefined"],[19,44,41,33],[19,47,41,36],[19,52,41,41],[19,55,41,41,"_ref$method"],[19,66,41,41],[20,10,41,43,"body"],[20,14,41,47],[20,17,41,47,"_ref"],[20,21,41,47],[20,22,41,43,"body"],[20,26,41,47],[21,10,41,49,"params"],[21,16,41,55],[21,19,41,55,"_ref"],[21,23,41,55],[21,24,41,49,"params"],[21,30,41,55],[22,8,42,4],[22,12,42,8],[23,10,43,6],[24,10,44,6],[24,14,44,6,"_yield$supabase$auth$"],[24,35,44,6],[24,44,44,39,"supabase"],[24,60,44,47],[24,61,44,48,"auth"],[24,65,44,52],[24,66,44,53,"getUser"],[24,73,44,60],[24,74,44,61],[24,75,44,62],[25,12,44,22,"user"],[25,16,44,26],[25,19,44,26,"_yield$supabase$auth$"],[25,40,44,26],[25,41,44,14,"data"],[25,45,44,18],[25,46,44,22,"user"],[25,50,44,26],[26,10,45,6],[26,14,45,10],[26,15,45,11,"user"],[26,19,45,15],[26,21,45,17],[27,12,46,8],[27,19,46,15],[28,14,46,17,"error"],[28,19,46,22],[28,21,46,24],[29,16,46,26,"status"],[29,22,46,32],[29,24,46,34],[29,27,46,37],[30,16,46,39,"data"],[30,20,46,43],[30,22,46,45],[31,14,46,65],[32,12,46,67],[32,13,46,68],[33,10,47,6],[35,10,49,6],[36,10,50,6],[36,14,50,10,"url"],[36,17,50,13],[36,18,50,14,"startsWith"],[36,28,50,24],[36,29,50,25],[36,35,50,31],[36,36,50,32],[36,38,50,34],[37,12,51,8],[37,16,51,14,"functionName"],[37,28,51,26],[37,31,51,29,"url"],[37,34,51,32],[37,35,51,33,"replace"],[37,42,51,40],[37,43,51,41],[37,49,51,47],[37,51,51,49],[37,53,51,51],[37,54,51,52],[38,12,52,8],[38,16,52,8,"_yield$supabase$rpc"],[38,35,52,8],[38,44,52,38,"supabase"],[38,60,52,46],[38,61,52,47,"rpc"],[38,64,52,50],[38,65,52,51,"functionName"],[38,77,52,63],[38,79,52,65,"body"],[38,83,52,69],[38,84,52,70],[39,14,52,16,"data"],[39,19,52,20],[39,22,52,20,"_yield$supabase$rpc"],[39,41,52,20],[39,42,52,16,"data"],[39,46,52,20],[40,14,52,22,"error"],[40,20,52,27],[40,23,52,27,"_yield$supabase$rpc"],[40,42,52,27],[40,43,52,22,"error"],[40,48,52,27],[41,12,54,8],[41,16,54,12,"error"],[41,22,54,17],[41,24,54,19],[42,14,55,10],[42,21,55,17],[43,16,55,19,"error"],[43,21,55,24],[43,23,55,26],[44,18,55,28,"status"],[44,24,55,34],[44,26,55,36],[44,29,55,39],[45,18,55,41,"data"],[45,22,55,45],[45,24,55,47,"error"],[45,30,55,52],[45,31,55,53,"message"],[46,16,55,61],[47,14,55,63],[47,15,55,64],[48,12,56,8],[49,12,58,8],[49,19,58,15],[50,14,58,17,"data"],[50,18,58,21],[50,20,58,17,"data"],[51,12,58,22],[51,13,58,23],[52,10,59,6],[54,10,61,6],[55,10,62,6],[55,14,62,10,"query"],[55,19,62,15],[55,22,62,18,"supabase"],[55,38,62,26],[55,39,62,27,"from"],[55,43,62,31],[55,44,62,32,"url"],[55,47,62,35],[55,48,62,36],[57,10,64,6],[58,10,65,6],[58,14,65,10,"params"],[58,20,65,16],[58,22,65,18],[59,12,66,8,"Object"],[59,18,66,14],[59,19,66,15,"entries"],[59,26,66,22],[59,27,66,23,"params"],[59,33,66,29],[59,34,66,30],[59,35,66,31,"forEach"],[59,42,66,38],[59,43,66,39,"_ref3"],[59,48,66,39],[59,52,66,57],[60,14,66,57],[60,18,66,57,"_ref4"],[60,23,66,57],[60,30,66,57,"_slicedToArray2"],[60,45,66,57],[60,46,66,57,"default"],[60,53,66,57],[60,55,66,57,"_ref3"],[60,60,66,57],[61,16,66,41,"key"],[61,19,66,44],[61,22,66,44,"_ref4"],[61,27,66,44],[62,16,66,46,"value"],[62,21,66,51],[62,24,66,51,"_ref4"],[62,29,66,51],[63,14,67,10],[63,18,67,14,"key"],[63,21,67,17],[63,26,67,22],[63,34,67,30],[63,36,67,32],[64,16,68,12,"query"],[64,21,68,17],[64,24,68,20,"query"],[64,29,68,25],[64,30,68,26,"select"],[64,36,68,32],[64,37,68,33,"value"],[64,42,68,48],[64,43,68,49],[65,14,69,10],[65,15,69,11],[65,21,69,17],[65,25,69,21,"key"],[65,28,69,24],[65,33,69,29],[65,40,69,36],[65,42,69,38],[66,16,70,12],[66,20,70,12,"_split"],[66,26,70,12],[66,29,70,41,"value"],[66,34,70,46],[66,35,70,58,"split"],[66,40,70,63],[66,41,70,64],[66,44,70,67],[66,45,70,68],[67,18,70,68,"_split2"],[67,25,70,68],[67,32,70,68,"_slicedToArray2"],[67,47,70,68],[67,48,70,68,"default"],[67,55,70,68],[67,57,70,68,"_split"],[67,63,70,68],[68,18,70,19,"column"],[68,24,70,25],[68,27,70,25,"_split2"],[68,34,70,25],[69,18,70,27,"direction"],[69,27,70,36],[69,30,70,36,"_split2"],[69,37,70,36],[70,16,71,12,"query"],[70,21,71,17],[70,24,71,20,"query"],[70,29,71,25],[70,30,71,26,"order"],[70,35,71,31],[70,36,71,32,"column"],[70,42,71,38],[70,44,71,40],[71,18,71,42,"ascending"],[71,27,71,51],[71,29,71,53,"direction"],[71,38,71,62],[71,43,71,67],[72,16,71,73],[72,17,71,74],[72,18,71,75],[73,14,72,10],[73,15,72,11],[73,21,72,17],[73,25,72,21,"key"],[73,28,72,24],[73,33,72,29],[73,40,72,36],[73,42,72,38],[74,16,73,12,"query"],[74,21,73,17],[74,24,73,20,"query"],[74,29,73,25],[74,30,73,26,"limit"],[74,35,73,31],[74,36,73,32,"value"],[74,41,73,47],[74,42,73,48],[75,14,74,10],[75,15,74,11],[75,21,74,17],[76,16,75,12],[77,16,76,12],[77,20,76,12,"_split3"],[77,27,76,12],[77,30,76,45,"value"],[77,35,76,50],[77,36,76,62,"split"],[77,41,76,67],[77,42,76,68],[77,45,76,71],[77,46,76,72],[78,18,76,72,"_split4"],[78,25,76,72],[78,32,76,72,"_slicedToArray2"],[78,47,76,72],[78,48,76,72,"default"],[78,55,76,72],[78,57,76,72,"_split3"],[78,64,76,72],[79,18,76,19,"operator"],[79,26,76,27],[79,29,76,27,"_split4"],[79,36,76,27],[80,18,76,29,"filterValue"],[80,29,76,40],[80,32,76,40,"_split4"],[80,39,76,40],[81,16,77,12],[81,20,77,16,"operator"],[81,28,77,24],[81,33,77,29],[81,37,77,33],[81,39,77,35],[82,18,78,14,"query"],[82,23,78,19],[82,26,78,22,"query"],[82,31,78,27],[82,32,78,28,"eq"],[82,34,78,30],[82,35,78,31,"key"],[82,38,78,34],[82,40,78,36,"filterValue"],[82,51,78,47],[82,52,78,48],[83,16,79,12],[84,14,80,10],[85,12,81,8],[85,13,81,9],[85,14,81,10],[86,10,82,6],[87,10,84,6],[87,14,84,6,"_yield$query"],[87,26,84,6],[87,35,84,36,"query"],[87,40,84,41],[88,12,84,14,"data"],[88,16,84,18],[88,19,84,18,"_yield$query"],[88,31,84,18],[88,32,84,14,"data"],[88,36,84,18],[89,12,84,20,"error"],[89,17,84,25],[89,20,84,25,"_yield$query"],[89,32,84,25],[89,33,84,20,"error"],[89,38,84,25],[90,10,86,6],[90,14,86,10,"error"],[90,19,86,15],[90,21,86,17],[91,12,87,8],[91,19,87,15],[92,14,87,17,"error"],[92,19,87,22],[92,21,87,24],[93,16,87,26,"status"],[93,22,87,32],[93,24,87,34],[93,27,87,37],[94,16,87,39,"data"],[94,20,87,43],[94,22,87,45,"error"],[94,27,87,50],[94,28,87,51,"message"],[95,14,87,59],[96,12,87,61],[96,13,87,62],[97,10,88,6],[98,10,90,6],[98,17,90,13],[99,12,90,15,"data"],[100,10,90,20],[100,11,90,21],[101,8,91,4],[101,9,91,5],[101,10,91,6],[101,17,91,13,"error"],[101,22,91,18],[101,24,91,20],[102,10,92,6],[102,17,92,13],[103,12,92,15,"error"],[103,17,92,20],[103,19,92,22],[104,14,92,24,"status"],[104,20,92,30],[104,22,92,32],[104,25,92,35],[105,14,92,37,"data"],[105,18,92,41],[105,20,92,43],[106,12,92,74],[107,10,92,76],[107,11,92,77],[108,8,93,4],[109,6,94,2],[109,7,94,3],[110,6,94,3],[110,22,41,2,"baseQuery"],[110,31,41,11,"baseQuery"],[110,32,41,11,"_x"],[110,34,41,11],[111,8,41,11],[111,15,41,11,"_ref2"],[111,20,41,11],[111,21,41,11,"apply"],[111,26,41,11],[111,33,41,11,"arguments"],[111,42,41,11],[112,6,41,11],[113,4,41,11],[113,7,94,3],[114,4,95,2,"tagTypes"],[114,12,95,10],[114,14,95,12],[114,15,95,13],[114,26,95,24],[114,28,95,26],[114,35,95,33],[114,37,95,35],[114,47,95,45],[114,49,95,47],[114,59,95,57],[114,60,95,58],[115,4,96,2,"endpoints"],[115,13,96,11],[115,15,96,14,"builder"],[115,22,96,21],[115,27,96,27],[116,6,97,4,"getTodayStats"],[116,19,97,17],[116,21,97,19,"builder"],[116,28,97,26],[116,29,97,27,"query"],[116,34,97,32],[116,35,97,51],[117,8,98,6,"queryFn"],[117,15,98,13],[118,10,98,13],[118,14,98,13,"_ref5"],[118,19,98,13],[118,26,98,13,"_asyncToGenerator2"],[118,44,98,13],[118,45,98,13,"default"],[118,52,98,13],[118,54,98,15],[118,67,98,27],[119,12,99,8],[119,16,99,12],[120,14,100,10],[120,18,100,10,"_yield$supabase$auth$2"],[120,40,100,10],[120,49,100,43,"supabase"],[120,65,100,51],[120,66,100,52,"auth"],[120,70,100,56],[120,71,100,57,"getUser"],[120,78,100,64],[120,79,100,65],[120,80,100,66],[121,16,100,26,"user"],[121,20,100,30],[121,23,100,30,"_yield$supabase$auth$2"],[121,45,100,30],[121,46,100,18,"data"],[121,50,100,22],[121,51,100,26,"user"],[121,55,100,30],[122,14,101,10],[122,18,101,14],[122,19,101,15,"user"],[122,23,101,19],[122,25,101,21],[123,16,102,12],[123,23,102,19],[124,18,102,21,"data"],[124,22,102,25],[124,24,102,27],[125,20,102,29,"totalExecutions"],[125,35,102,44],[125,37,102,46],[125,38,102,47],[126,20,102,49,"successRate"],[126,31,102,60],[126,33,102,62],[126,34,102,63],[127,20,102,65,"averageTime"],[127,31,102,76],[127,33,102,78],[127,34,102,79],[128,20,102,81,"timeSaved"],[128,29,102,90],[128,31,102,92],[129,18,102,94],[130,16,102,96],[130,17,102,97],[131,14,103,10],[132,14,105,10],[132,18,105,16,"today"],[132,23,105,21],[132,26,105,24],[132,30,105,28,"Date"],[132,34,105,32],[132,35,105,33],[132,36,105,34],[132,37,105,35,"toISOString"],[132,48,105,46],[132,49,105,47],[132,50,105,48],[132,51,105,49,"split"],[132,56,105,54],[132,57,105,55],[132,60,105,58],[132,61,105,59],[132,62,105,60],[132,63,105,61],[132,64,105,62],[133,14,107,10],[133,18,107,10,"_yield$supabase$from$"],[133,39,107,10],[133,48,107,52,"supabase"],[133,64,107,60],[133,65,108,13,"from"],[133,69,108,17],[133,70,108,18],[133,93,108,41],[133,94,108,42],[133,95,109,13,"select"],[133,101,109,19],[133,102,109,20],[133,126,109,44],[133,127,109,45],[133,128,110,13,"eq"],[133,130,110,15],[133,131,110,16],[133,140,110,25],[133,142,110,27,"user"],[133,146,110,31],[133,147,110,32,"id"],[133,149,110,34],[133,150,110,35],[133,151,111,13,"gte"],[133,154,111,16],[133,155,111,17],[133,167,111,29],[133,169,111,31],[133,172,111,34,"today"],[133,177,111,39],[133,188,111,50],[133,189,111,51],[133,190,112,13,"lte"],[133,193,112,16],[133,194,112,17],[133,206,112,29],[133,208,112,31],[133,211,112,34,"today"],[133,216,112,39],[133,227,112,50],[133,228,112,51],[134,16,107,24,"executions"],[134,26,107,34],[134,29,107,34,"_yield$supabase$from$"],[134,50,107,34],[134,51,107,18,"data"],[134,55,107,22],[135,16,107,36,"error"],[135,21,107,41],[135,24,107,41,"_yield$supabase$from$"],[135,45,107,41],[135,46,107,36,"error"],[135,51,107,41],[136,14,114,10],[136,18,114,14,"error"],[136,23,114,19],[136,25,114,21],[137,16,115,12,"EventLogger"],[137,40,115,23],[137,41,115,24,"error"],[137,46,115,29],[137,47,115,30],[137,52,115,35],[137,54,115,37],[137,83,115,66],[137,85,115,68,"error"],[137,90,115,82],[137,91,115,83],[138,16,116,12],[139,16,117,12],[139,23,117,19],[140,18,117,21,"data"],[140,22,117,25],[140,24,117,27],[141,20,117,29,"totalExecutions"],[141,35,117,44],[141,37,117,46],[141,38,117,47],[142,20,117,49,"successRate"],[142,31,117,60],[142,33,117,62],[142,34,117,63],[143,20,117,65,"averageTime"],[143,31,117,76],[143,33,117,78],[143,34,117,79],[144,20,117,81,"timeSaved"],[144,29,117,90],[144,31,117,92],[145,18,117,94],[146,16,117,96],[146,17,117,97],[147,14,118,10],[148,14,120,10],[148,18,120,14],[148,19,120,15,"executions"],[148,29,120,25],[148,33,120,29,"executions"],[148,43,120,39],[148,44,120,40,"length"],[148,50,120,46],[148,55,120,51],[148,56,120,52],[148,58,120,54],[149,16,121,12],[149,23,121,19],[150,18,121,21,"data"],[150,22,121,25],[150,24,121,27],[151,20,121,29,"totalExecutions"],[151,35,121,44],[151,37,121,46],[151,38,121,47],[152,20,121,49,"successRate"],[152,31,121,60],[152,33,121,62],[152,34,121,63],[153,20,121,65,"averageTime"],[153,31,121,76],[153,33,121,78],[153,34,121,79],[154,20,121,81,"timeSaved"],[154,29,121,90],[154,31,121,92],[155,18,121,94],[156,16,121,96],[156,17,121,97],[157,14,122,10],[158,14,124,10],[158,18,124,16,"successful"],[158,28,124,26],[158,31,124,29,"executions"],[158,41,124,39],[158,42,124,40,"filter"],[158,48,124,46],[158,49,124,47,"e"],[158,50,124,48],[158,54,124,52,"e"],[158,55,124,53],[158,56,124,54,"status"],[158,62,124,60],[158,67,124,65],[158,76,124,74],[158,77,124,75],[159,14,125,10],[159,18,125,16,"totalTime"],[159,27,125,25],[159,30,125,28,"successful"],[159,40,125,38],[159,41,125,39,"reduce"],[159,47,125,45],[159,48,125,46],[159,49,125,47,"acc"],[159,52,125,50],[159,54,125,52,"e"],[159,55,125,53],[159,60,125,58,"acc"],[159,63,125,61],[159,67,125,65,"e"],[159,68,125,66],[159,69,125,67,"execution_time"],[159,83,125,81],[159,87,125,85],[159,88,125,86],[159,89,125,87],[159,91,125,89],[159,92,125,90],[159,93,125,91],[160,14,127,10],[160,21,127,17],[161,16,128,12,"data"],[161,20,128,16],[161,22,128,18],[162,18,129,14,"totalExecutions"],[162,33,129,29],[162,35,129,31,"executions"],[162,45,129,41],[162,46,129,42,"length"],[162,52,129,48],[163,18,130,14,"successRate"],[163,29,130,25],[163,31,130,27,"Math"],[163,35,130,31],[163,36,130,32,"round"],[163,41,130,37],[163,42,130,39,"successful"],[163,52,130,49],[163,53,130,50,"length"],[163,59,130,56],[163,62,130,59,"executions"],[163,72,130,69],[163,73,130,70,"length"],[163,79,130,76],[163,82,130,80],[163,85,130,83],[163,86,130,84],[164,18,131,14,"averageTime"],[164,29,131,25],[164,31,131,27,"successful"],[164,41,131,37],[164,42,131,38,"length"],[164,48,131,44],[164,51,131,47],[164,52,131,48],[164,55,131,51,"Math"],[164,59,131,55],[164,60,131,56,"round"],[164,65,131,61],[164,66,131,62,"totalTime"],[164,75,131,71],[164,78,131,74,"successful"],[164,88,131,84],[164,89,131,85,"length"],[164,95,131,91],[164,96,131,92],[164,99,131,95],[164,100,131,96],[165,18,132,14,"timeSaved"],[165,27,132,23],[165,29,132,25,"Math"],[165,33,132,29],[165,34,132,30,"round"],[165,39,132,35],[165,40,132,36,"totalTime"],[165,49,132,45],[165,52,132,48],[165,56,132,52],[165,59,132,55],[165,60,132,56],[165,61,132,57],[165,62,132,58],[166,16,133,12],[167,14,134,10],[167,15,134,11],[168,12,135,8],[168,13,135,9],[168,14,135,10],[168,21,135,17,"error"],[168,26,135,22],[168,28,135,24],[169,14,136,10,"EventLogger"],[169,38,136,21],[169,39,136,22,"error"],[169,44,136,27],[169,45,136,28],[169,50,136,33],[169,52,136,35],[169,82,136,65],[169,84,136,67,"error"],[169,89,136,81],[169,90,136,82],[170,14,137,10],[171,14,138,10],[171,21,138,17],[172,16,138,19,"data"],[172,20,138,23],[172,22,138,25],[173,18,138,27,"totalExecutions"],[173,33,138,42],[173,35,138,44],[173,36,138,45],[174,18,138,47,"successRate"],[174,29,138,58],[174,31,138,60],[174,32,138,61],[175,18,138,63,"averageTime"],[175,29,138,74],[175,31,138,76],[175,32,138,77],[176,18,138,79,"timeSaved"],[176,27,138,88],[176,29,138,90],[177,16,138,92],[178,14,138,94],[178,15,138,95],[179,12,139,8],[180,10,140,6],[180,11,140,7],[181,10,140,7],[181,26,98,6,"queryFn"],[181,33,98,13,"queryFn"],[181,34,98,13],[182,12,98,13],[182,19,98,13,"_ref5"],[182,24,98,13],[182,25,98,13,"apply"],[182,30,98,13],[182,37,98,13,"arguments"],[182,46,98,13],[183,10,98,13],[184,8,98,13],[184,11,140,7],[185,8,141,6,"providesTags"],[185,20,141,18],[185,22,141,20],[185,23,141,21],[185,30,141,28],[186,6,142,4],[186,7,142,5],[186,8,142,6],[187,6,144,4,"getRecentActivity"],[187,23,144,21],[187,25,144,23,"builder"],[187,32,144,30],[187,33,144,31,"query"],[187,38,144,36],[187,39,144,61],[188,8,145,6,"queryFn"],[188,15,145,13],[189,10,145,13],[189,14,145,13,"_ref6"],[189,19,145,13],[189,26,145,13,"_asyncToGenerator2"],[189,44,145,13],[189,45,145,13,"default"],[189,52,145,13],[189,54,145,15],[189,67,145,27],[190,12,146,8],[190,16,146,12],[191,14,147,10],[191,18,147,10,"_yield$supabase$auth$3"],[191,40,147,10],[191,49,147,43,"supabase"],[191,65,147,51],[191,66,147,52,"auth"],[191,70,147,56],[191,71,147,57,"getUser"],[191,78,147,64],[191,79,147,65],[191,80,147,66],[192,16,147,26,"user"],[192,20,147,30],[192,23,147,30,"_yield$supabase$auth$3"],[192,45,147,30],[192,46,147,18,"data"],[192,50,147,22],[192,51,147,26,"user"],[192,55,147,30],[193,14,148,10],[193,18,148,14],[193,19,148,15,"user"],[193,23,148,19],[193,25,148,21],[194,16,149,12],[194,23,149,19],[195,18,149,21,"data"],[195,22,149,25],[195,24,149,27],[196,16,149,30],[196,17,149,31],[197,14,150,10],[198,14,152,10],[198,18,152,10,"_yield$supabase$from$2"],[198,40,152,10],[198,49,152,52,"supabase"],[198,65,152,60],[198,66,153,13,"from"],[198,70,153,17],[198,71,153,18],[198,94,153,41],[198,95,153,42],[198,96,154,13,"select"],[198,102,154,19],[198,103,154,20],[198,154,154,71],[198,155,154,72],[198,156,155,13,"eq"],[198,158,155,15],[198,159,155,16],[198,168,155,25],[198,170,155,27,"user"],[198,174,155,31],[198,175,155,32,"id"],[198,177,155,34],[198,178,155,35],[198,179,156,13,"order"],[198,184,156,18],[198,185,156,19],[198,197,156,31],[198,199,156,33],[199,18,156,35,"ascending"],[199,27,156,44],[199,29,156,46],[200,16,156,52],[200,17,156,53],[200,18,156,54],[200,19,157,13,"limit"],[200,24,157,18],[200,25,157,19],[200,26,157,20],[200,27,157,21],[201,16,152,24,"executions"],[201,26,152,34],[201,29,152,34,"_yield$supabase$from$2"],[201,51,152,34],[201,52,152,18,"data"],[201,56,152,22],[202,16,152,36,"error"],[202,21,152,41],[202,24,152,41,"_yield$supabase$from$2"],[202,46,152,41],[202,47,152,36,"error"],[202,52,152,41],[203,14,159,10],[203,18,159,14,"error"],[203,23,159,19],[203,25,159,21],[204,16,160,12,"EventLogger"],[204,40,160,23],[204,41,160,24,"error"],[204,46,160,29],[204,47,160,30],[204,52,160,35],[204,54,160,37],[204,87,160,70],[204,89,160,72,"error"],[204,94,160,86],[204,95,160,87],[205,16,161,12],[205,23,161,19],[206,18,161,21,"data"],[206,22,161,25],[206,24,161,27],[207,16,161,30],[207,17,161,31],[208,14,162,10],[209,14,164,10],[209,18,164,14],[209,19,164,15,"executions"],[209,29,164,25],[209,33,164,29,"executions"],[209,43,164,39],[209,44,164,40,"length"],[209,50,164,46],[209,55,164,51],[209,56,164,52],[209,58,164,54],[210,16,165,12],[210,23,165,19],[211,18,165,21,"data"],[211,22,165,25],[211,24,165,27],[212,16,165,30],[212,17,165,31],[213,14,166,10],[215,14,168,10],[216,14,169,10],[216,18,169,16,"automationIds"],[216,31,169,29],[216,34,169,32,"executions"],[216,44,169,42],[216,45,169,43,"map"],[216,48,169,46],[216,49,169,47,"r"],[216,50,169,48],[216,54,169,52,"r"],[216,55,169,53],[216,56,169,54,"automation_id"],[216,69,169,67],[216,70,169,68],[216,71,169,69,"filter"],[216,77,169,75],[216,78,169,76,"Boolean"],[216,85,169,83],[216,86,169,84],[217,14,170,10],[217,18,170,14,"automationIds"],[217,31,170,27],[217,32,170,28,"length"],[217,38,170,34],[217,43,170,39],[217,44,170,40],[217,46,170,42],[218,16,171,12],[218,23,171,19],[219,18,171,21,"data"],[219,22,171,25],[219,24,171,27],[220,16,171,30],[220,17,171,31],[221,14,172,10],[222,14,174,10],[222,18,174,10,"_yield$supabase$from$3"],[222,40,174,10],[222,49,174,71,"supabase"],[222,65,174,79],[222,66,175,13,"from"],[222,70,175,17],[222,71,175,18],[222,84,175,31],[222,85,175,32],[222,86,176,13,"select"],[222,92,176,19],[222,93,176,20],[222,104,176,31],[222,105,176,32],[222,106,177,13,"in"],[222,108,177,15],[222,109,177,16],[222,113,177,20],[222,115,177,22,"automationIds"],[222,128,177,35],[222,129,177,36],[223,16,174,24,"automations"],[223,27,174,35],[223,30,174,35,"_yield$supabase$from$3"],[223,52,174,35],[223,53,174,18,"data"],[223,57,174,22],[224,16,174,44,"automationsError"],[224,32,174,60],[224,35,174,60,"_yield$supabase$from$3"],[224,57,174,60],[224,58,174,37,"error"],[224,63,174,42],[225,14,179,10],[225,18,179,14,"automationsError"],[225,34,179,30],[225,36,179,32],[226,16,180,12,"EventLogger"],[226,40,180,23],[226,41,180,24,"error"],[226,46,180,29],[226,47,180,30],[226,52,180,35],[226,54,180,37],[226,90,180,73],[226,92,180,75,"automationsError"],[226,108,180,100],[226,109,180,101],[227,14,181,10],[228,14,183,10],[228,18,183,16,"automationMap"],[228,31,183,29],[228,34,183,32],[228,38,183,36,"Map"],[228,41,183,39],[228,42,183,40,"automations"],[228,53,183,51],[228,55,183,53,"map"],[228,58,183,56],[228,59,183,57,"a"],[228,60,183,58],[228,64,183,62],[228,65,183,63,"a"],[228,66,183,64],[228,67,183,65,"id"],[228,69,183,67],[228,71,183,69,"a"],[228,72,183,70],[228,73,183,71],[228,74,183,72],[228,78,183,76],[228,80,183,78],[228,81,183,79],[229,14,185,10],[229,21,185,17],[230,16,186,12,"data"],[230,20,186,16],[230,22,186,18,"executions"],[230,32,186,28],[230,33,186,29,"map"],[230,36,186,32],[230,37,186,33,"execution"],[230,46,186,42],[230,51,186,47],[231,18,187,14,"id"],[231,20,187,16],[231,22,187,18,"execution"],[231,31,187,27],[231,32,187,28,"id"],[231,34,187,30],[232,18,188,14,"status"],[232,24,188,20],[232,26,188,22,"execution"],[232,35,188,31],[232,36,188,32,"status"],[232,42,188,38],[233,18,189,14,"executionTime"],[233,31,189,27],[233,33,189,29,"execution"],[233,42,189,38],[233,43,189,39,"execution_time"],[233,57,189,53],[233,61,189,57],[233,62,189,58],[234,18,190,14,"createdAt"],[234,27,190,23],[234,29,190,25,"execution"],[234,38,190,34],[234,39,190,35,"created_at"],[234,49,190,45],[235,18,191,14,"automation"],[235,28,191,24],[235,30,191,26,"automationMap"],[235,43,191,39],[235,44,191,40,"get"],[235,47,191,43],[235,48,191,44,"execution"],[235,57,191,53],[235,58,191,54,"automation_id"],[235,71,191,67],[235,72,191,68],[235,76,191,72],[236,20,192,16,"title"],[236,25,192,21],[236,27,192,23],[236,47,192,43],[237,20,193,16,"icon"],[237,24,193,20],[237,26,193,22],[238,18,194,14],[239,16,195,12],[239,17,195,13],[239,18,195,14],[240,14,196,10],[240,15,196,11],[241,12,197,8],[241,13,197,9],[241,14,197,10],[241,21,197,17,"error"],[241,26,197,22],[241,28,197,24],[242,14,198,10,"EventLogger"],[242,38,198,21],[242,39,198,22,"error"],[242,44,198,27],[242,45,198,28],[242,50,198,33],[242,52,198,35],[242,86,198,69],[242,88,198,71,"error"],[242,93,198,85],[242,94,198,86],[243,14,199,10],[243,21,199,17],[244,16,199,19,"data"],[244,20,199,23],[244,22,199,25],[245,14,199,28],[245,15,199,29],[246,12,200,8],[247,10,201,6],[247,11,201,7],[248,10,201,7],[248,26,145,6,"queryFn"],[248,33,145,13,"queryFn"],[248,34,145,13],[249,12,145,13],[249,19,145,13,"_ref6"],[249,24,145,13],[249,25,145,13,"apply"],[249,30,145,13],[249,37,145,13,"arguments"],[249,46,145,13],[250,10,145,13],[251,8,145,13],[251,11,201,7],[252,8,202,6,"providesTags"],[252,20,202,18],[252,22,202,20],[252,23,202,21],[252,33,202,31],[253,6,203,4],[253,7,203,5],[253,8,203,6],[254,6,205,4,"getFeaturedAutomation"],[254,27,205,25],[254,29,205,27,"builder"],[254,36,205,34],[254,37,205,35,"query"],[254,42,205,40],[254,43,205,74],[255,8,206,6,"queryFn"],[255,15,206,13],[256,10,206,13],[256,14,206,13,"_ref7"],[256,19,206,13],[256,26,206,13,"_asyncToGenerator2"],[256,44,206,13],[256,45,206,13,"default"],[256,52,206,13],[256,54,206,15],[256,67,206,27],[257,12,207,8],[257,16,207,12],[258,14,208,10],[258,18,208,10,"_yield$supabase$from$4"],[258,40,208,10],[258,49,208,53,"supabase"],[258,65,208,61],[258,66,209,13,"from"],[258,70,209,17],[258,71,209,18],[258,84,209,31],[258,85,209,32],[258,86,210,13,"select"],[258,92,210,19],[258,93,210,20],[258,168,210,95],[258,169,210,96],[258,170,211,13,"eq"],[258,172,211,15],[258,173,211,16],[258,184,211,27],[258,186,211,29],[258,190,211,33],[258,191,211,34],[258,192,212,13,"eq"],[258,194,212,15],[258,195,212,16],[258,208,212,29],[258,210,212,31],[258,214,212,35],[258,215,212,36],[258,216,213,13,"order"],[258,221,213,18],[258,222,213,19],[258,235,213,32],[258,237,213,34],[259,18,213,36,"ascending"],[259,27,213,45],[259,29,213,47],[260,16,213,53],[260,17,213,54],[260,18,213,55],[260,19,214,13,"limit"],[260,24,214,18],[260,25,214,19],[260,26,214,20],[260,27,214,21],[261,16,208,24,"automations"],[261,27,208,35],[261,30,208,35,"_yield$supabase$from$4"],[261,52,208,35],[261,53,208,18,"data"],[261,57,208,22],[262,16,208,37,"error"],[262,21,208,42],[262,24,208,42,"_yield$supabase$from$4"],[262,46,208,42],[262,47,208,37,"error"],[262,52,208,42],[263,14,216,10],[263,18,216,14,"error"],[263,23,216,19],[263,25,216,21],[264,16,217,12,"EventLogger"],[264,40,217,23],[264,41,217,24,"error"],[264,46,217,29],[264,47,217,30],[264,52,217,35],[264,54,217,37],[264,91,217,74],[264,93,217,76,"error"],[264,98,217,90],[264,99,217,91],[265,16,218,12],[265,23,218,19],[266,18,218,21,"data"],[266,22,218,25],[266,24,218,27],[267,16,218,32],[267,17,218,33],[268,14,219,10],[269,14,221,10],[269,18,221,14],[269,19,221,15,"automations"],[269,30,221,26],[269,34,221,30,"automations"],[269,45,221,41],[269,46,221,42,"length"],[269,52,221,48],[269,57,221,53],[269,58,221,54],[269,60,221,56],[270,16,222,12],[270,23,222,19],[271,18,222,21,"data"],[271,22,222,25],[271,24,222,27],[272,16,222,32],[272,17,222,33],[273,14,223,10],[274,14,225,10],[274,18,225,16,"automation"],[274,28,225,26],[274,31,225,29,"automations"],[274,42,225,40],[274,43,225,41],[274,44,225,42],[274,45,225,43],[276,14,227,10],[277,14,228,10],[277,18,228,10,"_yield$supabase$from$5"],[277,40,228,10],[277,49,228,61,"supabase"],[277,65,228,69],[277,66,229,13,"from"],[277,70,229,17],[277,71,229,18],[277,78,229,25],[277,79,229,26],[277,80,230,13,"select"],[277,86,230,19],[277,87,230,20],[277,105,230,38],[277,106,230,39],[277,107,231,13,"eq"],[277,109,231,15],[277,110,231,16],[277,114,231,20],[277,116,231,22,"automation"],[277,126,231,32],[277,127,231,33,"created_by"],[277,137,231,43],[277,138,231,44],[277,139,232,13,"single"],[277,145,232,19],[277,146,232,20],[277,147,232,21],[278,16,228,24,"userData"],[278,24,228,32],[278,27,228,32,"_yield$supabase$from$5"],[278,49,228,32],[278,50,228,18,"data"],[278,54,228,22],[279,16,228,41,"userError"],[279,25,228,50],[279,28,228,50,"_yield$supabase$from$5"],[279,50,228,50],[279,51,228,34,"error"],[279,56,228,39],[280,14,234,10],[280,18,234,14,"userError"],[280,27,234,23],[280,29,234,25],[281,16,235,12,"EventLogger"],[281,40,235,23],[281,41,235,24,"error"],[281,46,235,29],[281,47,235,30],[281,52,235,35],[281,54,235,37],[281,84,235,67],[281,86,235,69,"userError"],[281,95,235,87],[281,96,235,88],[282,14,236,10],[283,14,238,10],[283,21,238,17],[284,16,239,12,"data"],[284,20,239,16],[284,22,239,18],[285,18,240,14,"id"],[285,20,240,16],[285,22,240,18,"automation"],[285,32,240,28],[285,33,240,29,"id"],[285,35,240,31],[286,18,241,14,"title"],[286,23,241,19],[286,25,241,21,"automation"],[286,35,241,31],[286,36,241,32,"title"],[286,41,241,37],[287,18,242,14,"description"],[287,29,242,25],[287,31,242,27,"automation"],[287,41,242,37],[287,42,242,38,"description"],[287,53,242,49],[288,18,243,14,"category"],[288,26,243,22],[288,28,243,24,"automation"],[288,38,243,34],[288,39,243,35,"category"],[288,47,243,43],[288,51,243,47],[288,65,243,61],[289,18,244,14,"tags"],[289,22,244,18],[289,24,244,20,"automation"],[289,34,244,30],[289,35,244,31,"tags"],[289,39,244,35],[289,43,244,39],[289,45,244,41],[290,18,245,14,"likesCount"],[290,28,245,24],[290,30,245,26,"automation"],[290,40,245,36],[290,41,245,37,"likes_count"],[290,52,245,48],[290,56,245,52],[290,57,245,53],[291,18,246,14,"downloadsCount"],[291,32,246,28],[291,34,246,30,"automation"],[291,44,246,40],[291,45,246,41,"downloads_count"],[291,60,246,56],[291,64,246,60],[291,65,246,61],[292,18,247,14,"createdBy"],[292,27,247,23],[292,29,247,25,"automation"],[292,39,247,35],[292,40,247,36,"created_by"],[292,50,247,46],[293,18,248,14,"user"],[293,22,248,18],[293,24,248,20],[294,20,249,16,"name"],[294,24,249,20],[294,26,249,22,"userData"],[294,34,249,30],[294,36,249,32,"name"],[294,40,249,36],[294,44,249,40],[294,55,249,51],[295,20,250,16,"avatarUrl"],[295,29,250,25],[295,31,250,27,"userData"],[295,39,250,35],[295,41,250,37,"avatar_url"],[295,51,250,47],[295,55,250,51,"DEFAULT_AVATAR"],[296,18,251,14],[297,16,252,12],[298,14,253,10],[298,15,253,11],[299,12,254,8],[299,13,254,9],[299,14,254,10],[299,21,254,17,"error"],[299,26,254,22],[299,28,254,24],[300,14,255,10,"EventLogger"],[300,38,255,21],[300,39,255,22,"error"],[300,44,255,27],[300,45,255,28],[300,50,255,33],[300,52,255,35],[300,90,255,73],[300,92,255,75,"error"],[300,97,255,89],[300,98,255,90],[301,14,256,10],[301,21,256,17],[302,16,256,19,"data"],[302,20,256,23],[302,22,256,25],[303,14,256,30],[303,15,256,31],[304,12,257,8],[305,10,258,6],[305,11,258,7],[306,10,258,7],[306,26,206,6,"queryFn"],[306,33,206,13,"queryFn"],[306,34,206,13],[307,12,206,13],[307,19,206,13,"_ref7"],[307,24,206,13],[307,25,206,13,"apply"],[307,30,206,13],[307,37,206,13,"arguments"],[307,46,206,13],[308,10,206,13],[309,8,206,13],[309,11,258,7],[310,8,259,6,"providesTags"],[310,20,259,18],[310,22,259,20],[310,23,259,21],[310,33,259,31],[311,6,260,4],[311,7,260,5],[311,8,260,6],[312,6,262,4,"refreshDashboard"],[312,22,262,20],[312,24,262,22,"builder"],[312,31,262,29],[312,32,262,30,"mutation"],[312,40,262,38],[312,41,262,51],[313,8,263,6,"queryFn"],[313,15,263,13],[313,17,263,15,"queryFn"],[313,18,263,15],[313,24,263,22],[314,10,263,24,"data"],[314,14,263,28],[314,16,263,30],[315,8,263,35],[315,9,263,36],[315,10,263,37],[316,8,264,6,"invalidatesTags"],[316,23,264,21],[316,25,264,23],[316,26,264,24],[316,33,264,31],[316,35,264,33],[316,45,264,43],[316,47,264,45],[316,57,264,55],[317,6,265,4],[317,7,265,5],[318,4,266,2],[318,5,266,3],[319,2,267,0],[319,3,267,1],[319,4,267,2],[320,2,269,7],[320,6,270,2,"useGetTodayStatsQuery"],[320,27,270,23],[320,30,270,23,"exports"],[320,37,270,23],[320,38,270,23,"useGetTodayStatsQuery"],[320,59,270,23],[320,62,274,4,"dashboardApi"],[320,74,274,16],[320,75,270,2,"useGetTodayStatsQuery"],[320,96,270,23],[321,4,271,2,"useGetRecentActivityQuery"],[321,29,271,27],[321,32,271,27,"exports"],[321,39,271,27],[321,40,271,27,"useGetRecentActivityQuery"],[321,65,271,27],[321,68,274,4,"dashboardApi"],[321,80,274,16],[321,81,271,2,"useGetRecentActivityQuery"],[321,106,271,27],[322,4,272,2,"useGetFeaturedAutomationQuery"],[322,33,272,31],[322,36,272,31,"exports"],[322,43,272,31],[322,44,272,31,"useGetFeaturedAutomationQuery"],[322,73,272,31],[322,76,274,4,"dashboardApi"],[322,88,274,16],[322,89,272,2,"useGetFeaturedAutomationQuery"],[322,118,272,31],[323,4,273,2,"useRefreshDashboardMutation"],[323,31,273,29],[323,34,273,29,"exports"],[323,41,273,29],[323,42,273,29,"useRefreshDashboardMutation"],[323,69,273,29],[323,72,274,4,"dashboardApi"],[323,84,274,16],[323,85,273,2,"useRefreshDashboardMutation"],[323,112,273,29],[324,2,274,17],[324,6,274,17,"_default"],[324,14,274,17],[324,17,274,17,"exports"],[324,24,274,17],[324,25,274,17,"default"],[324,32,274,17],[324,35,276,15,"dashboardApi"],[324,47,276,27],[325,0,276,27],[325,3]],"functionMap":{"names":["<global>","createApi$argument_0.baseQuery","Object.entries.forEach$argument_0","createApi$argument_0.endpoints","builder.query$argument_0.queryFn","executions.filter$argument_0","successful.reduce$argument_0","executions.map$argument_0","automations.map$argument_0","builder.mutation$argument_0.queryFn"],"mappings":"AAA;aCwC;uCCyB;SDe;GDa;aGE;eCE;+CC0B,2BD;8CEC,yCF;ODe;eCK;+CGwB,oBH;yDIc,cJ;iCGG;cHS;ODM;eCK;ODoD;eMK,sBN;IHG"}},"type":"js/module"}]}