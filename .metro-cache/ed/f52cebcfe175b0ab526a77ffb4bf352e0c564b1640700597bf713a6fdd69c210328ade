{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"./generated/decode-data-html.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"k3q3h8lJLE1ntwyGrt8hb4Lh0s4=","exportNames":["*"]}},{"name":"./generated/decode-data-xml.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":62},"end":{"line":2,"column":59,"index":121}}],"key":"7IkRXU+8yUCkhlmiPWlh7Tfa5Qs=","exportNames":["*"]}},{"name":"./decode_codepoint.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":122},"end":{"line":3,"column":90,"index":212}}],"key":"hNbL9TtzGXSHKeJEOAkzIW+3P7o=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = void 0;\n  Object.defineProperty(exports, \"decodeCodePoint\", {\n    enumerable: true,\n    get: function get() {\n      return _decode_codepoint.default;\n    }\n  });\n  exports.decodeHTML = decodeHTML;\n  exports.decodeHTMLAttribute = decodeHTMLAttribute;\n  exports.decodeHTMLStrict = decodeHTMLStrict;\n  exports.decodeXML = decodeXML;\n  exports.determineBranch = determineBranch;\n  Object.defineProperty(exports, \"fromCodePoint\", {\n    enumerable: true,\n    get: function get() {\n      return _decode_codepoint.fromCodePoint;\n    }\n  });\n  Object.defineProperty(exports, \"htmlDecodeTree\", {\n    enumerable: true,\n    get: function get() {\n      return _decodeDataHtml.default;\n    }\n  });\n  Object.defineProperty(exports, \"replaceCodePoint\", {\n    enumerable: true,\n    get: function get() {\n      return _decode_codepoint.replaceCodePoint;\n    }\n  });\n  Object.defineProperty(exports, \"xmlDecodeTree\", {\n    enumerable: true,\n    get: function get() {\n      return _decodeDataXml.default;\n    }\n  });\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _decodeDataHtml = _interopRequireDefault(require(_dependencyMap[3], \"./generated/decode-data-html.js\"));\n  var _decodeDataXml = _interopRequireDefault(require(_dependencyMap[4], \"./generated/decode-data-xml.js\"));\n  var _decode_codepoint = _interopRequireWildcard(require(_dependencyMap[5], \"./decode_codepoint.js\"));\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\n  // Re-export for use by eg. htmlparser2\n\n  var CharCodes;\n  (function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n  })(CharCodes || (CharCodes = {}));\n  /** Bit that needs to be set to convert an upper case ASCII character to lower case */\n  var TO_LOWER_BIT = 32;\n  var BinTrieFlags;\n  (function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n  })(BinTrieFlags || (exports.BinTrieFlags = BinTrieFlags = {}));\n  function isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n  }\n  function isHexadecimalCharacter(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n  }\n  function isAsciiAlphaNumeric(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n  }\n  /**\n   * Checks if the given character is a valid end character for an entity in an attribute.\n   *\n   * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n   * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n   */\n  function isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n  }\n  var EntityDecoderState;\n  (function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n  })(EntityDecoderState || (EntityDecoderState = {}));\n  var DecodingMode;\n  (function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n  })(DecodingMode || (exports.DecodingMode = DecodingMode = {}));\n  /**\n   * Token decoder with support of writing partial entities.\n   */\n  var EntityDecoder = exports.EntityDecoder = /*#__PURE__*/function () {\n    function EntityDecoder(/** The tree used to decode entities. */\n    decodeTree,\n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, /** An object that is used to produce errors. */\n    errors) {\n      (0, _classCallCheck2.default)(this, EntityDecoder);\n      this.decodeTree = decodeTree;\n      this.emitCodePoint = emitCodePoint;\n      this.errors = errors;\n      /** The current state of the decoder. */\n      this.state = EntityDecoderState.EntityStart;\n      /** Characters that were consumed while parsing an entity. */\n      this.consumed = 1;\n      /**\n       * The result of the entity.\n       *\n       * Either the result index of a numeric entity, or the codepoint of a\n       * numeric entity.\n       */\n      this.result = 0;\n      /** The current index in the decode tree. */\n      this.treeIndex = 0;\n      /** The number of characters that were consumed in excess. */\n      this.excess = 1;\n      /** The mode in which the decoder is operating. */\n      this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    return (0, _createClass2.default)(EntityDecoder, [{\n      key: \"startEntity\",\n      value: function startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n      }\n      /**\n       * Write an entity to the decoder. This can be called multiple times with partial entities.\n       * If the entity is incomplete, the decoder will return -1.\n       *\n       * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n       * entity is incomplete, and resume when the next string is written.\n       *\n       * @param string The string containing the entity (or a continuation of the entity).\n       * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"write\",\n      value: function write(str, offset) {\n        switch (this.state) {\n          case EntityDecoderState.EntityStart:\n            {\n              if (str.charCodeAt(offset) === CharCodes.NUM) {\n                this.state = EntityDecoderState.NumericStart;\n                this.consumed += 1;\n                return this.stateNumericStart(str, offset + 1);\n              }\n              this.state = EntityDecoderState.NamedEntity;\n              return this.stateNamedEntity(str, offset);\n            }\n          case EntityDecoderState.NumericStart:\n            {\n              return this.stateNumericStart(str, offset);\n            }\n          case EntityDecoderState.NumericDecimal:\n            {\n              return this.stateNumericDecimal(str, offset);\n            }\n          case EntityDecoderState.NumericHex:\n            {\n              return this.stateNumericHex(str, offset);\n            }\n          case EntityDecoderState.NamedEntity:\n            {\n              return this.stateNamedEntity(str, offset);\n            }\n        }\n      }\n      /**\n       * Switches between the numeric decimal and hexadecimal states.\n       *\n       * Equivalent to the `Numeric character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNumericStart\",\n      value: function stateNumericStart(str, offset) {\n        if (offset >= str.length) {\n          return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n          this.state = EntityDecoderState.NumericHex;\n          this.consumed += 1;\n          return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n      }\n    }, {\n      key: \"addToNumericResult\",\n      value: function addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n          var digitCount = end - start;\n          this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n          this.consumed += digitCount;\n        }\n      }\n      /**\n       * Parses a hexadecimal numeric entity.\n       *\n       * Equivalent to the `Hexademical character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNumericHex\",\n      value: function stateNumericHex(str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n          var char = str.charCodeAt(offset);\n          if (isNumber(char) || isHexadecimalCharacter(char)) {\n            offset += 1;\n          } else {\n            this.addToNumericResult(str, startIdx, offset, 16);\n            return this.emitNumericEntity(char, 3);\n          }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n      }\n      /**\n       * Parses a decimal numeric entity.\n       *\n       * Equivalent to the `Decimal character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNumericDecimal\",\n      value: function stateNumericDecimal(str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n          var char = str.charCodeAt(offset);\n          if (isNumber(char)) {\n            offset += 1;\n          } else {\n            this.addToNumericResult(str, startIdx, offset, 10);\n            return this.emitNumericEntity(char, 2);\n          }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n      }\n      /**\n       * Validate and emit a numeric entity.\n       *\n       * Implements the logic from the `Hexademical character reference start\n       * state` and `Numeric character reference end state` in the HTML spec.\n       *\n       * @param lastCp The last code point of the entity. Used to see if the\n       *               entity was terminated with a semicolon.\n       * @param expectedLength The minimum number of characters that should be\n       *                       consumed. Used to validate that at least one digit\n       *                       was consumed.\n       * @returns The number of characters that were consumed.\n       */\n    }, {\n      key: \"emitNumericEntity\",\n      value: function emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n          return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n          this.consumed += 1;\n        } else if (this.decodeMode === DecodingMode.Strict) {\n          return 0;\n        }\n        this.emitCodePoint((0, _decode_codepoint.replaceCodePoint)(this.result), this.consumed);\n        if (this.errors) {\n          if (lastCp !== CharCodes.SEMI) {\n            this.errors.missingSemicolonAfterCharacterReference();\n          }\n          this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n      }\n      /**\n       * Parses a named entity.\n       *\n       * Equivalent to the `Named character reference state` in the HTML spec.\n       *\n       * @param str The string containing the entity (or a continuation of the entity).\n       * @param offset The current offset.\n       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n       */\n    }, {\n      key: \"stateNamedEntity\",\n      value: function stateNamedEntity(str, offset) {\n        var decodeTree = this.decodeTree;\n        var current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n          var char = str.charCodeAt(offset);\n          this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n          if (this.treeIndex < 0) {\n            return this.result === 0 ||\n            // If we are parsing an attribute\n            this.decodeMode === DecodingMode.Attribute && (\n            // We shouldn't have consumed any characters after the entity,\n            valueLength === 0 ||\n            // And there should be no invalid characters.\n            isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n          }\n          current = decodeTree[this.treeIndex];\n          valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n          // If the branch is a value, store it and continue\n          if (valueLength !== 0) {\n            // If the entity is terminated by a semicolon, we are done.\n            if (char === CharCodes.SEMI) {\n              return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n            }\n            // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n            if (this.decodeMode !== DecodingMode.Strict) {\n              this.result = this.treeIndex;\n              this.consumed += this.excess;\n              this.excess = 0;\n            }\n          }\n        }\n        return -1;\n      }\n      /**\n       * Emit a named entity that was not terminated with a semicolon.\n       *\n       * @returns The number of characters consumed.\n       */\n    }, {\n      key: \"emitNotTerminatedNamedEntity\",\n      value: function emitNotTerminatedNamedEntity() {\n        var _a;\n        var result = this.result,\n          decodeTree = this.decodeTree;\n        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n      }\n      /**\n       * Emit a named entity.\n       *\n       * @param result The index of the entity in the decode tree.\n       * @param valueLength The number of bytes in the entity.\n       * @param consumed The number of characters consumed.\n       *\n       * @returns The number of characters consumed.\n       */\n    }, {\n      key: \"emitNamedEntityData\",\n      value: function emitNamedEntityData(result, valueLength, consumed) {\n        var decodeTree = this.decodeTree;\n        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n          // For multi-byte values, we need to emit the second byte.\n          this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n      }\n      /**\n       * Signal to the parser that the end of the input was reached.\n       *\n       * Remaining data will be emitted and relevant errors will be produced.\n       *\n       * @returns The number of characters consumed.\n       */\n    }, {\n      key: \"end\",\n      value: function end() {\n        var _a;\n        switch (this.state) {\n          case EntityDecoderState.NamedEntity:\n            {\n              // Emit a named entity if we have one.\n              return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n            }\n          // Otherwise, emit a numeric entity if we have one.\n          case EntityDecoderState.NumericDecimal:\n            {\n              return this.emitNumericEntity(0, 2);\n            }\n          case EntityDecoderState.NumericHex:\n            {\n              return this.emitNumericEntity(0, 3);\n            }\n          case EntityDecoderState.NumericStart:\n            {\n              (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n              return 0;\n            }\n          case EntityDecoderState.EntityStart:\n            {\n              // Return 0 if we have no entity.\n              return 0;\n            }\n        }\n      }\n    }]);\n  }();\n  /**\n   * Creates a function that decodes entities in a string.\n   *\n   * @param decodeTree The decode tree.\n   * @returns A function that decodes entities in a string.\n   */\n  function getDecoder(decodeTree) {\n    var ret = \"\";\n    var decoder = new EntityDecoder(decodeTree, function (str) {\n      return ret += (0, _decode_codepoint.fromCodePoint)(str);\n    });\n    return function decodeWithTrie(str, decodeMode) {\n      var lastIndex = 0;\n      var offset = 0;\n      while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n        ret += str.slice(lastIndex, offset);\n        decoder.startEntity(decodeMode);\n        var len = decoder.write(str,\n        // Skip the \"&\"\n        offset + 1);\n        if (len < 0) {\n          lastIndex = offset + decoder.end();\n          break;\n        }\n        lastIndex = offset + len;\n        // If `len` is 0, skip the current `&` and continue.\n        offset = len === 0 ? lastIndex + 1 : lastIndex;\n      }\n      var result = ret + str.slice(lastIndex);\n      // Make sure we don't keep a reference to the final string.\n      ret = \"\";\n      return result;\n    };\n  }\n  /**\n   * Determines the branch of the current node that is taken given the current\n   * character. This function is used to traverse the trie.\n   *\n   * @param decodeTree The trie.\n   * @param current The current node.\n   * @param nodeIdx The index right after the current node and its value.\n   * @param char The current character.\n   * @returns The index of the next node, or -1 if no branch is taken.\n   */\n  function determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n      return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n      var value = char - jumpOffset;\n      return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n      var mid = lo + hi >>> 1;\n      var midVal = decodeTree[mid];\n      if (midVal < char) {\n        lo = mid + 1;\n      } else if (midVal > char) {\n        hi = mid - 1;\n      } else {\n        return decodeTree[mid + branchCount];\n      }\n    }\n    return -1;\n  }\n  var htmlDecoder = getDecoder(_decodeDataHtml.default);\n  var xmlDecoder = getDecoder(_decodeDataXml.default);\n  /**\n   * Decodes an HTML string.\n   *\n   * @param str The string to decode.\n   * @param mode The decoding mode.\n   * @returns The decoded string.\n   */\n  function decodeHTML(str) {\n    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DecodingMode.Legacy;\n    return htmlDecoder(str, mode);\n  }\n  /**\n   * Decodes an HTML string in an attribute.\n   *\n   * @param str The string to decode.\n   * @returns The decoded string.\n   */\n  function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n  }\n  /**\n   * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n   *\n   * @param str The string to decode.\n   * @returns The decoded string.\n   */\n  function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n  }\n  /**\n   * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n   *\n   * @param str The string to decode.\n   * @returns The decoded string.\n   */\n  function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n  }\n});","lineCount":555,"map":[[44,2,1,0],[44,6,1,0,"_decodeDataHtml"],[44,21,1,0],[44,24,1,0,"_interopRequireDefault"],[44,46,1,0],[44,47,1,0,"require"],[44,54,1,0],[44,55,1,0,"_dependencyMap"],[44,69,1,0],[45,2,2,0],[45,6,2,0,"_decodeDataXml"],[45,20,2,0],[45,23,2,0,"_interopRequireDefault"],[45,45,2,0],[45,46,2,0,"require"],[45,53,2,0],[45,54,2,0,"_dependencyMap"],[45,68,2,0],[46,2,3,0],[46,6,3,0,"_decode_codepoint"],[46,23,3,0],[46,26,3,0,"_interopRequireWildcard"],[46,49,3,0],[46,50,3,0,"require"],[46,57,3,0],[46,58,3,0,"_dependencyMap"],[46,72,3,0],[47,2,3,90],[47,11,3,90,"_interopRequireWildcard"],[47,35,3,90,"e"],[47,36,3,90],[47,38,3,90,"t"],[47,39,3,90],[47,68,3,90,"WeakMap"],[47,75,3,90],[47,81,3,90,"r"],[47,82,3,90],[47,89,3,90,"WeakMap"],[47,96,3,90],[47,100,3,90,"n"],[47,101,3,90],[47,108,3,90,"WeakMap"],[47,115,3,90],[47,127,3,90,"_interopRequireWildcard"],[47,150,3,90],[47,162,3,90,"_interopRequireWildcard"],[47,186,3,90,"e"],[47,187,3,90],[47,189,3,90,"t"],[47,190,3,90],[47,199,3,90,"t"],[47,200,3,90],[47,204,3,90,"e"],[47,205,3,90],[47,209,3,90,"e"],[47,210,3,90],[47,211,3,90,"__esModule"],[47,221,3,90],[47,230,3,90,"e"],[47,231,3,90],[47,237,3,90,"o"],[47,238,3,90],[47,240,3,90,"i"],[47,241,3,90],[47,243,3,90,"f"],[47,244,3,90],[47,249,3,90,"__proto__"],[47,258,3,90],[47,266,3,90,"default"],[47,273,3,90],[47,275,3,90,"e"],[47,276,3,90],[47,293,3,90,"e"],[47,294,3,90],[47,317,3,90,"e"],[47,318,3,90],[47,343,3,90,"e"],[47,344,3,90],[47,353,3,90,"f"],[47,354,3,90],[47,360,3,90,"o"],[47,361,3,90],[47,364,3,90,"t"],[47,365,3,90],[47,368,3,90,"n"],[47,369,3,90],[47,372,3,90,"r"],[47,373,3,90],[47,381,3,90,"o"],[47,382,3,90],[47,383,3,90,"has"],[47,386,3,90],[47,387,3,90,"e"],[47,388,3,90],[47,398,3,90,"o"],[47,399,3,90],[47,400,3,90,"get"],[47,403,3,90],[47,404,3,90,"e"],[47,405,3,90],[47,408,3,90,"o"],[47,409,3,90],[47,410,3,90,"set"],[47,413,3,90],[47,414,3,90,"e"],[47,415,3,90],[47,417,3,90,"f"],[47,418,3,90],[47,432,3,90,"_t"],[47,434,3,90],[47,438,3,90,"e"],[47,439,3,90],[47,455,3,90,"_t"],[47,457,3,90],[47,464,3,90,"hasOwnProperty"],[47,478,3,90],[47,479,3,90,"call"],[47,483,3,90],[47,484,3,90,"e"],[47,485,3,90],[47,487,3,90,"_t"],[47,489,3,90],[47,496,3,90,"i"],[47,497,3,90],[47,501,3,90,"o"],[47,502,3,90],[47,505,3,90,"Object"],[47,511,3,90],[47,512,3,90,"defineProperty"],[47,526,3,90],[47,531,3,90,"Object"],[47,537,3,90],[47,538,3,90,"getOwnPropertyDescriptor"],[47,562,3,90],[47,563,3,90,"e"],[47,564,3,90],[47,566,3,90,"_t"],[47,568,3,90],[47,575,3,90,"i"],[47,576,3,90],[47,577,3,90,"get"],[47,580,3,90],[47,584,3,90,"i"],[47,585,3,90],[47,586,3,90,"set"],[47,589,3,90],[47,593,3,90,"o"],[47,594,3,90],[47,595,3,90,"f"],[47,596,3,90],[47,598,3,90,"_t"],[47,600,3,90],[47,602,3,90,"i"],[47,603,3,90],[47,607,3,90,"f"],[47,608,3,90],[47,609,3,90,"_t"],[47,611,3,90],[47,615,3,90,"e"],[47,616,3,90],[47,617,3,90,"_t"],[47,619,3,90],[47,630,3,90,"f"],[47,631,3,90],[47,636,3,90,"e"],[47,637,3,90],[47,639,3,90,"t"],[47,640,3,90],[48,2,4,0],[50,2,7,0],[50,6,7,4,"CharCodes"],[50,15,7,13],[51,2,8,0],[51,3,8,1],[51,13,8,11,"CharCodes"],[51,22,8,20],[51,24,8,22],[52,4,9,4,"CharCodes"],[52,13,9,13],[52,14,9,14,"CharCodes"],[52,23,9,23],[52,24,9,24],[52,29,9,29],[52,30,9,30],[52,33,9,33],[52,35,9,35],[52,36,9,36],[52,39,9,39],[52,44,9,44],[53,4,10,4,"CharCodes"],[53,13,10,13],[53,14,10,14,"CharCodes"],[53,23,10,23],[53,24,10,24],[53,30,10,30],[53,31,10,31],[53,34,10,34],[53,36,10,36],[53,37,10,37],[53,40,10,40],[53,46,10,46],[54,4,11,4,"CharCodes"],[54,13,11,13],[54,14,11,14,"CharCodes"],[54,23,11,23],[54,24,11,24],[54,32,11,32],[54,33,11,33],[54,36,11,36],[54,38,11,38],[54,39,11,39],[54,42,11,42],[54,50,11,50],[55,4,12,4,"CharCodes"],[55,13,12,13],[55,14,12,14,"CharCodes"],[55,23,12,23],[55,24,12,24],[55,30,12,30],[55,31,12,31],[55,34,12,34],[55,36,12,36],[55,37,12,37],[55,40,12,40],[55,46,12,46],[56,4,13,4,"CharCodes"],[56,13,13,13],[56,14,13,14,"CharCodes"],[56,23,13,23],[56,24,13,24],[56,30,13,30],[56,31,13,31],[56,34,13,34],[56,36,13,36],[56,37,13,37],[56,40,13,40],[56,46,13,46],[57,4,14,4,"CharCodes"],[57,13,14,13],[57,14,14,14,"CharCodes"],[57,23,14,23],[57,24,14,24],[57,33,14,33],[57,34,14,34],[57,37,14,37],[57,39,14,39],[57,40,14,40],[57,43,14,43],[57,52,14,52],[58,4,15,4,"CharCodes"],[58,13,15,13],[58,14,15,14,"CharCodes"],[58,23,15,23],[58,24,15,24],[58,33,15,33],[58,34,15,34],[58,37,15,37],[58,40,15,40],[58,41,15,41],[58,44,15,44],[58,53,15,53],[59,4,16,4,"CharCodes"],[59,13,16,13],[59,14,16,14,"CharCodes"],[59,23,16,23],[59,24,16,24],[59,33,16,33],[59,34,16,34],[59,37,16,37],[59,40,16,40],[59,41,16,41],[59,44,16,44],[59,53,16,53],[60,4,17,4,"CharCodes"],[60,13,17,13],[60,14,17,14,"CharCodes"],[60,23,17,23],[60,24,17,24],[60,33,17,33],[60,34,17,34],[60,37,17,37],[60,40,17,40],[60,41,17,41],[60,44,17,44],[60,53,17,53],[61,4,18,4,"CharCodes"],[61,13,18,13],[61,14,18,14,"CharCodes"],[61,23,18,23],[61,24,18,24],[61,33,18,33],[61,34,18,34],[61,37,18,37],[61,39,18,39],[61,40,18,40],[61,43,18,43],[61,52,18,52],[62,4,19,4,"CharCodes"],[62,13,19,13],[62,14,19,14,"CharCodes"],[62,23,19,23],[62,24,19,24],[62,33,19,33],[62,34,19,34],[62,37,19,37],[62,39,19,39],[62,40,19,40],[62,43,19,43],[62,52,19,52],[63,4,20,4,"CharCodes"],[63,13,20,13],[63,14,20,14,"CharCodes"],[63,23,20,23],[63,24,20,24],[63,33,20,33],[63,34,20,34],[63,37,20,37],[63,39,20,39],[63,40,20,40],[63,43,20,43],[63,52,20,52],[64,2,21,0],[64,3,21,1],[64,5,21,3,"CharCodes"],[64,14,21,12],[64,19,21,17,"CharCodes"],[64,28,21,26],[64,31,21,29],[64,32,21,30],[64,33,21,31],[64,34,21,32],[64,35,21,33],[65,2,22,0],[66,2,23,0],[66,6,23,6,"TO_LOWER_BIT"],[66,18,23,18],[66,21,23,21],[66,23,23,29],[67,2,24,7],[67,6,24,11,"BinTrieFlags"],[67,18,24,23],[68,2,25,0],[68,3,25,1],[68,13,25,11,"BinTrieFlags"],[68,25,25,23],[68,27,25,25],[69,4,26,4,"BinTrieFlags"],[69,16,26,16],[69,17,26,17,"BinTrieFlags"],[69,29,26,29],[69,30,26,30],[69,44,26,44],[69,45,26,45],[69,48,26,48],[69,53,26,53],[69,54,26,54],[69,57,26,57],[69,71,26,71],[70,4,27,4,"BinTrieFlags"],[70,16,27,16],[70,17,27,17,"BinTrieFlags"],[70,29,27,29],[70,30,27,30],[70,45,27,45],[70,46,27,46],[70,49,27,49],[70,54,27,54],[70,55,27,55],[70,58,27,58],[70,73,27,73],[71,4,28,4,"BinTrieFlags"],[71,16,28,16],[71,17,28,17,"BinTrieFlags"],[71,29,28,29],[71,30,28,30],[71,42,28,42],[71,43,28,43],[71,46,28,46],[71,49,28,49],[71,50,28,50],[71,53,28,53],[71,65,28,65],[72,2,29,0],[72,3,29,1],[72,5,29,3,"BinTrieFlags"],[72,17,29,15],[72,22,29,15,"exports"],[72,29,29,15],[72,30,29,15,"BinTrieFlags"],[72,42,29,15],[72,45,29,20,"BinTrieFlags"],[72,57,29,32],[72,60,29,35],[72,61,29,36],[72,62,29,37],[72,63,29,38],[72,64,29,39],[73,2,30,0],[73,11,30,9,"isNumber"],[73,19,30,17,"isNumber"],[73,20,30,18,"code"],[73,24,30,22],[73,26,30,24],[74,4,31,4],[74,11,31,11,"code"],[74,15,31,15],[74,19,31,19,"CharCodes"],[74,28,31,28],[74,29,31,29,"ZERO"],[74,33,31,33],[74,37,31,37,"code"],[74,41,31,41],[74,45,31,45,"CharCodes"],[74,54,31,54],[74,55,31,55,"NINE"],[74,59,31,59],[75,2,32,0],[76,2,33,0],[76,11,33,9,"isHexadecimalCharacter"],[76,33,33,31,"isHexadecimalCharacter"],[76,34,33,32,"code"],[76,38,33,36],[76,40,33,38],[77,4,34,4],[77,11,34,13,"code"],[77,15,34,17],[77,19,34,21,"CharCodes"],[77,28,34,30],[77,29,34,31,"UPPER_A"],[77,36,34,38],[77,40,34,42,"code"],[77,44,34,46],[77,48,34,50,"CharCodes"],[77,57,34,59],[77,58,34,60,"UPPER_F"],[77,65,34,67],[77,69,35,9,"code"],[77,73,35,13],[77,77,35,17,"CharCodes"],[77,86,35,26],[77,87,35,27,"LOWER_A"],[77,94,35,34],[77,98,35,38,"code"],[77,102,35,42],[77,106,35,46,"CharCodes"],[77,115,35,55],[77,116,35,56,"LOWER_F"],[77,123,35,64],[78,2,36,0],[79,2,37,0],[79,11,37,9,"isAsciiAlphaNumeric"],[79,30,37,28,"isAsciiAlphaNumeric"],[79,31,37,29,"code"],[79,35,37,33],[79,37,37,35],[80,4,38,4],[80,11,38,13,"code"],[80,15,38,17],[80,19,38,21,"CharCodes"],[80,28,38,30],[80,29,38,31,"UPPER_A"],[80,36,38,38],[80,40,38,42,"code"],[80,44,38,46],[80,48,38,50,"CharCodes"],[80,57,38,59],[80,58,38,60,"UPPER_Z"],[80,65,38,67],[80,69,39,9,"code"],[80,73,39,13],[80,77,39,17,"CharCodes"],[80,86,39,26],[80,87,39,27,"LOWER_A"],[80,94,39,34],[80,98,39,38,"code"],[80,102,39,42],[80,106,39,46,"CharCodes"],[80,115,39,55],[80,116,39,56,"LOWER_Z"],[80,123,39,64],[80,127,40,8,"isNumber"],[80,135,40,16],[80,136,40,17,"code"],[80,140,40,21],[80,141,40,22],[81,2,41,0],[82,2,42,0],[83,0,43,0],[84,0,44,0],[85,0,45,0],[86,0,46,0],[87,0,47,0],[88,2,48,0],[88,11,48,9,"isEntityInAttributeInvalidEnd"],[88,40,48,38,"isEntityInAttributeInvalidEnd"],[88,41,48,39,"code"],[88,45,48,43],[88,47,48,45],[89,4,49,4],[89,11,49,11,"code"],[89,15,49,15],[89,20,49,20,"CharCodes"],[89,29,49,29],[89,30,49,30,"EQUALS"],[89,36,49,36],[89,40,49,40,"isAsciiAlphaNumeric"],[89,59,49,59],[89,60,49,60,"code"],[89,64,49,64],[89,65,49,65],[90,2,50,0],[91,2,51,0],[91,6,51,4,"EntityDecoderState"],[91,24,51,22],[92,2,52,0],[92,3,52,1],[92,13,52,11,"EntityDecoderState"],[92,31,52,29],[92,33,52,31],[93,4,53,4,"EntityDecoderState"],[93,22,53,22],[93,23,53,23,"EntityDecoderState"],[93,41,53,41],[93,42,53,42],[93,55,53,55],[93,56,53,56],[93,59,53,59],[93,60,53,60],[93,61,53,61],[93,64,53,64],[93,77,53,77],[94,4,54,4,"EntityDecoderState"],[94,22,54,22],[94,23,54,23,"EntityDecoderState"],[94,41,54,41],[94,42,54,42],[94,56,54,56],[94,57,54,57],[94,60,54,60],[94,61,54,61],[94,62,54,62],[94,65,54,65],[94,79,54,79],[95,4,55,4,"EntityDecoderState"],[95,22,55,22],[95,23,55,23,"EntityDecoderState"],[95,41,55,41],[95,42,55,42],[95,58,55,58],[95,59,55,59],[95,62,55,62],[95,63,55,63],[95,64,55,64],[95,67,55,67],[95,83,55,83],[96,4,56,4,"EntityDecoderState"],[96,22,56,22],[96,23,56,23,"EntityDecoderState"],[96,41,56,41],[96,42,56,42],[96,54,56,54],[96,55,56,55],[96,58,56,58],[96,59,56,59],[96,60,56,60],[96,63,56,63],[96,75,56,75],[97,4,57,4,"EntityDecoderState"],[97,22,57,22],[97,23,57,23,"EntityDecoderState"],[97,41,57,41],[97,42,57,42],[97,55,57,55],[97,56,57,56],[97,59,57,59],[97,60,57,60],[97,61,57,61],[97,64,57,64],[97,77,57,77],[98,2,58,0],[98,3,58,1],[98,5,58,3,"EntityDecoderState"],[98,23,58,21],[98,28,58,26,"EntityDecoderState"],[98,46,58,44],[98,49,58,47],[98,50,58,48],[98,51,58,49],[98,52,58,50],[98,53,58,51],[99,2,59,7],[99,6,59,11,"DecodingMode"],[99,18,59,23],[100,2,60,0],[100,3,60,1],[100,13,60,11,"DecodingMode"],[100,25,60,23],[100,27,60,25],[101,4,61,4],[102,4,62,4,"DecodingMode"],[102,16,62,16],[102,17,62,17,"DecodingMode"],[102,29,62,29],[102,30,62,30],[102,38,62,38],[102,39,62,39],[102,42,62,42],[102,43,62,43],[102,44,62,44],[102,47,62,47],[102,55,62,55],[103,4,63,4],[104,4,64,4,"DecodingMode"],[104,16,64,16],[104,17,64,17,"DecodingMode"],[104,29,64,29],[104,30,64,30],[104,38,64,38],[104,39,64,39],[104,42,64,42],[104,43,64,43],[104,44,64,44],[104,47,64,47],[104,55,64,55],[105,4,65,4],[106,4,66,4,"DecodingMode"],[106,16,66,16],[106,17,66,17,"DecodingMode"],[106,29,66,29],[106,30,66,30],[106,41,66,41],[106,42,66,42],[106,45,66,45],[106,46,66,46],[106,47,66,47],[106,50,66,50],[106,61,66,61],[107,2,67,0],[107,3,67,1],[107,5,67,3,"DecodingMode"],[107,17,67,15],[107,22,67,15,"exports"],[107,29,67,15],[107,30,67,15,"DecodingMode"],[107,42,67,15],[107,45,67,20,"DecodingMode"],[107,57,67,32],[107,60,67,35],[107,61,67,36],[107,62,67,37],[107,63,67,38],[107,64,67,39],[108,2,68,0],[109,0,69,0],[110,0,70,0],[111,2,68,0],[111,6,71,13,"EntityDecoder"],[111,19,71,26],[111,22,71,26,"exports"],[111,29,71,26],[111,30,71,26,"EntityDecoder"],[111,43,71,26],[112,4,72,4],[112,13,72,4,"EntityDecoder"],[112,27,73,4],[113,4,74,4,"decodeTree"],[113,14,74,14],[114,4,75,4],[115,0,76,0],[116,0,77,0],[117,0,78,0],[118,0,79,0],[119,0,80,0],[120,0,81,0],[121,0,82,0],[122,0,83,0],[123,4,84,4,"emitCodePoint"],[123,17,84,17],[123,19,85,4],[124,4,86,4,"errors"],[124,10,86,10],[124,12,86,12],[125,6,86,12],[125,10,86,12,"_classCallCheck2"],[125,26,86,12],[125,27,86,12,"default"],[125,34,86,12],[125,42,86,12,"EntityDecoder"],[125,55,86,12],[126,6,87,8],[126,10,87,12],[126,11,87,13,"decodeTree"],[126,21,87,23],[126,24,87,26,"decodeTree"],[126,34,87,36],[127,6,88,8],[127,10,88,12],[127,11,88,13,"emitCodePoint"],[127,24,88,26],[127,27,88,29,"emitCodePoint"],[127,40,88,42],[128,6,89,8],[128,10,89,12],[128,11,89,13,"errors"],[128,17,89,19],[128,20,89,22,"errors"],[128,26,89,28],[129,6,90,8],[130,6,91,8],[130,10,91,12],[130,11,91,13,"state"],[130,16,91,18],[130,19,91,21,"EntityDecoderState"],[130,37,91,39],[130,38,91,40,"EntityStart"],[130,49,91,51],[131,6,92,8],[132,6,93,8],[132,10,93,12],[132,11,93,13,"consumed"],[132,19,93,21],[132,22,93,24],[132,23,93,25],[133,6,94,8],[134,0,95,0],[135,0,96,0],[136,0,97,0],[137,0,98,0],[138,0,99,0],[139,6,100,8],[139,10,100,12],[139,11,100,13,"result"],[139,17,100,19],[139,20,100,22],[139,21,100,23],[140,6,101,8],[141,6,102,8],[141,10,102,12],[141,11,102,13,"treeIndex"],[141,20,102,22],[141,23,102,25],[141,24,102,26],[142,6,103,8],[143,6,104,8],[143,10,104,12],[143,11,104,13,"excess"],[143,17,104,19],[143,20,104,22],[143,21,104,23],[144,6,105,8],[145,6,106,8],[145,10,106,12],[145,11,106,13,"decodeMode"],[145,21,106,23],[145,24,106,26,"DecodingMode"],[145,36,106,38],[145,37,106,39,"Strict"],[145,43,106,45],[146,4,107,4],[147,4,108,4],[148,4,108,4],[148,15,108,4,"_createClass2"],[148,28,108,4],[148,29,108,4,"default"],[148,36,108,4],[148,38,108,4,"EntityDecoder"],[148,51,108,4],[149,6,108,4,"key"],[149,9,108,4],[150,6,108,4,"value"],[150,11,108,4],[150,13,109,4],[150,22,109,4,"startEntity"],[150,33,109,15,"startEntity"],[150,34,109,16,"decodeMode"],[150,44,109,26],[150,46,109,28],[151,8,110,8],[151,12,110,12],[151,13,110,13,"decodeMode"],[151,23,110,23],[151,26,110,26,"decodeMode"],[151,36,110,36],[152,8,111,8],[152,12,111,12],[152,13,111,13,"state"],[152,18,111,18],[152,21,111,21,"EntityDecoderState"],[152,39,111,39],[152,40,111,40,"EntityStart"],[152,51,111,51],[153,8,112,8],[153,12,112,12],[153,13,112,13,"result"],[153,19,112,19],[153,22,112,22],[153,23,112,23],[154,8,113,8],[154,12,113,12],[154,13,113,13,"treeIndex"],[154,22,113,22],[154,25,113,25],[154,26,113,26],[155,8,114,8],[155,12,114,12],[155,13,114,13,"excess"],[155,19,114,19],[155,22,114,22],[155,23,114,23],[156,8,115,8],[156,12,115,12],[156,13,115,13,"consumed"],[156,21,115,21],[156,24,115,24],[156,25,115,25],[157,6,116,4],[158,6,117,4],[159,0,118,0],[160,0,119,0],[161,0,120,0],[162,0,121,0],[163,0,122,0],[164,0,123,0],[165,0,124,0],[166,0,125,0],[167,0,126,0],[168,0,127,0],[169,4,117,4],[170,6,117,4,"key"],[170,9,117,4],[171,6,117,4,"value"],[171,11,117,4],[171,13,128,4],[171,22,128,4,"write"],[171,27,128,9,"write"],[171,28,128,10,"str"],[171,31,128,13],[171,33,128,15,"offset"],[171,39,128,21],[171,41,128,23],[172,8,129,8],[172,16,129,16],[172,20,129,20],[172,21,129,21,"state"],[172,26,129,26],[173,10,130,12],[173,15,130,17,"EntityDecoderState"],[173,33,130,35],[173,34,130,36,"EntityStart"],[173,45,130,47],[174,12,130,49],[175,14,131,16],[175,18,131,20,"str"],[175,21,131,23],[175,22,131,24,"charCodeAt"],[175,32,131,34],[175,33,131,35,"offset"],[175,39,131,41],[175,40,131,42],[175,45,131,47,"CharCodes"],[175,54,131,56],[175,55,131,57,"NUM"],[175,58,131,60],[175,60,131,62],[176,16,132,20],[176,20,132,24],[176,21,132,25,"state"],[176,26,132,30],[176,29,132,33,"EntityDecoderState"],[176,47,132,51],[176,48,132,52,"NumericStart"],[176,60,132,64],[177,16,133,20],[177,20,133,24],[177,21,133,25,"consumed"],[177,29,133,33],[177,33,133,37],[177,34,133,38],[178,16,134,20],[178,23,134,27],[178,27,134,31],[178,28,134,32,"stateNumericStart"],[178,45,134,49],[178,46,134,50,"str"],[178,49,134,53],[178,51,134,55,"offset"],[178,57,134,61],[178,60,134,64],[178,61,134,65],[178,62,134,66],[179,14,135,16],[180,14,136,16],[180,18,136,20],[180,19,136,21,"state"],[180,24,136,26],[180,27,136,29,"EntityDecoderState"],[180,45,136,47],[180,46,136,48,"NamedEntity"],[180,57,136,59],[181,14,137,16],[181,21,137,23],[181,25,137,27],[181,26,137,28,"stateNamedEntity"],[181,42,137,44],[181,43,137,45,"str"],[181,46,137,48],[181,48,137,50,"offset"],[181,54,137,56],[181,55,137,57],[182,12,138,12],[183,10,139,12],[183,15,139,17,"EntityDecoderState"],[183,33,139,35],[183,34,139,36,"NumericStart"],[183,46,139,48],[184,12,139,50],[185,14,140,16],[185,21,140,23],[185,25,140,27],[185,26,140,28,"stateNumericStart"],[185,43,140,45],[185,44,140,46,"str"],[185,47,140,49],[185,49,140,51,"offset"],[185,55,140,57],[185,56,140,58],[186,12,141,12],[187,10,142,12],[187,15,142,17,"EntityDecoderState"],[187,33,142,35],[187,34,142,36,"NumericDecimal"],[187,48,142,50],[188,12,142,52],[189,14,143,16],[189,21,143,23],[189,25,143,27],[189,26,143,28,"stateNumericDecimal"],[189,45,143,47],[189,46,143,48,"str"],[189,49,143,51],[189,51,143,53,"offset"],[189,57,143,59],[189,58,143,60],[190,12,144,12],[191,10,145,12],[191,15,145,17,"EntityDecoderState"],[191,33,145,35],[191,34,145,36,"NumericHex"],[191,44,145,46],[192,12,145,48],[193,14,146,16],[193,21,146,23],[193,25,146,27],[193,26,146,28,"stateNumericHex"],[193,41,146,43],[193,42,146,44,"str"],[193,45,146,47],[193,47,146,49,"offset"],[193,53,146,55],[193,54,146,56],[194,12,147,12],[195,10,148,12],[195,15,148,17,"EntityDecoderState"],[195,33,148,35],[195,34,148,36,"NamedEntity"],[195,45,148,47],[196,12,148,49],[197,14,149,16],[197,21,149,23],[197,25,149,27],[197,26,149,28,"stateNamedEntity"],[197,42,149,44],[197,43,149,45,"str"],[197,46,149,48],[197,48,149,50,"offset"],[197,54,149,56],[197,55,149,57],[198,12,150,12],[199,8,151,8],[200,6,152,4],[201,6,153,4],[202,0,154,0],[203,0,155,0],[204,0,156,0],[205,0,157,0],[206,0,158,0],[207,0,159,0],[208,0,160,0],[209,0,161,0],[210,4,153,4],[211,6,153,4,"key"],[211,9,153,4],[212,6,153,4,"value"],[212,11,153,4],[212,13,162,4],[212,22,162,4,"stateNumericStart"],[212,39,162,21,"stateNumericStart"],[212,40,162,22,"str"],[212,43,162,25],[212,45,162,27,"offset"],[212,51,162,33],[212,53,162,35],[213,8,163,8],[213,12,163,12,"offset"],[213,18,163,18],[213,22,163,22,"str"],[213,25,163,25],[213,26,163,26,"length"],[213,32,163,32],[213,34,163,34],[214,10,164,12],[214,17,164,19],[214,18,164,20],[214,19,164,21],[215,8,165,8],[216,8,166,8],[216,12,166,12],[216,13,166,13,"str"],[216,16,166,16],[216,17,166,17,"charCodeAt"],[216,27,166,27],[216,28,166,28,"offset"],[216,34,166,34],[216,35,166,35],[216,38,166,38,"TO_LOWER_BIT"],[216,50,166,50],[216,56,166,56,"CharCodes"],[216,65,166,65],[216,66,166,66,"LOWER_X"],[216,73,166,73],[216,75,166,75],[217,10,167,12],[217,14,167,16],[217,15,167,17,"state"],[217,20,167,22],[217,23,167,25,"EntityDecoderState"],[217,41,167,43],[217,42,167,44,"NumericHex"],[217,52,167,54],[218,10,168,12],[218,14,168,16],[218,15,168,17,"consumed"],[218,23,168,25],[218,27,168,29],[218,28,168,30],[219,10,169,12],[219,17,169,19],[219,21,169,23],[219,22,169,24,"stateNumericHex"],[219,37,169,39],[219,38,169,40,"str"],[219,41,169,43],[219,43,169,45,"offset"],[219,49,169,51],[219,52,169,54],[219,53,169,55],[219,54,169,56],[220,8,170,8],[221,8,171,8],[221,12,171,12],[221,13,171,13,"state"],[221,18,171,18],[221,21,171,21,"EntityDecoderState"],[221,39,171,39],[221,40,171,40,"NumericDecimal"],[221,54,171,54],[222,8,172,8],[222,15,172,15],[222,19,172,19],[222,20,172,20,"stateNumericDecimal"],[222,39,172,39],[222,40,172,40,"str"],[222,43,172,43],[222,45,172,45,"offset"],[222,51,172,51],[222,52,172,52],[223,6,173,4],[224,4,173,5],[225,6,173,5,"key"],[225,9,173,5],[226,6,173,5,"value"],[226,11,173,5],[226,13,174,4],[226,22,174,4,"addToNumericResult"],[226,40,174,22,"addToNumericResult"],[226,41,174,23,"str"],[226,44,174,26],[226,46,174,28,"start"],[226,51,174,33],[226,53,174,35,"end"],[226,56,174,38],[226,58,174,40,"base"],[226,62,174,44],[226,64,174,46],[227,8,175,8],[227,12,175,12,"start"],[227,17,175,17],[227,22,175,22,"end"],[227,25,175,25],[227,27,175,27],[228,10,176,12],[228,14,176,18,"digitCount"],[228,24,176,28],[228,27,176,31,"end"],[228,30,176,34],[228,33,176,37,"start"],[228,38,176,42],[229,10,177,12],[229,14,177,16],[229,15,177,17,"result"],[229,21,177,23],[229,24,178,16],[229,28,178,20],[229,29,178,21,"result"],[229,35,178,27],[229,38,178,30,"Math"],[229,42,178,34],[229,43,178,35,"pow"],[229,46,178,38],[229,47,178,39,"base"],[229,51,178,43],[229,53,178,45,"digitCount"],[229,63,178,55],[229,64,178,56],[229,67,179,20,"parseInt"],[229,75,179,28],[229,76,179,29,"str"],[229,79,179,32],[229,80,179,33,"substr"],[229,86,179,39],[229,87,179,40,"start"],[229,92,179,45],[229,94,179,47,"digitCount"],[229,104,179,57],[229,105,179,58],[229,107,179,60,"base"],[229,111,179,64],[229,112,179,65],[230,10,180,12],[230,14,180,16],[230,15,180,17,"consumed"],[230,23,180,25],[230,27,180,29,"digitCount"],[230,37,180,39],[231,8,181,8],[232,6,182,4],[233,6,183,4],[234,0,184,0],[235,0,185,0],[236,0,186,0],[237,0,187,0],[238,0,188,0],[239,0,189,0],[240,0,190,0],[241,0,191,0],[242,4,183,4],[243,6,183,4,"key"],[243,9,183,4],[244,6,183,4,"value"],[244,11,183,4],[244,13,192,4],[244,22,192,4,"stateNumericHex"],[244,37,192,19,"stateNumericHex"],[244,38,192,20,"str"],[244,41,192,23],[244,43,192,25,"offset"],[244,49,192,31],[244,51,192,33],[245,8,193,8],[245,12,193,14,"startIdx"],[245,20,193,22],[245,23,193,25,"offset"],[245,29,193,31],[246,8,194,8],[246,15,194,15,"offset"],[246,21,194,21],[246,24,194,24,"str"],[246,27,194,27],[246,28,194,28,"length"],[246,34,194,34],[246,36,194,36],[247,10,195,12],[247,14,195,18,"char"],[247,18,195,22],[247,21,195,25,"str"],[247,24,195,28],[247,25,195,29,"charCodeAt"],[247,35,195,39],[247,36,195,40,"offset"],[247,42,195,46],[247,43,195,47],[248,10,196,12],[248,14,196,16,"isNumber"],[248,22,196,24],[248,23,196,25,"char"],[248,27,196,29],[248,28,196,30],[248,32,196,34,"isHexadecimalCharacter"],[248,54,196,56],[248,55,196,57,"char"],[248,59,196,61],[248,60,196,62],[248,62,196,64],[249,12,197,16,"offset"],[249,18,197,22],[249,22,197,26],[249,23,197,27],[250,10,198,12],[250,11,198,13],[250,17,199,17],[251,12,200,16],[251,16,200,20],[251,17,200,21,"addToNumericResult"],[251,35,200,39],[251,36,200,40,"str"],[251,39,200,43],[251,41,200,45,"startIdx"],[251,49,200,53],[251,51,200,55,"offset"],[251,57,200,61],[251,59,200,63],[251,61,200,65],[251,62,200,66],[252,12,201,16],[252,19,201,23],[252,23,201,27],[252,24,201,28,"emitNumericEntity"],[252,41,201,45],[252,42,201,46,"char"],[252,46,201,50],[252,48,201,52],[252,49,201,53],[252,50,201,54],[253,10,202,12],[254,8,203,8],[255,8,204,8],[255,12,204,12],[255,13,204,13,"addToNumericResult"],[255,31,204,31],[255,32,204,32,"str"],[255,35,204,35],[255,37,204,37,"startIdx"],[255,45,204,45],[255,47,204,47,"offset"],[255,53,204,53],[255,55,204,55],[255,57,204,57],[255,58,204,58],[256,8,205,8],[256,15,205,15],[256,16,205,16],[256,17,205,17],[257,6,206,4],[258,6,207,4],[259,0,208,0],[260,0,209,0],[261,0,210,0],[262,0,211,0],[263,0,212,0],[264,0,213,0],[265,0,214,0],[266,0,215,0],[267,4,207,4],[268,6,207,4,"key"],[268,9,207,4],[269,6,207,4,"value"],[269,11,207,4],[269,13,216,4],[269,22,216,4,"stateNumericDecimal"],[269,41,216,23,"stateNumericDecimal"],[269,42,216,24,"str"],[269,45,216,27],[269,47,216,29,"offset"],[269,53,216,35],[269,55,216,37],[270,8,217,8],[270,12,217,14,"startIdx"],[270,20,217,22],[270,23,217,25,"offset"],[270,29,217,31],[271,8,218,8],[271,15,218,15,"offset"],[271,21,218,21],[271,24,218,24,"str"],[271,27,218,27],[271,28,218,28,"length"],[271,34,218,34],[271,36,218,36],[272,10,219,12],[272,14,219,18,"char"],[272,18,219,22],[272,21,219,25,"str"],[272,24,219,28],[272,25,219,29,"charCodeAt"],[272,35,219,39],[272,36,219,40,"offset"],[272,42,219,46],[272,43,219,47],[273,10,220,12],[273,14,220,16,"isNumber"],[273,22,220,24],[273,23,220,25,"char"],[273,27,220,29],[273,28,220,30],[273,30,220,32],[274,12,221,16,"offset"],[274,18,221,22],[274,22,221,26],[274,23,221,27],[275,10,222,12],[275,11,222,13],[275,17,223,17],[276,12,224,16],[276,16,224,20],[276,17,224,21,"addToNumericResult"],[276,35,224,39],[276,36,224,40,"str"],[276,39,224,43],[276,41,224,45,"startIdx"],[276,49,224,53],[276,51,224,55,"offset"],[276,57,224,61],[276,59,224,63],[276,61,224,65],[276,62,224,66],[277,12,225,16],[277,19,225,23],[277,23,225,27],[277,24,225,28,"emitNumericEntity"],[277,41,225,45],[277,42,225,46,"char"],[277,46,225,50],[277,48,225,52],[277,49,225,53],[277,50,225,54],[278,10,226,12],[279,8,227,8],[280,8,228,8],[280,12,228,12],[280,13,228,13,"addToNumericResult"],[280,31,228,31],[280,32,228,32,"str"],[280,35,228,35],[280,37,228,37,"startIdx"],[280,45,228,45],[280,47,228,47,"offset"],[280,53,228,53],[280,55,228,55],[280,57,228,57],[280,58,228,58],[281,8,229,8],[281,15,229,15],[281,16,229,16],[281,17,229,17],[282,6,230,4],[283,6,231,4],[284,0,232,0],[285,0,233,0],[286,0,234,0],[287,0,235,0],[288,0,236,0],[289,0,237,0],[290,0,238,0],[291,0,239,0],[292,0,240,0],[293,0,241,0],[294,0,242,0],[295,0,243,0],[296,4,231,4],[297,6,231,4,"key"],[297,9,231,4],[298,6,231,4,"value"],[298,11,231,4],[298,13,244,4],[298,22,244,4,"emitNumericEntity"],[298,39,244,21,"emitNumericEntity"],[298,40,244,22,"lastCp"],[298,46,244,28],[298,48,244,30,"expectedLength"],[298,62,244,44],[298,64,244,46],[299,8,245,8],[299,12,245,12,"_a"],[299,14,245,14],[300,8,246,8],[301,8,247,8],[301,12,247,12],[301,16,247,16],[301,17,247,17,"consumed"],[301,25,247,25],[301,29,247,29,"expectedLength"],[301,43,247,43],[301,45,247,45],[302,10,248,12],[302,11,248,13,"_a"],[302,13,248,15],[302,16,248,18],[302,20,248,22],[302,21,248,23,"errors"],[302,27,248,29],[302,33,248,35],[302,37,248,39],[302,41,248,43,"_a"],[302,43,248,45],[302,48,248,50],[302,53,248,55],[302,54,248,56],[302,57,248,59],[302,62,248,64],[302,63,248,65],[302,66,248,68,"_a"],[302,68,248,70],[302,69,248,71,"absenceOfDigitsInNumericCharacterReference"],[302,111,248,113],[302,112,248,114],[302,116,248,118],[302,117,248,119,"consumed"],[302,125,248,127],[302,126,248,128],[303,10,249,12],[303,17,249,19],[303,18,249,20],[304,8,250,8],[305,8,251,8],[306,8,252,8],[306,12,252,12,"lastCp"],[306,18,252,18],[306,23,252,23,"CharCodes"],[306,32,252,32],[306,33,252,33,"SEMI"],[306,37,252,37],[306,39,252,39],[307,10,253,12],[307,14,253,16],[307,15,253,17,"consumed"],[307,23,253,25],[307,27,253,29],[307,28,253,30],[308,8,254,8],[308,9,254,9],[308,15,255,13],[308,19,255,17],[308,23,255,21],[308,24,255,22,"decodeMode"],[308,34,255,32],[308,39,255,37,"DecodingMode"],[308,51,255,49],[308,52,255,50,"Strict"],[308,58,255,56],[308,60,255,58],[309,10,256,12],[309,17,256,19],[309,18,256,20],[310,8,257,8],[311,8,258,8],[311,12,258,12],[311,13,258,13,"emitCodePoint"],[311,26,258,26],[311,27,258,27],[311,31,258,27,"replaceCodePoint"],[311,65,258,43],[311,67,258,44],[311,71,258,48],[311,72,258,49,"result"],[311,78,258,55],[311,79,258,56],[311,81,258,58],[311,85,258,62],[311,86,258,63,"consumed"],[311,94,258,71],[311,95,258,72],[312,8,259,8],[312,12,259,12],[312,16,259,16],[312,17,259,17,"errors"],[312,23,259,23],[312,25,259,25],[313,10,260,12],[313,14,260,16,"lastCp"],[313,20,260,22],[313,25,260,27,"CharCodes"],[313,34,260,36],[313,35,260,37,"SEMI"],[313,39,260,41],[313,41,260,43],[314,12,261,16],[314,16,261,20],[314,17,261,21,"errors"],[314,23,261,27],[314,24,261,28,"missingSemicolonAfterCharacterReference"],[314,63,261,67],[314,64,261,68],[314,65,261,69],[315,10,262,12],[316,10,263,12],[316,14,263,16],[316,15,263,17,"errors"],[316,21,263,23],[316,22,263,24,"validateNumericCharacterReference"],[316,55,263,57],[316,56,263,58],[316,60,263,62],[316,61,263,63,"result"],[316,67,263,69],[316,68,263,70],[317,8,264,8],[318,8,265,8],[318,15,265,15],[318,19,265,19],[318,20,265,20,"consumed"],[318,28,265,28],[319,6,266,4],[320,6,267,4],[321,0,268,0],[322,0,269,0],[323,0,270,0],[324,0,271,0],[325,0,272,0],[326,0,273,0],[327,0,274,0],[328,0,275,0],[329,4,267,4],[330,6,267,4,"key"],[330,9,267,4],[331,6,267,4,"value"],[331,11,267,4],[331,13,276,4],[331,22,276,4,"stateNamedEntity"],[331,38,276,20,"stateNamedEntity"],[331,39,276,21,"str"],[331,42,276,24],[331,44,276,26,"offset"],[331,50,276,32],[331,52,276,34],[332,8,277,8],[332,12,277,16,"decodeTree"],[332,22,277,26],[332,25,277,31],[332,29,277,35],[332,30,277,16,"decodeTree"],[332,40,277,26],[333,8,278,8],[333,12,278,12,"current"],[333,19,278,19],[333,22,278,22,"decodeTree"],[333,32,278,32],[333,33,278,33],[333,37,278,37],[333,38,278,38,"treeIndex"],[333,47,278,47],[333,48,278,48],[334,8,279,8],[335,8,280,8],[335,12,280,12,"valueLength"],[335,23,280,23],[335,26,280,26],[335,27,280,27,"current"],[335,34,280,34],[335,37,280,37,"BinTrieFlags"],[335,49,280,49],[335,50,280,50,"VALUE_LENGTH"],[335,62,280,62],[335,67,280,67],[335,69,280,69],[336,8,281,8],[336,15,281,15,"offset"],[336,21,281,21],[336,24,281,24,"str"],[336,27,281,27],[336,28,281,28,"length"],[336,34,281,34],[336,36,281,36,"offset"],[336,42,281,42],[336,44,281,44],[336,46,281,46],[336,50,281,50],[336,51,281,51,"excess"],[336,57,281,57],[336,59,281,59],[336,61,281,61],[337,10,282,12],[337,14,282,18,"char"],[337,18,282,22],[337,21,282,25,"str"],[337,24,282,28],[337,25,282,29,"charCodeAt"],[337,35,282,39],[337,36,282,40,"offset"],[337,42,282,46],[337,43,282,47],[338,10,283,12],[338,14,283,16],[338,15,283,17,"treeIndex"],[338,24,283,26],[338,27,283,29,"determineBranch"],[338,42,283,44],[338,43,283,45,"decodeTree"],[338,53,283,55],[338,55,283,57,"current"],[338,62,283,64],[338,64,283,66],[338,68,283,70],[338,69,283,71,"treeIndex"],[338,78,283,80],[338,81,283,83,"Math"],[338,85,283,87],[338,86,283,88,"max"],[338,89,283,91],[338,90,283,92],[338,91,283,93],[338,93,283,95,"valueLength"],[338,104,283,106],[338,105,283,107],[338,107,283,109,"char"],[338,111,283,113],[338,112,283,114],[339,10,284,12],[339,14,284,16],[339,18,284,20],[339,19,284,21,"treeIndex"],[339,28,284,30],[339,31,284,33],[339,32,284,34],[339,34,284,36],[340,12,285,16],[340,19,285,23],[340,23,285,27],[340,24,285,28,"result"],[340,30,285,34],[340,35,285,39],[340,36,285,40],[341,12,286,20],[342,12,287,21],[342,16,287,25],[342,17,287,26,"decodeMode"],[342,27,287,36],[342,32,287,41,"DecodingMode"],[342,44,287,53],[342,45,287,54,"Attribute"],[342,54,287,63],[343,12,288,24],[344,12,289,25,"valueLength"],[344,23,289,36],[344,28,289,41],[344,29,289,42],[345,12,290,28],[346,12,291,28,"isEntityInAttributeInvalidEnd"],[346,41,291,57],[346,42,291,58,"char"],[346,46,291,62],[346,47,291,63],[346,48,291,65],[346,51,292,22],[346,52,292,23],[346,55,293,22],[346,59,293,26],[346,60,293,27,"emitNotTerminatedNamedEntity"],[346,88,293,55],[346,89,293,56],[346,90,293,57],[347,10,294,12],[348,10,295,12,"current"],[348,17,295,19],[348,20,295,22,"decodeTree"],[348,30,295,32],[348,31,295,33],[348,35,295,37],[348,36,295,38,"treeIndex"],[348,45,295,47],[348,46,295,48],[349,10,296,12,"valueLength"],[349,21,296,23],[349,24,296,26],[349,25,296,27,"current"],[349,32,296,34],[349,35,296,37,"BinTrieFlags"],[349,47,296,49],[349,48,296,50,"VALUE_LENGTH"],[349,60,296,62],[349,65,296,67],[349,67,296,69],[350,10,297,12],[351,10,298,12],[351,14,298,16,"valueLength"],[351,25,298,27],[351,30,298,32],[351,31,298,33],[351,33,298,35],[352,12,299,16],[353,12,300,16],[353,16,300,20,"char"],[353,20,300,24],[353,25,300,29,"CharCodes"],[353,34,300,38],[353,35,300,39,"SEMI"],[353,39,300,43],[353,41,300,45],[354,14,301,20],[354,21,301,27],[354,25,301,31],[354,26,301,32,"emitNamedEntityData"],[354,45,301,51],[354,46,301,52],[354,50,301,56],[354,51,301,57,"treeIndex"],[354,60,301,66],[354,62,301,68,"valueLength"],[354,73,301,79],[354,75,301,81],[354,79,301,85],[354,80,301,86,"consumed"],[354,88,301,94],[354,91,301,97],[354,95,301,101],[354,96,301,102,"excess"],[354,102,301,108],[354,103,301,109],[355,12,302,16],[356,12,303,16],[357,12,304,16],[357,16,304,20],[357,20,304,24],[357,21,304,25,"decodeMode"],[357,31,304,35],[357,36,304,40,"DecodingMode"],[357,48,304,52],[357,49,304,53,"Strict"],[357,55,304,59],[357,57,304,61],[358,14,305,20],[358,18,305,24],[358,19,305,25,"result"],[358,25,305,31],[358,28,305,34],[358,32,305,38],[358,33,305,39,"treeIndex"],[358,42,305,48],[359,14,306,20],[359,18,306,24],[359,19,306,25,"consumed"],[359,27,306,33],[359,31,306,37],[359,35,306,41],[359,36,306,42,"excess"],[359,42,306,48],[360,14,307,20],[360,18,307,24],[360,19,307,25,"excess"],[360,25,307,31],[360,28,307,34],[360,29,307,35],[361,12,308,16],[362,10,309,12],[363,8,310,8],[364,8,311,8],[364,15,311,15],[364,16,311,16],[364,17,311,17],[365,6,312,4],[366,6,313,4],[367,0,314,0],[368,0,315,0],[369,0,316,0],[370,0,317,0],[371,4,313,4],[372,6,313,4,"key"],[372,9,313,4],[373,6,313,4,"value"],[373,11,313,4],[373,13,318,4],[373,22,318,4,"emitNotTerminatedNamedEntity"],[373,50,318,32,"emitNotTerminatedNamedEntity"],[373,51,318,32],[373,53,318,35],[374,8,319,8],[374,12,319,12,"_a"],[374,14,319,14],[375,8,320,8],[375,12,320,16,"result"],[375,18,320,22],[375,21,320,39],[375,25,320,43],[375,26,320,16,"result"],[375,32,320,22],[376,10,320,24,"decodeTree"],[376,20,320,34],[376,23,320,39],[376,27,320,43],[376,28,320,24,"decodeTree"],[376,38,320,34],[377,8,321,8],[377,12,321,14,"valueLength"],[377,23,321,25],[377,26,321,28],[377,27,321,29,"decodeTree"],[377,37,321,39],[377,38,321,40,"result"],[377,44,321,46],[377,45,321,47],[377,48,321,50,"BinTrieFlags"],[377,60,321,62],[377,61,321,63,"VALUE_LENGTH"],[377,73,321,75],[377,78,321,80],[377,80,321,82],[378,8,322,8],[378,12,322,12],[378,13,322,13,"emitNamedEntityData"],[378,32,322,32],[378,33,322,33,"result"],[378,39,322,39],[378,41,322,41,"valueLength"],[378,52,322,52],[378,54,322,54],[378,58,322,58],[378,59,322,59,"consumed"],[378,67,322,67],[378,68,322,68],[379,8,323,8],[379,9,323,9,"_a"],[379,11,323,11],[379,14,323,14],[379,18,323,18],[379,19,323,19,"errors"],[379,25,323,25],[379,31,323,31],[379,35,323,35],[379,39,323,39,"_a"],[379,41,323,41],[379,46,323,46],[379,51,323,51],[379,52,323,52],[379,55,323,55],[379,60,323,60],[379,61,323,61],[379,64,323,64,"_a"],[379,66,323,66],[379,67,323,67,"missingSemicolonAfterCharacterReference"],[379,106,323,106],[379,107,323,107],[379,108,323,108],[380,8,324,8],[380,15,324,15],[380,19,324,19],[380,20,324,20,"consumed"],[380,28,324,28],[381,6,325,4],[382,6,326,4],[383,0,327,0],[384,0,328,0],[385,0,329,0],[386,0,330,0],[387,0,331,0],[388,0,332,0],[389,0,333,0],[390,0,334,0],[391,4,326,4],[392,6,326,4,"key"],[392,9,326,4],[393,6,326,4,"value"],[393,11,326,4],[393,13,335,4],[393,22,335,4,"emitNamedEntityData"],[393,41,335,23,"emitNamedEntityData"],[393,42,335,24,"result"],[393,48,335,30],[393,50,335,32,"valueLength"],[393,61,335,43],[393,63,335,45,"consumed"],[393,71,335,53],[393,73,335,55],[394,8,336,8],[394,12,336,16,"decodeTree"],[394,22,336,26],[394,25,336,31],[394,29,336,35],[394,30,336,16,"decodeTree"],[394,40,336,26],[395,8,337,8],[395,12,337,12],[395,13,337,13,"emitCodePoint"],[395,26,337,26],[395,27,337,27,"valueLength"],[395,38,337,38],[395,43,337,43],[395,44,337,44],[395,47,338,14,"decodeTree"],[395,57,338,24],[395,58,338,25,"result"],[395,64,338,31],[395,65,338,32],[395,68,338,35],[395,69,338,36,"BinTrieFlags"],[395,81,338,48],[395,82,338,49,"VALUE_LENGTH"],[395,94,338,61],[395,97,339,14,"decodeTree"],[395,107,339,24],[395,108,339,25,"result"],[395,114,339,31],[395,117,339,34],[395,118,339,35],[395,119,339,36],[395,121,339,38,"consumed"],[395,129,339,46],[395,130,339,47],[396,8,340,8],[396,12,340,12,"valueLength"],[396,23,340,23],[396,28,340,28],[396,29,340,29],[396,31,340,31],[397,10,341,12],[398,10,342,12],[398,14,342,16],[398,15,342,17,"emitCodePoint"],[398,28,342,30],[398,29,342,31,"decodeTree"],[398,39,342,41],[398,40,342,42,"result"],[398,46,342,48],[398,49,342,51],[398,50,342,52],[398,51,342,53],[398,53,342,55,"consumed"],[398,61,342,63],[398,62,342,64],[399,8,343,8],[400,8,344,8],[400,15,344,15,"consumed"],[400,23,344,23],[401,6,345,4],[402,6,346,4],[403,0,347,0],[404,0,348,0],[405,0,349,0],[406,0,350,0],[407,0,351,0],[408,0,352,0],[409,4,346,4],[410,6,346,4,"key"],[410,9,346,4],[411,6,346,4,"value"],[411,11,346,4],[411,13,353,4],[411,22,353,4,"end"],[411,25,353,7,"end"],[411,26,353,7],[411,28,353,10],[412,8,354,8],[412,12,354,12,"_a"],[412,14,354,14],[413,8,355,8],[413,16,355,16],[413,20,355,20],[413,21,355,21,"state"],[413,26,355,26],[414,10,356,12],[414,15,356,17,"EntityDecoderState"],[414,33,356,35],[414,34,356,36,"NamedEntity"],[414,45,356,47],[415,12,356,49],[416,14,357,16],[417,14,358,16],[417,21,358,23],[417,25,358,27],[417,26,358,28,"result"],[417,32,358,34],[417,37,358,39],[417,38,358,40],[417,43,359,21],[417,47,359,25],[417,48,359,26,"decodeMode"],[417,58,359,36],[417,63,359,41,"DecodingMode"],[417,75,359,53],[417,76,359,54,"Attribute"],[417,85,359,63],[417,89,360,24],[417,93,360,28],[417,94,360,29,"result"],[417,100,360,35],[417,105,360,40],[417,109,360,44],[417,110,360,45,"treeIndex"],[417,119,360,54],[417,120,360,55],[417,123,361,22],[417,127,361,26],[417,128,361,27,"emitNotTerminatedNamedEntity"],[417,156,361,55],[417,157,361,56],[417,158,361,57],[417,161,362,22],[417,162,362,23],[418,12,363,12],[419,10,364,12],[420,10,365,12],[420,15,365,17,"EntityDecoderState"],[420,33,365,35],[420,34,365,36,"NumericDecimal"],[420,48,365,50],[421,12,365,52],[422,14,366,16],[422,21,366,23],[422,25,366,27],[422,26,366,28,"emitNumericEntity"],[422,43,366,45],[422,44,366,46],[422,45,366,47],[422,47,366,49],[422,48,366,50],[422,49,366,51],[423,12,367,12],[424,10,368,12],[424,15,368,17,"EntityDecoderState"],[424,33,368,35],[424,34,368,36,"NumericHex"],[424,44,368,46],[425,12,368,48],[426,14,369,16],[426,21,369,23],[426,25,369,27],[426,26,369,28,"emitNumericEntity"],[426,43,369,45],[426,44,369,46],[426,45,369,47],[426,47,369,49],[426,48,369,50],[426,49,369,51],[427,12,370,12],[428,10,371,12],[428,15,371,17,"EntityDecoderState"],[428,33,371,35],[428,34,371,36,"NumericStart"],[428,46,371,48],[429,12,371,50],[430,14,372,16],[430,15,372,17,"_a"],[430,17,372,19],[430,20,372,22],[430,24,372,26],[430,25,372,27,"errors"],[430,31,372,33],[430,37,372,39],[430,41,372,43],[430,45,372,47,"_a"],[430,47,372,49],[430,52,372,54],[430,57,372,59],[430,58,372,60],[430,61,372,63],[430,66,372,68],[430,67,372,69],[430,70,372,72,"_a"],[430,72,372,74],[430,73,372,75,"absenceOfDigitsInNumericCharacterReference"],[430,115,372,117],[430,116,372,118],[430,120,372,122],[430,121,372,123,"consumed"],[430,129,372,131],[430,130,372,132],[431,14,373,16],[431,21,373,23],[431,22,373,24],[432,12,374,12],[433,10,375,12],[433,15,375,17,"EntityDecoderState"],[433,33,375,35],[433,34,375,36,"EntityStart"],[433,45,375,47],[434,12,375,49],[435,14,376,16],[436,14,377,16],[436,21,377,23],[436,22,377,24],[437,12,378,12],[438,8,379,8],[439,6,380,4],[440,4,380,5],[441,2,380,5],[442,2,382,0],[443,0,383,0],[444,0,384,0],[445,0,385,0],[446,0,386,0],[447,0,387,0],[448,2,388,0],[448,11,388,9,"getDecoder"],[448,21,388,19,"getDecoder"],[448,22,388,20,"decodeTree"],[448,32,388,30],[448,34,388,32],[449,4,389,4],[449,8,389,8,"ret"],[449,11,389,11],[449,14,389,14],[449,16,389,16],[450,4,390,4],[450,8,390,10,"decoder"],[450,15,390,17],[450,18,390,20],[450,22,390,24,"EntityDecoder"],[450,35,390,37],[450,36,390,38,"decodeTree"],[450,46,390,48],[450,48,390,50],[450,58,390,51,"str"],[450,61,390,54],[451,6,390,54],[451,13,390,60,"ret"],[451,16,390,63],[451,20,390,67],[451,24,390,67,"fromCodePoint"],[451,55,390,80],[451,57,390,81,"str"],[451,60,390,84],[451,61,390,85],[452,4,390,85],[452,5,390,86],[452,6,390,87],[453,4,391,4],[453,11,391,11],[453,20,391,20,"decodeWithTrie"],[453,34,391,34,"decodeWithTrie"],[453,35,391,35,"str"],[453,38,391,38],[453,40,391,40,"decodeMode"],[453,50,391,50],[453,52,391,52],[454,6,392,8],[454,10,392,12,"lastIndex"],[454,19,392,21],[454,22,392,24],[454,23,392,25],[455,6,393,8],[455,10,393,12,"offset"],[455,16,393,18],[455,19,393,21],[455,20,393,22],[456,6,394,8],[456,13,394,15],[456,14,394,16,"offset"],[456,20,394,22],[456,23,394,25,"str"],[456,26,394,28],[456,27,394,29,"indexOf"],[456,34,394,36],[456,35,394,37],[456,38,394,40],[456,40,394,42,"offset"],[456,46,394,48],[456,47,394,49],[456,52,394,54],[456,53,394,55],[456,55,394,57],[457,8,395,12,"ret"],[457,11,395,15],[457,15,395,19,"str"],[457,18,395,22],[457,19,395,23,"slice"],[457,24,395,28],[457,25,395,29,"lastIndex"],[457,34,395,38],[457,36,395,40,"offset"],[457,42,395,46],[457,43,395,47],[458,8,396,12,"decoder"],[458,15,396,19],[458,16,396,20,"startEntity"],[458,27,396,31],[458,28,396,32,"decodeMode"],[458,38,396,42],[458,39,396,43],[459,8,397,12],[459,12,397,18,"len"],[459,15,397,21],[459,18,397,24,"decoder"],[459,25,397,31],[459,26,397,32,"write"],[459,31,397,37],[459,32,397,38,"str"],[459,35,397,41],[460,8,398,12],[461,8,399,12,"offset"],[461,14,399,18],[461,17,399,21],[461,18,399,22],[461,19,399,23],[462,8,400,12],[462,12,400,16,"len"],[462,15,400,19],[462,18,400,22],[462,19,400,23],[462,21,400,25],[463,10,401,16,"lastIndex"],[463,19,401,25],[463,22,401,28,"offset"],[463,28,401,34],[463,31,401,37,"decoder"],[463,38,401,44],[463,39,401,45,"end"],[463,42,401,48],[463,43,401,49],[463,44,401,50],[464,10,402,16],[465,8,403,12],[466,8,404,12,"lastIndex"],[466,17,404,21],[466,20,404,24,"offset"],[466,26,404,30],[466,29,404,33,"len"],[466,32,404,36],[467,8,405,12],[468,8,406,12,"offset"],[468,14,406,18],[468,17,406,21,"len"],[468,20,406,24],[468,25,406,29],[468,26,406,30],[468,29,406,33,"lastIndex"],[468,38,406,42],[468,41,406,45],[468,42,406,46],[468,45,406,49,"lastIndex"],[468,54,406,58],[469,6,407,8],[470,6,408,8],[470,10,408,14,"result"],[470,16,408,20],[470,19,408,23,"ret"],[470,22,408,26],[470,25,408,29,"str"],[470,28,408,32],[470,29,408,33,"slice"],[470,34,408,38],[470,35,408,39,"lastIndex"],[470,44,408,48],[470,45,408,49],[471,6,409,8],[472,6,410,8,"ret"],[472,9,410,11],[472,12,410,14],[472,14,410,16],[473,6,411,8],[473,13,411,15,"result"],[473,19,411,21],[474,4,412,4],[474,5,412,5],[475,2,413,0],[476,2,414,0],[477,0,415,0],[478,0,416,0],[479,0,417,0],[480,0,418,0],[481,0,419,0],[482,0,420,0],[483,0,421,0],[484,0,422,0],[485,0,423,0],[486,2,424,7],[486,11,424,16,"determineBranch"],[486,26,424,31,"determineBranch"],[486,27,424,32,"decodeTree"],[486,37,424,42],[486,39,424,44,"current"],[486,46,424,51],[486,48,424,53,"nodeIdx"],[486,55,424,60],[486,57,424,62,"char"],[486,61,424,66],[486,63,424,68],[487,4,425,4],[487,8,425,10,"branchCount"],[487,19,425,21],[487,22,425,24],[487,23,425,25,"current"],[487,30,425,32],[487,33,425,35,"BinTrieFlags"],[487,45,425,47],[487,46,425,48,"BRANCH_LENGTH"],[487,59,425,61],[487,64,425,66],[487,65,425,67],[488,4,426,4],[488,8,426,10,"jumpOffset"],[488,18,426,20],[488,21,426,23,"current"],[488,28,426,30],[488,31,426,33,"BinTrieFlags"],[488,43,426,45],[488,44,426,46,"JUMP_TABLE"],[488,54,426,56],[489,4,427,4],[490,4,428,4],[490,8,428,8,"branchCount"],[490,19,428,19],[490,24,428,24],[490,25,428,25],[490,27,428,27],[491,6,429,8],[491,13,429,15,"jumpOffset"],[491,23,429,25],[491,28,429,30],[491,29,429,31],[491,33,429,35,"char"],[491,37,429,39],[491,42,429,44,"jumpOffset"],[491,52,429,54],[491,55,429,57,"nodeIdx"],[491,62,429,64],[491,65,429,67],[491,66,429,68],[491,67,429,69],[492,4,430,4],[493,4,431,4],[494,4,432,4],[494,8,432,8,"jumpOffset"],[494,18,432,18],[494,20,432,20],[495,6,433,8],[495,10,433,14,"value"],[495,15,433,19],[495,18,433,22,"char"],[495,22,433,26],[495,25,433,29,"jumpOffset"],[495,35,433,39],[496,6,434,8],[496,13,434,15,"value"],[496,18,434,20],[496,21,434,23],[496,22,434,24],[496,26,434,28,"value"],[496,31,434,33],[496,35,434,37,"branchCount"],[496,46,434,48],[496,49,435,14],[496,50,435,15],[496,51,435,16],[496,54,436,14,"decodeTree"],[496,64,436,24],[496,65,436,25,"nodeIdx"],[496,72,436,32],[496,75,436,35,"value"],[496,80,436,40],[496,81,436,41],[496,84,436,44],[496,85,436,45],[497,4,437,4],[498,4,438,4],[499,4,439,4],[500,4,440,4],[500,8,440,8,"lo"],[500,10,440,10],[500,13,440,13,"nodeIdx"],[500,20,440,20],[501,4,441,4],[501,8,441,8,"hi"],[501,10,441,10],[501,13,441,13,"lo"],[501,15,441,15],[501,18,441,18,"branchCount"],[501,29,441,29],[501,32,441,32],[501,33,441,33],[502,4,442,4],[502,11,442,11,"lo"],[502,13,442,13],[502,17,442,17,"hi"],[502,19,442,19],[502,21,442,21],[503,6,443,8],[503,10,443,14,"mid"],[503,13,443,17],[503,16,443,21,"lo"],[503,18,443,23],[503,21,443,26,"hi"],[503,23,443,28],[503,28,443,34],[503,29,443,35],[504,6,444,8],[504,10,444,14,"midVal"],[504,16,444,20],[504,19,444,23,"decodeTree"],[504,29,444,33],[504,30,444,34,"mid"],[504,33,444,37],[504,34,444,38],[505,6,445,8],[505,10,445,12,"midVal"],[505,16,445,18],[505,19,445,21,"char"],[505,23,445,25],[505,25,445,27],[506,8,446,12,"lo"],[506,10,446,14],[506,13,446,17,"mid"],[506,16,446,20],[506,19,446,23],[506,20,446,24],[507,6,447,8],[507,7,447,9],[507,13,448,13],[507,17,448,17,"midVal"],[507,23,448,23],[507,26,448,26,"char"],[507,30,448,30],[507,32,448,32],[508,8,449,12,"hi"],[508,10,449,14],[508,13,449,17,"mid"],[508,16,449,20],[508,19,449,23],[508,20,449,24],[509,6,450,8],[509,7,450,9],[509,13,451,13],[510,8,452,12],[510,15,452,19,"decodeTree"],[510,25,452,29],[510,26,452,30,"mid"],[510,29,452,33],[510,32,452,36,"branchCount"],[510,43,452,47],[510,44,452,48],[511,6,453,8],[512,4,454,4],[513,4,455,4],[513,11,455,11],[513,12,455,12],[513,13,455,13],[514,2,456,0],[515,2,457,0],[515,6,457,6,"htmlDecoder"],[515,17,457,17],[515,20,457,20,"getDecoder"],[515,30,457,30],[515,31,457,31,"htmlDecodeTree"],[515,54,457,45],[515,55,457,46],[516,2,458,0],[516,6,458,6,"xmlDecoder"],[516,16,458,16],[516,19,458,19,"getDecoder"],[516,29,458,29],[516,30,458,30,"xmlDecodeTree"],[516,52,458,43],[516,53,458,44],[517,2,459,0],[518,0,460,0],[519,0,461,0],[520,0,462,0],[521,0,463,0],[522,0,464,0],[523,0,465,0],[524,2,466,7],[524,11,466,16,"decodeHTML"],[524,21,466,26,"decodeHTML"],[524,22,466,27,"str"],[524,25,466,30],[524,27,466,60],[525,4,466,60],[525,8,466,32,"mode"],[525,12,466,36],[525,15,466,36,"arguments"],[525,24,466,36],[525,25,466,36,"length"],[525,31,466,36],[525,39,466,36,"arguments"],[525,48,466,36],[525,56,466,36,"undefined"],[525,65,466,36],[525,68,466,36,"arguments"],[525,77,466,36],[525,83,466,39,"DecodingMode"],[525,95,466,51],[525,96,466,52,"Legacy"],[525,102,466,58],[526,4,467,4],[526,11,467,11,"htmlDecoder"],[526,22,467,22],[526,23,467,23,"str"],[526,26,467,26],[526,28,467,28,"mode"],[526,32,467,32],[526,33,467,33],[527,2,468,0],[528,2,469,0],[529,0,470,0],[530,0,471,0],[531,0,472,0],[532,0,473,0],[533,0,474,0],[534,2,475,7],[534,11,475,16,"decodeHTMLAttribute"],[534,30,475,35,"decodeHTMLAttribute"],[534,31,475,36,"str"],[534,34,475,39],[534,36,475,41],[535,4,476,4],[535,11,476,11,"htmlDecoder"],[535,22,476,22],[535,23,476,23,"str"],[535,26,476,26],[535,28,476,28,"DecodingMode"],[535,40,476,40],[535,41,476,41,"Attribute"],[535,50,476,50],[535,51,476,51],[536,2,477,0],[537,2,478,0],[538,0,479,0],[539,0,480,0],[540,0,481,0],[541,0,482,0],[542,0,483,0],[543,2,484,7],[543,11,484,16,"decodeHTMLStrict"],[543,27,484,32,"decodeHTMLStrict"],[543,28,484,33,"str"],[543,31,484,36],[543,33,484,38],[544,4,485,4],[544,11,485,11,"htmlDecoder"],[544,22,485,22],[544,23,485,23,"str"],[544,26,485,26],[544,28,485,28,"DecodingMode"],[544,40,485,40],[544,41,485,41,"Strict"],[544,47,485,47],[544,48,485,48],[545,2,486,0],[546,2,487,0],[547,0,488,0],[548,0,489,0],[549,0,490,0],[550,0,491,0],[551,0,492,0],[552,2,493,7],[552,11,493,16,"decodeXML"],[552,20,493,25,"decodeXML"],[552,21,493,26,"str"],[552,24,493,29],[552,26,493,31],[553,4,494,4],[553,11,494,11,"xmlDecoder"],[553,21,494,21],[553,22,494,22,"str"],[553,25,494,25],[553,27,494,27,"DecodingMode"],[553,39,494,39],[553,40,494,40,"Strict"],[553,46,494,46],[553,47,494,47],[554,2,495,0],[555,0,495,1],[555,3]],"functionMap":{"names":["<global>","<anonymous>","isNumber","isHexadecimalCharacter","isAsciiAlphaNumeric","isEntityInAttributeInvalidEnd","EntityDecoder","EntityDecoder#constructor","EntityDecoder#startEntity","EntityDecoder#write","EntityDecoder#stateNumericStart","EntityDecoder#addToNumericResult","EntityDecoder#stateNumericHex","EntityDecoder#stateNumericDecimal","EntityDecoder#emitNumericEntity","EntityDecoder#stateNamedEntity","EntityDecoder#emitNotTerminatedNamedEntity","EntityDecoder#emitNamedEntityData","EntityDecoder#end","getDecoder","EntityDecoder$argument_1","decodeWithTrie","determineBranch","decodeHTML","decodeHTMLAttribute","decodeHTMLStrict","decodeXML"],"mappings":"AAA;CCO;CDa;CCI;CDI;AEC;CFE;AGC;CHG;AIC;CJI;AKO;CLE;CCE;CDM;CCE;CDO;OMI;ICC;KDmC;IEE;KFO;IGY;KHwB;IIU;KJW;IKC;KLQ;IMU;KNc;IOU;KPc;IQc;KRsB;ISU;KToC;IUM;KVO;IWU;KXU;IYQ;KZ2B;CNC;AmBO;kDCE,oCD;WEC;KFqB;CnBC;OsBW;CtBgC;OuBU;CvBE;OwBO;CxBE;OyBO;CzBE;O0BO;C1BE"}},"type":"js/module"}]}