{"dependencies":[{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":30,"index":30}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":18,"index":50},"end":{"line":2,"column":40,"index":72}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var util = require(_dependencyMap[0], \"./util\");\n  var protocols = require(_dependencyMap[1], \"./constants\").RTD_URI_PROTOCOLS;\n\n  // decode a URI payload bytes\n  // @returns a string\n  function decode(data) {\n    var prefix = protocols[data[0]];\n    if (!prefix) {\n      // 36 to 255 should be \"\"\n      prefix = '';\n    }\n    return prefix + util.bytesToString(data.slice(1));\n  }\n\n  // shorten a URI with standard prefix\n  // @returns an array of bytes\n  function encode(uri) {\n    var prefix, protocolCode, encoded;\n\n    // check each protocol, unless we've found a match\n    // \"urn:\" is the one exception where we need to keep checking\n    // slice so we don't check \"\"\n    protocols.slice(1).forEach(function (protocol) {\n      if ((!prefix || prefix === 'urn:') && uri.indexOf(protocol) === 0) {\n        prefix = protocol;\n      }\n    });\n    if (!prefix) {\n      prefix = '';\n    }\n    encoded = util.stringToBytes(uri.slice(prefix.length));\n    protocolCode = protocols.indexOf(prefix);\n    // prepend protocol code\n    encoded.unshift(protocolCode);\n    return encoded;\n  }\n  module.exports = {\n    encodePayload: encode,\n    decodePayload: decode\n  };\n});","lineCount":42,"map":[[2,2,1,0],[2,6,1,6,"util"],[2,10,1,10],[2,13,1,13,"require"],[2,20,1,20],[2,21,1,20,"_dependencyMap"],[2,35,1,20],[2,48,1,29],[2,49,1,30],[3,2,2,0],[3,6,2,6,"protocols"],[3,15,2,15],[3,18,2,18,"require"],[3,25,2,25],[3,26,2,25,"_dependencyMap"],[3,40,2,25],[3,58,2,39],[3,59,2,40],[3,60,2,41,"RTD_URI_PROTOCOLS"],[3,77,2,58],[5,2,4,0],[6,2,5,0],[7,2,6,0],[7,11,6,9,"decode"],[7,17,6,15,"decode"],[7,18,6,16,"data"],[7,22,6,20],[7,24,6,22],[8,4,7,2],[8,8,7,6,"prefix"],[8,14,7,12],[8,17,7,15,"protocols"],[8,26,7,24],[8,27,7,25,"data"],[8,31,7,29],[8,32,7,30],[8,33,7,31],[8,34,7,32],[8,35,7,33],[9,4,8,2],[9,8,8,6],[9,9,8,7,"prefix"],[9,15,8,13],[9,17,8,15],[10,6,9,4],[11,6,10,4,"prefix"],[11,12,10,10],[11,15,10,13],[11,17,10,15],[12,4,11,2],[13,4,12,2],[13,11,12,9,"prefix"],[13,17,12,15],[13,20,12,18,"util"],[13,24,12,22],[13,25,12,23,"bytesToString"],[13,38,12,36],[13,39,12,37,"data"],[13,43,12,41],[13,44,12,42,"slice"],[13,49,12,47],[13,50,12,48],[13,51,12,49],[13,52,12,50],[13,53,12,51],[14,2,13,0],[16,2,15,0],[17,2,16,0],[18,2,17,0],[18,11,17,9,"encode"],[18,17,17,15,"encode"],[18,18,17,16,"uri"],[18,21,17,19],[18,23,17,21],[19,4,18,2],[19,8,18,6,"prefix"],[19,14,18,12],[19,16,18,14,"protocolCode"],[19,28,18,26],[19,30,18,28,"encoded"],[19,37,18,35],[21,4,20,2],[22,4,21,2],[23,4,22,2],[24,4,23,2,"protocols"],[24,13,23,11],[24,14,23,12,"slice"],[24,19,23,17],[24,20,23,18],[24,21,23,19],[24,22,23,20],[24,23,23,21,"forEach"],[24,30,23,28],[24,31,23,29],[24,41,23,39,"protocol"],[24,49,23,47],[24,51,23,49],[25,6,24,4],[25,10,24,8],[25,11,24,9],[25,12,24,10,"prefix"],[25,18,24,16],[25,22,24,20,"prefix"],[25,28,24,26],[25,33,24,31],[25,39,24,37],[25,44,24,42,"uri"],[25,47,24,45],[25,48,24,46,"indexOf"],[25,55,24,53],[25,56,24,54,"protocol"],[25,64,24,62],[25,65,24,63],[25,70,24,68],[25,71,24,69],[25,73,24,71],[26,8,25,6,"prefix"],[26,14,25,12],[26,17,25,15,"protocol"],[26,25,25,23],[27,6,26,4],[28,4,27,2],[28,5,27,3],[28,6,27,4],[29,4,29,2],[29,8,29,6],[29,9,29,7,"prefix"],[29,15,29,13],[29,17,29,15],[30,6,30,4,"prefix"],[30,12,30,10],[30,15,30,13],[30,17,30,15],[31,4,31,2],[32,4,33,2,"encoded"],[32,11,33,9],[32,14,33,12,"util"],[32,18,33,16],[32,19,33,17,"stringToBytes"],[32,32,33,30],[32,33,33,31,"uri"],[32,36,33,34],[32,37,33,35,"slice"],[32,42,33,40],[32,43,33,41,"prefix"],[32,49,33,47],[32,50,33,48,"length"],[32,56,33,54],[32,57,33,55],[32,58,33,56],[33,4,34,2,"protocolCode"],[33,16,34,14],[33,19,34,17,"protocols"],[33,28,34,26],[33,29,34,27,"indexOf"],[33,36,34,34],[33,37,34,35,"prefix"],[33,43,34,41],[33,44,34,42],[34,4,35,2],[35,4,36,2,"encoded"],[35,11,36,9],[35,12,36,10,"unshift"],[35,19,36,17],[35,20,36,18,"protocolCode"],[35,32,36,30],[35,33,36,31],[36,4,38,2],[36,11,38,9,"encoded"],[36,18,38,16],[37,2,39,0],[38,2,41,0,"module"],[38,8,41,6],[38,9,41,7,"exports"],[38,16,41,14],[38,19,41,17],[39,4,42,2,"encodePayload"],[39,17,42,15],[39,19,42,17,"encode"],[39,25,42,23],[40,4,43,2,"decodePayload"],[40,17,43,15],[40,19,43,17,"decode"],[41,2,44,0],[41,3,44,1],[42,0,44,2],[42,3]],"functionMap":{"names":["<global>","decode","encode","protocols.slice.forEach$argument_0"],"mappings":"AAA;ACK;CDO;AEI;6BCM;GDI;CFY"}},"type":"js/module"}]}