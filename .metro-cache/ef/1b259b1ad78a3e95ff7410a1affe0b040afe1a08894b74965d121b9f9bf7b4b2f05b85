{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@reduxjs/toolkit/query/react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":194},"end":{"line":8,"column":57,"index":251}}],"key":"H8aYsQNJt9rS0BKlqltpEbUG6zo=","exportNames":["*"]}},{"name":"../../services/supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":252},"end":{"line":9,"column":58,"index":310}}],"key":"a99TehitYkPR4mct+ady0jxcI4I=","exportNames":["*"]}},{"name":"./baseApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":311},"end":{"line":10,"column":66,"index":377}}],"key":"Wui0qMW8IIbr/oMETWG4Kn9SQn8=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":378},"end":{"line":11,"column":54,"index":432}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useGetSystemAnalyticsQuery = exports.useGetExecutionStatsQuery = exports.useGetAutomationMetricsQuery = exports.useGetAnalyticsQuery = exports.analyticsApi = undefined;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _react = require(_dependencyMap[3]);\n  var _client = require(_dependencyMap[4]);\n  var _baseApi = require(_dependencyMap[5]);\n  var _EventLogger = require(_dependencyMap[6]);\n  /**\n   * Analytics API - Unified and Optimized\n   * \n   * This module provides consistent API endpoints for analytics and metrics\n   * with proper error handling, caching, and fallback strategies.\n   */\n\n  /**\n   * Enhanced analytics API with unified configuration\n   */\n  var analyticsApi = exports.analyticsApi = (0, _react.createApi)({\n    reducerPath: 'analyticsApi',\n    ..._baseApi.baseApiConfig,\n    tagTypes: ['Analytics', 'Metrics'],\n    endpoints: builder => ({\n      /**\n       * Get comprehensive analytics data\n       */\n      getAnalytics: builder.query({\n        queryFn: function () {\n          var _ref3 = (0, _asyncToGenerator2.default)(function* (_ref, _ref2) {\n            var timeRange = _ref.timeRange;\n            var signal = _ref2.signal;\n            try {\n              var _yield$supabase$auth$ = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$.data.user;\n              if (!user) {\n                // Return empty analytics for unauthenticated users\n                return {\n                  data: {\n                    executionTimeline: [],\n                    successRate: 100,\n                    totalExecutions: 0,\n                    avgExecutionTime: 0,\n                    timeSaved: 0,\n                    activeAutomations: 0,\n                    topAutomations: []\n                  }\n                };\n              }\n\n              // Calculate date range\n              var endDate = new Date();\n              var startDate = new Date();\n              switch (timeRange) {\n                case '24h':\n                  startDate.setHours(startDate.getHours() - 24);\n                  break;\n                case '7d':\n                  startDate.setDate(startDate.getDate() - 7);\n                  break;\n                case '30d':\n                  startDate.setDate(startDate.getDate() - 30);\n                  break;\n                case 'all':\n                  startDate.setFullYear(startDate.getFullYear() - 10);\n                  break;\n              }\n\n              // Get execution data with proper filtering\n              var _yield$supabase$from$ = yield _client.supabase.from('automation_executions').select(`\n              *,\n              automation:automations(name, title)\n            `).eq('user_id', user.id).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()).order('created_at', {\n                  ascending: false\n                }).abortSignal(signal),\n                executions = _yield$supabase$from$.data,\n                executionsError = _yield$supabase$from$.error;\n              if (executionsError) {\n                _EventLogger.EventLogger.error('API', 'Error fetching executions:', executionsError);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: executionsError.message || 'Failed to fetch analytics data',\n                    code: executionsError.code\n                  }\n                };\n              }\n\n              // Calculate analytics\n              var totalExecutions = executions?.length || 0;\n              var successfulExecutions = executions?.filter(e => e.status === 'success').length || 0;\n              var successRate = totalExecutions > 0 ? Math.round(successfulExecutions / totalExecutions * 100) : 100;\n\n              // Calculate execution timeline\n              var executionsByDay = new Map();\n              executions?.forEach(execution => {\n                var date = new Date(execution.created_at).toLocaleDateString();\n                executionsByDay.set(date, (executionsByDay.get(date) || 0) + 1);\n              });\n              var executionTimeline = Array.from(executionsByDay.entries()).sort((a, b) => new Date(a[0]).getTime() - new Date(b[0]).getTime()).map((entry, index) => ({\n                x: index + 1,\n                y: entry[1]\n              }));\n\n              // Calculate top automations\n              var automationCounts = new Map();\n              executions?.forEach(execution => {\n                var name = execution.automation?.name || execution.automation?.title || 'Unknown';\n                var current = automationCounts.get(name) || {\n                  count: 0,\n                  totalTime: 0\n                };\n                automationCounts.set(name, {\n                  count: current.count + 1,\n                  totalTime: current.totalTime + (execution.execution_time || 0)\n                });\n              });\n              var topAutomations = Array.from(automationCounts.entries()).map(_ref4 => {\n                var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n                  name = _ref5[0],\n                  stats = _ref5[1];\n                return {\n                  name,\n                  executions: stats.count,\n                  avgTime: stats.count > 0 ? Math.round(stats.totalTime / stats.count * 10) / 10 : 0\n                };\n              }).sort((a, b) => b.executions - a.executions).slice(0, 5);\n\n              // Calculate average execution time and time saved\n              var totalExecutionTime = executions?.reduce((sum, e) => sum + (e.execution_time || 0), 0) || 0;\n              var avgExecutionTime = totalExecutions > 0 ? Math.round(totalExecutionTime / totalExecutions * 10) / 10 : 0;\n              var timeSaved = Math.round(totalExecutions * 2); // Assume each automation saves 2 minutes on average\n\n              // Get active automations count\n              var _yield$supabase$from$2 = yield _client.supabase.from('automations').select('id').eq('created_by', user.id).eq('is_active', true).abortSignal(signal),\n                automations = _yield$supabase$from$2.data,\n                automationsError = _yield$supabase$from$2.error;\n              if (automationsError) {\n                _EventLogger.EventLogger.warn('API', 'Failed to fetch active automations count:', automationsError);\n              }\n              var activeAutomations = automations?.length || 0;\n              return {\n                data: {\n                  executionTimeline,\n                  successRate,\n                  totalExecutions,\n                  avgExecutionTime,\n                  timeSaved,\n                  activeAutomations,\n                  topAutomations\n                }\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch analytics:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch analytics data'\n                }\n              };\n            }\n          });\n          return function queryFn(_x, _x2) {\n            return _ref3.apply(this, arguments);\n          };\n        }(),\n        providesTags: (result, error, _ref6) => {\n          var timeRange = _ref6.timeRange;\n          return [{\n            type: 'Analytics',\n            id: `OVERVIEW_${timeRange}`\n          }];\n        }\n      }),\n      /**\n       * Get execution statistics using RPC function with fallback\n       */\n      getExecutionStats: builder.query({\n        queryFn: function () {\n          var _ref9 = (0, _asyncToGenerator2.default)(function* (_ref7, _ref8) {\n            var timeRange = _ref7.timeRange;\n            var signal = _ref8.signal;\n            try {\n              var _yield$supabase$auth$2 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$2.data.user;\n              if (!user) {\n                return {\n                  data: []\n                };\n              }\n\n              // Skip RPC function to avoid download_count error, use fallback directly\n              // Fallback: calculate stats manually\n              var endDate = new Date();\n              var startDate = new Date();\n              switch (timeRange) {\n                case '24h':\n                  startDate.setHours(startDate.getHours() - 24);\n                  break;\n                case '7d':\n                  startDate.setDate(startDate.getDate() - 7);\n                  break;\n                case '30d':\n                  startDate.setDate(startDate.getDate() - 30);\n                  break;\n                case 'all':\n                  startDate.setFullYear(startDate.getFullYear() - 10);\n                  break;\n              }\n              var _yield$supabase$from$3 = yield _client.supabase.from('automation_executions').select('*').eq('user_id', user.id).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()).abortSignal(signal),\n                executions = _yield$supabase$from$3.data,\n                fallbackError = _yield$supabase$from$3.error;\n              if (fallbackError) {\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: fallbackError.message || 'Failed to fetch execution stats',\n                    code: fallbackError.code\n                  }\n                };\n              }\n\n              // Group by date and calculate stats\n              var statsByDate = new Map();\n              executions?.forEach(execution => {\n                var date = new Date(execution.created_at).toDateString();\n                var existing = statsByDate.get(date) || {\n                  date,\n                  count: 0,\n                  successful: 0,\n                  failed: 0,\n                  avg_duration: 0\n                };\n                existing.count += 1;\n                if (execution.status === 'success') {\n                  existing.successful += 1;\n                } else {\n                  existing.failed += 1;\n                }\n                statsByDate.set(date, existing);\n              });\n              return {\n                data: Array.from(statsByDate.values())\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch execution stats:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch execution stats'\n                }\n              };\n            }\n          });\n          return function queryFn(_x3, _x4) {\n            return _ref9.apply(this, arguments);\n          };\n        }(),\n        providesTags: (result, error, _ref0) => {\n          var timeRange = _ref0.timeRange;\n          return [{\n            type: 'Analytics',\n            id: `STATS_${timeRange}`\n          }];\n        }\n      }),\n      /**\n       * Get metrics for a specific automation\n       */\n      getAutomationMetrics: builder.query({\n        queryFn: function () {\n          var _ref11 = (0, _asyncToGenerator2.default)(function* (_ref1, _ref10) {\n            var automationId = _ref1.automationId;\n            var signal = _ref10.signal;\n            try {\n              var _yield$supabase$from$4 = yield _client.supabase.from('automation_executions').select('*').eq('automation_id', automationId).order('created_at', {\n                  ascending: false\n                }).limit(100).abortSignal(signal),\n                executions = _yield$supabase$from$4.data,\n                error = _yield$supabase$from$4.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching automation metrics:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch automation metrics',\n                    code: error.code\n                  }\n                };\n              }\n              var total = executions?.length || 0;\n              var successful = executions?.filter(e => e.status === 'success').length || 0;\n              var totalTime = executions?.reduce((sum, e) => sum + (e.execution_time || 0), 0) || 0;\n              return {\n                data: {\n                  totalRuns: total,\n                  successRate: total > 0 ? Math.round(successful / total * 100) : 0,\n                  avgExecutionTime: total > 0 ? Math.round(totalTime / total * 10) / 10 : 0,\n                  lastRun: executions?.[0]?.created_at,\n                  executions: executions?.slice(0, 10) || [] // Last 10 executions\n                }\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch automation metrics:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch automation metrics'\n                }\n              };\n            }\n          });\n          return function queryFn(_x5, _x6) {\n            return _ref11.apply(this, arguments);\n          };\n        }(),\n        providesTags: (result, error, _ref12) => {\n          var automationId = _ref12.automationId;\n          return [{\n            type: 'Metrics',\n            id: automationId\n          }];\n        }\n      }),\n      /**\n       * Get system-wide analytics (admin only)\n       */\n      getSystemAnalytics: builder.query({\n        queryFn: function () {\n          var _ref14 = (0, _asyncToGenerator2.default)(function* (_, _ref13) {\n            var signal = _ref13.signal;\n            try {\n              var _yield$supabase$auth$3 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$3.data.user;\n              if (!user) {\n                return {\n                  error: {\n                    status: 'UNAUTHORIZED',\n                    message: 'Not authenticated'\n                  }\n                };\n              }\n\n              // Skip RPC function to avoid download_count error\n              // Return empty analytics for now\n              return {\n                data: {\n                  total_users: 0,\n                  total_automations: 0,\n                  total_executions: 0,\n                  active_users_today: 0,\n                  new_users_this_week: 0,\n                  popular_categories: [],\n                  system_health: 'healthy'\n                }\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch system analytics:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch system analytics'\n                }\n              };\n            }\n          });\n          return function queryFn(_x7, _x8) {\n            return _ref14.apply(this, arguments);\n          };\n        }(),\n        providesTags: [{\n          type: 'Analytics',\n          id: 'SYSTEM'\n        }]\n      })\n    })\n  });\n\n  // Export hooks\n  var useGetAnalyticsQuery = exports.useGetAnalyticsQuery = analyticsApi.useGetAnalyticsQuery,\n    useGetExecutionStatsQuery = exports.useGetExecutionStatsQuery = analyticsApi.useGetExecutionStatsQuery,\n    useGetAutomationMetricsQuery = exports.useGetAutomationMetricsQuery = analyticsApi.useGetAutomationMetricsQuery,\n    useGetSystemAnalyticsQuery = exports.useGetSystemAnalyticsQuery = analyticsApi.useGetSystemAnalyticsQuery;\n});","lineCount":419,"map":[[9,2,8,0],[9,6,8,0,"_react"],[9,12,8,0],[9,15,8,0,"require"],[9,22,8,0],[9,23,8,0,"_dependencyMap"],[9,37,8,0],[10,2,9,0],[10,6,9,0,"_client"],[10,13,9,0],[10,16,9,0,"require"],[10,23,9,0],[10,24,9,0,"_dependencyMap"],[10,38,9,0],[11,2,10,0],[11,6,10,0,"_baseApi"],[11,14,10,0],[11,17,10,0,"require"],[11,24,10,0],[11,25,10,0,"_dependencyMap"],[11,39,10,0],[12,2,11,0],[12,6,11,0,"_EventLogger"],[12,18,11,0],[12,21,11,0,"require"],[12,28,11,0],[12,29,11,0,"_dependencyMap"],[12,43,11,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[20,2,45,0],[21,0,46,0],[22,0,47,0],[23,2,48,7],[23,6,48,13,"analyticsApi"],[23,18,48,25],[23,21,48,25,"exports"],[23,28,48,25],[23,29,48,25,"analyticsApi"],[23,41,48,25],[23,44,48,28],[23,48,48,28,"createApi"],[23,64,48,37],[23,66,48,38],[24,4,49,2,"reducerPath"],[24,15,49,13],[24,17,49,15],[24,31,49,29],[25,4,50,2],[25,7,50,5,"baseApiConfig"],[25,29,50,18],[26,4,51,2,"tagTypes"],[26,12,51,10],[26,14,51,12],[26,15,51,13],[26,26,51,24],[26,28,51,26],[26,37,51,35],[26,38,51,36],[27,4,52,2,"endpoints"],[27,13,52,11],[27,15,52,14,"builder"],[27,22,52,21],[27,27,52,27],[28,6,53,4],[29,0,54,0],[30,0,55,0],[31,6,56,4,"getAnalytics"],[31,18,56,16],[31,20,56,18,"builder"],[31,27,56,25],[31,28,56,26,"query"],[31,33,56,31],[31,34,56,73],[32,8,57,6,"queryFn"],[32,15,57,13],[33,10,57,13],[33,14,57,13,"_ref3"],[33,19,57,13],[33,26,57,13,"_asyncToGenerator2"],[33,44,57,13],[33,45,57,13,"default"],[33,52,57,13],[33,54,57,15],[33,65,57,15,"_ref"],[33,69,57,15],[33,71,57,15,"_ref2"],[33,76,57,15],[33,78,57,52],[34,12,57,52],[34,16,57,24,"timeRange"],[34,25,57,33],[34,28,57,33,"_ref"],[34,32,57,33],[34,33,57,24,"timeRange"],[34,42,57,33],[35,12,57,33],[35,16,57,39,"signal"],[35,22,57,45],[35,25,57,45,"_ref2"],[35,30,57,45],[35,31,57,39,"signal"],[35,37,57,45],[36,12,58,8],[36,16,58,12],[37,14,59,10],[37,18,59,10,"_yield$supabase$auth$"],[37,39,59,10],[37,48,59,43,"supabase"],[37,64,59,51],[37,65,59,52,"auth"],[37,69,59,56],[37,70,59,57,"getUser"],[37,77,59,64],[37,78,59,65],[37,79,59,66],[38,16,59,26,"user"],[38,20,59,30],[38,23,59,30,"_yield$supabase$auth$"],[38,44,59,30],[38,45,59,18,"data"],[38,49,59,22],[38,50,59,26,"user"],[38,54,59,30],[39,14,61,10],[39,18,61,14],[39,19,61,15,"user"],[39,23,61,19],[39,25,61,21],[40,16,62,12],[41,16,63,12],[41,23,63,19],[42,18,64,14,"data"],[42,22,64,18],[42,24,64,20],[43,20,65,16,"executionTimeline"],[43,37,65,33],[43,39,65,35],[43,41,65,37],[44,20,66,16,"successRate"],[44,31,66,27],[44,33,66,29],[44,36,66,32],[45,20,67,16,"totalExecutions"],[45,35,67,31],[45,37,67,33],[45,38,67,34],[46,20,68,16,"avgExecutionTime"],[46,36,68,32],[46,38,68,34],[46,39,68,35],[47,20,69,16,"timeSaved"],[47,29,69,25],[47,31,69,27],[47,32,69,28],[48,20,70,16,"activeAutomations"],[48,37,70,33],[48,39,70,35],[48,40,70,36],[49,20,71,16,"topAutomations"],[49,34,71,30],[49,36,71,32],[50,18,72,14],[51,16,73,12],[51,17,73,13],[52,14,74,10],[54,14,76,10],[55,14,77,10],[55,18,77,16,"endDate"],[55,25,77,23],[55,28,77,26],[55,32,77,30,"Date"],[55,36,77,34],[55,37,77,35],[55,38,77,36],[56,14,78,10],[56,18,78,16,"startDate"],[56,27,78,25],[56,30,78,28],[56,34,78,32,"Date"],[56,38,78,36],[56,39,78,37],[56,40,78,38],[57,14,80,10],[57,22,80,18,"timeRange"],[57,31,80,27],[58,16,81,12],[58,21,81,17],[58,26,81,22],[59,18,82,14,"startDate"],[59,27,82,23],[59,28,82,24,"setHours"],[59,36,82,32],[59,37,82,33,"startDate"],[59,46,82,42],[59,47,82,43,"getHours"],[59,55,82,51],[59,56,82,52],[59,57,82,53],[59,60,82,56],[59,62,82,58],[59,63,82,59],[60,18,83,14],[61,16,84,12],[61,21,84,17],[61,25,84,21],[62,18,85,14,"startDate"],[62,27,85,23],[62,28,85,24,"setDate"],[62,35,85,31],[62,36,85,32,"startDate"],[62,45,85,41],[62,46,85,42,"getDate"],[62,53,85,49],[62,54,85,50],[62,55,85,51],[62,58,85,54],[62,59,85,55],[62,60,85,56],[63,18,86,14],[64,16,87,12],[64,21,87,17],[64,26,87,22],[65,18,88,14,"startDate"],[65,27,88,23],[65,28,88,24,"setDate"],[65,35,88,31],[65,36,88,32,"startDate"],[65,45,88,41],[65,46,88,42,"getDate"],[65,53,88,49],[65,54,88,50],[65,55,88,51],[65,58,88,54],[65,60,88,56],[65,61,88,57],[66,18,89,14],[67,16,90,12],[67,21,90,17],[67,26,90,22],[68,18,91,14,"startDate"],[68,27,91,23],[68,28,91,24,"setFullYear"],[68,39,91,35],[68,40,91,36,"startDate"],[68,49,91,45],[68,50,91,46,"getFullYear"],[68,61,91,57],[68,62,91,58],[68,63,91,59],[68,66,91,62],[68,68,91,64],[68,69,91,65],[69,18,92,14],[70,14,93,10],[72,14,95,10],[73,14,96,10],[73,18,96,10,"_yield$supabase$from$"],[73,39,96,10],[73,48,96,69,"supabase"],[73,64,96,77],[73,65,97,13,"from"],[73,69,97,17],[73,70,97,18],[73,93,97,41],[73,94,97,42],[73,95,98,13,"select"],[73,101,98,19],[73,102,98,20],[74,0,99,0],[75,0,100,0],[76,0,101,0],[76,13,101,13],[76,14,101,14],[76,15,102,13,"eq"],[76,17,102,15],[76,18,102,16],[76,27,102,25],[76,29,102,27,"user"],[76,33,102,31],[76,34,102,32,"id"],[76,36,102,34],[76,37,102,35],[76,38,103,13,"gte"],[76,41,103,16],[76,42,103,17],[76,54,103,29],[76,56,103,31,"startDate"],[76,65,103,40],[76,66,103,41,"toISOString"],[76,77,103,52],[76,78,103,53],[76,79,103,54],[76,80,103,55],[76,81,104,13,"lte"],[76,84,104,16],[76,85,104,17],[76,97,104,29],[76,99,104,31,"endDate"],[76,106,104,38],[76,107,104,39,"toISOString"],[76,118,104,50],[76,119,104,51],[76,120,104,52],[76,121,104,53],[76,122,105,13,"order"],[76,127,105,18],[76,128,105,19],[76,140,105,31],[76,142,105,33],[77,18,105,35,"ascending"],[77,27,105,44],[77,29,105,46],[78,16,105,52],[78,17,105,53],[78,18,105,54],[78,19,106,13,"abortSignal"],[78,30,106,24],[78,31,106,25,"signal"],[78,37,106,31],[78,38,106,32],[79,16,96,24,"executions"],[79,26,96,34],[79,29,96,34,"_yield$supabase$from$"],[79,50,96,34],[79,51,96,18,"data"],[79,55,96,22],[80,16,96,43,"executionsError"],[80,31,96,58],[80,34,96,58,"_yield$supabase$from$"],[80,55,96,58],[80,56,96,36,"error"],[80,61,96,41],[81,14,108,10],[81,18,108,14,"executionsError"],[81,33,108,29],[81,35,108,31],[82,16,109,12,"EventLogger"],[82,40,109,23],[82,41,109,24,"error"],[82,46,109,29],[82,47,109,30],[82,52,109,35],[82,54,109,37],[82,82,109,65],[82,84,109,67,"executionsError"],[82,99,109,91],[82,100,109,92],[83,16,110,12],[83,23,110,19],[84,18,111,14,"error"],[84,23,111,19],[84,25,111,21],[85,20,112,16,"status"],[85,26,112,22],[85,28,112,24],[85,41,112,37],[86,20,113,16,"message"],[86,27,113,23],[86,29,113,25,"executionsError"],[86,44,113,40],[86,45,113,41,"message"],[86,52,113,48],[86,56,113,52],[86,88,113,84],[87,20,114,16,"code"],[87,24,114,20],[87,26,114,22,"executionsError"],[87,41,114,37],[87,42,114,38,"code"],[88,18,115,14],[89,16,116,12],[89,17,116,13],[90,14,117,10],[92,14,119,10],[93,14,120,10],[93,18,120,16,"totalExecutions"],[93,33,120,31],[93,36,120,34,"executions"],[93,46,120,44],[93,48,120,46,"length"],[93,54,120,52],[93,58,120,56],[93,59,120,57],[94,14,121,10],[94,18,121,16,"successfulExecutions"],[94,38,121,36],[94,41,121,39,"executions"],[94,51,121,49],[94,53,121,51,"filter"],[94,59,121,57],[94,60,121,59,"e"],[94,61,121,65],[94,65,121,70,"e"],[94,66,121,71],[94,67,121,72,"status"],[94,73,121,78],[94,78,121,83],[94,87,121,92],[94,88,121,93],[94,89,121,94,"length"],[94,95,121,100],[94,99,121,104],[94,100,121,105],[95,14,122,10],[95,18,122,16,"successRate"],[95,29,122,27],[95,32,122,30,"totalExecutions"],[95,47,122,45],[95,50,122,48],[95,51,122,49],[95,54,122,52,"Math"],[95,58,122,56],[95,59,122,57,"round"],[95,64,122,62],[95,65,122,64,"successfulExecutions"],[95,85,122,84],[95,88,122,87,"totalExecutions"],[95,103,122,102],[95,106,122,106],[95,109,122,109],[95,110,122,110],[95,113,122,113],[95,116,122,116],[97,14,124,10],[98,14,125,10],[98,18,125,16,"executionsByDay"],[98,33,125,31],[98,36,125,34],[98,40,125,38,"Map"],[98,43,125,41],[98,44,125,58],[98,45,125,59],[99,14,126,10,"executions"],[99,24,126,20],[99,26,126,22,"forEach"],[99,33,126,29],[99,34,126,31,"execution"],[99,43,126,45],[99,47,126,50],[100,16,127,12],[100,20,127,18,"date"],[100,24,127,22],[100,27,127,25],[100,31,127,29,"Date"],[100,35,127,33],[100,36,127,34,"execution"],[100,45,127,43],[100,46,127,44,"created_at"],[100,56,127,54],[100,57,127,55],[100,58,127,56,"toLocaleDateString"],[100,76,127,74],[100,77,127,75],[100,78,127,76],[101,16,128,12,"executionsByDay"],[101,31,128,27],[101,32,128,28,"set"],[101,35,128,31],[101,36,128,32,"date"],[101,40,128,36],[101,42,128,38],[101,43,128,39,"executionsByDay"],[101,58,128,54],[101,59,128,55,"get"],[101,62,128,58],[101,63,128,59,"date"],[101,67,128,63],[101,68,128,64],[101,72,128,68],[101,73,128,69],[101,77,128,73],[101,78,128,74],[101,79,128,75],[102,14,129,10],[102,15,129,11],[102,16,129,12],[103,14,131,10],[103,18,131,16,"executionTimeline"],[103,35,131,33],[103,38,131,36,"Array"],[103,43,131,41],[103,44,131,42,"from"],[103,48,131,46],[103,49,131,47,"executionsByDay"],[103,64,131,62],[103,65,131,63,"entries"],[103,72,131,70],[103,73,131,71],[103,74,131,72],[103,75,131,73],[103,76,132,13,"sort"],[103,80,132,17],[103,81,132,18],[103,82,132,19,"a"],[103,83,132,20],[103,85,132,22,"b"],[103,86,132,23],[103,91,132,28],[103,95,132,32,"Date"],[103,99,132,36],[103,100,132,37,"a"],[103,101,132,38],[103,102,132,39],[103,103,132,40],[103,104,132,41],[103,105,132,42],[103,106,132,43,"getTime"],[103,113,132,50],[103,114,132,51],[103,115,132,52],[103,118,132,55],[103,122,132,59,"Date"],[103,126,132,63],[103,127,132,64,"b"],[103,128,132,65],[103,129,132,66],[103,130,132,67],[103,131,132,68],[103,132,132,69],[103,133,132,70,"getTime"],[103,140,132,77],[103,141,132,78],[103,142,132,79],[103,143,132,80],[103,144,133,13,"map"],[103,147,133,16],[103,148,133,17],[103,149,133,18,"entry"],[103,154,133,23],[103,156,133,25,"index"],[103,161,133,30],[103,167,133,36],[104,16,133,38,"x"],[104,17,133,39],[104,19,133,41,"index"],[104,24,133,46],[104,27,133,49],[104,28,133,50],[105,16,133,52,"y"],[105,17,133,53],[105,19,133,55,"entry"],[105,24,133,60],[105,25,133,61],[105,26,133,62],[106,14,133,64],[106,15,133,65],[106,16,133,66],[106,17,133,67],[108,14,135,10],[109,14,136,10],[109,18,136,16,"automationCounts"],[109,34,136,32],[109,37,136,35],[109,41,136,39,"Map"],[109,44,136,42],[109,45,136,89],[109,46,136,90],[110,14,137,10,"executions"],[110,24,137,20],[110,26,137,22,"forEach"],[110,33,137,29],[110,34,137,31,"execution"],[110,43,137,45],[110,47,137,50],[111,16,138,12],[111,20,138,18,"name"],[111,24,138,22],[111,27,138,25,"execution"],[111,36,138,34],[111,37,138,35,"automation"],[111,47,138,45],[111,49,138,47,"name"],[111,53,138,51],[111,57,138,55,"execution"],[111,66,138,64],[111,67,138,65,"automation"],[111,77,138,75],[111,79,138,77,"title"],[111,84,138,82],[111,88,138,86],[111,97,138,95],[112,16,139,12],[112,20,139,18,"current"],[112,27,139,25],[112,30,139,28,"automationCounts"],[112,46,139,44],[112,47,139,45,"get"],[112,50,139,48],[112,51,139,49,"name"],[112,55,139,53],[112,56,139,54],[112,60,139,58],[113,18,139,60,"count"],[113,23,139,65],[113,25,139,67],[113,26,139,68],[114,18,139,70,"totalTime"],[114,27,139,79],[114,29,139,81],[115,16,139,83],[115,17,139,84],[116,16,140,12,"automationCounts"],[116,32,140,28],[116,33,140,29,"set"],[116,36,140,32],[116,37,140,33,"name"],[116,41,140,37],[116,43,140,39],[117,18,141,14,"count"],[117,23,141,19],[117,25,141,21,"current"],[117,32,141,28],[117,33,141,29,"count"],[117,38,141,34],[117,41,141,37],[117,42,141,38],[118,18,142,14,"totalTime"],[118,27,142,23],[118,29,142,25,"current"],[118,36,142,32],[118,37,142,33,"totalTime"],[118,46,142,42],[118,50,142,46,"execution"],[118,59,142,55],[118,60,142,56,"execution_time"],[118,74,142,70],[118,78,142,74],[118,79,142,75],[119,16,143,12],[119,17,143,13],[119,18,143,14],[120,14,144,10],[120,15,144,11],[120,16,144,12],[121,14,146,10],[121,18,146,16,"topAutomations"],[121,32,146,30],[121,35,146,33,"Array"],[121,40,146,38],[121,41,146,39,"from"],[121,45,146,43],[121,46,146,44,"automationCounts"],[121,62,146,60],[121,63,146,61,"entries"],[121,70,146,68],[121,71,146,69],[121,72,146,70],[121,73,146,71],[121,74,147,13,"map"],[121,77,147,16],[121,78,147,17,"_ref4"],[121,83,147,17],[122,16,147,17],[122,20,147,17,"_ref5"],[122,25,147,17],[122,32,147,17,"_slicedToArray2"],[122,47,147,17],[122,48,147,17,"default"],[122,55,147,17],[122,57,147,17,"_ref4"],[122,62,147,17],[123,18,147,19,"name"],[123,22,147,23],[123,25,147,23,"_ref5"],[123,30,147,23],[124,18,147,25,"stats"],[124,23,147,30],[124,26,147,30,"_ref5"],[124,31,147,30],[125,16,147,30],[125,23,147,37],[126,18,148,14,"name"],[126,22,148,18],[127,18,149,14,"executions"],[127,28,149,24],[127,30,149,26,"stats"],[127,35,149,31],[127,36,149,32,"count"],[127,41,149,37],[128,18,150,14,"avgTime"],[128,25,150,21],[128,27,150,23,"stats"],[128,32,150,28],[128,33,150,29,"count"],[128,38,150,34],[128,41,150,37],[128,42,150,38],[128,45,150,41,"Math"],[128,49,150,45],[128,50,150,46,"round"],[128,55,150,51],[128,56,150,53,"stats"],[128,61,150,58],[128,62,150,59,"totalTime"],[128,71,150,68],[128,74,150,71,"stats"],[128,79,150,76],[128,80,150,77,"count"],[128,85,150,82],[128,88,150,86],[128,90,150,88],[128,91,150,89],[128,94,150,92],[128,96,150,94],[128,99,150,97],[129,16,151,12],[129,17,151,13],[130,14,151,13],[130,15,151,14],[130,16,151,15],[130,17,152,13,"sort"],[130,21,152,17],[130,22,152,18],[130,23,152,19,"a"],[130,24,152,20],[130,26,152,22,"b"],[130,27,152,23],[130,32,152,28,"b"],[130,33,152,29],[130,34,152,30,"executions"],[130,44,152,40],[130,47,152,43,"a"],[130,48,152,44],[130,49,152,45,"executions"],[130,59,152,55],[130,60,152,56],[130,61,153,13,"slice"],[130,66,153,18],[130,67,153,19],[130,68,153,20],[130,70,153,22],[130,71,153,23],[130,72,153,24],[132,14,155,10],[133,14,156,10],[133,18,156,16,"totalExecutionTime"],[133,36,156,34],[133,39,156,37,"executions"],[133,49,156,47],[133,51,156,49,"reduce"],[133,57,156,55],[133,58,156,56],[133,59,156,57,"sum"],[133,62,156,68],[133,64,156,70,"e"],[133,65,156,76],[133,70,156,81,"sum"],[133,73,156,84],[133,77,156,88,"e"],[133,78,156,89],[133,79,156,90,"execution_time"],[133,93,156,104],[133,97,156,108],[133,98,156,109],[133,99,156,110],[133,101,156,112],[133,102,156,113],[133,103,156,114],[133,107,156,118],[133,108,156,119],[134,14,157,10],[134,18,157,16,"avgExecutionTime"],[134,34,157,32],[134,37,157,35,"totalExecutions"],[134,52,157,50],[134,55,157,53],[134,56,157,54],[134,59,157,57,"Math"],[134,63,157,61],[134,64,157,62,"round"],[134,69,157,67],[134,70,157,69,"totalExecutionTime"],[134,88,157,87],[134,91,157,90,"totalExecutions"],[134,106,157,105],[134,109,157,109],[134,111,157,111],[134,112,157,112],[134,115,157,115],[134,117,157,117],[134,120,157,120],[134,121,157,121],[135,14,158,10],[135,18,158,16,"timeSaved"],[135,27,158,25],[135,30,158,28,"Math"],[135,34,158,32],[135,35,158,33,"round"],[135,40,158,38],[135,41,158,39,"totalExecutions"],[135,56,158,54],[135,59,158,57],[135,60,158,58],[135,61,158,59],[135,62,158,60],[135,63,158,61],[137,14,160,10],[138,14,161,10],[138,18,161,10,"_yield$supabase$from$2"],[138,40,161,10],[138,49,161,71,"supabase"],[138,65,161,79],[138,66,162,13,"from"],[138,70,162,17],[138,71,162,18],[138,84,162,31],[138,85,162,32],[138,86,163,13,"select"],[138,92,163,19],[138,93,163,20],[138,97,163,24],[138,98,163,25],[138,99,164,13,"eq"],[138,101,164,15],[138,102,164,16],[138,114,164,28],[138,116,164,30,"user"],[138,120,164,34],[138,121,164,35,"id"],[138,123,164,37],[138,124,164,38],[138,125,165,13,"eq"],[138,127,165,15],[138,128,165,16],[138,139,165,27],[138,141,165,29],[138,145,165,33],[138,146,165,34],[138,147,166,13,"abortSignal"],[138,158,166,24],[138,159,166,25,"signal"],[138,165,166,31],[138,166,166,32],[139,16,161,24,"automations"],[139,27,161,35],[139,30,161,35,"_yield$supabase$from$2"],[139,52,161,35],[139,53,161,18,"data"],[139,57,161,22],[140,16,161,44,"automationsError"],[140,32,161,60],[140,35,161,60,"_yield$supabase$from$2"],[140,57,161,60],[140,58,161,37,"error"],[140,63,161,42],[141,14,168,10],[141,18,168,14,"automationsError"],[141,34,168,30],[141,36,168,32],[142,16,169,12,"EventLogger"],[142,40,169,23],[142,41,169,24,"warn"],[142,45,169,28],[142,46,169,29],[142,51,169,34],[142,53,169,36],[142,96,169,79],[142,98,169,81,"automationsError"],[142,114,169,97],[142,115,169,98],[143,14,170,10],[144,14,172,10],[144,18,172,16,"activeAutomations"],[144,35,172,33],[144,38,172,36,"automations"],[144,49,172,47],[144,51,172,49,"length"],[144,57,172,55],[144,61,172,59],[144,62,172,60],[145,14,174,10],[145,21,174,17],[146,16,175,12,"data"],[146,20,175,16],[146,22,175,18],[147,18,176,14,"executionTimeline"],[147,35,176,31],[148,18,177,14,"successRate"],[148,29,177,25],[149,18,178,14,"totalExecutions"],[149,33,178,29],[150,18,179,14,"avgExecutionTime"],[150,34,179,30],[151,18,180,14,"timeSaved"],[151,27,180,23],[152,18,181,14,"activeAutomations"],[152,35,181,31],[153,18,182,14,"topAutomations"],[154,16,183,12],[155,14,184,10],[155,15,184,11],[156,12,185,8],[156,13,185,9],[156,14,185,10],[156,21,185,17,"error"],[156,26,185,27],[156,28,185,29],[157,14,186,10],[157,18,186,14,"error"],[157,23,186,19],[157,24,186,20,"name"],[157,28,186,24],[157,33,186,29],[157,45,186,41],[157,47,186,43],[158,16,187,12],[158,23,187,19],[159,18,187,21,"error"],[159,23,187,26],[159,25,187,28],[160,20,187,30,"status"],[160,26,187,36],[160,28,187,38],[160,39,187,49],[161,20,187,51,"message"],[161,27,187,58],[161,29,187,60],[162,18,187,80],[163,16,187,82],[163,17,187,83],[164,14,188,10],[165,14,190,10,"EventLogger"],[165,38,190,21],[165,39,190,22,"error"],[165,44,190,27],[165,45,190,28],[165,50,190,33],[165,52,190,35],[165,80,190,63],[165,82,190,65,"error"],[165,87,190,79],[165,88,190,80],[166,14,191,10],[166,21,191,17],[167,16,192,12,"error"],[167,21,192,17],[167,23,192,19],[168,18,193,14,"status"],[168,24,193,20],[168,26,193,22],[168,39,193,35],[169,18,194,14,"message"],[169,25,194,21],[169,27,194,23,"error"],[169,32,194,28],[169,33,194,29,"message"],[169,40,194,36],[169,44,194,40],[170,16,195,12],[171,14,196,10],[171,15,196,11],[172,12,197,8],[173,10,198,6],[173,11,198,7],[174,10,198,7],[174,26,57,6,"queryFn"],[174,33,57,13,"queryFn"],[174,34,57,13,"_x"],[174,36,57,13],[174,38,57,13,"_x2"],[174,41,57,13],[175,12,57,13],[175,19,57,13,"_ref3"],[175,24,57,13],[175,25,57,13,"apply"],[175,30,57,13],[175,37,57,13,"arguments"],[175,46,57,13],[176,10,57,13],[177,8,57,13],[177,11,198,7],[178,8,199,6,"providesTags"],[178,20,199,18],[178,22,199,20,"providesTags"],[178,23,199,21,"result"],[178,29,199,27],[178,31,199,29,"error"],[178,36,199,34],[178,38,199,34,"_ref6"],[178,43,199,34],[179,10,199,34],[179,14,199,38,"timeRange"],[179,23,199,47],[179,26,199,47,"_ref6"],[179,31,199,47],[179,32,199,38,"timeRange"],[179,41,199,47],[180,10,199,47],[180,17,199,54],[180,18,200,8],[181,12,200,10,"type"],[181,16,200,14],[181,18,200,16],[181,29,200,27],[182,12,200,29,"id"],[182,14,200,31],[182,16,200,33],[182,28,200,45,"timeRange"],[182,37,200,54],[183,10,200,57],[183,11,200,58],[183,12,201,7],[184,8,201,7],[185,6,202,4],[185,7,202,5],[185,8,202,6],[186,6,204,4],[187,0,205,0],[188,0,206,0],[189,6,207,4,"getExecutionStats"],[189,23,207,21],[189,25,207,23,"builder"],[189,32,207,30],[189,33,207,31,"query"],[189,38,207,36],[189,39,207,81],[190,8,208,6,"queryFn"],[190,15,208,13],[191,10,208,13],[191,14,208,13,"_ref9"],[191,19,208,13],[191,26,208,13,"_asyncToGenerator2"],[191,44,208,13],[191,45,208,13,"default"],[191,52,208,13],[191,54,208,15],[191,65,208,15,"_ref7"],[191,70,208,15],[191,72,208,15,"_ref8"],[191,77,208,15],[191,79,208,52],[192,12,208,52],[192,16,208,24,"timeRange"],[192,25,208,33],[192,28,208,33,"_ref7"],[192,33,208,33],[192,34,208,24,"timeRange"],[192,43,208,33],[193,12,208,33],[193,16,208,39,"signal"],[193,22,208,45],[193,25,208,45,"_ref8"],[193,30,208,45],[193,31,208,39,"signal"],[193,37,208,45],[194,12,209,8],[194,16,209,12],[195,14,210,10],[195,18,210,10,"_yield$supabase$auth$2"],[195,40,210,10],[195,49,210,43,"supabase"],[195,65,210,51],[195,66,210,52,"auth"],[195,70,210,56],[195,71,210,57,"getUser"],[195,78,210,64],[195,79,210,65],[195,80,210,66],[196,16,210,26,"user"],[196,20,210,30],[196,23,210,30,"_yield$supabase$auth$2"],[196,45,210,30],[196,46,210,18,"data"],[196,50,210,22],[196,51,210,26,"user"],[196,55,210,30],[197,14,212,10],[197,18,212,14],[197,19,212,15,"user"],[197,23,212,19],[197,25,212,21],[198,16,213,12],[198,23,213,19],[199,18,213,21,"data"],[199,22,213,25],[199,24,213,27],[200,16,213,30],[200,17,213,31],[201,14,214,10],[203,14,216,10],[204,14,217,10],[205,14,218,12],[205,18,218,18,"endDate"],[205,25,218,25],[205,28,218,28],[205,32,218,32,"Date"],[205,36,218,36],[205,37,218,37],[205,38,218,38],[206,14,219,12],[206,18,219,18,"startDate"],[206,27,219,27],[206,30,219,30],[206,34,219,34,"Date"],[206,38,219,38],[206,39,219,39],[206,40,219,40],[207,14,221,12],[207,22,221,20,"timeRange"],[207,31,221,29],[208,16,222,14],[208,21,222,19],[208,26,222,24],[209,18,223,16,"startDate"],[209,27,223,25],[209,28,223,26,"setHours"],[209,36,223,34],[209,37,223,35,"startDate"],[209,46,223,44],[209,47,223,45,"getHours"],[209,55,223,53],[209,56,223,54],[209,57,223,55],[209,60,223,58],[209,62,223,60],[209,63,223,61],[210,18,224,16],[211,16,225,14],[211,21,225,19],[211,25,225,23],[212,18,226,16,"startDate"],[212,27,226,25],[212,28,226,26,"setDate"],[212,35,226,33],[212,36,226,34,"startDate"],[212,45,226,43],[212,46,226,44,"getDate"],[212,53,226,51],[212,54,226,52],[212,55,226,53],[212,58,226,56],[212,59,226,57],[212,60,226,58],[213,18,227,16],[214,16,228,14],[214,21,228,19],[214,26,228,24],[215,18,229,16,"startDate"],[215,27,229,25],[215,28,229,26,"setDate"],[215,35,229,33],[215,36,229,34,"startDate"],[215,45,229,43],[215,46,229,44,"getDate"],[215,53,229,51],[215,54,229,52],[215,55,229,53],[215,58,229,56],[215,60,229,58],[215,61,229,59],[216,18,230,16],[217,16,231,14],[217,21,231,19],[217,26,231,24],[218,18,232,16,"startDate"],[218,27,232,25],[218,28,232,26,"setFullYear"],[218,39,232,37],[218,40,232,38,"startDate"],[218,49,232,47],[218,50,232,48,"getFullYear"],[218,61,232,59],[218,62,232,60],[218,63,232,61],[218,66,232,64],[218,68,232,66],[218,69,232,67],[219,18,233,16],[220,14,234,12],[221,14,236,12],[221,18,236,12,"_yield$supabase$from$3"],[221,40,236,12],[221,49,236,69,"supabase"],[221,65,236,77],[221,66,237,15,"from"],[221,70,237,19],[221,71,237,20],[221,94,237,43],[221,95,237,44],[221,96,238,15,"select"],[221,102,238,21],[221,103,238,22],[221,106,238,25],[221,107,238,26],[221,108,239,15,"eq"],[221,110,239,17],[221,111,239,18],[221,120,239,27],[221,122,239,29,"user"],[221,126,239,33],[221,127,239,34,"id"],[221,129,239,36],[221,130,239,37],[221,131,240,15,"gte"],[221,134,240,18],[221,135,240,19],[221,147,240,31],[221,149,240,33,"startDate"],[221,158,240,42],[221,159,240,43,"toISOString"],[221,170,240,54],[221,171,240,55],[221,172,240,56],[221,173,240,57],[221,174,241,15,"lte"],[221,177,241,18],[221,178,241,19],[221,190,241,31],[221,192,241,33,"endDate"],[221,199,241,40],[221,200,241,41,"toISOString"],[221,211,241,52],[221,212,241,53],[221,213,241,54],[221,214,241,55],[221,215,242,15,"abortSignal"],[221,226,242,26],[221,227,242,27,"signal"],[221,233,242,33],[221,234,242,34],[222,16,236,26,"executions"],[222,26,236,36],[222,29,236,36,"_yield$supabase$from$3"],[222,51,236,36],[222,52,236,20,"data"],[222,56,236,24],[223,16,236,45,"fallbackError"],[223,29,236,58],[223,32,236,58,"_yield$supabase$from$3"],[223,54,236,58],[223,55,236,38,"error"],[223,60,236,43],[224,14,244,12],[224,18,244,16,"fallbackError"],[224,31,244,29],[224,33,244,31],[225,16,245,14],[225,23,245,21],[226,18,246,16,"error"],[226,23,246,21],[226,25,246,23],[227,20,247,18,"status"],[227,26,247,24],[227,28,247,26],[227,41,247,39],[228,20,248,18,"message"],[228,27,248,25],[228,29,248,27,"fallbackError"],[228,42,248,40],[228,43,248,41,"message"],[228,50,248,48],[228,54,248,52],[228,87,248,85],[229,20,249,18,"code"],[229,24,249,22],[229,26,249,24,"fallbackError"],[229,39,249,37],[229,40,249,38,"code"],[230,18,250,16],[231,16,251,14],[231,17,251,15],[232,14,252,12],[234,14,254,12],[235,14,255,12],[235,18,255,18,"statsByDate"],[235,29,255,29],[235,32,255,32],[235,36,255,36,"Map"],[235,39,255,39],[235,40,255,64],[235,41,255,65],[236,14,257,12,"executions"],[236,24,257,22],[236,26,257,24,"forEach"],[236,33,257,31],[236,34,257,33,"execution"],[236,43,257,47],[236,47,257,52],[237,16,258,14],[237,20,258,20,"date"],[237,24,258,24],[237,27,258,27],[237,31,258,31,"Date"],[237,35,258,35],[237,36,258,36,"execution"],[237,45,258,45],[237,46,258,46,"created_at"],[237,56,258,56],[237,57,258,57],[237,58,258,58,"toDateString"],[237,70,258,70],[237,71,258,71],[237,72,258,72],[238,16,259,14],[238,20,259,20,"existing"],[238,28,259,28],[238,31,259,31,"statsByDate"],[238,42,259,42],[238,43,259,43,"get"],[238,46,259,46],[238,47,259,47,"date"],[238,51,259,51],[238,52,259,52],[238,56,259,56],[239,18,260,16,"date"],[239,22,260,20],[240,18,261,16,"count"],[240,23,261,21],[240,25,261,23],[240,26,261,24],[241,18,262,16,"successful"],[241,28,262,26],[241,30,262,28],[241,31,262,29],[242,18,263,16,"failed"],[242,24,263,22],[242,26,263,24],[242,27,263,25],[243,18,264,16,"avg_duration"],[243,30,264,28],[243,32,264,30],[244,16,265,14],[244,17,265,15],[245,16,267,14,"existing"],[245,24,267,22],[245,25,267,23,"count"],[245,30,267,28],[245,34,267,32],[245,35,267,33],[246,16,268,14],[246,20,268,18,"execution"],[246,29,268,27],[246,30,268,28,"status"],[246,36,268,34],[246,41,268,39],[246,50,268,48],[246,52,268,50],[247,18,269,16,"existing"],[247,26,269,24],[247,27,269,25,"successful"],[247,37,269,35],[247,41,269,39],[247,42,269,40],[248,16,270,14],[248,17,270,15],[248,23,270,21],[249,18,271,16,"existing"],[249,26,271,24],[249,27,271,25,"failed"],[249,33,271,31],[249,37,271,35],[249,38,271,36],[250,16,272,14],[251,16,274,14,"statsByDate"],[251,27,274,25],[251,28,274,26,"set"],[251,31,274,29],[251,32,274,30,"date"],[251,36,274,34],[251,38,274,36,"existing"],[251,46,274,44],[251,47,274,45],[252,14,275,12],[252,15,275,13],[252,16,275,14],[253,14,277,12],[253,21,277,19],[254,16,277,21,"data"],[254,20,277,25],[254,22,277,27,"Array"],[254,27,277,32],[254,28,277,33,"from"],[254,32,277,37],[254,33,277,38,"statsByDate"],[254,44,277,49],[254,45,277,50,"values"],[254,51,277,56],[254,52,277,57],[254,53,277,58],[255,14,277,60],[255,15,277,61],[256,12,278,8],[256,13,278,9],[256,14,278,10],[256,21,278,17,"error"],[256,26,278,27],[256,28,278,29],[257,14,279,10],[257,18,279,14,"error"],[257,23,279,19],[257,24,279,20,"name"],[257,28,279,24],[257,33,279,29],[257,45,279,41],[257,47,279,43],[258,16,280,12],[258,23,280,19],[259,18,280,21,"error"],[259,23,280,26],[259,25,280,28],[260,20,280,30,"status"],[260,26,280,36],[260,28,280,38],[260,39,280,49],[261,20,280,51,"message"],[261,27,280,58],[261,29,280,60],[262,18,280,80],[263,16,280,82],[263,17,280,83],[264,14,281,10],[265,14,283,10,"EventLogger"],[265,38,283,21],[265,39,283,22,"error"],[265,44,283,27],[265,45,283,28],[265,50,283,33],[265,52,283,35],[265,86,283,69],[265,88,283,71,"error"],[265,93,283,85],[265,94,283,86],[266,14,284,10],[266,21,284,17],[267,16,285,12,"error"],[267,21,285,17],[267,23,285,19],[268,18,286,14,"status"],[268,24,286,20],[268,26,286,22],[268,39,286,35],[269,18,287,14,"message"],[269,25,287,21],[269,27,287,23,"error"],[269,32,287,28],[269,33,287,29,"message"],[269,40,287,36],[269,44,287,40],[270,16,288,12],[271,14,289,10],[271,15,289,11],[272,12,290,8],[273,10,291,6],[273,11,291,7],[274,10,291,7],[274,26,208,6,"queryFn"],[274,33,208,13,"queryFn"],[274,34,208,13,"_x3"],[274,37,208,13],[274,39,208,13,"_x4"],[274,42,208,13],[275,12,208,13],[275,19,208,13,"_ref9"],[275,24,208,13],[275,25,208,13,"apply"],[275,30,208,13],[275,37,208,13,"arguments"],[275,46,208,13],[276,10,208,13],[277,8,208,13],[277,11,291,7],[278,8,292,6,"providesTags"],[278,20,292,18],[278,22,292,20,"providesTags"],[278,23,292,21,"result"],[278,29,292,27],[278,31,292,29,"error"],[278,36,292,34],[278,38,292,34,"_ref0"],[278,43,292,34],[279,10,292,34],[279,14,292,38,"timeRange"],[279,23,292,47],[279,26,292,47,"_ref0"],[279,31,292,47],[279,32,292,38,"timeRange"],[279,41,292,47],[280,10,292,47],[280,17,292,54],[280,18,293,8],[281,12,293,10,"type"],[281,16,293,14],[281,18,293,16],[281,29,293,27],[282,12,293,29,"id"],[282,14,293,31],[282,16,293,33],[282,25,293,42,"timeRange"],[282,34,293,51],[283,10,293,54],[283,11,293,55],[283,12,294,7],[284,8,294,7],[285,6,295,4],[285,7,295,5],[285,8,295,6],[286,6,297,4],[287,0,298,0],[288,0,299,0],[289,6,300,4,"getAutomationMetrics"],[289,26,300,24],[289,28,300,26,"builder"],[289,35,300,33],[289,36,300,34,"query"],[289,41,300,39],[289,42,300,85],[290,8,301,6,"queryFn"],[290,15,301,13],[291,10,301,13],[291,14,301,13,"_ref11"],[291,20,301,13],[291,27,301,13,"_asyncToGenerator2"],[291,45,301,13],[291,46,301,13,"default"],[291,53,301,13],[291,55,301,15],[291,66,301,15,"_ref1"],[291,71,301,15],[291,73,301,15,"_ref10"],[291,79,301,15],[291,81,301,55],[292,12,301,55],[292,16,301,24,"automationId"],[292,28,301,36],[292,31,301,36,"_ref1"],[292,36,301,36],[292,37,301,24,"automationId"],[292,49,301,36],[293,12,301,36],[293,16,301,42,"signal"],[293,22,301,48],[293,25,301,48,"_ref10"],[293,31,301,48],[293,32,301,42,"signal"],[293,38,301,48],[294,12,302,8],[294,16,302,12],[295,14,303,10],[295,18,303,10,"_yield$supabase$from$4"],[295,40,303,10],[295,49,303,52,"supabase"],[295,65,303,60],[295,66,304,13,"from"],[295,70,304,17],[295,71,304,18],[295,94,304,41],[295,95,304,42],[295,96,305,13,"select"],[295,102,305,19],[295,103,305,20],[295,106,305,23],[295,107,305,24],[295,108,306,13,"eq"],[295,110,306,15],[295,111,306,16],[295,126,306,31],[295,128,306,33,"automationId"],[295,140,306,45],[295,141,306,46],[295,142,307,13,"order"],[295,147,307,18],[295,148,307,19],[295,160,307,31],[295,162,307,33],[296,18,307,35,"ascending"],[296,27,307,44],[296,29,307,46],[297,16,307,52],[297,17,307,53],[297,18,307,54],[297,19,308,13,"limit"],[297,24,308,18],[297,25,308,19],[297,28,308,22],[297,29,308,23],[297,30,309,13,"abortSignal"],[297,41,309,24],[297,42,309,25,"signal"],[297,48,309,31],[297,49,309,32],[298,16,303,24,"executions"],[298,26,303,34],[298,29,303,34,"_yield$supabase$from$4"],[298,51,303,34],[298,52,303,18,"data"],[298,56,303,22],[299,16,303,36,"error"],[299,21,303,41],[299,24,303,41,"_yield$supabase$from$4"],[299,46,303,41],[299,47,303,36,"error"],[299,52,303,41],[300,14,311,10],[300,18,311,14,"error"],[300,23,311,19],[300,25,311,21],[301,16,312,12,"EventLogger"],[301,40,312,23],[301,41,312,24,"error"],[301,46,312,29],[301,47,312,30],[301,52,312,35],[301,54,312,37],[301,90,312,73],[301,92,312,75,"error"],[301,97,312,89],[301,98,312,90],[302,16,313,12],[302,23,313,19],[303,18,314,14,"error"],[303,23,314,19],[303,25,314,21],[304,20,315,16,"status"],[304,26,315,22],[304,28,315,24],[304,41,315,37],[305,20,316,16,"message"],[305,27,316,23],[305,29,316,25,"error"],[305,34,316,30],[305,35,316,31,"message"],[305,42,316,38],[305,46,316,42],[305,82,316,78],[306,20,317,16,"code"],[306,24,317,20],[306,26,317,22,"error"],[306,31,317,27],[306,32,317,28,"code"],[307,18,318,14],[308,16,319,12],[308,17,319,13],[309,14,320,10],[310,14,322,10],[310,18,322,16,"total"],[310,23,322,21],[310,26,322,24,"executions"],[310,36,322,34],[310,38,322,36,"length"],[310,44,322,42],[310,48,322,46],[310,49,322,47],[311,14,323,10],[311,18,323,16,"successful"],[311,28,323,26],[311,31,323,29,"executions"],[311,41,323,39],[311,43,323,41,"filter"],[311,49,323,47],[311,50,323,48,"e"],[311,51,323,49],[311,55,323,53,"e"],[311,56,323,54],[311,57,323,55,"status"],[311,63,323,61],[311,68,323,66],[311,77,323,75],[311,78,323,76],[311,79,323,77,"length"],[311,85,323,83],[311,89,323,87],[311,90,323,88],[312,14,324,10],[312,18,324,16,"totalTime"],[312,27,324,25],[312,30,324,28,"executions"],[312,40,324,38],[312,42,324,40,"reduce"],[312,48,324,46],[312,49,324,47],[312,50,324,48,"sum"],[312,53,324,51],[312,55,324,53,"e"],[312,56,324,54],[312,61,324,59,"sum"],[312,64,324,62],[312,68,324,66,"e"],[312,69,324,67],[312,70,324,68,"execution_time"],[312,84,324,82],[312,88,324,86],[312,89,324,87],[312,90,324,88],[312,92,324,90],[312,93,324,91],[312,94,324,92],[312,98,324,96],[312,99,324,97],[313,14,326,10],[313,21,326,17],[314,16,327,12,"data"],[314,20,327,16],[314,22,327,18],[315,18,328,14,"totalRuns"],[315,27,328,23],[315,29,328,25,"total"],[315,34,328,30],[316,18,329,14,"successRate"],[316,29,329,25],[316,31,329,27,"total"],[316,36,329,32],[316,39,329,35],[316,40,329,36],[316,43,329,39,"Math"],[316,47,329,43],[316,48,329,44,"round"],[316,53,329,49],[316,54,329,51,"successful"],[316,64,329,61],[316,67,329,64,"total"],[316,72,329,69],[316,75,329,73],[316,78,329,76],[316,79,329,77],[316,82,329,80],[316,83,329,81],[317,18,330,14,"avgExecutionTime"],[317,34,330,30],[317,36,330,32,"total"],[317,41,330,37],[317,44,330,40],[317,45,330,41],[317,48,330,44,"Math"],[317,52,330,48],[317,53,330,49,"round"],[317,58,330,54],[317,59,330,56,"totalTime"],[317,68,330,65],[317,71,330,68,"total"],[317,76,330,73],[317,79,330,77],[317,81,330,79],[317,82,330,80],[317,85,330,83],[317,87,330,85],[317,90,330,88],[317,91,330,89],[318,18,331,14,"lastRun"],[318,25,331,21],[318,27,331,23,"executions"],[318,37,331,33],[318,40,331,36],[318,41,331,37],[318,42,331,38],[318,44,331,40,"created_at"],[318,54,331,50],[319,18,332,14,"executions"],[319,28,332,24],[319,30,332,26,"executions"],[319,40,332,36],[319,42,332,38,"slice"],[319,47,332,43],[319,48,332,44],[319,49,332,45],[319,51,332,47],[319,53,332,49],[319,54,332,50],[319,58,332,54],[319,60,332,56],[319,61,332,58],[320,16,333,12],[321,14,334,10],[321,15,334,11],[322,12,335,8],[322,13,335,9],[322,14,335,10],[322,21,335,17,"error"],[322,26,335,27],[322,28,335,29],[323,14,336,10],[323,18,336,14,"error"],[323,23,336,19],[323,24,336,20,"name"],[323,28,336,24],[323,33,336,29],[323,45,336,41],[323,47,336,43],[324,16,337,12],[324,23,337,19],[325,18,337,21,"error"],[325,23,337,26],[325,25,337,28],[326,20,337,30,"status"],[326,26,337,36],[326,28,337,38],[326,39,337,49],[327,20,337,51,"message"],[327,27,337,58],[327,29,337,60],[328,18,337,80],[329,16,337,82],[329,17,337,83],[330,14,338,10],[331,14,340,10,"EventLogger"],[331,38,340,21],[331,39,340,22,"error"],[331,44,340,27],[331,45,340,28],[331,50,340,33],[331,52,340,35],[331,89,340,72],[331,91,340,74,"error"],[331,96,340,88],[331,97,340,89],[332,14,341,10],[332,21,341,17],[333,16,342,12,"error"],[333,21,342,17],[333,23,342,19],[334,18,343,14,"status"],[334,24,343,20],[334,26,343,22],[334,39,343,35],[335,18,344,14,"message"],[335,25,344,21],[335,27,344,23,"error"],[335,32,344,28],[335,33,344,29,"message"],[335,40,344,36],[335,44,344,40],[336,16,345,12],[337,14,346,10],[337,15,346,11],[338,12,347,8],[339,10,348,6],[339,11,348,7],[340,10,348,7],[340,26,301,6,"queryFn"],[340,33,301,13,"queryFn"],[340,34,301,13,"_x5"],[340,37,301,13],[340,39,301,13,"_x6"],[340,42,301,13],[341,12,301,13],[341,19,301,13,"_ref11"],[341,25,301,13],[341,26,301,13,"apply"],[341,31,301,13],[341,38,301,13,"arguments"],[341,47,301,13],[342,10,301,13],[343,8,301,13],[343,11,348,7],[344,8,349,6,"providesTags"],[344,20,349,18],[344,22,349,20,"providesTags"],[344,23,349,21,"result"],[344,29,349,27],[344,31,349,29,"error"],[344,36,349,34],[344,38,349,34,"_ref12"],[344,44,349,34],[345,10,349,34],[345,14,349,38,"automationId"],[345,26,349,50],[345,29,349,50,"_ref12"],[345,35,349,50],[345,36,349,38,"automationId"],[345,48,349,50],[346,10,349,50],[346,17,349,57],[346,18,350,8],[347,12,350,10,"type"],[347,16,350,14],[347,18,350,16],[347,27,350,25],[348,12,350,27,"id"],[348,14,350,29],[348,16,350,31,"automationId"],[349,10,350,44],[349,11,350,45],[349,12,351,7],[350,8,351,7],[351,6,352,4],[351,7,352,5],[351,8,352,6],[352,6,354,4],[353,0,355,0],[354,0,356,0],[355,6,357,4,"getSystemAnalytics"],[355,24,357,22],[355,26,357,24,"builder"],[355,33,357,31],[355,34,357,32,"query"],[355,39,357,37],[355,40,357,49],[356,8,358,6,"queryFn"],[356,15,358,13],[357,10,358,13],[357,14,358,13,"_ref14"],[357,20,358,13],[357,27,358,13,"_asyncToGenerator2"],[357,45,358,13],[357,46,358,13,"default"],[357,53,358,13],[357,55,358,15],[357,66,358,22,"_"],[357,67,358,23],[357,69,358,23,"_ref13"],[357,75,358,23],[357,77,358,40],[358,12,358,40],[358,16,358,27,"signal"],[358,22,358,33],[358,25,358,33,"_ref13"],[358,31,358,33],[358,32,358,27,"signal"],[358,38,358,33],[359,12,359,8],[359,16,359,12],[360,14,360,10],[360,18,360,10,"_yield$supabase$auth$3"],[360,40,360,10],[360,49,360,43,"supabase"],[360,65,360,51],[360,66,360,52,"auth"],[360,70,360,56],[360,71,360,57,"getUser"],[360,78,360,64],[360,79,360,65],[360,80,360,66],[361,16,360,26,"user"],[361,20,360,30],[361,23,360,30,"_yield$supabase$auth$3"],[361,45,360,30],[361,46,360,18,"data"],[361,50,360,22],[361,51,360,26,"user"],[361,55,360,30],[362,14,362,10],[362,18,362,14],[362,19,362,15,"user"],[362,23,362,19],[362,25,362,21],[363,16,363,12],[363,23,363,19],[364,18,364,14,"error"],[364,23,364,19],[364,25,364,21],[365,20,365,16,"status"],[365,26,365,22],[365,28,365,24],[365,42,365,38],[366,20,366,16,"message"],[366,27,366,23],[366,29,366,25],[367,18,367,14],[368,16,368,12],[368,17,368,13],[369,14,369,10],[371,14,371,10],[372,14,372,10],[373,14,373,10],[373,21,373,17],[374,16,374,12,"data"],[374,20,374,16],[374,22,374,18],[375,18,375,14,"total_users"],[375,29,375,25],[375,31,375,27],[375,32,375,28],[376,18,376,14,"total_automations"],[376,35,376,31],[376,37,376,33],[376,38,376,34],[377,18,377,14,"total_executions"],[377,34,377,30],[377,36,377,32],[377,37,377,33],[378,18,378,14,"active_users_today"],[378,36,378,32],[378,38,378,34],[378,39,378,35],[379,18,379,14,"new_users_this_week"],[379,37,379,33],[379,39,379,35],[379,40,379,36],[380,18,380,14,"popular_categories"],[380,36,380,32],[380,38,380,34],[380,40,380,36],[381,18,381,14,"system_health"],[381,31,381,27],[381,33,381,29],[382,16,382,12],[383,14,383,10],[383,15,383,11],[384,12,384,8],[384,13,384,9],[384,14,384,10],[384,21,384,17,"error"],[384,26,384,27],[384,28,384,29],[385,14,385,10],[385,18,385,14,"error"],[385,23,385,19],[385,24,385,20,"name"],[385,28,385,24],[385,33,385,29],[385,45,385,41],[385,47,385,43],[386,16,386,12],[386,23,386,19],[387,18,386,21,"error"],[387,23,386,26],[387,25,386,28],[388,20,386,30,"status"],[388,26,386,36],[388,28,386,38],[388,39,386,49],[389,20,386,51,"message"],[389,27,386,58],[389,29,386,60],[390,18,386,80],[391,16,386,82],[391,17,386,83],[392,14,387,10],[393,14,389,10,"EventLogger"],[393,38,389,21],[393,39,389,22,"error"],[393,44,389,27],[393,45,389,28],[393,50,389,33],[393,52,389,35],[393,87,389,70],[393,89,389,72,"error"],[393,94,389,86],[393,95,389,87],[394,14,390,10],[394,21,390,17],[395,16,391,12,"error"],[395,21,391,17],[395,23,391,19],[396,18,392,14,"status"],[396,24,392,20],[396,26,392,22],[396,39,392,35],[397,18,393,14,"message"],[397,25,393,21],[397,27,393,23,"error"],[397,32,393,28],[397,33,393,29,"message"],[397,40,393,36],[397,44,393,40],[398,16,394,12],[399,14,395,10],[399,15,395,11],[400,12,396,8],[401,10,397,6],[401,11,397,7],[402,10,397,7],[402,26,358,6,"queryFn"],[402,33,358,13,"queryFn"],[402,34,358,13,"_x7"],[402,37,358,13],[402,39,358,13,"_x8"],[402,42,358,13],[403,12,358,13],[403,19,358,13,"_ref14"],[403,25,358,13],[403,26,358,13,"apply"],[403,31,358,13],[403,38,358,13,"arguments"],[403,47,358,13],[404,10,358,13],[405,8,358,13],[405,11,397,7],[406,8,398,6,"providesTags"],[406,20,398,18],[406,22,398,20],[406,23,398,21],[407,10,398,23,"type"],[407,14,398,27],[407,16,398,29],[407,27,398,40],[408,10,398,42,"id"],[408,12,398,44],[408,14,398,46],[409,8,398,55],[409,9,398,56],[410,6,399,4],[410,7,399,5],[411,4,400,2],[411,5,400,3],[412,2,401,0],[412,3,401,1],[412,4,401,2],[414,2,403,0],[415,2,404,7],[415,6,405,2,"useGetAnalyticsQuery"],[415,26,405,22],[415,29,405,22,"exports"],[415,36,405,22],[415,37,405,22,"useGetAnalyticsQuery"],[415,57,405,22],[415,60,409,4,"analyticsApi"],[415,72,409,16],[415,73,405,2,"useGetAnalyticsQuery"],[415,93,405,22],[416,4,406,2,"useGetExecutionStatsQuery"],[416,29,406,27],[416,32,406,27,"exports"],[416,39,406,27],[416,40,406,27,"useGetExecutionStatsQuery"],[416,65,406,27],[416,68,409,4,"analyticsApi"],[416,80,409,16],[416,81,406,2,"useGetExecutionStatsQuery"],[416,106,406,27],[417,4,407,2,"useGetAutomationMetricsQuery"],[417,32,407,30],[417,35,407,30,"exports"],[417,42,407,30],[417,43,407,30,"useGetAutomationMetricsQuery"],[417,71,407,30],[417,74,409,4,"analyticsApi"],[417,86,409,16],[417,87,407,2,"useGetAutomationMetricsQuery"],[417,115,407,30],[418,4,408,2,"useGetSystemAnalyticsQuery"],[418,30,408,28],[418,33,408,28,"exports"],[418,40,408,28],[418,41,408,28,"useGetSystemAnalyticsQuery"],[418,67,408,28],[418,70,409,4,"analyticsApi"],[418,82,409,16],[418,83,408,2,"useGetSystemAnalyticsQuery"],[418,109,408,28],[419,0,409,17],[419,3]],"functionMap":{"names":["<global>","createApi$argument_0.endpoints","builder.query$argument_0.queryFn","executions.filter$argument_0","executions.forEach$argument_0","Array.from.sort$argument_0","Array.from.sort.map$argument_0","Array.from.map$argument_0","Array.from.map.sort$argument_0","executions.reduce$argument_0","builder.query$argument_0.providesTags"],"mappings":"AAA;aCmD;eCK;0DCgE,kCD;8BEK;WFG;kBGG,6DH;iBIC,iDJ;8BEI;WFO;iBKG;cLI;kBMC,qCN;wDOI,sDP;OD0C;oBSC;OTE;eCO;gCEiD;aFkB;ODgB;oBSC;OTE;eCO;gDCsB,2BD;+COC,yCP;ODwB;oBSC;OTE;eCO;ODuC;IDG"}},"type":"js/module"}]}