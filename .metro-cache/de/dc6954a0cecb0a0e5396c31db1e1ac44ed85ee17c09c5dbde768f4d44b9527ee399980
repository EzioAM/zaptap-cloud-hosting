{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"./util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":11,"index":11},"end":{"line":1,"column":28,"index":28}}],"key":"hA8WsniBZrUJ/dmBZgrNdZcEmJ8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _toConsumableArray = require(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  var util = require(_dependencyMap[1], \"./util\");\n  var CREDENTIAL_FIELD_ID = [0x10, 0x0e];\n  var SSID_FIELD_ID = [0x10, 0x45];\n  var AUTH_TYPE_FIELD_ID = [0x10, 0x03];\n  var NETWORK_KEY_FIELD_ID = [0x10, 0x27];\n  var AUTH_TYPES = {\n    OPEN: [0x00, 0x00],\n    WPA2_PSK: [0x00, 0x20]\n  };\n  function _getLengthBytes(valueBytes) {\n    if (valueBytes.length > 255) {\n      return [Math.floor(valueBytes.length / 256), valueBytes.length % 256];\n    }\n    return [0x0, valueBytes.length];\n  }\n  function _arrayEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    for (var i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function _getNextTLV(bytes) {\n    var type = bytes.slice(0, 2);\n    var length = bytes.slice(2, 4);\n    var value = bytes.slice(4, 4 + (length[0] * 256 + length[1]));\n    return {\n      type: type,\n      length: length,\n      value: value\n    };\n  }\n\n  // @returns an string of wifi credentials\n  function decode(bytes) {\n    var result = {};\n    while (bytes.length > 0) {\n      var _getNextTLV2 = _getNextTLV(bytes),\n        type = _getNextTLV2.type,\n        value = _getNextTLV2.value;\n      bytes = bytes.slice(4 + value.length, bytes.length);\n      if (_arrayEqual(CREDENTIAL_FIELD_ID, type)) {\n        var credential = value;\n        while (credential.length > 0) {\n          var tlv = _getNextTLV(credential);\n          credential = credential.slice(4 + tlv.value.length, credential.length);\n          if (_arrayEqual(AUTH_TYPE_FIELD_ID, tlv.type)) {\n            result.authType = tlv.value;\n          } else if (_arrayEqual(SSID_FIELD_ID, tlv.type)) {\n            result.ssid = util.bytesToString(tlv.value);\n          } else if (_arrayEqual(NETWORK_KEY_FIELD_ID, tlv.type)) {\n            result.networkKey = util.bytesToString(tlv.value);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  // encode wifi object payload\n  // @returns an array of bytes\n  function encode(_ref) {\n    var ssid = _ref.ssid,\n      networkKey = _ref.networkKey,\n      _ref$authType = _ref.authType,\n      authType = _ref$authType === void 0 ? AUTH_TYPES.WPA2_PSK : _ref$authType;\n    if (typeof ssid !== 'string' || typeof networkKey !== 'string') {\n      throw new Error('');\n    }\n    ssid = util.stringToBytes(ssid);\n    networkKey = util.stringToBytes(networkKey);\n\n    // build seperated TLV\n    var authTypeTLV = [].concat(AUTH_TYPE_FIELD_ID, [0x0, authType.length], _toConsumableArray(authType));\n    var ssidTLV = [].concat(SSID_FIELD_ID, [0x0, ssid.length], _toConsumableArray(ssid));\n    var networkKeyTLV = [].concat(NETWORK_KEY_FIELD_ID, [0x0, networkKey.length], _toConsumableArray(networkKey));\n\n    // build credential TLV\n    var credentialValue = [].concat(_toConsumableArray(authTypeTLV), _toConsumableArray(ssidTLV), _toConsumableArray(networkKeyTLV));\n    var credentialTLV = [].concat(CREDENTIAL_FIELD_ID, _toConsumableArray(_getLengthBytes(credentialValue)), _toConsumableArray(credentialValue));\n    return credentialTLV;\n  }\n  module.exports = {\n    encodePayload: encode,\n    decodePayload: decode,\n    authTypes: AUTH_TYPES\n  };\n});","lineCount":94,"map":[[3,2,1,0],[3,6,1,4,"util"],[3,10,1,8],[3,13,1,11,"require"],[3,20,1,18],[3,21,1,18,"_dependencyMap"],[3,35,1,18],[3,48,1,27],[3,49,1,28],[4,2,3,0],[4,6,3,6,"CREDENTIAL_FIELD_ID"],[4,25,3,25],[4,28,3,28],[4,29,3,29],[4,33,3,33],[4,35,3,35],[4,39,3,39],[4,40,3,40],[5,2,4,0],[5,6,4,6,"SSID_FIELD_ID"],[5,19,4,19],[5,22,4,22],[5,23,4,23],[5,27,4,27],[5,29,4,29],[5,33,4,33],[5,34,4,34],[6,2,5,0],[6,6,5,6,"AUTH_TYPE_FIELD_ID"],[6,24,5,24],[6,27,5,27],[6,28,5,28],[6,32,5,32],[6,34,5,34],[6,38,5,38],[6,39,5,39],[7,2,6,0],[7,6,6,6,"NETWORK_KEY_FIELD_ID"],[7,26,6,26],[7,29,6,29],[7,30,6,30],[7,34,6,34],[7,36,6,36],[7,40,6,40],[7,41,6,41],[8,2,8,0],[8,6,8,6,"AUTH_TYPES"],[8,16,8,16],[8,19,8,19],[9,4,9,2,"OPEN"],[9,8,9,6],[9,10,9,8],[9,11,9,9],[9,15,9,13],[9,17,9,15],[9,21,9,19],[9,22,9,20],[10,4,10,2,"WPA2_PSK"],[10,12,10,10],[10,14,10,12],[10,15,10,13],[10,19,10,17],[10,21,10,19],[10,25,10,23],[11,2,11,0],[11,3,11,1],[12,2,13,0],[12,11,13,9,"_getLengthBytes"],[12,26,13,24,"_getLengthBytes"],[12,27,13,25,"valueBytes"],[12,37,13,35],[12,39,13,37],[13,4,14,2],[13,8,14,6,"valueBytes"],[13,18,14,16],[13,19,14,17,"length"],[13,25,14,23],[13,28,14,26],[13,31,14,29],[13,33,14,31],[14,6,15,4],[14,13,15,11],[14,14,15,12,"Math"],[14,18,15,16],[14,19,15,17,"floor"],[14,24,15,22],[14,25,15,23,"valueBytes"],[14,35,15,33],[14,36,15,34,"length"],[14,42,15,40],[14,45,15,43],[14,48,15,46],[14,49,15,47],[14,51,15,49,"valueBytes"],[14,61,15,59],[14,62,15,60,"length"],[14,68,15,66],[14,71,15,69],[14,74,15,72],[14,75,15,73],[15,4,16,2],[16,4,17,2],[16,11,17,9],[16,12,17,10],[16,15,17,13],[16,17,17,15,"valueBytes"],[16,27,17,25],[16,28,17,26,"length"],[16,34,17,32],[16,35,17,33],[17,2,18,0],[18,2,20,0],[18,11,20,9,"_arrayEqual"],[18,22,20,20,"_arrayEqual"],[18,23,20,21,"arr1"],[18,27,20,25],[18,29,20,27,"arr2"],[18,33,20,31],[18,35,20,33],[19,4,21,2],[19,8,21,6,"arr1"],[19,12,21,10],[19,13,21,11,"length"],[19,19,21,17],[19,24,21,22,"arr2"],[19,28,21,26],[19,29,21,27,"length"],[19,35,21,33],[19,37,21,35],[20,6,22,4],[20,13,22,11],[20,18,22,16],[21,4,23,2],[22,4,25,2],[22,9,25,7],[22,13,25,11,"i"],[22,14,25,12],[22,17,25,15],[22,18,25,16],[22,20,25,18,"i"],[22,21,25,19],[22,24,25,22,"arr1"],[22,28,25,26],[22,29,25,27,"length"],[22,35,25,33],[22,37,25,35,"i"],[22,38,25,36],[22,40,25,38],[22,42,25,40],[23,6,26,4],[23,10,26,8,"arr1"],[23,14,26,12],[23,15,26,13,"i"],[23,16,26,14],[23,17,26,15],[23,22,26,20,"arr2"],[23,26,26,24],[23,27,26,25,"i"],[23,28,26,26],[23,29,26,27],[23,31,26,29],[24,8,27,6],[24,15,27,13],[24,20,27,18],[25,6,28,4],[26,4,29,2],[27,4,31,2],[27,11,31,9],[27,15,31,13],[28,2,32,0],[29,2,34,0],[29,11,34,9,"_getNextTLV"],[29,22,34,20,"_getNextTLV"],[29,23,34,21,"bytes"],[29,28,34,26],[29,30,34,28],[30,4,35,2],[30,8,35,8,"type"],[30,12,35,12],[30,15,35,15,"bytes"],[30,20,35,20],[30,21,35,21,"slice"],[30,26,35,26],[30,27,35,27],[30,28,35,28],[30,30,35,30],[30,31,35,31],[30,32,35,32],[31,4,36,2],[31,8,36,8,"length"],[31,14,36,14],[31,17,36,17,"bytes"],[31,22,36,22],[31,23,36,23,"slice"],[31,28,36,28],[31,29,36,29],[31,30,36,30],[31,32,36,32],[31,33,36,33],[31,34,36,34],[32,4,37,2],[32,8,37,8,"value"],[32,13,37,13],[32,16,37,16,"bytes"],[32,21,37,21],[32,22,37,22,"slice"],[32,27,37,27],[32,28,37,28],[32,29,37,29],[32,31,37,31],[32,32,37,32],[32,36,37,36,"length"],[32,42,37,42],[32,43,37,43],[32,44,37,44],[32,45,37,45],[32,48,37,48],[32,51,37,51],[32,54,37,54,"length"],[32,60,37,60],[32,61,37,61],[32,62,37,62],[32,63,37,63],[32,64,37,64],[32,65,37,65],[33,4,38,2],[33,11,38,9],[34,6,39,4,"type"],[34,10,39,8],[34,12,39,4,"type"],[34,16,39,8],[35,6,40,4,"length"],[35,12,40,10],[35,14,40,4,"length"],[35,20,40,10],[36,6,41,4,"value"],[36,11,41,9],[36,13,41,4,"value"],[37,4,42,2],[37,5,42,3],[38,2,43,0],[40,2,45,0],[41,2,46,0],[41,11,46,9,"decode"],[41,17,46,15,"decode"],[41,18,46,16,"bytes"],[41,23,46,21],[41,25,46,23],[42,4,47,2],[42,8,47,6,"result"],[42,14,47,12],[42,17,47,15],[42,18,47,16],[42,19,47,17],[43,4,49,2],[43,11,49,9,"bytes"],[43,16,49,14],[43,17,49,15,"length"],[43,23,49,21],[43,26,49,24],[43,27,49,25],[43,29,49,27],[44,6,50,4],[44,10,50,4,"_getNextTLV2"],[44,22,50,4],[44,25,50,24,"_getNextTLV"],[44,36,50,35],[44,37,50,36,"bytes"],[44,42,50,41],[44,43,50,42],[45,8,50,9,"type"],[45,12,50,13],[45,15,50,13,"_getNextTLV2"],[45,27,50,13],[45,28,50,9,"type"],[45,32,50,13],[46,8,50,15,"value"],[46,13,50,20],[46,16,50,20,"_getNextTLV2"],[46,28,50,20],[46,29,50,15,"value"],[46,34,50,20],[47,6,51,4,"bytes"],[47,11,51,9],[47,14,51,12,"bytes"],[47,19,51,17],[47,20,51,18,"slice"],[47,25,51,23],[47,26,51,24],[47,27,51,25],[47,30,51,28,"value"],[47,35,51,33],[47,36,51,34,"length"],[47,42,51,40],[47,44,51,42,"bytes"],[47,49,51,47],[47,50,51,48,"length"],[47,56,51,54],[47,57,51,55],[48,6,53,4],[48,10,53,8,"_arrayEqual"],[48,21,53,19],[48,22,53,20,"CREDENTIAL_FIELD_ID"],[48,41,53,39],[48,43,53,41,"type"],[48,47,53,45],[48,48,53,46],[48,50,53,48],[49,8,54,6],[49,12,54,10,"credential"],[49,22,54,20],[49,25,54,23,"value"],[49,30,54,28],[50,8,56,6],[50,15,56,13,"credential"],[50,25,56,23],[50,26,56,24,"length"],[50,32,56,30],[50,35,56,33],[50,36,56,34],[50,38,56,36],[51,10,57,8],[51,14,57,12,"tlv"],[51,17,57,15],[51,20,57,18,"_getNextTLV"],[51,31,57,29],[51,32,57,30,"credential"],[51,42,57,40],[51,43,57,41],[52,10,58,8,"credential"],[52,20,58,18],[52,23,58,21,"credential"],[52,33,58,31],[52,34,58,32,"slice"],[52,39,58,37],[52,40,58,38],[52,41,58,39],[52,44,58,42,"tlv"],[52,47,58,45],[52,48,58,46,"value"],[52,53,58,51],[52,54,58,52,"length"],[52,60,58,58],[52,62,58,60,"credential"],[52,72,58,70],[52,73,58,71,"length"],[52,79,58,77],[52,80,58,78],[53,10,60,8],[53,14,60,12,"_arrayEqual"],[53,25,60,23],[53,26,60,24,"AUTH_TYPE_FIELD_ID"],[53,44,60,42],[53,46,60,44,"tlv"],[53,49,60,47],[53,50,60,48,"type"],[53,54,60,52],[53,55,60,53],[53,57,60,55],[54,12,61,10,"result"],[54,18,61,16],[54,19,61,17,"authType"],[54,27,61,25],[54,30,61,28,"tlv"],[54,33,61,31],[54,34,61,32,"value"],[54,39,61,37],[55,10,62,8],[55,11,62,9],[55,17,62,15],[55,21,62,19,"_arrayEqual"],[55,32,62,30],[55,33,62,31,"SSID_FIELD_ID"],[55,46,62,44],[55,48,62,46,"tlv"],[55,51,62,49],[55,52,62,50,"type"],[55,56,62,54],[55,57,62,55],[55,59,62,57],[56,12,63,10,"result"],[56,18,63,16],[56,19,63,17,"ssid"],[56,23,63,21],[56,26,63,24,"util"],[56,30,63,28],[56,31,63,29,"bytesToString"],[56,44,63,42],[56,45,63,43,"tlv"],[56,48,63,46],[56,49,63,47,"value"],[56,54,63,52],[56,55,63,53],[57,10,64,8],[57,11,64,9],[57,17,64,15],[57,21,64,19,"_arrayEqual"],[57,32,64,30],[57,33,64,31,"NETWORK_KEY_FIELD_ID"],[57,53,64,51],[57,55,64,53,"tlv"],[57,58,64,56],[57,59,64,57,"type"],[57,63,64,61],[57,64,64,62],[57,66,64,64],[58,12,65,10,"result"],[58,18,65,16],[58,19,65,17,"networkKey"],[58,29,65,27],[58,32,65,30,"util"],[58,36,65,34],[58,37,65,35,"bytesToString"],[58,50,65,48],[58,51,65,49,"tlv"],[58,54,65,52],[58,55,65,53,"value"],[58,60,65,58],[58,61,65,59],[59,10,66,8],[60,8,67,6],[61,6,68,4],[62,4,69,2],[63,4,71,2],[63,11,71,9,"result"],[63,17,71,15],[64,2,72,0],[66,2,74,0],[67,2,75,0],[68,2,76,0],[68,11,76,9,"encode"],[68,17,76,15,"encode"],[68,18,76,15,"_ref"],[68,22,76,15],[68,24,76,68],[69,4,76,68],[69,8,76,17,"ssid"],[69,12,76,21],[69,15,76,21,"_ref"],[69,19,76,21],[69,20,76,17,"ssid"],[69,24,76,21],[70,6,76,23,"networkKey"],[70,16,76,33],[70,19,76,33,"_ref"],[70,23,76,33],[70,24,76,23,"networkKey"],[70,34,76,33],[71,6,76,33,"_ref$authType"],[71,19,76,33],[71,22,76,33,"_ref"],[71,26,76,33],[71,27,76,35,"authType"],[71,35,76,43],[72,6,76,35,"authType"],[72,14,76,43],[72,17,76,43,"_ref$authType"],[72,30,76,43],[72,44,76,46,"AUTH_TYPES"],[72,54,76,56],[72,55,76,57,"WPA2_PSK"],[72,63,76,65],[72,66,76,65,"_ref$authType"],[72,79,76,65],[73,4,77,2],[73,8,77,6],[73,15,77,13,"ssid"],[73,19,77,17],[73,24,77,22],[73,32,77,30],[73,36,77,34],[73,43,77,41,"networkKey"],[73,53,77,51],[73,58,77,56],[73,66,77,64],[73,68,77,66],[74,6,78,4],[74,12,78,10],[74,16,78,14,"Error"],[74,21,78,19],[74,22,78,20],[74,24,78,22],[74,25,78,23],[75,4,79,2],[76,4,81,2,"ssid"],[76,8,81,6],[76,11,81,9,"util"],[76,15,81,13],[76,16,81,14,"stringToBytes"],[76,29,81,27],[76,30,81,28,"ssid"],[76,34,81,32],[76,35,81,33],[77,4,82,2,"networkKey"],[77,14,82,12],[77,17,82,15,"util"],[77,21,82,19],[77,22,82,20,"stringToBytes"],[77,35,82,33],[77,36,82,34,"networkKey"],[77,46,82,44],[77,47,82,45],[79,4,84,2],[80,4,85,2],[80,8,85,8,"authTypeTLV"],[80,19,85,19],[80,25,85,19,"concat"],[80,31,85,19],[80,32,86,7,"AUTH_TYPE_FIELD_ID"],[80,50,86,25],[80,53,87,4],[80,56,87,7],[80,58,88,4,"authType"],[80,66,88,12],[80,67,88,13,"length"],[80,73,88,19],[80,76,88,19,"_toConsumableArray"],[80,94,88,19],[80,95,89,7,"authType"],[80,103,89,15],[80,105,90,3],[81,4,91,2],[81,8,91,8,"ssidTLV"],[81,15,91,15],[81,21,91,15,"concat"],[81,27,91,15],[81,28,91,22,"SSID_FIELD_ID"],[81,41,91,35],[81,44,91,37],[81,47,91,40],[81,49,91,42,"ssid"],[81,53,91,46],[81,54,91,47,"length"],[81,60,91,53],[81,63,91,53,"_toConsumableArray"],[81,81,91,53],[81,82,91,58,"ssid"],[81,86,91,62],[81,88,91,63],[82,4,92,2],[82,8,92,8,"networkKeyTLV"],[82,21,92,21],[82,27,92,21,"concat"],[82,33,92,21],[82,34,93,7,"NETWORK_KEY_FIELD_ID"],[82,54,93,27],[82,57,94,4],[82,60,94,7],[82,62,95,4,"networkKey"],[82,72,95,14],[82,73,95,15,"length"],[82,79,95,21],[82,82,95,21,"_toConsumableArray"],[82,100,95,21],[82,101,96,7,"networkKey"],[82,111,96,17],[82,113,97,3],[84,4,99,2],[85,4,100,2],[85,8,100,8,"credentialValue"],[85,23,100,23],[85,29,100,23,"concat"],[85,35,100,23],[85,36,100,23,"_toConsumableArray"],[85,54,100,23],[85,55,100,30,"authTypeTLV"],[85,66,100,41],[85,69,100,41,"_toConsumableArray"],[85,87,100,41],[85,88,100,46,"ssidTLV"],[85,95,100,53],[85,98,100,53,"_toConsumableArray"],[85,116,100,53],[85,117,100,58,"networkKeyTLV"],[85,130,100,71],[85,132,100,72],[86,4,101,2],[86,8,101,8,"credentialTLV"],[86,21,101,21],[86,27,101,21,"concat"],[86,33,101,21],[86,34,102,7,"CREDENTIAL_FIELD_ID"],[86,53,102,26],[86,55,102,26,"_toConsumableArray"],[86,73,102,26],[86,74,103,7,"_getLengthBytes"],[86,89,103,22],[86,90,103,23,"credentialValue"],[86,105,103,38],[86,106,103,39],[86,109,103,39,"_toConsumableArray"],[86,127,103,39],[86,128,104,7,"credentialValue"],[86,143,104,22],[86,145,105,3],[87,4,107,2],[87,11,107,9,"credentialTLV"],[87,24,107,22],[88,2,108,0],[89,2,110,0,"module"],[89,8,110,6],[89,9,110,7,"exports"],[89,16,110,14],[89,19,110,17],[90,4,111,2,"encodePayload"],[90,17,111,15],[90,19,111,17,"encode"],[90,25,111,23],[91,4,112,2,"decodePayload"],[91,17,112,15],[91,19,112,17,"decode"],[91,25,112,23],[92,4,113,2,"authTypes"],[92,13,113,11],[92,15,113,13,"AUTH_TYPES"],[93,2,114,0],[93,3,114,1],[94,0,114,2],[94,3]],"functionMap":{"names":["<global>","_getLengthBytes","_arrayEqual","_getNextTLV","decode","encode"],"mappings":"AAA;ACY;CDK;AEE;CFY;AGE;CHS;AIG;CJ0B;AKI;CLgC"}},"type":"js/module"}]}