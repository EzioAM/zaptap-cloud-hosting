{"dependencies":[{"name":"domhandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":49,"index":49}}],"key":"KYhnx5+o028X5IFQh7qGm6XZdSU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getAttributeValue = getAttributeValue;\n  exports.getChildren = getChildren;\n  exports.getName = getName;\n  exports.getParent = getParent;\n  exports.getSiblings = getSiblings;\n  exports.hasAttrib = hasAttrib;\n  exports.nextElementSibling = nextElementSibling;\n  exports.prevElementSibling = prevElementSibling;\n  var _domhandler = require(_dependencyMap[0], \"domhandler\");\n  /**\n   * Get a node's children.\n   *\n   * @category Traversal\n   * @param elem Node to get the children of.\n   * @returns `elem`'s children, or an empty array.\n   */\n  function getChildren(elem) {\n    return (0, _domhandler.hasChildren)(elem) ? elem.children : [];\n  }\n  /**\n   * Get a node's parent.\n   *\n   * @category Traversal\n   * @param elem Node to get the parent of.\n   * @returns `elem`'s parent node, or `null` if `elem` is a root node.\n   */\n  function getParent(elem) {\n    return elem.parent || null;\n  }\n  /**\n   * Gets an elements siblings, including the element itself.\n   *\n   * Attempts to get the children through the element's parent first. If we don't\n   * have a parent (the element is a root node), we walk the element's `prev` &\n   * `next` to get all remaining nodes.\n   *\n   * @category Traversal\n   * @param elem Element to get the siblings of.\n   * @returns `elem`'s siblings, including `elem`.\n   */\n  function getSiblings(elem) {\n    var parent = getParent(elem);\n    if (parent != null) return getChildren(parent);\n    var siblings = [elem];\n    var prev = elem.prev,\n      next = elem.next;\n    while (prev != null) {\n      siblings.unshift(prev);\n      var _prev = prev;\n      prev = _prev.prev;\n    }\n    while (next != null) {\n      siblings.push(next);\n      var _next = next;\n      next = _next.next;\n    }\n    return siblings;\n  }\n  /**\n   * Gets an attribute from an element.\n   *\n   * @category Traversal\n   * @param elem Element to check.\n   * @param name Attribute name to retrieve.\n   * @returns The element's attribute value, or `undefined`.\n   */\n  function getAttributeValue(elem, name) {\n    var _a;\n    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n  }\n  /**\n   * Checks whether an element has an attribute.\n   *\n   * @category Traversal\n   * @param elem Element to check.\n   * @param name Attribute name to look for.\n   * @returns Returns whether `elem` has the attribute `name`.\n   */\n  function hasAttrib(elem, name) {\n    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;\n  }\n  /**\n   * Get the tag name of an element.\n   *\n   * @category Traversal\n   * @param elem The element to get the name for.\n   * @returns The tag name of `elem`.\n   */\n  function getName(elem) {\n    return elem.name;\n  }\n  /**\n   * Returns the next element sibling of a node.\n   *\n   * @category Traversal\n   * @param elem The element to get the next sibling of.\n   * @returns `elem`'s next sibling that is a tag, or `null` if there is no next\n   * sibling.\n   */\n  function nextElementSibling(elem) {\n    var next = elem.next;\n    while (next !== null && !(0, _domhandler.isTag)(next)) {\n      var _next2 = next;\n      next = _next2.next;\n    }\n    return next;\n  }\n  /**\n   * Returns the previous element sibling of a node.\n   *\n   * @category Traversal\n   * @param elem The element to get the previous sibling of.\n   * @returns `elem`'s previous sibling that is a tag, or `null` if there is no\n   * previous sibling.\n   */\n  function prevElementSibling(elem) {\n    var prev = elem.prev;\n    while (prev !== null && !(0, _domhandler.isTag)(prev)) {\n      var _prev2 = prev;\n      prev = _prev2.prev;\n    }\n    return prev;\n  }\n});","lineCount":128,"map":[[13,2,1,0],[13,6,1,0,"_domhandler"],[13,17,1,0],[13,20,1,0,"require"],[13,27,1,0],[13,28,1,0,"_dependencyMap"],[13,42,1,0],[14,2,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,2,9,7],[21,11,9,16,"getChildren"],[21,22,9,27,"getChildren"],[21,23,9,28,"elem"],[21,27,9,32],[21,29,9,34],[22,4,10,4],[22,11,10,11],[22,15,10,11,"hasChildren"],[22,38,10,22],[22,40,10,23,"elem"],[22,44,10,27],[22,45,10,28],[22,48,10,31,"elem"],[22,52,10,35],[22,53,10,36,"children"],[22,61,10,44],[22,64,10,47],[22,66,10,49],[23,2,11,0],[24,2,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,2,19,7],[31,11,19,16,"getParent"],[31,20,19,25,"getParent"],[31,21,19,26,"elem"],[31,25,19,30],[31,27,19,32],[32,4,20,4],[32,11,20,11,"elem"],[32,15,20,15],[32,16,20,16,"parent"],[32,22,20,22],[32,26,20,26],[32,30,20,30],[33,2,21,0],[34,2,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,2,33,7],[45,11,33,16,"getSiblings"],[45,22,33,27,"getSiblings"],[45,23,33,28,"elem"],[45,27,33,32],[45,29,33,34],[46,4,34,4],[46,8,34,10,"parent"],[46,14,34,16],[46,17,34,19,"getParent"],[46,26,34,28],[46,27,34,29,"elem"],[46,31,34,33],[46,32,34,34],[47,4,35,4],[47,8,35,8,"parent"],[47,14,35,14],[47,18,35,18],[47,22,35,22],[47,24,36,8],[47,31,36,15,"getChildren"],[47,42,36,26],[47,43,36,27,"parent"],[47,49,36,33],[47,50,36,34],[48,4,37,4],[48,8,37,10,"siblings"],[48,16,37,18],[48,19,37,21],[48,20,37,22,"elem"],[48,24,37,26],[48,25,37,27],[49,4,38,4],[49,8,38,10,"prev"],[49,12,38,14],[49,15,38,25,"elem"],[49,19,38,29],[49,20,38,10,"prev"],[49,24,38,14],[50,6,38,16,"next"],[50,10,38,20],[50,13,38,25,"elem"],[50,17,38,29],[50,18,38,16,"next"],[50,22,38,20],[51,4,39,4],[51,11,39,11,"prev"],[51,15,39,15],[51,19,39,19],[51,23,39,23],[51,25,39,25],[52,6,40,8,"siblings"],[52,14,40,16],[52,15,40,17,"unshift"],[52,22,40,24],[52,23,40,25,"prev"],[52,27,40,29],[52,28,40,30],[53,6,40,31],[53,10,40,31,"_prev"],[53,15,40,31],[53,18,41,20,"prev"],[53,22,41,24],[54,6,41,11,"prev"],[54,10,41,15],[54,13,41,15,"_prev"],[54,18,41,15],[54,19,41,11,"prev"],[54,23,41,15],[55,4,42,4],[56,4,43,4],[56,11,43,11,"next"],[56,15,43,15],[56,19,43,19],[56,23,43,23],[56,25,43,25],[57,6,44,8,"siblings"],[57,14,44,16],[57,15,44,17,"push"],[57,19,44,21],[57,20,44,22,"next"],[57,24,44,26],[57,25,44,27],[58,6,44,28],[58,10,44,28,"_next"],[58,15,44,28],[58,18,45,20,"next"],[58,22,45,24],[59,6,45,11,"next"],[59,10,45,15],[59,13,45,15,"_next"],[59,18,45,15],[59,19,45,11,"next"],[59,23,45,15],[60,4,46,4],[61,4,47,4],[61,11,47,11,"siblings"],[61,19,47,19],[62,2,48,0],[63,2,49,0],[64,0,50,0],[65,0,51,0],[66,0,52,0],[67,0,53,0],[68,0,54,0],[69,0,55,0],[70,0,56,0],[71,2,57,7],[71,11,57,16,"getAttributeValue"],[71,28,57,33,"getAttributeValue"],[71,29,57,34,"elem"],[71,33,57,38],[71,35,57,40,"name"],[71,39,57,44],[71,41,57,46],[72,4,58,4],[72,8,58,8,"_a"],[72,10,58,10],[73,4,59,4],[73,11,59,11],[73,12,59,12,"_a"],[73,14,59,14],[73,17,59,17,"elem"],[73,21,59,21],[73,22,59,22,"attribs"],[73,29,59,29],[73,35,59,35],[73,39,59,39],[73,43,59,43,"_a"],[73,45,59,45],[73,50,59,50],[73,55,59,55],[73,56,59,56],[73,59,59,59],[73,64,59,64],[73,65,59,65],[73,68,59,68,"_a"],[73,70,59,70],[73,71,59,71,"name"],[73,75,59,75],[73,76,59,76],[74,2,60,0],[75,2,61,0],[76,0,62,0],[77,0,63,0],[78,0,64,0],[79,0,65,0],[80,0,66,0],[81,0,67,0],[82,0,68,0],[83,2,69,7],[83,11,69,16,"hasAttrib"],[83,20,69,25,"hasAttrib"],[83,21,69,26,"elem"],[83,25,69,30],[83,27,69,32,"name"],[83,31,69,36],[83,33,69,38],[84,4,70,4],[84,11,70,12,"elem"],[84,15,70,16],[84,16,70,17,"attribs"],[84,23,70,24],[84,27,70,28],[84,31,70,32],[84,35,71,8,"Object"],[84,41,71,14],[84,42,71,15,"prototype"],[84,51,71,24],[84,52,71,25,"hasOwnProperty"],[84,66,71,39],[84,67,71,40,"call"],[84,71,71,44],[84,72,71,45,"elem"],[84,76,71,49],[84,77,71,50,"attribs"],[84,84,71,57],[84,86,71,59,"name"],[84,90,71,63],[84,91,71,64],[84,95,72,8,"elem"],[84,99,72,12],[84,100,72,13,"attribs"],[84,107,72,20],[84,108,72,21,"name"],[84,112,72,25],[84,113,72,26],[84,117,72,30],[84,121,72,34],[85,2,73,0],[86,2,74,0],[87,0,75,0],[88,0,76,0],[89,0,77,0],[90,0,78,0],[91,0,79,0],[92,0,80,0],[93,2,81,7],[93,11,81,16,"getName"],[93,18,81,23,"getName"],[93,19,81,24,"elem"],[93,23,81,28],[93,25,81,30],[94,4,82,4],[94,11,82,11,"elem"],[94,15,82,15],[94,16,82,16,"name"],[94,20,82,20],[95,2,83,0],[96,2,84,0],[97,0,85,0],[98,0,86,0],[99,0,87,0],[100,0,88,0],[101,0,89,0],[102,0,90,0],[103,0,91,0],[104,2,92,7],[104,11,92,16,"nextElementSibling"],[104,29,92,34,"nextElementSibling"],[104,30,92,35,"elem"],[104,34,92,39],[104,36,92,41],[105,4,93,4],[105,8,93,10,"next"],[105,12,93,14],[105,15,93,19,"elem"],[105,19,93,23],[105,20,93,10,"next"],[105,24,93,14],[106,4,94,4],[106,11,94,11,"next"],[106,15,94,15],[106,20,94,20],[106,24,94,24],[106,28,94,28],[106,29,94,29],[106,33,94,29,"isTag"],[106,50,94,34],[106,52,94,35,"next"],[106,56,94,39],[106,57,94,40],[107,6,94,40],[107,10,94,40,"_next2"],[107,16,94,40],[107,19,95,20,"next"],[107,23,95,24],[108,6,95,11,"next"],[108,10,95,15],[108,13,95,15,"_next2"],[108,19,95,15],[108,20,95,11,"next"],[108,24,95,15],[109,4,95,15],[110,4,96,4],[110,11,96,11,"next"],[110,15,96,15],[111,2,97,0],[112,2,98,0],[113,0,99,0],[114,0,100,0],[115,0,101,0],[116,0,102,0],[117,0,103,0],[118,0,104,0],[119,0,105,0],[120,2,106,7],[120,11,106,16,"prevElementSibling"],[120,29,106,34,"prevElementSibling"],[120,30,106,35,"elem"],[120,34,106,39],[120,36,106,41],[121,4,107,4],[121,8,107,10,"prev"],[121,12,107,14],[121,15,107,19,"elem"],[121,19,107,23],[121,20,107,10,"prev"],[121,24,107,14],[122,4,108,4],[122,11,108,11,"prev"],[122,15,108,15],[122,20,108,20],[122,24,108,24],[122,28,108,28],[122,29,108,29],[122,33,108,29,"isTag"],[122,50,108,34],[122,52,108,35,"prev"],[122,56,108,39],[122,57,108,40],[123,6,108,40],[123,10,108,40,"_prev2"],[123,16,108,40],[123,19,109,20,"prev"],[123,23,109,24],[124,6,109,11,"prev"],[124,10,109,15],[124,13,109,15,"_prev2"],[124,19,109,15],[124,20,109,11,"prev"],[124,24,109,15],[125,4,109,15],[126,4,110,4],[126,11,110,11,"prev"],[126,15,110,15],[127,2,111,0],[128,0,111,1],[128,3]],"functionMap":{"names":["<global>","getChildren","getParent","getSiblings","getAttributeValue","hasAttrib","getName","nextElementSibling","prevElementSibling"],"mappings":"AAA;OCQ;CDE;OEQ;CFE;OGY;CHe;OIS;CJG;OKS;CLI;OMQ;CNE;OOS;CPK;OQS;CRK"}},"type":"js/module"}]}