{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./Font","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":45,"index":90}}],"key":"uhjJvb2CC+i2amHkDH4+UF8lIHQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useFonts = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _react = require(_dependencyMap[2], \"react\");\n  var _Font = require(_dependencyMap[3], \"./Font\");\n  function isMapLoaded(map) {\n    if (typeof map === 'string') {\n      return (0, _Font.isLoaded)(map);\n    } else {\n      return Object.keys(map).every(function (fontFamily) {\n        return (0, _Font.isLoaded)(fontFamily);\n      });\n    }\n  }\n  function useRuntimeFonts(map) {\n    var _useState = (0, _react.useState)(\n      // For web rehydration, we need to check if the fonts are already loaded during the static render.\n      // Native will also benefit from this optimization.\n      isMapLoaded(map)),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n    var _useState3 = (0, _react.useState)(null),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n    (0, _react.useEffect)(function () {\n      var isMounted = true;\n      (0, _Font.loadAsync)(map).then(function () {\n        if (isMounted) {\n          setLoaded(true);\n        }\n      }).catch(function (error) {\n        if (isMounted) {\n          setError(error);\n        }\n      });\n      return function () {\n        isMounted = false;\n      };\n    }, []);\n    return [loaded, error];\n  }\n  function useStaticFonts(map) {\n    (0, _Font.loadAsync)(map);\n    return [true, null];\n  }\n  // @needsAudit\n  /**\n   * Load a map of fonts at runtime with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n   * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n   *\n   * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n   *\n   * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n   * use the key in the `fontFamily` style prop of a `Text` element.\n   *\n   * @return\n   * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n   * loading.\n   * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n   *\n   * @example\n   * ```tsx\n   * const [loaded, error] = useFonts({\n   *   'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n   * });\n   * ```\n   */\n  var useFonts = exports.useFonts = typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n});","lineCount":75,"map":[[8,2,1,0],[8,6,1,0,"_react"],[8,12,1,0],[8,15,1,0,"require"],[8,22,1,0],[8,23,1,0,"_dependencyMap"],[8,37,1,0],[9,2,2,0],[9,6,2,0,"_Font"],[9,11,2,0],[9,14,2,0,"require"],[9,21,2,0],[9,22,2,0,"_dependencyMap"],[9,36,2,0],[10,2,3,0],[10,11,3,9,"isMapLoaded"],[10,22,3,20,"isMapLoaded"],[10,23,3,21,"map"],[10,26,3,24],[10,28,3,26],[11,4,4,4],[11,8,4,8],[11,15,4,15,"map"],[11,18,4,18],[11,23,4,23],[11,31,4,31],[11,33,4,33],[12,6,5,8],[12,13,5,15],[12,17,5,15,"isLoaded"],[12,31,5,23],[12,33,5,24,"map"],[12,36,5,27],[12,37,5,28],[13,4,6,4],[13,5,6,5],[13,11,7,9],[14,6,8,8],[14,13,8,15,"Object"],[14,19,8,21],[14,20,8,22,"keys"],[14,24,8,26],[14,25,8,27,"map"],[14,28,8,30],[14,29,8,31],[14,30,8,32,"every"],[14,35,8,37],[14,36,8,38],[14,46,8,39,"fontFamily"],[14,56,8,49],[15,8,8,49],[15,15,8,54],[15,19,8,54,"isLoaded"],[15,33,8,62],[15,35,8,63,"fontFamily"],[15,45,8,73],[15,46,8,74],[16,6,8,74],[16,8,8,75],[17,4,9,4],[18,2,10,0],[19,2,11,0],[19,11,11,9,"useRuntimeFonts"],[19,26,11,24,"useRuntimeFonts"],[19,27,11,25,"map"],[19,30,11,28],[19,32,11,30],[20,4,12,4],[20,8,12,4,"_useState"],[20,17,12,4],[20,20,12,32],[20,24,12,32,"useState"],[20,39,12,40],[21,6,13,4],[22,6,14,4],[23,6,15,4,"isMapLoaded"],[23,17,15,15],[23,18,15,16,"map"],[23,21,15,19],[23,22,15,20],[23,23,15,21],[24,6,15,21,"_useState2"],[24,16,15,21],[24,23,15,21,"_slicedToArray2"],[24,38,15,21],[24,39,15,21,"default"],[24,46,15,21],[24,48,15,21,"_useState"],[24,57,15,21],[25,6,12,11,"loaded"],[25,12,12,17],[25,15,12,17,"_useState2"],[25,25,12,17],[26,6,12,19,"setLoaded"],[26,15,12,28],[26,18,12,28,"_useState2"],[26,28,12,28],[27,4,16,4],[27,8,16,4,"_useState3"],[27,18,16,4],[27,21,16,30],[27,25,16,30,"useState"],[27,40,16,38],[27,42,16,39],[27,46,16,43],[27,47,16,44],[28,6,16,44,"_useState4"],[28,16,16,44],[28,23,16,44,"_slicedToArray2"],[28,38,16,44],[28,39,16,44,"default"],[28,46,16,44],[28,48,16,44,"_useState3"],[28,58,16,44],[29,6,16,11,"error"],[29,11,16,16],[29,14,16,16,"_useState4"],[29,24,16,16],[30,6,16,18,"setError"],[30,14,16,26],[30,17,16,26,"_useState4"],[30,27,16,26],[31,4,17,4],[31,8,17,4,"useEffect"],[31,24,17,13],[31,26,17,14],[31,38,17,20],[32,6,18,8],[32,10,18,12,"isMounted"],[32,19,18,21],[32,22,18,24],[32,26,18,28],[33,6,19,8],[33,10,19,8,"loadAsync"],[33,25,19,17],[33,27,19,18,"map"],[33,30,19,21],[33,31,19,22],[33,32,20,13,"then"],[33,36,20,17],[33,37,20,18],[33,49,20,24],[34,8,21,12],[34,12,21,16,"isMounted"],[34,21,21,25],[34,23,21,27],[35,10,22,16,"setLoaded"],[35,19,22,25],[35,20,22,26],[35,24,22,30],[35,25,22,31],[36,8,23,12],[37,6,24,8],[37,7,24,9],[37,8,24,10],[37,9,25,13,"catch"],[37,14,25,18],[37,15,25,19],[37,25,25,20,"error"],[37,30,25,25],[37,32,25,30],[38,8,26,12],[38,12,26,16,"isMounted"],[38,21,26,25],[38,23,26,27],[39,10,27,16,"setError"],[39,18,27,24],[39,19,27,25,"error"],[39,24,27,30],[39,25,27,31],[40,8,28,12],[41,6,29,8],[41,7,29,9],[41,8,29,10],[42,6,30,8],[42,13,30,15],[42,25,30,21],[43,8,31,12,"isMounted"],[43,17,31,21],[43,20,31,24],[43,25,31,29],[44,6,32,8],[44,7,32,9],[45,4,33,4],[45,5,33,5],[45,7,33,7],[45,9,33,9],[45,10,33,10],[46,4,34,4],[46,11,34,11],[46,12,34,12,"loaded"],[46,18,34,18],[46,20,34,20,"error"],[46,25,34,25],[46,26,34,26],[47,2,35,0],[48,2,36,0],[48,11,36,9,"useStaticFonts"],[48,25,36,23,"useStaticFonts"],[48,26,36,24,"map"],[48,29,36,27],[48,31,36,29],[49,4,37,4],[49,8,37,4,"loadAsync"],[49,23,37,13],[49,25,37,14,"map"],[49,28,37,17],[49,29,37,18],[50,4,38,4],[50,11,38,11],[50,12,38,12],[50,16,38,16],[50,18,38,18],[50,22,38,22],[50,23,38,23],[51,2,39,0],[52,2,40,0],[53,2,41,0],[54,0,42,0],[55,0,43,0],[56,0,44,0],[57,0,45,0],[58,0,46,0],[59,0,47,0],[60,0,48,0],[61,0,49,0],[62,0,50,0],[63,0,51,0],[64,0,52,0],[65,0,53,0],[66,0,54,0],[67,0,55,0],[68,0,56,0],[69,0,57,0],[70,0,58,0],[71,0,59,0],[72,0,60,0],[73,0,61,0],[74,2,62,7],[74,6,62,13,"useFonts"],[74,14,62,21],[74,17,62,21,"exports"],[74,24,62,21],[74,25,62,21,"useFonts"],[74,33,62,21],[74,36,62,24],[74,43,62,31,"window"],[74,49,62,37],[74,54,62,42],[74,65,62,53],[74,68,62,56,"useStaticFonts"],[74,82,62,70],[74,85,62,73,"useRuntimeFonts"],[74,100,62,88],[75,0,62,89],[75,3]],"functionMap":{"names":["<global>","isMapLoaded","Object.keys.every$argument_0","useRuntimeFonts","useEffect$argument_0","loadAsync.then$argument_0","loadAsync.then._catch$argument_0","<anonymous>","useStaticFonts"],"mappings":"AAA;ACE;sCCK,oCD;CDE;AGC;cCM;kBCG;SDI;mBEC;SFI;eGC;SHE;KDC;CHE;AQC;CRG"}},"type":"js/module"}]}