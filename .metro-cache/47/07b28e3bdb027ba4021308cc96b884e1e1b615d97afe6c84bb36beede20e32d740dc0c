{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ClipboardPasteButton","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":62,"index":129}}],"key":"LUcIX+CIhB4XU+2a8Ub9n3L2I8w=","exportNames":["*"]}},{"name":"./ExpoClipboard","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":130},"end":{"line":3,"column":44,"index":174}}],"key":"64y7yRjbBRJxCbEo7THAGLu8m4I=","exportNames":["*"]}},{"name":"./Clipboard.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":216,"column":0,"index":7899},"end":{"line":216,"column":34,"index":7933}}],"key":"meqRnb9IzYBTuycFxx1YZMmO78c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var _exportNames = {\n    getStringAsync: true,\n    setStringAsync: true,\n    setString: true,\n    hasStringAsync: true,\n    getUrlAsync: true,\n    setUrlAsync: true,\n    hasUrlAsync: true,\n    getImageAsync: true,\n    setImageAsync: true,\n    hasImageAsync: true,\n    addClipboardListener: true,\n    removeClipboardListener: true,\n    isPasteButtonAvailable: true,\n    ClipboardPasteButton: true\n  };\n  Object.defineProperty(exports, \"ClipboardPasteButton\", {\n    enumerable: true,\n    get: function () {\n      return _ClipboardPasteButton.ClipboardPasteButton;\n    }\n  });\n  exports.addClipboardListener = addClipboardListener;\n  exports.getImageAsync = getImageAsync;\n  exports.getStringAsync = getStringAsync;\n  exports.getUrlAsync = getUrlAsync;\n  exports.hasImageAsync = hasImageAsync;\n  exports.hasStringAsync = hasStringAsync;\n  exports.hasUrlAsync = hasUrlAsync;\n  exports.isPasteButtonAvailable = undefined;\n  exports.removeClipboardListener = removeClipboardListener;\n  exports.setImageAsync = setImageAsync;\n  exports.setString = setString;\n  exports.setStringAsync = setStringAsync;\n  exports.setUrlAsync = setUrlAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _expoModulesCore = require(_dependencyMap[2]);\n  var _ClipboardPasteButton = require(_dependencyMap[3]);\n  var _ExpoClipboard = _interopRequireDefault(require(_dependencyMap[4]));\n  var _Clipboard = require(_dependencyMap[5]);\n  Object.keys(_Clipboard).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _Clipboard[key]) return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return _Clipboard[key];\n      }\n    });\n  });\n  var onClipboardEventName = 'onClipboardChanged';\n  /**\n   * Gets the content of the user's clipboard. Calling this method on web will prompt\n   * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options Options for the clipboard content to be retrieved.\n   * @returns A promise that resolves to the content of the clipboard.\n   */\n  function getStringAsync() {\n    return _getStringAsync.apply(this, arguments);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   *\n   * @param text The string to save to the clipboard.\n   * @param options Options for the clipboard content to be set.\n   * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n   * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n   */\n  function _getStringAsync() {\n    _getStringAsync = (0, _asyncToGenerator2.default)(function* () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!_ExpoClipboard.default.getStringAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getStringAsync');\n      }\n      return yield _ExpoClipboard.default.getStringAsync(options);\n    });\n    return _getStringAsync.apply(this, arguments);\n  }\n  function setStringAsync(_x) {\n    return _setStringAsync.apply(this, arguments);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n   *\n   * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n   * the user's clipboard. On iOS and Android, nothing is returned.\n   */\n  function _setStringAsync() {\n    _setStringAsync = (0, _asyncToGenerator2.default)(function* (text) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!_ExpoClipboard.default.setStringAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setStringAsync');\n      }\n      return _ExpoClipboard.default.setStringAsync(text, options);\n    });\n    return _setStringAsync.apply(this, arguments);\n  }\n  function setString(text) {\n    {\n      setStringAsync(text);\n    }\n  }\n  /**\n   * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n   */\n  function hasStringAsync() {\n    if (!_ExpoClipboard.default.hasStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasStringAsync');\n    }\n    return _ExpoClipboard.default.hasStringAsync();\n  }\n  /**\n   * Gets the URL from the user's clipboard.\n   *\n   * @returns A promise that fulfills to the URL in the clipboard.\n   * @platform ios\n   */\n  function getUrlAsync() {\n    return _getUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Sets a URL in the user's clipboard.\n   *\n   * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n   * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n   * clipboard contains a URL and behave accordingly.\n   *\n   * @param url The URL to save to the clipboard.\n   * @platform ios\n   */\n  function _getUrlAsync() {\n    _getUrlAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoClipboard.default.getUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getUrlAsync');\n      }\n      return yield _ExpoClipboard.default.getUrlAsync();\n    });\n    return _getUrlAsync.apply(this, arguments);\n  }\n  function setUrlAsync(_x2) {\n    return _setUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Returns whether the clipboard has a URL content.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n   * @platform ios\n   */\n  function _setUrlAsync() {\n    _setUrlAsync = (0, _asyncToGenerator2.default)(function* (url) {\n      if (!_ExpoClipboard.default.setUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setUrlAsync');\n      }\n      return _ExpoClipboard.default.setUrlAsync(url);\n    });\n    return _setUrlAsync.apply(this, arguments);\n  }\n  function hasUrlAsync() {\n    return _hasUrlAsync.apply(this, arguments);\n  }\n  /**\n   * Gets the image from the user's clipboard and returns it in the specified\n   * format. Calling this method on web will prompt the user to grant your app\n   * permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options A `GetImageOptions` object to specify the desired format of the image.\n   * @returns If there was an image in the clipboard, the promise resolves to\n   * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n   * Otherwise, it resolves to `null`.\n   *\n   * @example\n   * ```tsx\n   * const img = await Clipboard.getImageAsync({ format: 'png' });\n   * // ...\n   * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n   * ```\n   */\n  function _hasUrlAsync() {\n    _hasUrlAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoClipboard.default.hasUrlAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasUrlAsync');\n      }\n      return yield _ExpoClipboard.default.hasUrlAsync();\n    });\n    return _hasUrlAsync.apply(this, arguments);\n  }\n  function getImageAsync(_x3) {\n    return _getImageAsync.apply(this, arguments);\n  }\n  /**\n   * Sets an image in the user's clipboard.\n   *\n   * @param base64Image Image encoded as a base64 string, without MIME type.\n   *\n   * @example\n   * ```tsx\n   * const result = await ImagePicker.launchImageLibraryAsync({\n   *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n   *   base64: true,\n   * });\n   * await Clipboard.setImageAsync(result.base64);\n   * ```\n   */\n  function _getImageAsync() {\n    _getImageAsync = (0, _asyncToGenerator2.default)(function* (options) {\n      if (!_ExpoClipboard.default.getImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getImageAsync');\n      }\n      return yield _ExpoClipboard.default.getImageAsync(options);\n    });\n    return _getImageAsync.apply(this, arguments);\n  }\n  function setImageAsync(_x4) {\n    return _setImageAsync.apply(this, arguments);\n  }\n  /**\n   * Returns whether the clipboard has an image content.\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n   */\n  function _setImageAsync() {\n    _setImageAsync = (0, _asyncToGenerator2.default)(function* (base64Image) {\n      if (!_ExpoClipboard.default.setImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setImageAsync');\n      }\n      return _ExpoClipboard.default.setImageAsync(base64Image);\n    });\n    return _setImageAsync.apply(this, arguments);\n  }\n  function hasImageAsync() {\n    return _hasImageAsync.apply(this, arguments);\n  }\n  /**\n   * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n   * is a no-op on Web.\n   *\n   * @param listener Callback to execute when listener is triggered. The callback is provided a\n   * single argument that is an object containing information about clipboard contents.\n   *\n   * @example\n   * ```typescript\n   * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n   *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n   *     Clipboard.getStringAsync().then(content => {\n   *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n   *     });\n   *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n   *     alert('Yay! Clipboard contains an image');\n   *   }\n   * });\n   * ```\n   */\n  function _hasImageAsync() {\n    _hasImageAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoClipboard.default.hasImageAsync) {\n        throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasImageAsync');\n      }\n      return _ExpoClipboard.default.hasImageAsync();\n    });\n    return _hasImageAsync.apply(this, arguments);\n  }\n  function addClipboardListener(listener) {\n    // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n    var listenerWrapper = event => {\n      var wrappedEvent = {\n        ...event,\n        get content() {\n          return '';\n        }\n      };\n      listener(wrappedEvent);\n    };\n    return _ExpoClipboard.default.addListener(onClipboardEventName, listenerWrapper);\n  }\n  /**\n   * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n   *\n   * @param subscription The subscription to remove (created by addClipboardListener).\n   *\n   * @example\n   * ```typescript\n   * const subscription = addClipboardListener(() => {\n   *   alert('Copy pasta!');\n   * });\n   * removeClipboardListener(subscription);\n   * ```\n   */\n  function removeClipboardListener(subscription) {\n    subscription.remove();\n  }\n  /**\n   * Property that determines if the `ClipboardPasteButton` is available.\n   *\n   * This requires the users device to be using at least iOS 16.\n   *\n   * `true` if the component is available, and `false` otherwise.\n   */\n  var isPasteButtonAvailable = exports.isPasteButtonAvailable = false;\n});","lineCount":313,"map":[[42,2,1,0],[42,6,1,0,"_expoModulesCore"],[42,22,1,0],[42,25,1,0,"require"],[42,32,1,0],[42,33,1,0,"_dependencyMap"],[42,47,1,0],[43,2,2,0],[43,6,2,0,"_ClipboardPasteButton"],[43,27,2,0],[43,30,2,0,"require"],[43,37,2,0],[43,38,2,0,"_dependencyMap"],[43,52,2,0],[44,2,3,0],[44,6,3,0,"_ExpoClipboard"],[44,20,3,0],[44,23,3,0,"_interopRequireDefault"],[44,45,3,0],[44,46,3,0,"require"],[44,53,3,0],[44,54,3,0,"_dependencyMap"],[44,68,3,0],[45,2,216,0],[45,6,216,0,"_Clipboard"],[45,16,216,0],[45,19,216,0,"require"],[45,26,216,0],[45,27,216,0,"_dependencyMap"],[45,41,216,0],[46,2,216,0,"Object"],[46,8,216,0],[46,9,216,0,"keys"],[46,13,216,0],[46,14,216,0,"_Clipboard"],[46,24,216,0],[46,26,216,0,"forEach"],[46,33,216,0],[46,44,216,0,"key"],[46,47,216,0],[47,4,216,0],[47,8,216,0,"key"],[47,11,216,0],[47,29,216,0,"key"],[47,32,216,0],[48,4,216,0],[48,8,216,0,"Object"],[48,14,216,0],[48,15,216,0,"prototype"],[48,24,216,0],[48,25,216,0,"hasOwnProperty"],[48,39,216,0],[48,40,216,0,"call"],[48,44,216,0],[48,45,216,0,"_exportNames"],[48,57,216,0],[48,59,216,0,"key"],[48,62,216,0],[49,4,216,0],[49,8,216,0,"key"],[49,11,216,0],[49,15,216,0,"exports"],[49,22,216,0],[49,26,216,0,"exports"],[49,33,216,0],[49,34,216,0,"key"],[49,37,216,0],[49,43,216,0,"_Clipboard"],[49,53,216,0],[49,54,216,0,"key"],[49,57,216,0],[50,4,216,0,"Object"],[50,10,216,0],[50,11,216,0,"defineProperty"],[50,25,216,0],[50,26,216,0,"exports"],[50,33,216,0],[50,35,216,0,"key"],[50,38,216,0],[51,6,216,0,"enumerable"],[51,16,216,0],[52,6,216,0,"get"],[52,9,216,0],[52,20,216,0,"get"],[52,21,216,0],[53,8,216,0],[53,15,216,0,"_Clipboard"],[53,25,216,0],[53,26,216,0,"key"],[53,29,216,0],[54,6,216,0],[55,4,216,0],[56,2,216,0],[57,2,4,0],[57,6,4,6,"onClipboardEventName"],[57,26,4,26],[57,29,4,29],[57,49,4,49],[58,2,5,0],[59,0,6,0],[60,0,7,0],[61,0,8,0],[62,0,9,0],[63,0,10,0],[64,0,11,0],[65,2,5,0],[65,11,12,22,"getStringAsync"],[65,25,12,36,"getStringAsync"],[65,26,12,36],[66,4,12,36],[66,11,12,36,"_getStringAsync"],[66,26,12,36],[66,27,12,36,"apply"],[66,32,12,36],[66,39,12,36,"arguments"],[66,48,12,36],[67,2,12,36],[68,2,18,0],[69,0,19,0],[70,0,20,0],[71,0,21,0],[72,0,22,0],[73,0,23,0],[74,0,24,0],[75,0,25,0],[76,2,18,0],[76,11,18,0,"_getStringAsync"],[76,27,18,0],[77,4,18,0,"_getStringAsync"],[77,19,18,0],[77,26,18,0,"_asyncToGenerator2"],[77,44,18,0],[77,45,18,0,"default"],[77,52,18,0],[77,54,12,7],[77,67,12,51],[78,6,12,51],[78,10,12,37,"options"],[78,17,12,44],[78,20,12,44,"arguments"],[78,29,12,44],[78,30,12,44,"length"],[78,36,12,44],[78,44,12,44,"arguments"],[78,53,12,44],[78,61,12,44,"undefined"],[78,70,12,44],[78,73,12,44,"arguments"],[78,82,12,44],[78,88,12,47],[78,89,12,48],[78,90,12,49],[79,6,13,4],[79,10,13,8],[79,11,13,9,"ExpoClipboard"],[79,33,13,22],[79,34,13,23,"getStringAsync"],[79,48,13,37],[79,50,13,39],[80,8,14,8],[80,14,14,14],[80,18,14,18,"UnavailabilityError"],[80,54,14,37],[80,55,14,38],[80,66,14,49],[80,68,14,51],[80,84,14,67],[80,85,14,68],[81,6,15,4],[82,6,16,4],[82,19,16,17,"ExpoClipboard"],[82,41,16,30],[82,42,16,31,"getStringAsync"],[82,56,16,45],[82,57,16,46,"options"],[82,64,16,53],[82,65,16,54],[83,4,17,0],[83,5,17,1],[84,4,17,1],[84,11,17,1,"_getStringAsync"],[84,26,17,1],[84,27,17,1,"apply"],[84,32,17,1],[84,39,17,1,"arguments"],[84,48,17,1],[85,2,17,1],[86,2,17,1],[86,11,26,22,"setStringAsync"],[86,25,26,36,"setStringAsync"],[86,26,26,36,"_x"],[86,28,26,36],[87,4,26,36],[87,11,26,36,"_setStringAsync"],[87,26,26,36],[87,27,26,36,"apply"],[87,32,26,36],[87,39,26,36,"arguments"],[87,48,26,36],[88,2,26,36],[89,2,32,0],[90,0,33,0],[91,0,34,0],[92,0,35,0],[93,0,36,0],[94,0,37,0],[95,0,38,0],[96,2,32,0],[96,11,32,0,"_setStringAsync"],[96,27,32,0],[97,4,32,0,"_setStringAsync"],[97,19,32,0],[97,26,32,0,"_asyncToGenerator2"],[97,44,32,0],[97,45,32,0,"default"],[97,52,32,0],[97,54,26,7],[97,65,26,37,"text"],[97,69,26,41],[97,71,26,57],[98,6,26,57],[98,10,26,43,"options"],[98,17,26,50],[98,20,26,50,"arguments"],[98,29,26,50],[98,30,26,50,"length"],[98,36,26,50],[98,44,26,50,"arguments"],[98,53,26,50],[98,61,26,50,"undefined"],[98,70,26,50],[98,73,26,50,"arguments"],[98,82,26,50],[98,88,26,53],[98,89,26,54],[98,90,26,55],[99,6,27,4],[99,10,27,8],[99,11,27,9,"ExpoClipboard"],[99,33,27,22],[99,34,27,23,"setStringAsync"],[99,48,27,37],[99,50,27,39],[100,8,28,8],[100,14,28,14],[100,18,28,18,"UnavailabilityError"],[100,54,28,37],[100,55,28,38],[100,66,28,49],[100,68,28,51],[100,84,28,67],[100,85,28,68],[101,6,29,4],[102,6,30,4],[102,13,30,11,"ExpoClipboard"],[102,35,30,24],[102,36,30,25,"setStringAsync"],[102,50,30,39],[102,51,30,40,"text"],[102,55,30,44],[102,57,30,46,"options"],[102,64,30,53],[102,65,30,54],[103,4,31,0],[103,5,31,1],[104,4,31,1],[104,11,31,1,"_setStringAsync"],[104,26,31,1],[104,27,31,1,"apply"],[104,32,31,1],[104,39,31,1,"arguments"],[104,48,31,1],[105,2,31,1],[106,2,39,7],[106,11,39,16,"setString"],[106,20,39,25,"setString"],[106,21,39,26,"text"],[106,25,39,30],[106,27,39,32],[107,4,45,9],[108,6,46,8,"setStringAsync"],[108,20,46,22],[108,21,46,23,"text"],[108,25,46,27],[108,26,46,28],[109,4,47,4],[110,2,48,0],[111,2,49,0],[112,0,50,0],[113,0,51,0],[114,0,52,0],[115,0,53,0],[116,0,54,0],[117,0,55,0],[118,2,56,7],[118,11,56,16,"hasStringAsync"],[118,25,56,30,"hasStringAsync"],[118,26,56,30],[118,28,56,33],[119,4,57,4],[119,8,57,8],[119,9,57,9,"ExpoClipboard"],[119,31,57,22],[119,32,57,23,"hasStringAsync"],[119,46,57,37],[119,48,57,39],[120,6,58,8],[120,12,58,14],[120,16,58,18,"UnavailabilityError"],[120,52,58,37],[120,53,58,38],[120,64,58,49],[120,66,58,51],[120,82,58,67],[120,83,58,68],[121,4,59,4],[122,4,60,4],[122,11,60,11,"ExpoClipboard"],[122,33,60,24],[122,34,60,25,"hasStringAsync"],[122,48,60,39],[122,49,60,40],[122,50,60,41],[123,2,61,0],[124,2,62,0],[125,0,63,0],[126,0,64,0],[127,0,65,0],[128,0,66,0],[129,0,67,0],[130,2,62,0],[130,11,68,22,"getUrlAsync"],[130,22,68,33,"getUrlAsync"],[130,23,68,33],[131,4,68,33],[131,11,68,33,"_getUrlAsync"],[131,23,68,33],[131,24,68,33,"apply"],[131,29,68,33],[131,36,68,33,"arguments"],[131,45,68,33],[132,2,68,33],[133,2,74,0],[134,0,75,0],[135,0,76,0],[136,0,77,0],[137,0,78,0],[138,0,79,0],[139,0,80,0],[140,0,81,0],[141,0,82,0],[142,0,83,0],[143,2,74,0],[143,11,74,0,"_getUrlAsync"],[143,24,74,0],[144,4,74,0,"_getUrlAsync"],[144,16,74,0],[144,23,74,0,"_asyncToGenerator2"],[144,41,74,0],[144,42,74,0,"default"],[144,49,74,0],[144,51,68,7],[144,64,68,36],[145,6,69,4],[145,10,69,8],[145,11,69,9,"ExpoClipboard"],[145,33,69,22],[145,34,69,23,"getUrlAsync"],[145,45,69,34],[145,47,69,36],[146,8,70,8],[146,14,70,14],[146,18,70,18,"UnavailabilityError"],[146,54,70,37],[146,55,70,38],[146,66,70,49],[146,68,70,51],[146,81,70,64],[146,82,70,65],[147,6,71,4],[148,6,72,4],[148,19,72,17,"ExpoClipboard"],[148,41,72,30],[148,42,72,31,"getUrlAsync"],[148,53,72,42],[148,54,72,43],[148,55,72,44],[149,4,73,0],[149,5,73,1],[150,4,73,1],[150,11,73,1,"_getUrlAsync"],[150,23,73,1],[150,24,73,1,"apply"],[150,29,73,1],[150,36,73,1,"arguments"],[150,45,73,1],[151,2,73,1],[152,2,73,1],[152,11,84,22,"setUrlAsync"],[152,22,84,33,"setUrlAsync"],[152,23,84,33,"_x2"],[152,26,84,33],[153,4,84,33],[153,11,84,33,"_setUrlAsync"],[153,23,84,33],[153,24,84,33,"apply"],[153,29,84,33],[153,36,84,33,"arguments"],[153,45,84,33],[154,2,84,33],[155,2,90,0],[156,0,91,0],[157,0,92,0],[158,0,93,0],[159,0,94,0],[160,0,95,0],[161,2,90,0],[161,11,90,0,"_setUrlAsync"],[161,24,90,0],[162,4,90,0,"_setUrlAsync"],[162,16,90,0],[162,23,90,0,"_asyncToGenerator2"],[162,41,90,0],[162,42,90,0,"default"],[162,49,90,0],[162,51,84,7],[162,62,84,34,"url"],[162,65,84,37],[162,67,84,39],[163,6,85,4],[163,10,85,8],[163,11,85,9,"ExpoClipboard"],[163,33,85,22],[163,34,85,23,"setUrlAsync"],[163,45,85,34],[163,47,85,36],[164,8,86,8],[164,14,86,14],[164,18,86,18,"UnavailabilityError"],[164,54,86,37],[164,55,86,38],[164,66,86,49],[164,68,86,51],[164,81,86,64],[164,82,86,65],[165,6,87,4],[166,6,88,4],[166,13,88,11,"ExpoClipboard"],[166,35,88,24],[166,36,88,25,"setUrlAsync"],[166,47,88,36],[166,48,88,37,"url"],[166,51,88,40],[166,52,88,41],[167,4,89,0],[167,5,89,1],[168,4,89,1],[168,11,89,1,"_setUrlAsync"],[168,23,89,1],[168,24,89,1,"apply"],[168,29,89,1],[168,36,89,1,"arguments"],[168,45,89,1],[169,2,89,1],[170,2,89,1],[170,11,96,22,"hasUrlAsync"],[170,22,96,33,"hasUrlAsync"],[170,23,96,33],[171,4,96,33],[171,11,96,33,"_hasUrlAsync"],[171,23,96,33],[171,24,96,33,"apply"],[171,29,96,33],[171,36,96,33,"arguments"],[171,45,96,33],[172,2,96,33],[173,2,102,0],[174,0,103,0],[175,0,104,0],[176,0,105,0],[177,0,106,0],[178,0,107,0],[179,0,108,0],[180,0,109,0],[181,0,110,0],[182,0,111,0],[183,0,112,0],[184,0,113,0],[185,0,114,0],[186,0,115,0],[187,0,116,0],[188,0,117,0],[189,0,118,0],[190,2,102,0],[190,11,102,0,"_hasUrlAsync"],[190,24,102,0],[191,4,102,0,"_hasUrlAsync"],[191,16,102,0],[191,23,102,0,"_asyncToGenerator2"],[191,41,102,0],[191,42,102,0,"default"],[191,49,102,0],[191,51,96,7],[191,64,96,36],[192,6,97,4],[192,10,97,8],[192,11,97,9,"ExpoClipboard"],[192,33,97,22],[192,34,97,23,"hasUrlAsync"],[192,45,97,34],[192,47,97,36],[193,8,98,8],[193,14,98,14],[193,18,98,18,"UnavailabilityError"],[193,54,98,37],[193,55,98,38],[193,66,98,49],[193,68,98,51],[193,81,98,64],[193,82,98,65],[194,6,99,4],[195,6,100,4],[195,19,100,17,"ExpoClipboard"],[195,41,100,30],[195,42,100,31,"hasUrlAsync"],[195,53,100,42],[195,54,100,43],[195,55,100,44],[196,4,101,0],[196,5,101,1],[197,4,101,1],[197,11,101,1,"_hasUrlAsync"],[197,23,101,1],[197,24,101,1,"apply"],[197,29,101,1],[197,36,101,1,"arguments"],[197,45,101,1],[198,2,101,1],[199,2,101,1],[199,11,119,22,"getImageAsync"],[199,24,119,35,"getImageAsync"],[199,25,119,35,"_x3"],[199,28,119,35],[200,4,119,35],[200,11,119,35,"_getImageAsync"],[200,25,119,35],[200,26,119,35,"apply"],[200,31,119,35],[200,38,119,35,"arguments"],[200,47,119,35],[201,2,119,35],[202,2,125,0],[203,0,126,0],[204,0,127,0],[205,0,128,0],[206,0,129,0],[207,0,130,0],[208,0,131,0],[209,0,132,0],[210,0,133,0],[211,0,134,0],[212,0,135,0],[213,0,136,0],[214,0,137,0],[215,0,138,0],[216,2,125,0],[216,11,125,0,"_getImageAsync"],[216,26,125,0],[217,4,125,0,"_getImageAsync"],[217,18,125,0],[217,25,125,0,"_asyncToGenerator2"],[217,43,125,0],[217,44,125,0,"default"],[217,51,125,0],[217,53,119,7],[217,64,119,36,"options"],[217,71,119,43],[217,73,119,45],[218,6,120,4],[218,10,120,8],[218,11,120,9,"ExpoClipboard"],[218,33,120,22],[218,34,120,23,"getImageAsync"],[218,47,120,36],[218,49,120,38],[219,8,121,8],[219,14,121,14],[219,18,121,18,"UnavailabilityError"],[219,54,121,37],[219,55,121,38],[219,66,121,49],[219,68,121,51],[219,83,121,66],[219,84,121,67],[220,6,122,4],[221,6,123,4],[221,19,123,17,"ExpoClipboard"],[221,41,123,30],[221,42,123,31,"getImageAsync"],[221,55,123,44],[221,56,123,45,"options"],[221,63,123,52],[221,64,123,53],[222,4,124,0],[222,5,124,1],[223,4,124,1],[223,11,124,1,"_getImageAsync"],[223,25,124,1],[223,26,124,1,"apply"],[223,31,124,1],[223,38,124,1,"arguments"],[223,47,124,1],[224,2,124,1],[225,2,124,1],[225,11,139,22,"setImageAsync"],[225,24,139,35,"setImageAsync"],[225,25,139,35,"_x4"],[225,28,139,35],[226,4,139,35],[226,11,139,35,"_setImageAsync"],[226,25,139,35],[226,26,139,35,"apply"],[226,31,139,35],[226,38,139,35,"arguments"],[226,47,139,35],[227,2,139,35],[228,2,145,0],[229,0,146,0],[230,0,147,0],[231,0,148,0],[232,0,149,0],[233,0,150,0],[234,0,151,0],[235,2,145,0],[235,11,145,0,"_setImageAsync"],[235,26,145,0],[236,4,145,0,"_setImageAsync"],[236,18,145,0],[236,25,145,0,"_asyncToGenerator2"],[236,43,145,0],[236,44,145,0,"default"],[236,51,145,0],[236,53,139,7],[236,64,139,36,"base64Image"],[236,75,139,47],[236,77,139,49],[237,6,140,4],[237,10,140,8],[237,11,140,9,"ExpoClipboard"],[237,33,140,22],[237,34,140,23,"setImageAsync"],[237,47,140,36],[237,49,140,38],[238,8,141,8],[238,14,141,14],[238,18,141,18,"UnavailabilityError"],[238,54,141,37],[238,55,141,38],[238,66,141,49],[238,68,141,51],[238,83,141,66],[238,84,141,67],[239,6,142,4],[240,6,143,4],[240,13,143,11,"ExpoClipboard"],[240,35,143,24],[240,36,143,25,"setImageAsync"],[240,49,143,38],[240,50,143,39,"base64Image"],[240,61,143,50],[240,62,143,51],[241,4,144,0],[241,5,144,1],[242,4,144,1],[242,11,144,1,"_setImageAsync"],[242,25,144,1],[242,26,144,1,"apply"],[242,31,144,1],[242,38,144,1,"arguments"],[242,47,144,1],[243,2,144,1],[244,2,144,1],[244,11,152,22,"hasImageAsync"],[244,24,152,35,"hasImageAsync"],[244,25,152,35],[245,4,152,35],[245,11,152,35,"_hasImageAsync"],[245,25,152,35],[245,26,152,35,"apply"],[245,31,152,35],[245,38,152,35,"arguments"],[245,47,152,35],[246,2,152,35],[247,2,158,0],[248,0,159,0],[249,0,160,0],[250,0,161,0],[251,0,162,0],[252,0,163,0],[253,0,164,0],[254,0,165,0],[255,0,166,0],[256,0,167,0],[257,0,168,0],[258,0,169,0],[259,0,170,0],[260,0,171,0],[261,0,172,0],[262,0,173,0],[263,0,174,0],[264,0,175,0],[265,0,176,0],[266,0,177,0],[267,2,158,0],[267,11,158,0,"_hasImageAsync"],[267,26,158,0],[268,4,158,0,"_hasImageAsync"],[268,18,158,0],[268,25,158,0,"_asyncToGenerator2"],[268,43,158,0],[268,44,158,0,"default"],[268,51,158,0],[268,53,152,7],[268,66,152,38],[269,6,153,4],[269,10,153,8],[269,11,153,9,"ExpoClipboard"],[269,33,153,22],[269,34,153,23,"hasImageAsync"],[269,47,153,36],[269,49,153,38],[270,8,154,8],[270,14,154,14],[270,18,154,18,"UnavailabilityError"],[270,54,154,37],[270,55,154,38],[270,66,154,49],[270,68,154,51],[270,83,154,66],[270,84,154,67],[271,6,155,4],[272,6,156,4],[272,13,156,11,"ExpoClipboard"],[272,35,156,24],[272,36,156,25,"hasImageAsync"],[272,49,156,38],[272,50,156,39],[272,51,156,40],[273,4,157,0],[273,5,157,1],[274,4,157,1],[274,11,157,1,"_hasImageAsync"],[274,25,157,1],[274,26,157,1,"apply"],[274,31,157,1],[274,38,157,1,"arguments"],[274,47,157,1],[275,2,157,1],[276,2,178,7],[276,11,178,16,"addClipboardListener"],[276,31,178,36,"addClipboardListener"],[276,32,178,37,"listener"],[276,40,178,45],[276,42,178,47],[277,4,179,4],[278,4,180,4],[278,8,180,10,"listenerWrapper"],[278,23,180,25],[278,26,180,29,"event"],[278,31,180,34],[278,35,180,39],[279,6,181,8],[279,10,181,14,"wrappedEvent"],[279,22,181,26],[279,25,181,29],[280,8,182,12],[280,11,182,15,"event"],[280,16,182,20],[281,8,183,12],[281,12,183,16,"content"],[281,19,183,23,"content"],[281,20,183,23],[281,22,183,26],[282,10,185,16],[282,17,185,23],[282,19,185,25],[283,8,186,12],[284,6,187,8],[284,7,187,9],[285,6,188,8,"listener"],[285,14,188,16],[285,15,188,17,"wrappedEvent"],[285,27,188,29],[285,28,188,30],[286,4,189,4],[286,5,189,5],[287,4,190,4],[287,11,190,11,"ExpoClipboard"],[287,33,190,24],[287,34,190,25,"addListener"],[287,45,190,36],[287,46,190,37,"onClipboardEventName"],[287,66,190,57],[287,68,190,59,"listenerWrapper"],[287,83,190,74],[287,84,190,75],[288,2,191,0],[289,2,192,0],[290,0,193,0],[291,0,194,0],[292,0,195,0],[293,0,196,0],[294,0,197,0],[295,0,198,0],[296,0,199,0],[297,0,200,0],[298,0,201,0],[299,0,202,0],[300,0,203,0],[301,0,204,0],[302,2,205,7],[302,11,205,16,"removeClipboardListener"],[302,34,205,39,"removeClipboardListener"],[302,35,205,40,"subscription"],[302,47,205,52],[302,49,205,54],[303,4,206,4,"subscription"],[303,16,206,16],[303,17,206,17,"remove"],[303,23,206,23],[303,24,206,24],[303,25,206,25],[304,2,207,0],[305,2,208,0],[306,0,209,0],[307,0,210,0],[308,0,211,0],[309,0,212,0],[310,0,213,0],[311,0,214,0],[312,2,215,7],[312,6,215,13,"isPasteButtonAvailable"],[312,28,215,35],[312,31,215,35,"exports"],[312,38,215,35],[312,39,215,35,"isPasteButtonAvailable"],[312,61,215,35],[312,64,215,101],[312,69,215,106],[313,0,215,107],[313,3]],"functionMap":{"names":["<global>","getStringAsync","setStringAsync","setString","hasStringAsync","getUrlAsync","setUrlAsync","hasUrlAsync","getImageAsync","setImageAsync","hasImageAsync","addClipboardListener","listenerWrapper","wrappedEvent.get__content","removeClipboardListener"],"mappings":"AAA;OCW;CDK;OES;CFK;OGQ;CHS;OIQ;CJK;OKO;CLK;OMW;CNK;OOO;CPK;OQkB;CRK;OSe;CTK;OUQ;CVK;OWqB;4BCE;YCG;aDG;KDG;CXE;Occ;CdE"}},"type":"js/module"}]}