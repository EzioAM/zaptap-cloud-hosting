{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.encodeXML = encodeXML;\n  exports.xmlReplacer = exports.getCodePoint = exports.escapeUTF8 = exports.escapeText = exports.escapeAttribute = exports.escape = void 0;\n  var xmlReplacer = exports.xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\n  var xmlCodeMap = new Map([[34, \"&quot;\"], [38, \"&amp;\"], [39, \"&apos;\"], [60, \"&lt;\"], [62, \"&gt;\"]]);\n  // For compatibility with node < 4, we wrap `codePointAt`\n  var getCodePoint = exports.getCodePoint =\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  String.prototype.codePointAt != null ? function (str, index) {\n    return str.codePointAt(index);\n  } :\n  // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n  function (c, index) {\n    return (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n  };\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in XML\n   * documents using XML entities.\n   *\n   * If a character has no equivalent entity, a\n   * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n   */\n  function encodeXML(str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = xmlReplacer.exec(str)) !== null) {\n      var i = match.index;\n      var char = str.charCodeAt(i);\n      var next = xmlCodeMap.get(char);\n      if (next !== undefined) {\n        ret += str.substring(lastIdx, i) + next;\n        lastIdx = i + 1;\n      } else {\n        ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;\n        // Increase by 1 if we have a surrogate pair\n        lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n      }\n    }\n    return ret + str.substr(lastIdx);\n  }\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in XML\n   * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n   *\n   * Have a look at `escapeUTF8` if you want a more concise output at the expense\n   * of reduced transportability.\n   *\n   * @param data String to escape.\n   */\n  var escape = exports.escape = encodeXML;\n  /**\n   * Creates a function that escapes all characters matched by the given regular\n   * expression using the given map of characters to escape to their entities.\n   *\n   * @param regex Regular expression to match characters to escape.\n   * @param map Map of characters to escape to their entities.\n   *\n   * @returns Function that escapes all characters matched by the given regular\n   * expression using the given map of characters to escape to their entities.\n   */\n  function getEscaper(regex, map) {\n    return function escape(data) {\n      var match;\n      var lastIdx = 0;\n      var result = \"\";\n      while (match = regex.exec(data)) {\n        if (lastIdx !== match.index) {\n          result += data.substring(lastIdx, match.index);\n        }\n        // We know that this character will be in the map.\n        result += map.get(match[0].charCodeAt(0));\n        // Every match will be of length 1\n        lastIdx = match.index + 1;\n      }\n      return result + data.substring(lastIdx);\n    };\n  }\n  /**\n   * Encodes all characters not valid in XML documents using XML entities.\n   *\n   * Note that the output will be character-set dependent.\n   *\n   * @param data String to escape.\n   */\n  var escapeUTF8 = exports.escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n  /**\n   * Encodes all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   *\n   * @param data String to escape.\n   */\n  var escapeAttribute = exports.escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([[34, \"&quot;\"], [38, \"&amp;\"], [160, \"&nbsp;\"]]));\n  /**\n   * Encodes all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   *\n   * @param data String to escape.\n   */\n  var escapeText = exports.escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([[38, \"&amp;\"], [60, \"&lt;\"], [62, \"&gt;\"], [160, \"&nbsp;\"]]));\n});","lineCount":104,"map":[[7,2,1,7],[7,6,1,13,"xmlReplacer"],[7,17,1,24],[7,20,1,24,"exports"],[7,27,1,24],[7,28,1,24,"xmlReplacer"],[7,39,1,24],[7,42,1,27],[7,64,1,49],[8,2,2,0],[8,6,2,6,"xmlCodeMap"],[8,16,2,16],[8,19,2,19],[8,23,2,23,"Map"],[8,26,2,26],[8,27,2,27],[8,28,3,4],[8,29,3,5],[8,31,3,7],[8,33,3,9],[8,41,3,17],[8,42,3,18],[8,44,4,4],[8,45,4,5],[8,47,4,7],[8,49,4,9],[8,56,4,16],[8,57,4,17],[8,59,5,4],[8,60,5,5],[8,62,5,7],[8,64,5,9],[8,72,5,17],[8,73,5,18],[8,75,6,4],[8,76,6,5],[8,78,6,7],[8,80,6,9],[8,86,6,15],[8,87,6,16],[8,89,7,4],[8,90,7,5],[8,92,7,7],[8,94,7,9],[8,100,7,15],[8,101,7,16],[8,102,8,1],[8,103,8,2],[9,2,9,0],[10,2,10,7],[10,6,10,13,"getCodePoint"],[10,18,10,25],[10,21,10,25,"exports"],[10,28,10,25],[10,29,10,25,"getCodePoint"],[10,41,10,25],[11,2,11,0],[12,2,12,0,"String"],[12,8,12,6],[12,9,12,7,"prototype"],[12,18,12,16],[12,19,12,17,"codePointAt"],[12,30,12,28],[12,34,12,32],[12,38,12,36],[12,41,13,6],[12,51,13,7,"str"],[12,54,13,10],[12,56,13,12,"index"],[12,61,13,17],[13,4,13,17],[13,11,13,22,"str"],[13,14,13,25],[13,15,13,26,"codePointAt"],[13,26,13,37],[13,27,13,38,"index"],[13,32,13,43],[13,33,13,44],[14,2,13,44],[15,2,14,6],[16,2,15,8],[16,12,15,9,"c"],[16,13,15,10],[16,15,15,12,"index"],[16,20,15,17],[17,4,15,17],[17,11,15,22],[17,12,15,23,"c"],[17,13,15,24],[17,14,15,25,"charCodeAt"],[17,24,15,35],[17,25,15,36,"index"],[17,30,15,41],[17,31,15,42],[17,34,15,45],[17,40,15,51],[17,46,15,57],[17,52,15,63],[17,55,16,14],[17,56,16,15,"c"],[17,57,16,16],[17,58,16,17,"charCodeAt"],[17,68,16,27],[17,69,16,28,"index"],[17,74,16,33],[17,75,16,34],[17,78,16,37],[17,84,16,43],[17,88,16,47],[17,93,16,52],[17,96,17,16,"c"],[17,97,17,17],[17,98,17,18,"charCodeAt"],[17,108,17,28],[17,109,17,29,"index"],[17,114,17,34],[17,117,17,37],[17,118,17,38],[17,119,17,39],[17,122,18,16],[17,128,18,22],[17,131,19,16],[17,138,19,23],[17,141,20,14,"c"],[17,142,20,15],[17,143,20,16,"charCodeAt"],[17,153,20,26],[17,154,20,27,"index"],[17,159,20,32],[17,160,20,33],[18,2,20,33],[19,2,21,0],[20,0,22,0],[21,0,23,0],[22,0,24,0],[23,0,25,0],[24,0,26,0],[25,0,27,0],[26,2,28,7],[26,11,28,16,"encodeXML"],[26,20,28,25,"encodeXML"],[26,21,28,26,"str"],[26,24,28,29],[26,26,28,31],[27,4,29,4],[27,8,29,8,"ret"],[27,11,29,11],[27,14,29,14],[27,16,29,16],[28,4,30,4],[28,8,30,8,"lastIdx"],[28,15,30,15],[28,18,30,18],[28,19,30,19],[29,4,31,4],[29,8,31,8,"match"],[29,13,31,13],[30,4,32,4],[30,11,32,11],[30,12,32,12,"match"],[30,17,32,17],[30,20,32,20,"xmlReplacer"],[30,31,32,31],[30,32,32,32,"exec"],[30,36,32,36],[30,37,32,37,"str"],[30,40,32,40],[30,41,32,41],[30,47,32,47],[30,51,32,51],[30,53,32,53],[31,6,33,8],[31,10,33,14,"i"],[31,11,33,15],[31,14,33,18,"match"],[31,19,33,23],[31,20,33,24,"index"],[31,25,33,29],[32,6,34,8],[32,10,34,14,"char"],[32,14,34,18],[32,17,34,21,"str"],[32,20,34,24],[32,21,34,25,"charCodeAt"],[32,31,34,35],[32,32,34,36,"i"],[32,33,34,37],[32,34,34,38],[33,6,35,8],[33,10,35,14,"next"],[33,14,35,18],[33,17,35,21,"xmlCodeMap"],[33,27,35,31],[33,28,35,32,"get"],[33,31,35,35],[33,32,35,36,"char"],[33,36,35,40],[33,37,35,41],[34,6,36,8],[34,10,36,12,"next"],[34,14,36,16],[34,19,36,21,"undefined"],[34,28,36,30],[34,30,36,32],[35,8,37,12,"ret"],[35,11,37,15],[35,15,37,19,"str"],[35,18,37,22],[35,19,37,23,"substring"],[35,28,37,32],[35,29,37,33,"lastIdx"],[35,36,37,40],[35,38,37,42,"i"],[35,39,37,43],[35,40,37,44],[35,43,37,47,"next"],[35,47,37,51],[36,8,38,12,"lastIdx"],[36,15,38,19],[36,18,38,22,"i"],[36,19,38,23],[36,22,38,26],[36,23,38,27],[37,6,39,8],[37,7,39,9],[37,13,40,13],[38,8,41,12,"ret"],[38,11,41,15],[38,15,41,19],[38,18,41,22,"str"],[38,21,41,25],[38,22,41,26,"substring"],[38,31,41,35],[38,32,41,36,"lastIdx"],[38,39,41,43],[38,41,41,45,"i"],[38,42,41,46],[38,43,41,47],[38,49,41,53,"getCodePoint"],[38,61,41,65],[38,62,41,66,"str"],[38,65,41,69],[38,67,41,71,"i"],[38,68,41,72],[38,69,41,73],[38,70,41,74,"toString"],[38,78,41,82],[38,79,41,83],[38,81,41,85],[38,82,41,86],[38,85,41,89],[39,8,42,12],[40,8,43,12,"lastIdx"],[40,15,43,19],[40,18,43,22,"xmlReplacer"],[40,29,43,33],[40,30,43,34,"lastIndex"],[40,39,43,43],[40,43,43,47,"Number"],[40,49,43,53],[40,50,43,54],[40,51,43,55,"char"],[40,55,43,59],[40,58,43,62],[40,64,43,68],[40,70,43,74],[40,76,43,80],[40,77,43,81],[41,6,44,8],[42,4,45,4],[43,4,46,4],[43,11,46,11,"ret"],[43,14,46,14],[43,17,46,17,"str"],[43,20,46,20],[43,21,46,21,"substr"],[43,27,46,27],[43,28,46,28,"lastIdx"],[43,35,46,35],[43,36,46,36],[44,2,47,0],[45,2,48,0],[46,0,49,0],[47,0,50,0],[48,0,51,0],[49,0,52,0],[50,0,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,2,57,7],[54,6,57,13,"escape"],[54,12,57,19],[54,15,57,19,"exports"],[54,22,57,19],[54,23,57,19,"escape"],[54,29,57,19],[54,32,57,22,"encodeXML"],[54,41,57,31],[55,2,58,0],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,0,66,0],[64,0,67,0],[65,2,68,0],[65,11,68,9,"getEscaper"],[65,21,68,19,"getEscaper"],[65,22,68,20,"regex"],[65,27,68,25],[65,29,68,27,"map"],[65,32,68,30],[65,34,68,32],[66,4,69,4],[66,11,69,11],[66,20,69,20,"escape"],[66,26,69,26,"escape"],[66,27,69,27,"data"],[66,31,69,31],[66,33,69,33],[67,6,70,8],[67,10,70,12,"match"],[67,15,70,17],[68,6,71,8],[68,10,71,12,"lastIdx"],[68,17,71,19],[68,20,71,22],[68,21,71,23],[69,6,72,8],[69,10,72,12,"result"],[69,16,72,18],[69,19,72,21],[69,21,72,23],[70,6,73,8],[70,13,73,16,"match"],[70,18,73,21],[70,21,73,24,"regex"],[70,26,73,29],[70,27,73,30,"exec"],[70,31,73,34],[70,32,73,35,"data"],[70,36,73,39],[70,37,73,40],[70,39,73,43],[71,8,74,12],[71,12,74,16,"lastIdx"],[71,19,74,23],[71,24,74,28,"match"],[71,29,74,33],[71,30,74,34,"index"],[71,35,74,39],[71,37,74,41],[72,10,75,16,"result"],[72,16,75,22],[72,20,75,26,"data"],[72,24,75,30],[72,25,75,31,"substring"],[72,34,75,40],[72,35,75,41,"lastIdx"],[72,42,75,48],[72,44,75,50,"match"],[72,49,75,55],[72,50,75,56,"index"],[72,55,75,61],[72,56,75,62],[73,8,76,12],[74,8,77,12],[75,8,78,12,"result"],[75,14,78,18],[75,18,78,22,"map"],[75,21,78,25],[75,22,78,26,"get"],[75,25,78,29],[75,26,78,30,"match"],[75,31,78,35],[75,32,78,36],[75,33,78,37],[75,34,78,38],[75,35,78,39,"charCodeAt"],[75,45,78,49],[75,46,78,50],[75,47,78,51],[75,48,78,52],[75,49,78,53],[76,8,79,12],[77,8,80,12,"lastIdx"],[77,15,80,19],[77,18,80,22,"match"],[77,23,80,27],[77,24,80,28,"index"],[77,29,80,33],[77,32,80,36],[77,33,80,37],[78,6,81,8],[79,6,82,8],[79,13,82,15,"result"],[79,19,82,21],[79,22,82,24,"data"],[79,26,82,28],[79,27,82,29,"substring"],[79,36,82,38],[79,37,82,39,"lastIdx"],[79,44,82,46],[79,45,82,47],[80,4,83,4],[80,5,83,5],[81,2,84,0],[82,2,85,0],[83,0,86,0],[84,0,87,0],[85,0,88,0],[86,0,89,0],[87,0,90,0],[88,0,91,0],[89,2,92,7],[89,6,92,13,"escapeUTF8"],[89,16,92,23],[89,19,92,23,"exports"],[89,26,92,23],[89,27,92,23,"escapeUTF8"],[89,37,92,23],[89,40,92,26,"getEscaper"],[89,50,92,36],[89,51,92,37],[89,61,92,47],[89,63,92,49,"xmlCodeMap"],[89,73,92,59],[89,74,92,60],[90,2,93,0],[91,0,94,0],[92,0,95,0],[93,0,96,0],[94,0,97,0],[95,0,98,0],[96,2,99,7],[96,6,99,13,"escapeAttribute"],[96,21,99,28],[96,24,99,28,"exports"],[96,31,99,28],[96,32,99,28,"escapeAttribute"],[96,47,99,28],[96,50,99,31,"getEscaper"],[96,60,99,41],[96,61,99,42],[96,74,99,55],[96,76,99,57],[96,80,99,61,"Map"],[96,83,99,64],[96,84,99,65],[96,85,100,4],[96,86,100,5],[96,88,100,7],[96,90,100,9],[96,98,100,17],[96,99,100,18],[96,101,101,4],[96,102,101,5],[96,104,101,7],[96,106,101,9],[96,113,101,16],[96,114,101,17],[96,116,102,4],[96,117,102,5],[96,120,102,8],[96,122,102,10],[96,130,102,18],[96,131,102,19],[96,132,103,1],[96,133,103,2],[96,134,103,3],[97,2,104,0],[98,0,105,0],[99,0,106,0],[100,0,107,0],[101,0,108,0],[102,0,109,0],[103,2,110,7],[103,6,110,13,"escapeText"],[103,16,110,23],[103,19,110,23,"exports"],[103,26,110,23],[103,27,110,23,"escapeText"],[103,37,110,23],[103,40,110,26,"getEscaper"],[103,50,110,36],[103,51,110,37],[103,65,110,51],[103,67,110,53],[103,71,110,57,"Map"],[103,74,110,60],[103,75,110,61],[103,76,111,4],[103,77,111,5],[103,79,111,7],[103,81,111,9],[103,88,111,16],[103,89,111,17],[103,91,112,4],[103,92,112,5],[103,94,112,7],[103,96,112,9],[103,102,112,15],[103,103,112,16],[103,105,113,4],[103,106,113,5],[103,108,113,7],[103,110,113,9],[103,116,113,15],[103,117,113,16],[103,119,114,4],[103,120,114,5],[103,123,114,8],[103,125,114,10],[103,133,114,18],[103,134,114,19],[103,135,115,1],[103,136,115,2],[103,137,115,3],[104,0,115,4],[104,3]],"functionMap":{"names":["<global>","<anonymous>","encodeXML","getEscaper","escape"],"mappings":"AAA;MCY,sCD;QCE;iCDK;OEQ;CFmB;AGqB;WCC;KDc;CHC"}},"type":"js/module"}]}