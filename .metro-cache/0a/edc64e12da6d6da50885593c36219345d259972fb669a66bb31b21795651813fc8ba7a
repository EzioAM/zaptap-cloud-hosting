{"dependencies":[{"name":"domhandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":41,"index":41}}],"key":"KYhnx5+o028X5IFQh7qGm6XZdSU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DocumentPosition = void 0;\n  exports.compareDocumentPosition = compareDocumentPosition;\n  exports.removeSubsets = removeSubsets;\n  exports.uniqueSort = uniqueSort;\n  var _domhandler = require(_dependencyMap[0], \"domhandler\");\n  /**\n   * Given an array of nodes, remove any member that is contained by another\n   * member.\n   *\n   * @category Helpers\n   * @param nodes Nodes to filter.\n   * @returns Remaining nodes that aren't contained by other nodes.\n   */\n  function removeSubsets(nodes) {\n    var idx = nodes.length;\n    /*\n     * Check if each node (or one of its ancestors) is already contained in the\n     * array.\n     */\n    while (--idx >= 0) {\n      var node = nodes[idx];\n      /*\n       * Remove the node if it is not unique.\n       * We are going through the array from the end, so we only\n       * have to check nodes that preceed the node under consideration in the array.\n       */\n      if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n        nodes.splice(idx, 1);\n        continue;\n      }\n      for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n        if (nodes.includes(ancestor)) {\n          nodes.splice(idx, 1);\n          break;\n        }\n      }\n    }\n    return nodes;\n  }\n  /**\n   * @category Helpers\n   * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}\n   */\n  var DocumentPosition;\n  (function (DocumentPosition) {\n    DocumentPosition[DocumentPosition[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n    DocumentPosition[DocumentPosition[\"PRECEDING\"] = 2] = \"PRECEDING\";\n    DocumentPosition[DocumentPosition[\"FOLLOWING\"] = 4] = \"FOLLOWING\";\n    DocumentPosition[DocumentPosition[\"CONTAINS\"] = 8] = \"CONTAINS\";\n    DocumentPosition[DocumentPosition[\"CONTAINED_BY\"] = 16] = \"CONTAINED_BY\";\n  })(DocumentPosition || (exports.DocumentPosition = DocumentPosition = {}));\n  /**\n   * Compare the position of one node against another node in any other document,\n   * returning a bitmask with the values from {@link DocumentPosition}.\n   *\n   * Document order:\n   * > There is an ordering, document order, defined on all the nodes in the\n   * > document corresponding to the order in which the first character of the\n   * > XML representation of each node occurs in the XML representation of the\n   * > document after expansion of general entities. Thus, the document element\n   * > node will be the first node. Element nodes occur before their children.\n   * > Thus, document order orders element nodes in order of the occurrence of\n   * > their start-tag in the XML (after expansion of entities). The attribute\n   * > nodes of an element occur after the element and before its children. The\n   * > relative order of attribute nodes is implementation-dependent.\n   *\n   * Source:\n   * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n   *\n   * @category Helpers\n   * @param nodeA The first node to use in the comparison\n   * @param nodeB The second node to use in the comparison\n   * @returns A bitmask describing the input nodes' relative position.\n   *\n   * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n   * a description of these values.\n   */\n  function compareDocumentPosition(nodeA, nodeB) {\n    var aParents = [];\n    var bParents = [];\n    if (nodeA === nodeB) {\n      return 0;\n    }\n    var current = (0, _domhandler.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n    while (current) {\n      aParents.unshift(current);\n      current = current.parent;\n    }\n    current = (0, _domhandler.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n    while (current) {\n      bParents.unshift(current);\n      current = current.parent;\n    }\n    var maxIdx = Math.min(aParents.length, bParents.length);\n    var idx = 0;\n    while (idx < maxIdx && aParents[idx] === bParents[idx]) {\n      idx++;\n    }\n    if (idx === 0) {\n      return DocumentPosition.DISCONNECTED;\n    }\n    var sharedParent = aParents[idx - 1];\n    var siblings = sharedParent.children;\n    var aSibling = aParents[idx];\n    var bSibling = bParents[idx];\n    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n      if (sharedParent === nodeB) {\n        return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;\n      }\n      return DocumentPosition.FOLLOWING;\n    }\n    if (sharedParent === nodeA) {\n      return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;\n    }\n    return DocumentPosition.PRECEDING;\n  }\n  /**\n   * Sort an array of nodes based on their relative position in the document,\n   * removing any duplicate nodes. If the array contains nodes that do not belong\n   * to the same document, sort order is unspecified.\n   *\n   * @category Helpers\n   * @param nodes Array of DOM nodes.\n   * @returns Collection of unique nodes, sorted in document order.\n   */\n  function uniqueSort(nodes) {\n    nodes = nodes.filter(function (node, i, arr) {\n      return !arr.includes(node, i + 1);\n    });\n    nodes.sort(function (a, b) {\n      var relative = compareDocumentPosition(a, b);\n      if (relative & DocumentPosition.PRECEDING) {\n        return -1;\n      } else if (relative & DocumentPosition.FOLLOWING) {\n        return 1;\n      }\n      return 0;\n    });\n    return nodes;\n  }\n});","lineCount":145,"map":[[9,2,1,0],[9,6,1,0,"_domhandler"],[9,17,1,0],[9,20,1,0,"require"],[9,27,1,0],[9,28,1,0,"_dependencyMap"],[9,42,1,0],[10,2,2,0],[11,0,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[16,0,8,0],[17,0,9,0],[18,2,10,7],[18,11,10,16,"removeSubsets"],[18,24,10,29,"removeSubsets"],[18,25,10,30,"nodes"],[18,30,10,35],[18,32,10,37],[19,4,11,4],[19,8,11,8,"idx"],[19,11,11,11],[19,14,11,14,"nodes"],[19,19,11,19],[19,20,11,20,"length"],[19,26,11,26],[20,4,12,4],[21,0,13,0],[22,0,14,0],[23,0,15,0],[24,4,16,4],[24,11,16,11],[24,13,16,13,"idx"],[24,16,16,16],[24,20,16,20],[24,21,16,21],[24,23,16,23],[25,6,17,8],[25,10,17,14,"node"],[25,14,17,18],[25,17,17,21,"nodes"],[25,22,17,26],[25,23,17,27,"idx"],[25,26,17,30],[25,27,17,31],[26,6,18,8],[27,0,19,0],[28,0,20,0],[29,0,21,0],[30,0,22,0],[31,6,23,8],[31,10,23,12,"idx"],[31,13,23,15],[31,16,23,18],[31,17,23,19],[31,21,23,23,"nodes"],[31,26,23,28],[31,27,23,29,"lastIndexOf"],[31,38,23,40],[31,39,23,41,"node"],[31,43,23,45],[31,45,23,47,"idx"],[31,48,23,50],[31,51,23,53],[31,52,23,54],[31,53,23,55],[31,57,23,59],[31,58,23,60],[31,60,23,62],[32,8,24,12,"nodes"],[32,13,24,17],[32,14,24,18,"splice"],[32,20,24,24],[32,21,24,25,"idx"],[32,24,24,28],[32,26,24,30],[32,27,24,31],[32,28,24,32],[33,8,25,12],[34,6,26,8],[35,6,27,8],[35,11,27,13],[35,15,27,17,"ancestor"],[35,23,27,25],[35,26,27,28,"node"],[35,30,27,32],[35,31,27,33,"parent"],[35,37,27,39],[35,39,27,41,"ancestor"],[35,47,27,49],[35,49,27,51,"ancestor"],[35,57,27,59],[35,60,27,62,"ancestor"],[35,68,27,70],[35,69,27,71,"parent"],[35,75,27,77],[35,77,27,79],[36,8,28,12],[36,12,28,16,"nodes"],[36,17,28,21],[36,18,28,22,"includes"],[36,26,28,30],[36,27,28,31,"ancestor"],[36,35,28,39],[36,36,28,40],[36,38,28,42],[37,10,29,16,"nodes"],[37,15,29,21],[37,16,29,22,"splice"],[37,22,29,28],[37,23,29,29,"idx"],[37,26,29,32],[37,28,29,34],[37,29,29,35],[37,30,29,36],[38,10,30,16],[39,8,31,12],[40,6,32,8],[41,4,33,4],[42,4,34,4],[42,11,34,11,"nodes"],[42,16,34,16],[43,2,35,0],[44,2,36,0],[45,0,37,0],[46,0,38,0],[47,0,39,0],[48,2,40,7],[48,6,40,11,"DocumentPosition"],[48,22,40,27],[49,2,41,0],[49,3,41,1],[49,13,41,11,"DocumentPosition"],[49,29,41,27],[49,31,41,29],[50,4,42,4,"DocumentPosition"],[50,20,42,20],[50,21,42,21,"DocumentPosition"],[50,37,42,37],[50,38,42,38],[50,52,42,52],[50,53,42,53],[50,56,42,56],[50,57,42,57],[50,58,42,58],[50,61,42,61],[50,75,42,75],[51,4,43,4,"DocumentPosition"],[51,20,43,20],[51,21,43,21,"DocumentPosition"],[51,37,43,37],[51,38,43,38],[51,49,43,49],[51,50,43,50],[51,53,43,53],[51,54,43,54],[51,55,43,55],[51,58,43,58],[51,69,43,69],[52,4,44,4,"DocumentPosition"],[52,20,44,20],[52,21,44,21,"DocumentPosition"],[52,37,44,37],[52,38,44,38],[52,49,44,49],[52,50,44,50],[52,53,44,53],[52,54,44,54],[52,55,44,55],[52,58,44,58],[52,69,44,69],[53,4,45,4,"DocumentPosition"],[53,20,45,20],[53,21,45,21,"DocumentPosition"],[53,37,45,37],[53,38,45,38],[53,48,45,48],[53,49,45,49],[53,52,45,52],[53,53,45,53],[53,54,45,54],[53,57,45,57],[53,67,45,67],[54,4,46,4,"DocumentPosition"],[54,20,46,20],[54,21,46,21,"DocumentPosition"],[54,37,46,37],[54,38,46,38],[54,52,46,52],[54,53,46,53],[54,56,46,56],[54,58,46,58],[54,59,46,59],[54,62,46,62],[54,76,46,76],[55,2,47,0],[55,3,47,1],[55,5,47,3,"DocumentPosition"],[55,21,47,19],[55,26,47,19,"exports"],[55,33,47,19],[55,34,47,19,"DocumentPosition"],[55,50,47,19],[55,53,47,24,"DocumentPosition"],[55,69,47,40],[55,72,47,43],[55,73,47,44],[55,74,47,45],[55,75,47,46],[55,76,47,47],[56,2,48,0],[57,0,49,0],[58,0,50,0],[59,0,51,0],[60,0,52,0],[61,0,53,0],[62,0,54,0],[63,0,55,0],[64,0,56,0],[65,0,57,0],[66,0,58,0],[67,0,59,0],[68,0,60,0],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,0,72,0],[81,0,73,0],[82,2,74,7],[82,11,74,16,"compareDocumentPosition"],[82,34,74,39,"compareDocumentPosition"],[82,35,74,40,"nodeA"],[82,40,74,45],[82,42,74,47,"nodeB"],[82,47,74,52],[82,49,74,54],[83,4,75,4],[83,8,75,10,"aParents"],[83,16,75,18],[83,19,75,21],[83,21,75,23],[84,4,76,4],[84,8,76,10,"bParents"],[84,16,76,18],[84,19,76,21],[84,21,76,23],[85,4,77,4],[85,8,77,8,"nodeA"],[85,13,77,13],[85,18,77,18,"nodeB"],[85,23,77,23],[85,25,77,25],[86,6,78,8],[86,13,78,15],[86,14,78,16],[87,4,79,4],[88,4,80,4],[88,8,80,8,"current"],[88,15,80,15],[88,18,80,18],[88,22,80,18,"hasChildren"],[88,45,80,29],[88,47,80,30,"nodeA"],[88,52,80,35],[88,53,80,36],[88,56,80,39,"nodeA"],[88,61,80,44],[88,64,80,47,"nodeA"],[88,69,80,52],[88,70,80,53,"parent"],[88,76,80,59],[89,4,81,4],[89,11,81,11,"current"],[89,18,81,18],[89,20,81,20],[90,6,82,8,"aParents"],[90,14,82,16],[90,15,82,17,"unshift"],[90,22,82,24],[90,23,82,25,"current"],[90,30,82,32],[90,31,82,33],[91,6,83,8,"current"],[91,13,83,15],[91,16,83,18,"current"],[91,23,83,25],[91,24,83,26,"parent"],[91,30,83,32],[92,4,84,4],[93,4,85,4,"current"],[93,11,85,11],[93,14,85,14],[93,18,85,14,"hasChildren"],[93,41,85,25],[93,43,85,26,"nodeB"],[93,48,85,31],[93,49,85,32],[93,52,85,35,"nodeB"],[93,57,85,40],[93,60,85,43,"nodeB"],[93,65,85,48],[93,66,85,49,"parent"],[93,72,85,55],[94,4,86,4],[94,11,86,11,"current"],[94,18,86,18],[94,20,86,20],[95,6,87,8,"bParents"],[95,14,87,16],[95,15,87,17,"unshift"],[95,22,87,24],[95,23,87,25,"current"],[95,30,87,32],[95,31,87,33],[96,6,88,8,"current"],[96,13,88,15],[96,16,88,18,"current"],[96,23,88,25],[96,24,88,26,"parent"],[96,30,88,32],[97,4,89,4],[98,4,90,4],[98,8,90,10,"maxIdx"],[98,14,90,16],[98,17,90,19,"Math"],[98,21,90,23],[98,22,90,24,"min"],[98,25,90,27],[98,26,90,28,"aParents"],[98,34,90,36],[98,35,90,37,"length"],[98,41,90,43],[98,43,90,45,"bParents"],[98,51,90,53],[98,52,90,54,"length"],[98,58,90,60],[98,59,90,61],[99,4,91,4],[99,8,91,8,"idx"],[99,11,91,11],[99,14,91,14],[99,15,91,15],[100,4,92,4],[100,11,92,11,"idx"],[100,14,92,14],[100,17,92,17,"maxIdx"],[100,23,92,23],[100,27,92,27,"aParents"],[100,35,92,35],[100,36,92,36,"idx"],[100,39,92,39],[100,40,92,40],[100,45,92,45,"bParents"],[100,53,92,53],[100,54,92,54,"idx"],[100,57,92,57],[100,58,92,58],[100,60,92,60],[101,6,93,8,"idx"],[101,9,93,11],[101,11,93,13],[102,4,94,4],[103,4,95,4],[103,8,95,8,"idx"],[103,11,95,11],[103,16,95,16],[103,17,95,17],[103,19,95,19],[104,6,96,8],[104,13,96,15,"DocumentPosition"],[104,29,96,31],[104,30,96,32,"DISCONNECTED"],[104,42,96,44],[105,4,97,4],[106,4,98,4],[106,8,98,10,"sharedParent"],[106,20,98,22],[106,23,98,25,"aParents"],[106,31,98,33],[106,32,98,34,"idx"],[106,35,98,37],[106,38,98,40],[106,39,98,41],[106,40,98,42],[107,4,99,4],[107,8,99,10,"siblings"],[107,16,99,18],[107,19,99,21,"sharedParent"],[107,31,99,33],[107,32,99,34,"children"],[107,40,99,42],[108,4,100,4],[108,8,100,10,"aSibling"],[108,16,100,18],[108,19,100,21,"aParents"],[108,27,100,29],[108,28,100,30,"idx"],[108,31,100,33],[108,32,100,34],[109,4,101,4],[109,8,101,10,"bSibling"],[109,16,101,18],[109,19,101,21,"bParents"],[109,27,101,29],[109,28,101,30,"idx"],[109,31,101,33],[109,32,101,34],[110,4,102,4],[110,8,102,8,"siblings"],[110,16,102,16],[110,17,102,17,"indexOf"],[110,24,102,24],[110,25,102,25,"aSibling"],[110,33,102,33],[110,34,102,34],[110,37,102,37,"siblings"],[110,45,102,45],[110,46,102,46,"indexOf"],[110,53,102,53],[110,54,102,54,"bSibling"],[110,62,102,62],[110,63,102,63],[110,65,102,65],[111,6,103,8],[111,10,103,12,"sharedParent"],[111,22,103,24],[111,27,103,29,"nodeB"],[111,32,103,34],[111,34,103,36],[112,8,104,12],[112,15,104,19,"DocumentPosition"],[112,31,104,35],[112,32,104,36,"FOLLOWING"],[112,41,104,45],[112,44,104,48,"DocumentPosition"],[112,60,104,64],[112,61,104,65,"CONTAINED_BY"],[112,73,104,77],[113,6,105,8],[114,6,106,8],[114,13,106,15,"DocumentPosition"],[114,29,106,31],[114,30,106,32,"FOLLOWING"],[114,39,106,41],[115,4,107,4],[116,4,108,4],[116,8,108,8,"sharedParent"],[116,20,108,20],[116,25,108,25,"nodeA"],[116,30,108,30],[116,32,108,32],[117,6,109,8],[117,13,109,15,"DocumentPosition"],[117,29,109,31],[117,30,109,32,"PRECEDING"],[117,39,109,41],[117,42,109,44,"DocumentPosition"],[117,58,109,60],[117,59,109,61,"CONTAINS"],[117,67,109,69],[118,4,110,4],[119,4,111,4],[119,11,111,11,"DocumentPosition"],[119,27,111,27],[119,28,111,28,"PRECEDING"],[119,37,111,37],[120,2,112,0],[121,2,113,0],[122,0,114,0],[123,0,115,0],[124,0,116,0],[125,0,117,0],[126,0,118,0],[127,0,119,0],[128,0,120,0],[129,0,121,0],[130,2,122,7],[130,11,122,16,"uniqueSort"],[130,21,122,26,"uniqueSort"],[130,22,122,27,"nodes"],[130,27,122,32],[130,29,122,34],[131,4,123,4,"nodes"],[131,9,123,9],[131,12,123,12,"nodes"],[131,17,123,17],[131,18,123,18,"filter"],[131,24,123,24],[131,25,123,25],[131,35,123,26,"node"],[131,39,123,30],[131,41,123,32,"i"],[131,42,123,33],[131,44,123,35,"arr"],[131,47,123,38],[132,6,123,38],[132,13,123,43],[132,14,123,44,"arr"],[132,17,123,47],[132,18,123,48,"includes"],[132,26,123,56],[132,27,123,57,"node"],[132,31,123,61],[132,33,123,63,"i"],[132,34,123,64],[132,37,123,67],[132,38,123,68],[132,39,123,69],[133,4,123,69],[133,6,123,70],[134,4,124,4,"nodes"],[134,9,124,9],[134,10,124,10,"sort"],[134,14,124,14],[134,15,124,15],[134,25,124,16,"a"],[134,26,124,17],[134,28,124,19,"b"],[134,29,124,20],[134,31,124,25],[135,6,125,8],[135,10,125,14,"relative"],[135,18,125,22],[135,21,125,25,"compareDocumentPosition"],[135,44,125,48],[135,45,125,49,"a"],[135,46,125,50],[135,48,125,52,"b"],[135,49,125,53],[135,50,125,54],[136,6,126,8],[136,10,126,12,"relative"],[136,18,126,20],[136,21,126,23,"DocumentPosition"],[136,37,126,39],[136,38,126,40,"PRECEDING"],[136,47,126,49],[136,49,126,51],[137,8,127,12],[137,15,127,19],[137,16,127,20],[137,17,127,21],[138,6,128,8],[138,7,128,9],[138,13,129,13],[138,17,129,17,"relative"],[138,25,129,25],[138,28,129,28,"DocumentPosition"],[138,44,129,44],[138,45,129,45,"FOLLOWING"],[138,54,129,54],[138,56,129,56],[139,8,130,12],[139,15,130,19],[139,16,130,20],[140,6,131,8],[141,6,132,8],[141,13,132,15],[141,14,132,16],[142,4,133,4],[142,5,133,5],[142,6,133,6],[143,4,134,4],[143,11,134,11,"nodes"],[143,16,134,16],[144,2,135,0],[145,0,135,1],[145,3]],"functionMap":{"names":["<global>","removeSubsets","<anonymous>","compareDocumentPosition","uniqueSort","nodes.filter$argument_0","nodes.sort$argument_0"],"mappings":"AAA;OCS;CDyB;CEM;CFM;OG2B;CHsC;OIU;yBCC,4CD;eEC;KFS;CJE"}},"type":"js/module"}]}