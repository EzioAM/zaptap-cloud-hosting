{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@reduxjs/toolkit/query/react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":194},"end":{"line":8,"column":57,"index":251}}],"key":"H8aYsQNJt9rS0BKlqltpEbUG6zo=","exportNames":["*"]}},{"name":"../../services/supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":252},"end":{"line":9,"column":58,"index":310}}],"key":"a99TehitYkPR4mct+ady0jxcI4I=","exportNames":["*"]}},{"name":"./baseApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":311},"end":{"line":10,"column":66,"index":377}}],"key":"Wui0qMW8IIbr/oMETWG4Kn9SQn8=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":378},"end":{"line":11,"column":54,"index":432}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useGetSystemAnalyticsQuery = exports.useGetExecutionStatsQuery = exports.useGetAutomationMetricsQuery = exports.useGetAnalyticsQuery = exports.analyticsApi = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _react = require(_dependencyMap[3], \"@reduxjs/toolkit/query/react\");\n  var _client = require(_dependencyMap[4], \"../../services/supabase/client\");\n  var _baseApi = require(_dependencyMap[5], \"./baseApi\");\n  var _EventLogger = require(_dependencyMap[6], \"../../utils/EventLogger\");\n  /**\n   * Analytics API - Unified and Optimized\n   * \n   * This module provides consistent API endpoints for analytics and metrics\n   * with proper error handling, caching, and fallback strategies.\n   */\n\n  /**\n   * Enhanced analytics API with unified configuration\n   */\n  var analyticsApi = exports.analyticsApi = (0, _react.createApi)(Object.assign({\n    reducerPath: 'analyticsApi'\n  }, _baseApi.baseApiConfig, {\n    tagTypes: ['Analytics', 'Metrics'],\n    endpoints: function endpoints(builder) {\n      return {\n        /**\n         * Get comprehensive analytics data\n         */\n        getAnalytics: builder.query({\n          queryFn: function () {\n            var _queryFn = (0, _asyncToGenerator2.default)(function* (_ref, _ref2) {\n              var timeRange = _ref.timeRange;\n              var signal = _ref2.signal;\n              try {\n                var _yield$supabase$auth$ = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$.data.user;\n                if (!user) {\n                  // Return empty analytics for unauthenticated users\n                  return {\n                    data: {\n                      executionTimeline: [],\n                      successRate: 100,\n                      totalExecutions: 0,\n                      avgExecutionTime: 0,\n                      timeSaved: 0,\n                      activeAutomations: 0,\n                      topAutomations: []\n                    }\n                  };\n                }\n\n                // Calculate date range\n                var endDate = new Date();\n                var startDate = new Date();\n                switch (timeRange) {\n                  case '24h':\n                    startDate.setHours(startDate.getHours() - 24);\n                    break;\n                  case '7d':\n                    startDate.setDate(startDate.getDate() - 7);\n                    break;\n                  case '30d':\n                    startDate.setDate(startDate.getDate() - 30);\n                    break;\n                  case 'all':\n                    startDate.setFullYear(startDate.getFullYear() - 10);\n                    break;\n                }\n\n                // Get execution data with proper filtering\n                var _yield$supabase$from$ = yield _client.supabase.from('automation_executions').select(`\n              *,\n              automation:automations(name, title)\n            `).eq('user_id', user.id).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()).order('created_at', {\n                    ascending: false\n                  }).abortSignal(signal),\n                  executions = _yield$supabase$from$.data,\n                  executionsError = _yield$supabase$from$.error;\n                if (executionsError) {\n                  _EventLogger.EventLogger.error('API', 'Error fetching executions:', executionsError);\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: executionsError.message || 'Failed to fetch analytics data',\n                      code: executionsError.code\n                    }\n                  };\n                }\n\n                // Calculate analytics\n                var totalExecutions = (executions == null ? void 0 : executions.length) || 0;\n                var successfulExecutions = (executions == null ? void 0 : executions.filter(function (e) {\n                  return e.status === 'success';\n                }).length) || 0;\n                var successRate = totalExecutions > 0 ? Math.round(successfulExecutions / totalExecutions * 100) : 100;\n\n                // Calculate execution timeline\n                var executionsByDay = new Map();\n                executions == null || executions.forEach(function (execution) {\n                  var date = new Date(execution.created_at).toLocaleDateString();\n                  executionsByDay.set(date, (executionsByDay.get(date) || 0) + 1);\n                });\n                var executionTimeline = Array.from(executionsByDay.entries()).sort(function (a, b) {\n                  return new Date(a[0]).getTime() - new Date(b[0]).getTime();\n                }).map(function (entry, index) {\n                  return {\n                    x: index + 1,\n                    y: entry[1]\n                  };\n                });\n\n                // Calculate top automations\n                var automationCounts = new Map();\n                executions == null || executions.forEach(function (execution) {\n                  var _execution$automation, _execution$automation2;\n                  var name = ((_execution$automation = execution.automation) == null ? void 0 : _execution$automation.name) || ((_execution$automation2 = execution.automation) == null ? void 0 : _execution$automation2.title) || 'Unknown';\n                  var current = automationCounts.get(name) || {\n                    count: 0,\n                    totalTime: 0\n                  };\n                  automationCounts.set(name, {\n                    count: current.count + 1,\n                    totalTime: current.totalTime + (execution.execution_time || 0)\n                  });\n                });\n                var topAutomations = Array.from(automationCounts.entries()).map(function (_ref3) {\n                  var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n                    name = _ref4[0],\n                    stats = _ref4[1];\n                  return {\n                    name: name,\n                    executions: stats.count,\n                    avgTime: stats.count > 0 ? Math.round(stats.totalTime / stats.count * 10) / 10 : 0\n                  };\n                }).sort(function (a, b) {\n                  return b.executions - a.executions;\n                }).slice(0, 5);\n\n                // Calculate average execution time and time saved\n                var totalExecutionTime = (executions == null ? void 0 : executions.reduce(function (sum, e) {\n                  return sum + (e.execution_time || 0);\n                }, 0)) || 0;\n                var avgExecutionTime = totalExecutions > 0 ? Math.round(totalExecutionTime / totalExecutions * 10) / 10 : 0;\n                var timeSaved = Math.round(totalExecutions * 2); // Assume each automation saves 2 minutes on average\n\n                // Get active automations count\n                var _yield$supabase$from$2 = yield _client.supabase.from('automations').select('id').eq('created_by', user.id).eq('is_active', true).abortSignal(signal),\n                  automations = _yield$supabase$from$2.data,\n                  automationsError = _yield$supabase$from$2.error;\n                if (automationsError) {\n                  _EventLogger.EventLogger.warn('API', 'Failed to fetch active automations count:', automationsError);\n                }\n                var activeAutomations = (automations == null ? void 0 : automations.length) || 0;\n                return {\n                  data: {\n                    executionTimeline: executionTimeline,\n                    successRate: successRate,\n                    totalExecutions: totalExecutions,\n                    avgExecutionTime: avgExecutionTime,\n                    timeSaved: timeSaved,\n                    activeAutomations: activeAutomations,\n                    topAutomations: topAutomations\n                  }\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch analytics:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch analytics data'\n                  }\n                };\n              }\n            });\n            function queryFn(_x, _x2) {\n              return _queryFn.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: function providesTags(result, error, _ref5) {\n            var timeRange = _ref5.timeRange;\n            return [{\n              type: 'Analytics',\n              id: `OVERVIEW_${timeRange}`\n            }];\n          }\n        }),\n        /**\n         * Get execution statistics using RPC function with fallback\n         */\n        getExecutionStats: builder.query({\n          queryFn: function () {\n            var _queryFn2 = (0, _asyncToGenerator2.default)(function* (_ref6, _ref7) {\n              var timeRange = _ref6.timeRange;\n              var signal = _ref7.signal;\n              try {\n                var _yield$supabase$auth$2 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$2.data.user;\n                if (!user) {\n                  return {\n                    data: []\n                  };\n                }\n\n                // Skip RPC function to avoid download_count error, use fallback directly\n                // Fallback: calculate stats manually\n                var endDate = new Date();\n                var startDate = new Date();\n                switch (timeRange) {\n                  case '24h':\n                    startDate.setHours(startDate.getHours() - 24);\n                    break;\n                  case '7d':\n                    startDate.setDate(startDate.getDate() - 7);\n                    break;\n                  case '30d':\n                    startDate.setDate(startDate.getDate() - 30);\n                    break;\n                  case 'all':\n                    startDate.setFullYear(startDate.getFullYear() - 10);\n                    break;\n                }\n                var _yield$supabase$from$3 = yield _client.supabase.from('automation_executions').select('*').eq('user_id', user.id).gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()).abortSignal(signal),\n                  executions = _yield$supabase$from$3.data,\n                  fallbackError = _yield$supabase$from$3.error;\n                if (fallbackError) {\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: fallbackError.message || 'Failed to fetch execution stats',\n                      code: fallbackError.code\n                    }\n                  };\n                }\n\n                // Group by date and calculate stats\n                var statsByDate = new Map();\n                executions == null || executions.forEach(function (execution) {\n                  var date = new Date(execution.created_at).toDateString();\n                  var existing = statsByDate.get(date) || {\n                    date: date,\n                    count: 0,\n                    successful: 0,\n                    failed: 0,\n                    avg_duration: 0\n                  };\n                  existing.count += 1;\n                  if (execution.status === 'success') {\n                    existing.successful += 1;\n                  } else {\n                    existing.failed += 1;\n                  }\n                  statsByDate.set(date, existing);\n                });\n                return {\n                  data: Array.from(statsByDate.values())\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch execution stats:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch execution stats'\n                  }\n                };\n              }\n            });\n            function queryFn(_x3, _x4) {\n              return _queryFn2.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: function providesTags(result, error, _ref8) {\n            var timeRange = _ref8.timeRange;\n            return [{\n              type: 'Analytics',\n              id: `STATS_${timeRange}`\n            }];\n          }\n        }),\n        /**\n         * Get metrics for a specific automation\n         */\n        getAutomationMetrics: builder.query({\n          queryFn: function () {\n            var _queryFn3 = (0, _asyncToGenerator2.default)(function* (_ref9, _ref0) {\n              var automationId = _ref9.automationId;\n              var signal = _ref0.signal;\n              try {\n                var _executions$;\n                var _yield$supabase$from$4 = yield _client.supabase.from('automation_executions').select('*').eq('automation_id', automationId).order('created_at', {\n                    ascending: false\n                  }).limit(100).abortSignal(signal),\n                  executions = _yield$supabase$from$4.data,\n                  error = _yield$supabase$from$4.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error fetching automation metrics:', error);\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: error.message || 'Failed to fetch automation metrics',\n                      code: error.code\n                    }\n                  };\n                }\n                var total = (executions == null ? void 0 : executions.length) || 0;\n                var successful = (executions == null ? void 0 : executions.filter(function (e) {\n                  return e.status === 'success';\n                }).length) || 0;\n                var totalTime = (executions == null ? void 0 : executions.reduce(function (sum, e) {\n                  return sum + (e.execution_time || 0);\n                }, 0)) || 0;\n                return {\n                  data: {\n                    totalRuns: total,\n                    successRate: total > 0 ? Math.round(successful / total * 100) : 0,\n                    avgExecutionTime: total > 0 ? Math.round(totalTime / total * 10) / 10 : 0,\n                    lastRun: executions == null || (_executions$ = executions[0]) == null ? void 0 : _executions$.created_at,\n                    executions: (executions == null ? void 0 : executions.slice(0, 10)) || [] // Last 10 executions\n                  }\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch automation metrics:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch automation metrics'\n                  }\n                };\n              }\n            });\n            function queryFn(_x5, _x6) {\n              return _queryFn3.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: function providesTags(result, error, _ref1) {\n            var automationId = _ref1.automationId;\n            return [{\n              type: 'Metrics',\n              id: automationId\n            }];\n          }\n        }),\n        /**\n         * Get system-wide analytics (admin only)\n         */\n        getSystemAnalytics: builder.query({\n          queryFn: function () {\n            var _queryFn4 = (0, _asyncToGenerator2.default)(function* (_, _ref10) {\n              var signal = _ref10.signal;\n              try {\n                var _yield$supabase$auth$3 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$3.data.user;\n                if (!user) {\n                  return {\n                    error: {\n                      status: 'UNAUTHORIZED',\n                      message: 'Not authenticated'\n                    }\n                  };\n                }\n\n                // Skip RPC function to avoid download_count error\n                // Return empty analytics for now\n                return {\n                  data: {\n                    total_users: 0,\n                    total_automations: 0,\n                    total_executions: 0,\n                    active_users_today: 0,\n                    new_users_this_week: 0,\n                    popular_categories: [],\n                    system_health: 'healthy'\n                  }\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch system analytics:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch system analytics'\n                  }\n                };\n              }\n            });\n            function queryFn(_x7, _x8) {\n              return _queryFn4.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: [{\n            type: 'Analytics',\n            id: 'SYSTEM'\n          }]\n        })\n      };\n    }\n  }));\n\n  // Export hooks\n  var useGetAnalyticsQuery = exports.useGetAnalyticsQuery = analyticsApi.useGetAnalyticsQuery,\n    useGetExecutionStatsQuery = exports.useGetExecutionStatsQuery = analyticsApi.useGetExecutionStatsQuery,\n    useGetAutomationMetricsQuery = exports.useGetAutomationMetricsQuery = analyticsApi.useGetAutomationMetricsQuery,\n    useGetSystemAnalyticsQuery = exports.useGetSystemAnalyticsQuery = analyticsApi.useGetSystemAnalyticsQuery;\n});","lineCount":441,"map":[[9,2,8,0],[9,6,8,0,"_react"],[9,12,8,0],[9,15,8,0,"require"],[9,22,8,0],[9,23,8,0,"_dependencyMap"],[9,37,8,0],[10,2,9,0],[10,6,9,0,"_client"],[10,13,9,0],[10,16,9,0,"require"],[10,23,9,0],[10,24,9,0,"_dependencyMap"],[10,38,9,0],[11,2,10,0],[11,6,10,0,"_baseApi"],[11,14,10,0],[11,17,10,0,"require"],[11,24,10,0],[11,25,10,0,"_dependencyMap"],[11,39,10,0],[12,2,11,0],[12,6,11,0,"_EventLogger"],[12,18,11,0],[12,21,11,0,"require"],[12,28,11,0],[12,29,11,0,"_dependencyMap"],[12,43,11,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[20,2,45,0],[21,0,46,0],[22,0,47,0],[23,2,48,7],[23,6,48,13,"analyticsApi"],[23,18,48,25],[23,21,48,25,"exports"],[23,28,48,25],[23,29,48,25,"analyticsApi"],[23,41,48,25],[23,44,48,28],[23,48,48,28,"createApi"],[23,64,48,37],[23,66,48,37,"Object"],[23,72,48,37],[23,73,48,37,"assign"],[23,79,48,37],[24,4,49,2,"reducerPath"],[24,15,49,13],[24,17,49,15],[25,2,49,29],[25,5,50,5,"baseApiConfig"],[25,27,50,18],[26,4,51,2,"tagTypes"],[26,12,51,10],[26,14,51,12],[26,15,51,13],[26,26,51,24],[26,28,51,26],[26,37,51,35],[26,38,51,36],[27,4,52,2,"endpoints"],[27,13,52,11],[27,15,52,13],[27,24,52,2,"endpoints"],[27,33,52,11,"endpoints"],[27,34,52,14,"builder"],[27,41,52,21],[28,6,52,21],[28,13,52,27],[29,8,53,4],[30,0,54,0],[31,0,55,0],[32,8,56,4,"getAnalytics"],[32,20,56,16],[32,22,56,18,"builder"],[32,29,56,25],[32,30,56,26,"query"],[32,35,56,31],[32,36,56,73],[33,10,57,6,"queryFn"],[33,17,57,13],[34,12,57,13],[34,16,57,13,"_queryFn"],[34,24,57,13],[34,31,57,13,"_asyncToGenerator2"],[34,49,57,13],[34,50,57,13,"default"],[34,57,57,13],[34,59,57,15],[34,70,57,15,"_ref"],[34,74,57,15],[34,76,57,15,"_ref2"],[34,81,57,15],[34,83,57,52],[35,14,57,52],[35,18,57,24,"timeRange"],[35,27,57,33],[35,30,57,33,"_ref"],[35,34,57,33],[35,35,57,24,"timeRange"],[35,44,57,33],[36,14,57,33],[36,18,57,39,"signal"],[36,24,57,45],[36,27,57,45,"_ref2"],[36,32,57,45],[36,33,57,39,"signal"],[36,39,57,45],[37,14,58,8],[37,18,58,12],[38,16,59,10],[38,20,59,10,"_yield$supabase$auth$"],[38,41,59,10],[38,50,59,43,"supabase"],[38,66,59,51],[38,67,59,52,"auth"],[38,71,59,56],[38,72,59,57,"getUser"],[38,79,59,64],[38,80,59,65],[38,81,59,66],[39,18,59,26,"user"],[39,22,59,30],[39,25,59,30,"_yield$supabase$auth$"],[39,46,59,30],[39,47,59,18,"data"],[39,51,59,22],[39,52,59,26,"user"],[39,56,59,30],[40,16,61,10],[40,20,61,14],[40,21,61,15,"user"],[40,25,61,19],[40,27,61,21],[41,18,62,12],[42,18,63,12],[42,25,63,19],[43,20,64,14,"data"],[43,24,64,18],[43,26,64,20],[44,22,65,16,"executionTimeline"],[44,39,65,33],[44,41,65,35],[44,43,65,37],[45,22,66,16,"successRate"],[45,33,66,27],[45,35,66,29],[45,38,66,32],[46,22,67,16,"totalExecutions"],[46,37,67,31],[46,39,67,33],[46,40,67,34],[47,22,68,16,"avgExecutionTime"],[47,38,68,32],[47,40,68,34],[47,41,68,35],[48,22,69,16,"timeSaved"],[48,31,69,25],[48,33,69,27],[48,34,69,28],[49,22,70,16,"activeAutomations"],[49,39,70,33],[49,41,70,35],[49,42,70,36],[50,22,71,16,"topAutomations"],[50,36,71,30],[50,38,71,32],[51,20,72,14],[52,18,73,12],[52,19,73,13],[53,16,74,10],[55,16,76,10],[56,16,77,10],[56,20,77,16,"endDate"],[56,27,77,23],[56,30,77,26],[56,34,77,30,"Date"],[56,38,77,34],[56,39,77,35],[56,40,77,36],[57,16,78,10],[57,20,78,16,"startDate"],[57,29,78,25],[57,32,78,28],[57,36,78,32,"Date"],[57,40,78,36],[57,41,78,37],[57,42,78,38],[58,16,80,10],[58,24,80,18,"timeRange"],[58,33,80,27],[59,18,81,12],[59,23,81,17],[59,28,81,22],[60,20,82,14,"startDate"],[60,29,82,23],[60,30,82,24,"setHours"],[60,38,82,32],[60,39,82,33,"startDate"],[60,48,82,42],[60,49,82,43,"getHours"],[60,57,82,51],[60,58,82,52],[60,59,82,53],[60,62,82,56],[60,64,82,58],[60,65,82,59],[61,20,83,14],[62,18,84,12],[62,23,84,17],[62,27,84,21],[63,20,85,14,"startDate"],[63,29,85,23],[63,30,85,24,"setDate"],[63,37,85,31],[63,38,85,32,"startDate"],[63,47,85,41],[63,48,85,42,"getDate"],[63,55,85,49],[63,56,85,50],[63,57,85,51],[63,60,85,54],[63,61,85,55],[63,62,85,56],[64,20,86,14],[65,18,87,12],[65,23,87,17],[65,28,87,22],[66,20,88,14,"startDate"],[66,29,88,23],[66,30,88,24,"setDate"],[66,37,88,31],[66,38,88,32,"startDate"],[66,47,88,41],[66,48,88,42,"getDate"],[66,55,88,49],[66,56,88,50],[66,57,88,51],[66,60,88,54],[66,62,88,56],[66,63,88,57],[67,20,89,14],[68,18,90,12],[68,23,90,17],[68,28,90,22],[69,20,91,14,"startDate"],[69,29,91,23],[69,30,91,24,"setFullYear"],[69,41,91,35],[69,42,91,36,"startDate"],[69,51,91,45],[69,52,91,46,"getFullYear"],[69,63,91,57],[69,64,91,58],[69,65,91,59],[69,68,91,62],[69,70,91,64],[69,71,91,65],[70,20,92,14],[71,16,93,10],[73,16,95,10],[74,16,96,10],[74,20,96,10,"_yield$supabase$from$"],[74,41,96,10],[74,50,96,69,"supabase"],[74,66,96,77],[74,67,97,13,"from"],[74,71,97,17],[74,72,97,18],[74,95,97,41],[74,96,97,42],[74,97,98,13,"select"],[74,103,98,19],[74,104,98,20],[75,0,99,0],[76,0,100,0],[77,0,101,0],[77,13,101,13],[77,14,101,14],[77,15,102,13,"eq"],[77,17,102,15],[77,18,102,16],[77,27,102,25],[77,29,102,27,"user"],[77,33,102,31],[77,34,102,32,"id"],[77,36,102,34],[77,37,102,35],[77,38,103,13,"gte"],[77,41,103,16],[77,42,103,17],[77,54,103,29],[77,56,103,31,"startDate"],[77,65,103,40],[77,66,103,41,"toISOString"],[77,77,103,52],[77,78,103,53],[77,79,103,54],[77,80,103,55],[77,81,104,13,"lte"],[77,84,104,16],[77,85,104,17],[77,97,104,29],[77,99,104,31,"endDate"],[77,106,104,38],[77,107,104,39,"toISOString"],[77,118,104,50],[77,119,104,51],[77,120,104,52],[77,121,104,53],[77,122,105,13,"order"],[77,127,105,18],[77,128,105,19],[77,140,105,31],[77,142,105,33],[78,20,105,35,"ascending"],[78,29,105,44],[78,31,105,46],[79,18,105,52],[79,19,105,53],[79,20,105,54],[79,21,106,13,"abortSignal"],[79,32,106,24],[79,33,106,25,"signal"],[79,39,106,31],[79,40,106,32],[80,18,96,24,"executions"],[80,28,96,34],[80,31,96,34,"_yield$supabase$from$"],[80,52,96,34],[80,53,96,18,"data"],[80,57,96,22],[81,18,96,43,"executionsError"],[81,33,96,58],[81,36,96,58,"_yield$supabase$from$"],[81,57,96,58],[81,58,96,36,"error"],[81,63,96,41],[82,16,108,10],[82,20,108,14,"executionsError"],[82,35,108,29],[82,37,108,31],[83,18,109,12,"EventLogger"],[83,42,109,23],[83,43,109,24,"error"],[83,48,109,29],[83,49,109,30],[83,54,109,35],[83,56,109,37],[83,84,109,65],[83,86,109,67,"executionsError"],[83,101,109,91],[83,102,109,92],[84,18,110,12],[84,25,110,19],[85,20,111,14,"error"],[85,25,111,19],[85,27,111,21],[86,22,112,16,"status"],[86,28,112,22],[86,30,112,24],[86,43,112,37],[87,22,113,16,"message"],[87,29,113,23],[87,31,113,25,"executionsError"],[87,46,113,40],[87,47,113,41,"message"],[87,54,113,48],[87,58,113,52],[87,90,113,84],[88,22,114,16,"code"],[88,26,114,20],[88,28,114,22,"executionsError"],[88,43,114,37],[88,44,114,38,"code"],[89,20,115,14],[90,18,116,12],[90,19,116,13],[91,16,117,10],[93,16,119,10],[94,16,120,10],[94,20,120,16,"totalExecutions"],[94,35,120,31],[94,38,120,34],[94,39,120,34,"executions"],[94,49,120,44],[94,69,120,34,"executions"],[94,79,120,44],[94,80,120,46,"length"],[94,86,120,52],[94,91,120,56],[94,92,120,57],[95,16,121,10],[95,20,121,16,"successfulExecutions"],[95,40,121,36],[95,43,121,39],[95,44,121,39,"executions"],[95,54,121,49],[95,74,121,39,"executions"],[95,84,121,49],[95,85,121,51,"filter"],[95,91,121,57],[95,92,121,58],[95,102,121,59,"e"],[95,103,121,65],[96,18,121,65],[96,25,121,70,"e"],[96,26,121,71],[96,27,121,72,"status"],[96,33,121,78],[96,38,121,83],[96,47,121,92],[97,16,121,92],[97,18,121,93],[97,19,121,94,"length"],[97,25,121,100],[97,30,121,104],[97,31,121,105],[98,16,122,10],[98,20,122,16,"successRate"],[98,31,122,27],[98,34,122,30,"totalExecutions"],[98,49,122,45],[98,52,122,48],[98,53,122,49],[98,56,122,52,"Math"],[98,60,122,56],[98,61,122,57,"round"],[98,66,122,62],[98,67,122,64,"successfulExecutions"],[98,87,122,84],[98,90,122,87,"totalExecutions"],[98,105,122,102],[98,108,122,106],[98,111,122,109],[98,112,122,110],[98,115,122,113],[98,118,122,116],[100,16,124,10],[101,16,125,10],[101,20,125,16,"executionsByDay"],[101,35,125,31],[101,38,125,34],[101,42,125,38,"Map"],[101,45,125,41],[101,46,125,58],[101,47,125,59],[102,16,126,10,"executions"],[102,26,126,20],[102,38,126,10,"executions"],[102,48,126,20],[102,49,126,22,"forEach"],[102,56,126,29],[102,57,126,30],[102,67,126,31,"execution"],[102,76,126,45],[102,78,126,50],[103,18,127,12],[103,22,127,18,"date"],[103,26,127,22],[103,29,127,25],[103,33,127,29,"Date"],[103,37,127,33],[103,38,127,34,"execution"],[103,47,127,43],[103,48,127,44,"created_at"],[103,58,127,54],[103,59,127,55],[103,60,127,56,"toLocaleDateString"],[103,78,127,74],[103,79,127,75],[103,80,127,76],[104,18,128,12,"executionsByDay"],[104,33,128,27],[104,34,128,28,"set"],[104,37,128,31],[104,38,128,32,"date"],[104,42,128,36],[104,44,128,38],[104,45,128,39,"executionsByDay"],[104,60,128,54],[104,61,128,55,"get"],[104,64,128,58],[104,65,128,59,"date"],[104,69,128,63],[104,70,128,64],[104,74,128,68],[104,75,128,69],[104,79,128,73],[104,80,128,74],[104,81,128,75],[105,16,129,10],[105,17,129,11],[105,18,129,12],[106,16,131,10],[106,20,131,16,"executionTimeline"],[106,37,131,33],[106,40,131,36,"Array"],[106,45,131,41],[106,46,131,42,"from"],[106,50,131,46],[106,51,131,47,"executionsByDay"],[106,66,131,62],[106,67,131,63,"entries"],[106,74,131,70],[106,75,131,71],[106,76,131,72],[106,77,131,73],[106,78,132,13,"sort"],[106,82,132,17],[106,83,132,18],[106,93,132,19,"a"],[106,94,132,20],[106,96,132,22,"b"],[106,97,132,23],[107,18,132,23],[107,25,132,28],[107,29,132,32,"Date"],[107,33,132,36],[107,34,132,37,"a"],[107,35,132,38],[107,36,132,39],[107,37,132,40],[107,38,132,41],[107,39,132,42],[107,40,132,43,"getTime"],[107,47,132,50],[107,48,132,51],[107,49,132,52],[107,52,132,55],[107,56,132,59,"Date"],[107,60,132,63],[107,61,132,64,"b"],[107,62,132,65],[107,63,132,66],[107,64,132,67],[107,65,132,68],[107,66,132,69],[107,67,132,70,"getTime"],[107,74,132,77],[107,75,132,78],[107,76,132,79],[108,16,132,79],[108,18,132,80],[108,19,133,13,"map"],[108,22,133,16],[108,23,133,17],[108,33,133,18,"entry"],[108,38,133,23],[108,40,133,25,"index"],[108,45,133,30],[109,18,133,30],[109,25,133,36],[110,20,133,38,"x"],[110,21,133,39],[110,23,133,41,"index"],[110,28,133,46],[110,31,133,49],[110,32,133,50],[111,20,133,52,"y"],[111,21,133,53],[111,23,133,55,"entry"],[111,28,133,60],[111,29,133,61],[111,30,133,62],[112,18,133,64],[112,19,133,65],[113,16,133,65],[113,17,133,66],[113,18,133,67],[115,16,135,10],[116,16,136,10],[116,20,136,16,"automationCounts"],[116,36,136,32],[116,39,136,35],[116,43,136,39,"Map"],[116,46,136,42],[116,47,136,89],[116,48,136,90],[117,16,137,10,"executions"],[117,26,137,20],[117,38,137,10,"executions"],[117,48,137,20],[117,49,137,22,"forEach"],[117,56,137,29],[117,57,137,30],[117,67,137,31,"execution"],[117,76,137,45],[117,78,137,50],[118,18,137,50],[118,22,137,50,"_execution$automation"],[118,43,137,50],[118,45,137,50,"_execution$automation2"],[118,67,137,50],[119,18,138,12],[119,22,138,18,"name"],[119,26,138,22],[119,29,138,25],[119,31,138,25,"_execution$automation"],[119,52,138,25],[119,55,138,25,"execution"],[119,64,138,34],[119,65,138,35,"automation"],[119,75,138,45],[119,96,138,25,"_execution$automation"],[119,117,138,25],[119,118,138,47,"name"],[119,122,138,51],[119,129,138,51,"_execution$automation2"],[119,151,138,51],[119,154,138,55,"execution"],[119,163,138,64],[119,164,138,65,"automation"],[119,174,138,75],[119,195,138,55,"_execution$automation2"],[119,217,138,55],[119,218,138,77,"title"],[119,223,138,82],[119,228,138,86],[119,237,138,95],[120,18,139,12],[120,22,139,18,"current"],[120,29,139,25],[120,32,139,28,"automationCounts"],[120,48,139,44],[120,49,139,45,"get"],[120,52,139,48],[120,53,139,49,"name"],[120,57,139,53],[120,58,139,54],[120,62,139,58],[121,20,139,60,"count"],[121,25,139,65],[121,27,139,67],[121,28,139,68],[122,20,139,70,"totalTime"],[122,29,139,79],[122,31,139,81],[123,18,139,83],[123,19,139,84],[124,18,140,12,"automationCounts"],[124,34,140,28],[124,35,140,29,"set"],[124,38,140,32],[124,39,140,33,"name"],[124,43,140,37],[124,45,140,39],[125,20,141,14,"count"],[125,25,141,19],[125,27,141,21,"current"],[125,34,141,28],[125,35,141,29,"count"],[125,40,141,34],[125,43,141,37],[125,44,141,38],[126,20,142,14,"totalTime"],[126,29,142,23],[126,31,142,25,"current"],[126,38,142,32],[126,39,142,33,"totalTime"],[126,48,142,42],[126,52,142,46,"execution"],[126,61,142,55],[126,62,142,56,"execution_time"],[126,76,142,70],[126,80,142,74],[126,81,142,75],[127,18,143,12],[127,19,143,13],[127,20,143,14],[128,16,144,10],[128,17,144,11],[128,18,144,12],[129,16,146,10],[129,20,146,16,"topAutomations"],[129,34,146,30],[129,37,146,33,"Array"],[129,42,146,38],[129,43,146,39,"from"],[129,47,146,43],[129,48,146,44,"automationCounts"],[129,64,146,60],[129,65,146,61,"entries"],[129,72,146,68],[129,73,146,69],[129,74,146,70],[129,75,146,71],[129,76,147,13,"map"],[129,79,147,16],[129,80,147,17],[129,90,147,17,"_ref3"],[129,95,147,17],[130,18,147,17],[130,22,147,17,"_ref4"],[130,27,147,17],[130,34,147,17,"_slicedToArray2"],[130,49,147,17],[130,50,147,17,"default"],[130,57,147,17],[130,59,147,17,"_ref3"],[130,64,147,17],[131,20,147,19,"name"],[131,24,147,23],[131,27,147,23,"_ref4"],[131,32,147,23],[132,20,147,25,"stats"],[132,25,147,30],[132,28,147,30,"_ref4"],[132,33,147,30],[133,18,147,30],[133,25,147,37],[134,20,148,14,"name"],[134,24,148,18],[134,26,148,14,"name"],[134,30,148,18],[135,20,149,14,"executions"],[135,30,149,24],[135,32,149,26,"stats"],[135,37,149,31],[135,38,149,32,"count"],[135,43,149,37],[136,20,150,14,"avgTime"],[136,27,150,21],[136,29,150,23,"stats"],[136,34,150,28],[136,35,150,29,"count"],[136,40,150,34],[136,43,150,37],[136,44,150,38],[136,47,150,41,"Math"],[136,51,150,45],[136,52,150,46,"round"],[136,57,150,51],[136,58,150,53,"stats"],[136,63,150,58],[136,64,150,59,"totalTime"],[136,73,150,68],[136,76,150,71,"stats"],[136,81,150,76],[136,82,150,77,"count"],[136,87,150,82],[136,90,150,86],[136,92,150,88],[136,93,150,89],[136,96,150,92],[136,98,150,94],[136,101,150,97],[137,18,151,12],[137,19,151,13],[138,16,151,13],[138,17,151,14],[138,18,151,15],[138,19,152,13,"sort"],[138,23,152,17],[138,24,152,18],[138,34,152,19,"a"],[138,35,152,20],[138,37,152,22,"b"],[138,38,152,23],[139,18,152,23],[139,25,152,28,"b"],[139,26,152,29],[139,27,152,30,"executions"],[139,37,152,40],[139,40,152,43,"a"],[139,41,152,44],[139,42,152,45,"executions"],[139,52,152,55],[140,16,152,55],[140,18,152,56],[140,19,153,13,"slice"],[140,24,153,18],[140,25,153,19],[140,26,153,20],[140,28,153,22],[140,29,153,23],[140,30,153,24],[142,16,155,10],[143,16,156,10],[143,20,156,16,"totalExecutionTime"],[143,38,156,34],[143,41,156,37],[143,42,156,37,"executions"],[143,52,156,47],[143,72,156,37,"executions"],[143,82,156,47],[143,83,156,49,"reduce"],[143,89,156,55],[143,90,156,56],[143,100,156,57,"sum"],[143,103,156,68],[143,105,156,70,"e"],[143,106,156,76],[144,18,156,76],[144,25,156,81,"sum"],[144,28,156,84],[144,32,156,88,"e"],[144,33,156,89],[144,34,156,90,"execution_time"],[144,48,156,104],[144,52,156,108],[144,53,156,109],[144,54,156,110],[145,16,156,110],[145,19,156,112],[145,20,156,113],[145,21,156,114],[145,26,156,118],[145,27,156,119],[146,16,157,10],[146,20,157,16,"avgExecutionTime"],[146,36,157,32],[146,39,157,35,"totalExecutions"],[146,54,157,50],[146,57,157,53],[146,58,157,54],[146,61,157,57,"Math"],[146,65,157,61],[146,66,157,62,"round"],[146,71,157,67],[146,72,157,69,"totalExecutionTime"],[146,90,157,87],[146,93,157,90,"totalExecutions"],[146,108,157,105],[146,111,157,109],[146,113,157,111],[146,114,157,112],[146,117,157,115],[146,119,157,117],[146,122,157,120],[146,123,157,121],[147,16,158,10],[147,20,158,16,"timeSaved"],[147,29,158,25],[147,32,158,28,"Math"],[147,36,158,32],[147,37,158,33,"round"],[147,42,158,38],[147,43,158,39,"totalExecutions"],[147,58,158,54],[147,61,158,57],[147,62,158,58],[147,63,158,59],[147,64,158,60],[147,65,158,61],[149,16,160,10],[150,16,161,10],[150,20,161,10,"_yield$supabase$from$2"],[150,42,161,10],[150,51,161,71,"supabase"],[150,67,161,79],[150,68,162,13,"from"],[150,72,162,17],[150,73,162,18],[150,86,162,31],[150,87,162,32],[150,88,163,13,"select"],[150,94,163,19],[150,95,163,20],[150,99,163,24],[150,100,163,25],[150,101,164,13,"eq"],[150,103,164,15],[150,104,164,16],[150,116,164,28],[150,118,164,30,"user"],[150,122,164,34],[150,123,164,35,"id"],[150,125,164,37],[150,126,164,38],[150,127,165,13,"eq"],[150,129,165,15],[150,130,165,16],[150,141,165,27],[150,143,165,29],[150,147,165,33],[150,148,165,34],[150,149,166,13,"abortSignal"],[150,160,166,24],[150,161,166,25,"signal"],[150,167,166,31],[150,168,166,32],[151,18,161,24,"automations"],[151,29,161,35],[151,32,161,35,"_yield$supabase$from$2"],[151,54,161,35],[151,55,161,18,"data"],[151,59,161,22],[152,18,161,44,"automationsError"],[152,34,161,60],[152,37,161,60,"_yield$supabase$from$2"],[152,59,161,60],[152,60,161,37,"error"],[152,65,161,42],[153,16,168,10],[153,20,168,14,"automationsError"],[153,36,168,30],[153,38,168,32],[154,18,169,12,"EventLogger"],[154,42,169,23],[154,43,169,24,"warn"],[154,47,169,28],[154,48,169,29],[154,53,169,34],[154,55,169,36],[154,98,169,79],[154,100,169,81,"automationsError"],[154,116,169,97],[154,117,169,98],[155,16,170,10],[156,16,172,10],[156,20,172,16,"activeAutomations"],[156,37,172,33],[156,40,172,36],[156,41,172,36,"automations"],[156,52,172,47],[156,72,172,36,"automations"],[156,83,172,47],[156,84,172,49,"length"],[156,90,172,55],[156,95,172,59],[156,96,172,60],[157,16,174,10],[157,23,174,17],[158,18,175,12,"data"],[158,22,175,16],[158,24,175,18],[159,20,176,14,"executionTimeline"],[159,37,176,31],[159,39,176,14,"executionTimeline"],[159,56,176,31],[160,20,177,14,"successRate"],[160,31,177,25],[160,33,177,14,"successRate"],[160,44,177,25],[161,20,178,14,"totalExecutions"],[161,35,178,29],[161,37,178,14,"totalExecutions"],[161,52,178,29],[162,20,179,14,"avgExecutionTime"],[162,36,179,30],[162,38,179,14,"avgExecutionTime"],[162,54,179,30],[163,20,180,14,"timeSaved"],[163,29,180,23],[163,31,180,14,"timeSaved"],[163,40,180,23],[164,20,181,14,"activeAutomations"],[164,37,181,31],[164,39,181,14,"activeAutomations"],[164,56,181,31],[165,20,182,14,"topAutomations"],[165,34,182,28],[165,36,182,14,"topAutomations"],[166,18,183,12],[167,16,184,10],[167,17,184,11],[168,14,185,8],[168,15,185,9],[168,16,185,10],[168,23,185,17,"error"],[168,28,185,27],[168,30,185,29],[169,16,186,10],[169,20,186,14,"error"],[169,25,186,19],[169,26,186,20,"name"],[169,30,186,24],[169,35,186,29],[169,47,186,41],[169,49,186,43],[170,18,187,12],[170,25,187,19],[171,20,187,21,"error"],[171,25,187,26],[171,27,187,28],[172,22,187,30,"status"],[172,28,187,36],[172,30,187,38],[172,41,187,49],[173,22,187,51,"message"],[173,29,187,58],[173,31,187,60],[174,20,187,80],[175,18,187,82],[175,19,187,83],[176,16,188,10],[177,16,190,10,"EventLogger"],[177,40,190,21],[177,41,190,22,"error"],[177,46,190,27],[177,47,190,28],[177,52,190,33],[177,54,190,35],[177,82,190,63],[177,84,190,65,"error"],[177,89,190,79],[177,90,190,80],[178,16,191,10],[178,23,191,17],[179,18,192,12,"error"],[179,23,192,17],[179,25,192,19],[180,20,193,14,"status"],[180,26,193,20],[180,28,193,22],[180,41,193,35],[181,20,194,14,"message"],[181,27,194,21],[181,29,194,23,"error"],[181,34,194,28],[181,35,194,29,"message"],[181,42,194,36],[181,46,194,40],[182,18,195,12],[183,16,196,10],[183,17,196,11],[184,14,197,8],[185,12,198,6],[185,13,198,7],[186,12,198,7],[186,21,57,6,"queryFn"],[186,28,57,13,"queryFn"],[186,29,57,13,"_x"],[186,31,57,13],[186,33,57,13,"_x2"],[186,36,57,13],[187,14,57,13],[187,21,57,13,"_queryFn"],[187,29,57,13],[187,30,57,13,"apply"],[187,35,57,13],[187,42,57,13,"arguments"],[187,51,57,13],[188,12,57,13],[189,12,57,13],[189,19,57,6,"queryFn"],[189,26,57,13],[190,10,57,13],[190,13,198,7],[191,10,199,6,"providesTags"],[191,22,199,18],[191,24,199,20],[191,33,199,6,"providesTags"],[191,45,199,18,"providesTags"],[191,46,199,21,"result"],[191,52,199,27],[191,54,199,29,"error"],[191,59,199,34],[191,61,199,34,"_ref5"],[191,66,199,34],[192,12,199,34],[192,16,199,38,"timeRange"],[192,25,199,47],[192,28,199,47,"_ref5"],[192,33,199,47],[192,34,199,38,"timeRange"],[192,43,199,47],[193,12,199,47],[193,19,199,54],[193,20,200,8],[194,14,200,10,"type"],[194,18,200,14],[194,20,200,16],[194,31,200,27],[195,14,200,29,"id"],[195,16,200,31],[195,18,200,33],[195,30,200,45,"timeRange"],[195,39,200,54],[196,12,200,57],[196,13,200,58],[196,14,201,7],[197,10,201,7],[198,8,202,4],[198,9,202,5],[198,10,202,6],[199,8,204,4],[200,0,205,0],[201,0,206,0],[202,8,207,4,"getExecutionStats"],[202,25,207,21],[202,27,207,23,"builder"],[202,34,207,30],[202,35,207,31,"query"],[202,40,207,36],[202,41,207,81],[203,10,208,6,"queryFn"],[203,17,208,13],[204,12,208,13],[204,16,208,13,"_queryFn2"],[204,25,208,13],[204,32,208,13,"_asyncToGenerator2"],[204,50,208,13],[204,51,208,13,"default"],[204,58,208,13],[204,60,208,15],[204,71,208,15,"_ref6"],[204,76,208,15],[204,78,208,15,"_ref7"],[204,83,208,15],[204,85,208,52],[205,14,208,52],[205,18,208,24,"timeRange"],[205,27,208,33],[205,30,208,33,"_ref6"],[205,35,208,33],[205,36,208,24,"timeRange"],[205,45,208,33],[206,14,208,33],[206,18,208,39,"signal"],[206,24,208,45],[206,27,208,45,"_ref7"],[206,32,208,45],[206,33,208,39,"signal"],[206,39,208,45],[207,14,209,8],[207,18,209,12],[208,16,210,10],[208,20,210,10,"_yield$supabase$auth$2"],[208,42,210,10],[208,51,210,43,"supabase"],[208,67,210,51],[208,68,210,52,"auth"],[208,72,210,56],[208,73,210,57,"getUser"],[208,80,210,64],[208,81,210,65],[208,82,210,66],[209,18,210,26,"user"],[209,22,210,30],[209,25,210,30,"_yield$supabase$auth$2"],[209,47,210,30],[209,48,210,18,"data"],[209,52,210,22],[209,53,210,26,"user"],[209,57,210,30],[210,16,212,10],[210,20,212,14],[210,21,212,15,"user"],[210,25,212,19],[210,27,212,21],[211,18,213,12],[211,25,213,19],[212,20,213,21,"data"],[212,24,213,25],[212,26,213,27],[213,18,213,30],[213,19,213,31],[214,16,214,10],[216,16,216,10],[217,16,217,10],[218,16,218,12],[218,20,218,18,"endDate"],[218,27,218,25],[218,30,218,28],[218,34,218,32,"Date"],[218,38,218,36],[218,39,218,37],[218,40,218,38],[219,16,219,12],[219,20,219,18,"startDate"],[219,29,219,27],[219,32,219,30],[219,36,219,34,"Date"],[219,40,219,38],[219,41,219,39],[219,42,219,40],[220,16,221,12],[220,24,221,20,"timeRange"],[220,33,221,29],[221,18,222,14],[221,23,222,19],[221,28,222,24],[222,20,223,16,"startDate"],[222,29,223,25],[222,30,223,26,"setHours"],[222,38,223,34],[222,39,223,35,"startDate"],[222,48,223,44],[222,49,223,45,"getHours"],[222,57,223,53],[222,58,223,54],[222,59,223,55],[222,62,223,58],[222,64,223,60],[222,65,223,61],[223,20,224,16],[224,18,225,14],[224,23,225,19],[224,27,225,23],[225,20,226,16,"startDate"],[225,29,226,25],[225,30,226,26,"setDate"],[225,37,226,33],[225,38,226,34,"startDate"],[225,47,226,43],[225,48,226,44,"getDate"],[225,55,226,51],[225,56,226,52],[225,57,226,53],[225,60,226,56],[225,61,226,57],[225,62,226,58],[226,20,227,16],[227,18,228,14],[227,23,228,19],[227,28,228,24],[228,20,229,16,"startDate"],[228,29,229,25],[228,30,229,26,"setDate"],[228,37,229,33],[228,38,229,34,"startDate"],[228,47,229,43],[228,48,229,44,"getDate"],[228,55,229,51],[228,56,229,52],[228,57,229,53],[228,60,229,56],[228,62,229,58],[228,63,229,59],[229,20,230,16],[230,18,231,14],[230,23,231,19],[230,28,231,24],[231,20,232,16,"startDate"],[231,29,232,25],[231,30,232,26,"setFullYear"],[231,41,232,37],[231,42,232,38,"startDate"],[231,51,232,47],[231,52,232,48,"getFullYear"],[231,63,232,59],[231,64,232,60],[231,65,232,61],[231,68,232,64],[231,70,232,66],[231,71,232,67],[232,20,233,16],[233,16,234,12],[234,16,236,12],[234,20,236,12,"_yield$supabase$from$3"],[234,42,236,12],[234,51,236,69,"supabase"],[234,67,236,77],[234,68,237,15,"from"],[234,72,237,19],[234,73,237,20],[234,96,237,43],[234,97,237,44],[234,98,238,15,"select"],[234,104,238,21],[234,105,238,22],[234,108,238,25],[234,109,238,26],[234,110,239,15,"eq"],[234,112,239,17],[234,113,239,18],[234,122,239,27],[234,124,239,29,"user"],[234,128,239,33],[234,129,239,34,"id"],[234,131,239,36],[234,132,239,37],[234,133,240,15,"gte"],[234,136,240,18],[234,137,240,19],[234,149,240,31],[234,151,240,33,"startDate"],[234,160,240,42],[234,161,240,43,"toISOString"],[234,172,240,54],[234,173,240,55],[234,174,240,56],[234,175,240,57],[234,176,241,15,"lte"],[234,179,241,18],[234,180,241,19],[234,192,241,31],[234,194,241,33,"endDate"],[234,201,241,40],[234,202,241,41,"toISOString"],[234,213,241,52],[234,214,241,53],[234,215,241,54],[234,216,241,55],[234,217,242,15,"abortSignal"],[234,228,242,26],[234,229,242,27,"signal"],[234,235,242,33],[234,236,242,34],[235,18,236,26,"executions"],[235,28,236,36],[235,31,236,36,"_yield$supabase$from$3"],[235,53,236,36],[235,54,236,20,"data"],[235,58,236,24],[236,18,236,45,"fallbackError"],[236,31,236,58],[236,34,236,58,"_yield$supabase$from$3"],[236,56,236,58],[236,57,236,38,"error"],[236,62,236,43],[237,16,244,12],[237,20,244,16,"fallbackError"],[237,33,244,29],[237,35,244,31],[238,18,245,14],[238,25,245,21],[239,20,246,16,"error"],[239,25,246,21],[239,27,246,23],[240,22,247,18,"status"],[240,28,247,24],[240,30,247,26],[240,43,247,39],[241,22,248,18,"message"],[241,29,248,25],[241,31,248,27,"fallbackError"],[241,44,248,40],[241,45,248,41,"message"],[241,52,248,48],[241,56,248,52],[241,89,248,85],[242,22,249,18,"code"],[242,26,249,22],[242,28,249,24,"fallbackError"],[242,41,249,37],[242,42,249,38,"code"],[243,20,250,16],[244,18,251,14],[244,19,251,15],[245,16,252,12],[247,16,254,12],[248,16,255,12],[248,20,255,18,"statsByDate"],[248,31,255,29],[248,34,255,32],[248,38,255,36,"Map"],[248,41,255,39],[248,42,255,64],[248,43,255,65],[249,16,257,12,"executions"],[249,26,257,22],[249,38,257,12,"executions"],[249,48,257,22],[249,49,257,24,"forEach"],[249,56,257,31],[249,57,257,32],[249,67,257,33,"execution"],[249,76,257,47],[249,78,257,52],[250,18,258,14],[250,22,258,20,"date"],[250,26,258,24],[250,29,258,27],[250,33,258,31,"Date"],[250,37,258,35],[250,38,258,36,"execution"],[250,47,258,45],[250,48,258,46,"created_at"],[250,58,258,56],[250,59,258,57],[250,60,258,58,"toDateString"],[250,72,258,70],[250,73,258,71],[250,74,258,72],[251,18,259,14],[251,22,259,20,"existing"],[251,30,259,28],[251,33,259,31,"statsByDate"],[251,44,259,42],[251,45,259,43,"get"],[251,48,259,46],[251,49,259,47,"date"],[251,53,259,51],[251,54,259,52],[251,58,259,56],[252,20,260,16,"date"],[252,24,260,20],[252,26,260,16,"date"],[252,30,260,20],[253,20,261,16,"count"],[253,25,261,21],[253,27,261,23],[253,28,261,24],[254,20,262,16,"successful"],[254,30,262,26],[254,32,262,28],[254,33,262,29],[255,20,263,16,"failed"],[255,26,263,22],[255,28,263,24],[255,29,263,25],[256,20,264,16,"avg_duration"],[256,32,264,28],[256,34,264,30],[257,18,265,14],[257,19,265,15],[258,18,267,14,"existing"],[258,26,267,22],[258,27,267,23,"count"],[258,32,267,28],[258,36,267,32],[258,37,267,33],[259,18,268,14],[259,22,268,18,"execution"],[259,31,268,27],[259,32,268,28,"status"],[259,38,268,34],[259,43,268,39],[259,52,268,48],[259,54,268,50],[260,20,269,16,"existing"],[260,28,269,24],[260,29,269,25,"successful"],[260,39,269,35],[260,43,269,39],[260,44,269,40],[261,18,270,14],[261,19,270,15],[261,25,270,21],[262,20,271,16,"existing"],[262,28,271,24],[262,29,271,25,"failed"],[262,35,271,31],[262,39,271,35],[262,40,271,36],[263,18,272,14],[264,18,274,14,"statsByDate"],[264,29,274,25],[264,30,274,26,"set"],[264,33,274,29],[264,34,274,30,"date"],[264,38,274,34],[264,40,274,36,"existing"],[264,48,274,44],[264,49,274,45],[265,16,275,12],[265,17,275,13],[265,18,275,14],[266,16,277,12],[266,23,277,19],[267,18,277,21,"data"],[267,22,277,25],[267,24,277,27,"Array"],[267,29,277,32],[267,30,277,33,"from"],[267,34,277,37],[267,35,277,38,"statsByDate"],[267,46,277,49],[267,47,277,50,"values"],[267,53,277,56],[267,54,277,57],[267,55,277,58],[268,16,277,60],[268,17,277,61],[269,14,278,8],[269,15,278,9],[269,16,278,10],[269,23,278,17,"error"],[269,28,278,27],[269,30,278,29],[270,16,279,10],[270,20,279,14,"error"],[270,25,279,19],[270,26,279,20,"name"],[270,30,279,24],[270,35,279,29],[270,47,279,41],[270,49,279,43],[271,18,280,12],[271,25,280,19],[272,20,280,21,"error"],[272,25,280,26],[272,27,280,28],[273,22,280,30,"status"],[273,28,280,36],[273,30,280,38],[273,41,280,49],[274,22,280,51,"message"],[274,29,280,58],[274,31,280,60],[275,20,280,80],[276,18,280,82],[276,19,280,83],[277,16,281,10],[278,16,283,10,"EventLogger"],[278,40,283,21],[278,41,283,22,"error"],[278,46,283,27],[278,47,283,28],[278,52,283,33],[278,54,283,35],[278,88,283,69],[278,90,283,71,"error"],[278,95,283,85],[278,96,283,86],[279,16,284,10],[279,23,284,17],[280,18,285,12,"error"],[280,23,285,17],[280,25,285,19],[281,20,286,14,"status"],[281,26,286,20],[281,28,286,22],[281,41,286,35],[282,20,287,14,"message"],[282,27,287,21],[282,29,287,23,"error"],[282,34,287,28],[282,35,287,29,"message"],[282,42,287,36],[282,46,287,40],[283,18,288,12],[284,16,289,10],[284,17,289,11],[285,14,290,8],[286,12,291,6],[286,13,291,7],[287,12,291,7],[287,21,208,6,"queryFn"],[287,28,208,13,"queryFn"],[287,29,208,13,"_x3"],[287,32,208,13],[287,34,208,13,"_x4"],[287,37,208,13],[288,14,208,13],[288,21,208,13,"_queryFn2"],[288,30,208,13],[288,31,208,13,"apply"],[288,36,208,13],[288,43,208,13,"arguments"],[288,52,208,13],[289,12,208,13],[290,12,208,13],[290,19,208,6,"queryFn"],[290,26,208,13],[291,10,208,13],[291,13,291,7],[292,10,292,6,"providesTags"],[292,22,292,18],[292,24,292,20],[292,33,292,6,"providesTags"],[292,45,292,18,"providesTags"],[292,46,292,21,"result"],[292,52,292,27],[292,54,292,29,"error"],[292,59,292,34],[292,61,292,34,"_ref8"],[292,66,292,34],[293,12,292,34],[293,16,292,38,"timeRange"],[293,25,292,47],[293,28,292,47,"_ref8"],[293,33,292,47],[293,34,292,38,"timeRange"],[293,43,292,47],[294,12,292,47],[294,19,292,54],[294,20,293,8],[295,14,293,10,"type"],[295,18,293,14],[295,20,293,16],[295,31,293,27],[296,14,293,29,"id"],[296,16,293,31],[296,18,293,33],[296,27,293,42,"timeRange"],[296,36,293,51],[297,12,293,54],[297,13,293,55],[297,14,294,7],[298,10,294,7],[299,8,295,4],[299,9,295,5],[299,10,295,6],[300,8,297,4],[301,0,298,0],[302,0,299,0],[303,8,300,4,"getAutomationMetrics"],[303,28,300,24],[303,30,300,26,"builder"],[303,37,300,33],[303,38,300,34,"query"],[303,43,300,39],[303,44,300,85],[304,10,301,6,"queryFn"],[304,17,301,13],[305,12,301,13],[305,16,301,13,"_queryFn3"],[305,25,301,13],[305,32,301,13,"_asyncToGenerator2"],[305,50,301,13],[305,51,301,13,"default"],[305,58,301,13],[305,60,301,15],[305,71,301,15,"_ref9"],[305,76,301,15],[305,78,301,15,"_ref0"],[305,83,301,15],[305,85,301,55],[306,14,301,55],[306,18,301,24,"automationId"],[306,30,301,36],[306,33,301,36,"_ref9"],[306,38,301,36],[306,39,301,24,"automationId"],[306,51,301,36],[307,14,301,36],[307,18,301,42,"signal"],[307,24,301,48],[307,27,301,48,"_ref0"],[307,32,301,48],[307,33,301,42,"signal"],[307,39,301,48],[308,14,302,8],[308,18,302,12],[309,16,302,12],[309,20,302,12,"_executions$"],[309,32,302,12],[310,16,303,10],[310,20,303,10,"_yield$supabase$from$4"],[310,42,303,10],[310,51,303,52,"supabase"],[310,67,303,60],[310,68,304,13,"from"],[310,72,304,17],[310,73,304,18],[310,96,304,41],[310,97,304,42],[310,98,305,13,"select"],[310,104,305,19],[310,105,305,20],[310,108,305,23],[310,109,305,24],[310,110,306,13,"eq"],[310,112,306,15],[310,113,306,16],[310,128,306,31],[310,130,306,33,"automationId"],[310,142,306,45],[310,143,306,46],[310,144,307,13,"order"],[310,149,307,18],[310,150,307,19],[310,162,307,31],[310,164,307,33],[311,20,307,35,"ascending"],[311,29,307,44],[311,31,307,46],[312,18,307,52],[312,19,307,53],[312,20,307,54],[312,21,308,13,"limit"],[312,26,308,18],[312,27,308,19],[312,30,308,22],[312,31,308,23],[312,32,309,13,"abortSignal"],[312,43,309,24],[312,44,309,25,"signal"],[312,50,309,31],[312,51,309,32],[313,18,303,24,"executions"],[313,28,303,34],[313,31,303,34,"_yield$supabase$from$4"],[313,53,303,34],[313,54,303,18,"data"],[313,58,303,22],[314,18,303,36,"error"],[314,23,303,41],[314,26,303,41,"_yield$supabase$from$4"],[314,48,303,41],[314,49,303,36,"error"],[314,54,303,41],[315,16,311,10],[315,20,311,14,"error"],[315,25,311,19],[315,27,311,21],[316,18,312,12,"EventLogger"],[316,42,312,23],[316,43,312,24,"error"],[316,48,312,29],[316,49,312,30],[316,54,312,35],[316,56,312,37],[316,92,312,73],[316,94,312,75,"error"],[316,99,312,89],[316,100,312,90],[317,18,313,12],[317,25,313,19],[318,20,314,14,"error"],[318,25,314,19],[318,27,314,21],[319,22,315,16,"status"],[319,28,315,22],[319,30,315,24],[319,43,315,37],[320,22,316,16,"message"],[320,29,316,23],[320,31,316,25,"error"],[320,36,316,30],[320,37,316,31,"message"],[320,44,316,38],[320,48,316,42],[320,84,316,78],[321,22,317,16,"code"],[321,26,317,20],[321,28,317,22,"error"],[321,33,317,27],[321,34,317,28,"code"],[322,20,318,14],[323,18,319,12],[323,19,319,13],[324,16,320,10],[325,16,322,10],[325,20,322,16,"total"],[325,25,322,21],[325,28,322,24],[325,29,322,24,"executions"],[325,39,322,34],[325,59,322,24,"executions"],[325,69,322,34],[325,70,322,36,"length"],[325,76,322,42],[325,81,322,46],[325,82,322,47],[326,16,323,10],[326,20,323,16,"successful"],[326,30,323,26],[326,33,323,29],[326,34,323,29,"executions"],[326,44,323,39],[326,64,323,29,"executions"],[326,74,323,39],[326,75,323,41,"filter"],[326,81,323,47],[326,82,323,48],[326,92,323,48,"e"],[326,93,323,49],[327,18,323,49],[327,25,323,53,"e"],[327,26,323,54],[327,27,323,55,"status"],[327,33,323,61],[327,38,323,66],[327,47,323,75],[328,16,323,75],[328,18,323,76],[328,19,323,77,"length"],[328,25,323,83],[328,30,323,87],[328,31,323,88],[329,16,324,10],[329,20,324,16,"totalTime"],[329,29,324,25],[329,32,324,28],[329,33,324,28,"executions"],[329,43,324,38],[329,63,324,28,"executions"],[329,73,324,38],[329,74,324,40,"reduce"],[329,80,324,46],[329,81,324,47],[329,91,324,48,"sum"],[329,94,324,51],[329,96,324,53,"e"],[329,97,324,54],[330,18,324,54],[330,25,324,59,"sum"],[330,28,324,62],[330,32,324,66,"e"],[330,33,324,67],[330,34,324,68,"execution_time"],[330,48,324,82],[330,52,324,86],[330,53,324,87],[330,54,324,88],[331,16,324,88],[331,19,324,90],[331,20,324,91],[331,21,324,92],[331,26,324,96],[331,27,324,97],[332,16,326,10],[332,23,326,17],[333,18,327,12,"data"],[333,22,327,16],[333,24,327,18],[334,20,328,14,"totalRuns"],[334,29,328,23],[334,31,328,25,"total"],[334,36,328,30],[335,20,329,14,"successRate"],[335,31,329,25],[335,33,329,27,"total"],[335,38,329,32],[335,41,329,35],[335,42,329,36],[335,45,329,39,"Math"],[335,49,329,43],[335,50,329,44,"round"],[335,55,329,49],[335,56,329,51,"successful"],[335,66,329,61],[335,69,329,64,"total"],[335,74,329,69],[335,77,329,73],[335,80,329,76],[335,81,329,77],[335,84,329,80],[335,85,329,81],[336,20,330,14,"avgExecutionTime"],[336,36,330,30],[336,38,330,32,"total"],[336,43,330,37],[336,46,330,40],[336,47,330,41],[336,50,330,44,"Math"],[336,54,330,48],[336,55,330,49,"round"],[336,60,330,54],[336,61,330,56,"totalTime"],[336,70,330,65],[336,73,330,68,"total"],[336,78,330,73],[336,81,330,77],[336,83,330,79],[336,84,330,80],[336,87,330,83],[336,89,330,85],[336,92,330,88],[336,93,330,89],[337,20,331,14,"lastRun"],[337,27,331,21],[337,29,331,23,"executions"],[337,39,331,33],[337,52,331,33,"_executions$"],[337,64,331,33],[337,67,331,23,"executions"],[337,77,331,33],[337,78,331,36],[337,79,331,37],[337,80,331,38],[337,101,331,23,"_executions$"],[337,113,331,23],[337,114,331,40,"created_at"],[337,124,331,50],[338,20,332,14,"executions"],[338,30,332,24],[338,32,332,26],[338,33,332,26,"executions"],[338,43,332,36],[338,63,332,26,"executions"],[338,73,332,36],[338,74,332,38,"slice"],[338,79,332,43],[338,80,332,44],[338,81,332,45],[338,83,332,47],[338,85,332,49],[338,86,332,50],[338,91,332,54],[338,93,332,56],[338,94,332,58],[339,18,333,12],[340,16,334,10],[340,17,334,11],[341,14,335,8],[341,15,335,9],[341,16,335,10],[341,23,335,17,"error"],[341,28,335,27],[341,30,335,29],[342,16,336,10],[342,20,336,14,"error"],[342,25,336,19],[342,26,336,20,"name"],[342,30,336,24],[342,35,336,29],[342,47,336,41],[342,49,336,43],[343,18,337,12],[343,25,337,19],[344,20,337,21,"error"],[344,25,337,26],[344,27,337,28],[345,22,337,30,"status"],[345,28,337,36],[345,30,337,38],[345,41,337,49],[346,22,337,51,"message"],[346,29,337,58],[346,31,337,60],[347,20,337,80],[348,18,337,82],[348,19,337,83],[349,16,338,10],[350,16,340,10,"EventLogger"],[350,40,340,21],[350,41,340,22,"error"],[350,46,340,27],[350,47,340,28],[350,52,340,33],[350,54,340,35],[350,91,340,72],[350,93,340,74,"error"],[350,98,340,88],[350,99,340,89],[351,16,341,10],[351,23,341,17],[352,18,342,12,"error"],[352,23,342,17],[352,25,342,19],[353,20,343,14,"status"],[353,26,343,20],[353,28,343,22],[353,41,343,35],[354,20,344,14,"message"],[354,27,344,21],[354,29,344,23,"error"],[354,34,344,28],[354,35,344,29,"message"],[354,42,344,36],[354,46,344,40],[355,18,345,12],[356,16,346,10],[356,17,346,11],[357,14,347,8],[358,12,348,6],[358,13,348,7],[359,12,348,7],[359,21,301,6,"queryFn"],[359,28,301,13,"queryFn"],[359,29,301,13,"_x5"],[359,32,301,13],[359,34,301,13,"_x6"],[359,37,301,13],[360,14,301,13],[360,21,301,13,"_queryFn3"],[360,30,301,13],[360,31,301,13,"apply"],[360,36,301,13],[360,43,301,13,"arguments"],[360,52,301,13],[361,12,301,13],[362,12,301,13],[362,19,301,6,"queryFn"],[362,26,301,13],[363,10,301,13],[363,13,348,7],[364,10,349,6,"providesTags"],[364,22,349,18],[364,24,349,20],[364,33,349,6,"providesTags"],[364,45,349,18,"providesTags"],[364,46,349,21,"result"],[364,52,349,27],[364,54,349,29,"error"],[364,59,349,34],[364,61,349,34,"_ref1"],[364,66,349,34],[365,12,349,34],[365,16,349,38,"automationId"],[365,28,349,50],[365,31,349,50,"_ref1"],[365,36,349,50],[365,37,349,38,"automationId"],[365,49,349,50],[366,12,349,50],[366,19,349,57],[366,20,350,8],[367,14,350,10,"type"],[367,18,350,14],[367,20,350,16],[367,29,350,25],[368,14,350,27,"id"],[368,16,350,29],[368,18,350,31,"automationId"],[369,12,350,44],[369,13,350,45],[369,14,351,7],[370,10,351,7],[371,8,352,4],[371,9,352,5],[371,10,352,6],[372,8,354,4],[373,0,355,0],[374,0,356,0],[375,8,357,4,"getSystemAnalytics"],[375,26,357,22],[375,28,357,24,"builder"],[375,35,357,31],[375,36,357,32,"query"],[375,41,357,37],[375,42,357,49],[376,10,358,6,"queryFn"],[376,17,358,13],[377,12,358,13],[377,16,358,13,"_queryFn4"],[377,25,358,13],[377,32,358,13,"_asyncToGenerator2"],[377,50,358,13],[377,51,358,13,"default"],[377,58,358,13],[377,60,358,15],[377,71,358,22,"_"],[377,72,358,23],[377,74,358,23,"_ref10"],[377,80,358,23],[377,82,358,40],[378,14,358,40],[378,18,358,27,"signal"],[378,24,358,33],[378,27,358,33,"_ref10"],[378,33,358,33],[378,34,358,27,"signal"],[378,40,358,33],[379,14,359,8],[379,18,359,12],[380,16,360,10],[380,20,360,10,"_yield$supabase$auth$3"],[380,42,360,10],[380,51,360,43,"supabase"],[380,67,360,51],[380,68,360,52,"auth"],[380,72,360,56],[380,73,360,57,"getUser"],[380,80,360,64],[380,81,360,65],[380,82,360,66],[381,18,360,26,"user"],[381,22,360,30],[381,25,360,30,"_yield$supabase$auth$3"],[381,47,360,30],[381,48,360,18,"data"],[381,52,360,22],[381,53,360,26,"user"],[381,57,360,30],[382,16,362,10],[382,20,362,14],[382,21,362,15,"user"],[382,25,362,19],[382,27,362,21],[383,18,363,12],[383,25,363,19],[384,20,364,14,"error"],[384,25,364,19],[384,27,364,21],[385,22,365,16,"status"],[385,28,365,22],[385,30,365,24],[385,44,365,38],[386,22,366,16,"message"],[386,29,366,23],[386,31,366,25],[387,20,367,14],[388,18,368,12],[388,19,368,13],[389,16,369,10],[391,16,371,10],[392,16,372,10],[393,16,373,10],[393,23,373,17],[394,18,374,12,"data"],[394,22,374,16],[394,24,374,18],[395,20,375,14,"total_users"],[395,31,375,25],[395,33,375,27],[395,34,375,28],[396,20,376,14,"total_automations"],[396,37,376,31],[396,39,376,33],[396,40,376,34],[397,20,377,14,"total_executions"],[397,36,377,30],[397,38,377,32],[397,39,377,33],[398,20,378,14,"active_users_today"],[398,38,378,32],[398,40,378,34],[398,41,378,35],[399,20,379,14,"new_users_this_week"],[399,39,379,33],[399,41,379,35],[399,42,379,36],[400,20,380,14,"popular_categories"],[400,38,380,32],[400,40,380,34],[400,42,380,36],[401,20,381,14,"system_health"],[401,33,381,27],[401,35,381,29],[402,18,382,12],[403,16,383,10],[403,17,383,11],[404,14,384,8],[404,15,384,9],[404,16,384,10],[404,23,384,17,"error"],[404,28,384,27],[404,30,384,29],[405,16,385,10],[405,20,385,14,"error"],[405,25,385,19],[405,26,385,20,"name"],[405,30,385,24],[405,35,385,29],[405,47,385,41],[405,49,385,43],[406,18,386,12],[406,25,386,19],[407,20,386,21,"error"],[407,25,386,26],[407,27,386,28],[408,22,386,30,"status"],[408,28,386,36],[408,30,386,38],[408,41,386,49],[409,22,386,51,"message"],[409,29,386,58],[409,31,386,60],[410,20,386,80],[411,18,386,82],[411,19,386,83],[412,16,387,10],[413,16,389,10,"EventLogger"],[413,40,389,21],[413,41,389,22,"error"],[413,46,389,27],[413,47,389,28],[413,52,389,33],[413,54,389,35],[413,89,389,70],[413,91,389,72,"error"],[413,96,389,86],[413,97,389,87],[414,16,390,10],[414,23,390,17],[415,18,391,12,"error"],[415,23,391,17],[415,25,391,19],[416,20,392,14,"status"],[416,26,392,20],[416,28,392,22],[416,41,392,35],[417,20,393,14,"message"],[417,27,393,21],[417,29,393,23,"error"],[417,34,393,28],[417,35,393,29,"message"],[417,42,393,36],[417,46,393,40],[418,18,394,12],[419,16,395,10],[419,17,395,11],[420,14,396,8],[421,12,397,6],[421,13,397,7],[422,12,397,7],[422,21,358,6,"queryFn"],[422,28,358,13,"queryFn"],[422,29,358,13,"_x7"],[422,32,358,13],[422,34,358,13,"_x8"],[422,37,358,13],[423,14,358,13],[423,21,358,13,"_queryFn4"],[423,30,358,13],[423,31,358,13,"apply"],[423,36,358,13],[423,43,358,13,"arguments"],[423,52,358,13],[424,12,358,13],[425,12,358,13],[425,19,358,6,"queryFn"],[425,26,358,13],[426,10,358,13],[426,13,397,7],[427,10,398,6,"providesTags"],[427,22,398,18],[427,24,398,20],[427,25,398,21],[428,12,398,23,"type"],[428,16,398,27],[428,18,398,29],[428,29,398,40],[429,12,398,42,"id"],[429,14,398,44],[429,16,398,46],[430,10,398,55],[430,11,398,56],[431,8,399,4],[431,9,399,5],[432,6,400,2],[432,7,400,3],[433,4,400,3],[434,2,400,4],[434,4,401,1],[434,5,401,2],[436,2,403,0],[437,2,404,7],[437,6,405,2,"useGetAnalyticsQuery"],[437,26,405,22],[437,29,405,22,"exports"],[437,36,405,22],[437,37,405,22,"useGetAnalyticsQuery"],[437,57,405,22],[437,60,409,4,"analyticsApi"],[437,72,409,16],[437,73,405,2,"useGetAnalyticsQuery"],[437,93,405,22],[438,4,406,2,"useGetExecutionStatsQuery"],[438,29,406,27],[438,32,406,27,"exports"],[438,39,406,27],[438,40,406,27,"useGetExecutionStatsQuery"],[438,65,406,27],[438,68,409,4,"analyticsApi"],[438,80,409,16],[438,81,406,2,"useGetExecutionStatsQuery"],[438,106,406,27],[439,4,407,2,"useGetAutomationMetricsQuery"],[439,32,407,30],[439,35,407,30,"exports"],[439,42,407,30],[439,43,407,30,"useGetAutomationMetricsQuery"],[439,71,407,30],[439,74,409,4,"analyticsApi"],[439,86,409,16],[439,87,407,2,"useGetAutomationMetricsQuery"],[439,115,407,30],[440,4,408,2,"useGetSystemAnalyticsQuery"],[440,30,408,28],[440,33,408,28,"exports"],[440,40,408,28],[440,41,408,28,"useGetSystemAnalyticsQuery"],[440,67,408,28],[440,70,409,4,"analyticsApi"],[440,82,409,16],[440,83,408,2,"useGetSystemAnalyticsQuery"],[440,109,408,28],[441,0,409,17],[441,3]],"functionMap":{"names":["<global>","createApi$argument_0.endpoints","builder.query$argument_0.queryFn","executions.filter$argument_0","executions.forEach$argument_0","Array.from.sort$argument_0","Array.from.sort.map$argument_0","Array.from.map$argument_0","Array.from.map.sort$argument_0","executions.reduce$argument_0","builder.query$argument_0.providesTags"],"mappings":"AAA;aCmD;eCK;0DCgE,kCD;8BEK;WFG;kBGG,6DH;iBIC,iDJ;8BEI;WFO;iBKG;cLI;kBMC,qCN;wDOI,sDP;OD0C;oBSC;OTE;eCO;gCEiD;aFkB;ODgB;oBSC;OTE;eCO;gDCsB,2BD;+COC,yCP;ODwB;oBSC;OTE;eCO;ODuC;IDG"}},"type":"js/module"}]}