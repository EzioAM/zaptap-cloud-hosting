{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"X490zePjq+0IljAc8X0qcBg0iTo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"]}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"]}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"mJQeK2ZRLq8v0j9J6l50oLtYU2c=","exportNames":["*"]}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"/OEwo8APHIJtscmrfuh7WccCayM=","exportNames":["*"]}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"]}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"0Xv+Jf6vWjo3/vKyf7CxgrGRylo=","exportNames":["*"]}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _defineProperty2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n  var _toConsumableArray2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[4], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(require(_dependencyMap[5], \"query-string\"));\n  var _arrayStartsWith = require(_dependencyMap[6], \"./arrayStartsWith.js\");\n  var _findFocusedRoute = require(_dependencyMap[7], \"./findFocusedRoute.js\");\n  var _getPatternParts = require(_dependencyMap[8], \"./getPatternParts.js\");\n  var _isArrayEqual = require(_dependencyMap[9], \"./isArrayEqual.js\");\n  var _validatePathConfig = require(_dependencyMap[10], \"./validatePathConfig.js\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _options$path;\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options == null ? void 0 : options.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options == null || (_options$path = options.path) == null ? void 0 : _options$path.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n        var name = decodeURIComponent(segment);\n        return {\n          name: name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(function (config) {\n        return config.segments.join('/') === '';\n      });\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(function (name) {\n          return {\n            name: name\n          };\n        }), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfig.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options == null ? void 0 : options.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes: initialRoutes,\n      configs: configs,\n      configWithRegexes: configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options != null && options.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var _ref;\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n      return _createNormalizedConfigs(key, screens, initialRoutes, [], [], []);\n    }))).sort(function (a, b) {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqual.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWith.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWith.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce(function (acc, config) {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every(function (it, i) {\n          return a[i] === it;\n        }) : a.every(function (it, i) {\n          return b[i] === it;\n        });\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, (0, _defineProperty2.default)({}, pattern, config));\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(function (c) {\n      return Object.assign({}, c, {\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    });\n  }\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function _loop(config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(function (routeName) {\n            var routeConfig = configs.find(function (c) {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, _arrayStartsWith.arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(function (_ref2) {\n              var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n                key = _ref3[0],\n                value = _ref3[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(function (it) {\n                return it.index === index;\n              });\n              if ((param == null ? void 0 : param.screen) === routeName && param != null && param.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(function (it) {\n              return it != null;\n            }).map(function (_ref4) {\n              var _routeConfig$parse;\n              var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n                key = _ref5[0],\n                value = _ref5[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = (_routeConfig$parse = routeConfig.parse) != null && _routeConfig$parse[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params: params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes: routes,\n      remainingPath: remainingPath\n    };\n  };\n  var _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig, initials, paths, parentScreens, routeNames) {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen: screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, (0, _toConsumableArray2.default)(routeNames), (0, _toConsumableArray2.default)(paths)));\n    } else if (typeof config === 'object') {\n      var _config$alias;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, (0, _toConsumableArray2.default)(routeNames), [].concat((0, _toConsumableArray2.default)(paths), [{\n                screen: screen,\n                path: alias\n              }]), config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, (0, _toConsumableArray2.default)(routeNames), alias.exact ? [{\n                screen: screen,\n                path: alias.path\n              }] : [].concat((0, _toConsumableArray2.default)(paths), [{\n                screen: screen,\n                path: alias.path\n              }]), alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen: screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, (0, _toConsumableArray2.default)(routeNames), (0, _toConsumableArray2.default)(paths), config.parse));\n        configs.push.apply(configs, aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && (_config$alias = config.alias) != null && _config$alias.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens: parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var result = _createNormalizedConfigs(nestedConfig, config.screens, initials, (0, _toConsumableArray2.default)(paths), (0, _toConsumableArray2.default)(parentScreens), routeNames);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = function createConfigItem(screen, routeNames, paths, parse) {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function _loop2(_screen) {\n      parts.push.apply(parts, (0, _toConsumableArray2.default)((0, _getPatternParts.getPatternParts)(path).map(function (part) {\n        return Object.assign({}, part, {\n          screen: _screen\n        });\n      })));\n    };\n    for (var _ref6 of paths) {\n      var _screen = _ref6.screen;\n      var path = _ref6.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map(function (it, i) {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, _escapeStringRegexp.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(function (it) {\n      return it.segment;\n    });\n    var params = parts.map(function (it, i) {\n      return it.param ? {\n        index: i,\n        screen: it.screen,\n        name: it.param\n      } : null;\n    }).filter(function (it) {\n      return it != null;\n    });\n    return {\n      screen: screen,\n      regex: regex,\n      segments: segments,\n      params: params,\n      routeNames: routeNames,\n      parse: parse\n    };\n  };\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = Object.assign({}, route.params, params);\n    }\n    return state;\n  };\n  var parseQueryParams = function parseQueryParams(path, parseConfig) {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(function (name) {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":556,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"getStateFromPath"],[8,26,1,13],[8,29,1,13,"getStateFromPath"],[8,45,1,13],[9,2,1,13],[9,6,1,13,"_slicedToArray2"],[9,21,1,13],[9,24,1,13,"_interopRequireDefault"],[9,46,1,13],[9,47,1,13,"require"],[9,54,1,13],[9,55,1,13,"_dependencyMap"],[9,69,1,13],[10,2,1,13],[10,6,1,13,"_defineProperty2"],[10,22,1,13],[10,25,1,13,"_interopRequireDefault"],[10,47,1,13],[10,48,1,13,"require"],[10,55,1,13],[10,56,1,13,"_dependencyMap"],[10,70,1,13],[11,2,1,13],[11,6,1,13,"_toConsumableArray2"],[11,25,1,13],[11,28,1,13,"_interopRequireDefault"],[11,50,1,13],[11,51,1,13,"require"],[11,58,1,13],[11,59,1,13,"_dependencyMap"],[11,73,1,13],[12,2,3,0],[12,6,3,0,"_escapeStringRegexp"],[12,25,3,0],[12,28,3,0,"_interopRequireDefault"],[12,50,3,0],[12,51,3,0,"require"],[12,58,3,0],[12,59,3,0,"_dependencyMap"],[12,73,3,0],[13,2,4,0],[13,6,4,0,"queryString"],[13,17,4,0],[13,20,4,0,"_interopRequireWildcard"],[13,43,4,0],[13,44,4,0,"require"],[13,51,4,0],[13,52,4,0,"_dependencyMap"],[13,66,4,0],[14,2,5,0],[14,6,5,0,"_arrayStartsWith"],[14,22,5,0],[14,25,5,0,"require"],[14,32,5,0],[14,33,5,0,"_dependencyMap"],[14,47,5,0],[15,2,6,0],[15,6,6,0,"_findFocusedRoute"],[15,23,6,0],[15,26,6,0,"require"],[15,33,6,0],[15,34,6,0,"_dependencyMap"],[15,48,6,0],[16,2,7,0],[16,6,7,0,"_getPatternParts"],[16,22,7,0],[16,25,7,0,"require"],[16,32,7,0],[16,33,7,0,"_dependencyMap"],[16,47,7,0],[17,2,8,0],[17,6,8,0,"_isArrayEqual"],[17,19,8,0],[17,22,8,0,"require"],[17,29,8,0],[17,30,8,0,"_dependencyMap"],[17,44,8,0],[18,2,9,0],[18,6,9,0,"_validatePathConfig"],[18,25,9,0],[18,28,9,0,"require"],[18,35,9,0],[18,36,9,0,"_dependencyMap"],[18,50,9,0],[19,2,9,61],[19,11,9,61,"_interopRequireWildcard"],[19,35,9,61,"e"],[19,36,9,61],[19,38,9,61,"t"],[19,39,9,61],[19,68,9,61,"WeakMap"],[19,75,9,61],[19,81,9,61,"r"],[19,82,9,61],[19,89,9,61,"WeakMap"],[19,96,9,61],[19,100,9,61,"n"],[19,101,9,61],[19,108,9,61,"WeakMap"],[19,115,9,61],[19,127,9,61,"_interopRequireWildcard"],[19,150,9,61],[19,162,9,61,"_interopRequireWildcard"],[19,186,9,61,"e"],[19,187,9,61],[19,189,9,61,"t"],[19,190,9,61],[19,199,9,61,"t"],[19,200,9,61],[19,204,9,61,"e"],[19,205,9,61],[19,209,9,61,"e"],[19,210,9,61],[19,211,9,61,"__esModule"],[19,221,9,61],[19,230,9,61,"e"],[19,231,9,61],[19,237,9,61,"o"],[19,238,9,61],[19,240,9,61,"i"],[19,241,9,61],[19,243,9,61,"f"],[19,244,9,61],[19,249,9,61,"__proto__"],[19,258,9,61],[19,266,9,61,"default"],[19,273,9,61],[19,275,9,61,"e"],[19,276,9,61],[19,293,9,61,"e"],[19,294,9,61],[19,317,9,61,"e"],[19,318,9,61],[19,343,9,61,"e"],[19,344,9,61],[19,353,9,61,"f"],[19,354,9,61],[19,360,9,61,"o"],[19,361,9,61],[19,364,9,61,"t"],[19,365,9,61],[19,368,9,61,"n"],[19,369,9,61],[19,372,9,61,"r"],[19,373,9,61],[19,381,9,61,"o"],[19,382,9,61],[19,383,9,61,"has"],[19,386,9,61],[19,387,9,61,"e"],[19,388,9,61],[19,398,9,61,"o"],[19,399,9,61],[19,400,9,61,"get"],[19,403,9,61],[19,404,9,61,"e"],[19,405,9,61],[19,408,9,61,"o"],[19,409,9,61],[19,410,9,61,"set"],[19,413,9,61],[19,414,9,61,"e"],[19,415,9,61],[19,417,9,61,"f"],[19,418,9,61],[19,432,9,61,"_t"],[19,434,9,61],[19,438,9,61,"e"],[19,439,9,61],[19,455,9,61,"_t"],[19,457,9,61],[19,464,9,61,"hasOwnProperty"],[19,478,9,61],[19,479,9,61,"call"],[19,483,9,61],[19,484,9,61,"e"],[19,485,9,61],[19,487,9,61,"_t"],[19,489,9,61],[19,496,9,61,"i"],[19,497,9,61],[19,501,9,61,"o"],[19,502,9,61],[19,505,9,61,"Object"],[19,511,9,61],[19,512,9,61,"defineProperty"],[19,526,9,61],[19,531,9,61,"Object"],[19,537,9,61],[19,538,9,61,"getOwnPropertyDescriptor"],[19,562,9,61],[19,563,9,61,"e"],[19,564,9,61],[19,566,9,61,"_t"],[19,568,9,61],[19,575,9,61,"i"],[19,576,9,61],[19,577,9,61,"get"],[19,580,9,61],[19,584,9,61,"i"],[19,585,9,61],[19,586,9,61,"set"],[19,589,9,61],[19,593,9,61,"o"],[19,594,9,61],[19,595,9,61,"f"],[19,596,9,61],[19,598,9,61,"_t"],[19,600,9,61],[19,602,9,61,"i"],[19,603,9,61],[19,607,9,61,"f"],[19,608,9,61],[19,609,9,61,"_t"],[19,611,9,61],[19,615,9,61,"e"],[19,616,9,61],[19,617,9,61,"_t"],[19,619,9,61],[19,630,9,61,"f"],[19,631,9,61],[19,636,9,61,"e"],[19,637,9,61],[19,639,9,61,"t"],[19,640,9,61],[20,2,10,0],[21,0,11,0],[22,0,12,0],[23,0,13,0],[24,0,14,0],[25,0,15,0],[26,0,16,0],[27,0,17,0],[28,0,18,0],[29,0,19,0],[30,0,20,0],[31,0,21,0],[32,0,22,0],[33,0,23,0],[34,0,24,0],[35,0,25,0],[36,0,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,0,30,0],[41,2,31,7],[41,11,31,16,"getStateFromPath"],[41,27,31,32,"getStateFromPath"],[41,28,31,33,"path"],[41,32,31,37],[41,34,31,39,"options"],[41,41,31,46],[41,43,31,48],[42,4,31,48],[42,8,31,48,"_options$path"],[42,21,31,48],[43,4,32,2],[43,8,32,2,"_getConfigResources"],[43,27,32,2],[43,30,35,6,"getConfigResources"],[43,48,35,24],[43,49,35,25,"options"],[43,56,35,32],[43,57,35,33],[44,6,33,4,"initialRoutes"],[44,19,33,17],[44,22,33,17,"_getConfigResources"],[44,41,33,17],[44,42,33,4,"initialRoutes"],[44,55,33,17],[45,6,34,4,"configs"],[45,13,34,11],[45,16,34,11,"_getConfigResources"],[45,35,34,11],[45,36,34,4,"configs"],[45,43,34,11],[46,4,36,2],[46,8,36,8,"screens"],[46,15,36,15],[46,18,36,18,"options"],[46,25,36,25],[46,45,36,18,"options"],[46,52,36,25],[46,53,36,27,"screens"],[46,60,36,34],[47,4,37,2],[47,8,37,6,"remaining"],[47,17,37,15],[47,20,37,18,"path"],[47,24,37,22],[47,25,37,23,"replace"],[47,32,37,30],[47,33,37,31],[47,39,37,37],[47,41,37,39],[47,44,37,42],[47,45,37,43],[47,46,37,44],[48,4,37,44],[48,5,38,3,"replace"],[48,12,38,10],[48,13,38,11],[48,18,38,16],[48,20,38,18],[48,22,38,20],[48,23,38,21],[48,24,38,22],[49,4,38,22],[49,5,39,3,"replace"],[49,12,39,10],[49,13,39,11],[49,20,39,18],[49,22,39,20],[49,24,39,22],[49,25,39,23],[49,26,39,24],[49,27,39,25],[51,4,41,2],[52,4,42,2,"remaining"],[52,13,42,11],[52,16,42,14,"remaining"],[52,25,42,23],[52,26,42,24,"endsWith"],[52,34,42,32],[52,35,42,33],[52,38,42,36],[52,39,42,37],[52,42,42,40,"remaining"],[52,51,42,49],[52,54,42,52],[52,57,42,55,"remaining"],[52,66,42,64],[52,69,42,67],[53,4,43,2],[53,8,43,8,"prefix"],[53,14,43,14],[53,17,43,17,"options"],[53,24,43,24],[53,37,43,24,"_options$path"],[53,50,43,24],[53,53,43,17,"options"],[53,60,43,24],[53,61,43,26,"path"],[53,65,43,30],[53,86,43,17,"_options$path"],[53,99,43,17],[53,100,43,32,"replace"],[53,107,43,39],[53,108,43,40],[53,113,43,45],[53,115,43,47],[53,117,43,49],[53,118,43,50],[53,119,43,51],[53,120,43,52],[55,4,45,2],[55,8,45,6,"prefix"],[55,14,45,12],[55,16,45,14],[56,6,46,4],[57,6,47,4],[57,10,47,10,"normalizedPrefix"],[57,26,47,26],[57,29,47,29,"prefix"],[57,35,47,35],[57,36,47,36,"endsWith"],[57,44,47,44],[57,45,47,45],[57,48,47,48],[57,49,47,49],[57,52,47,52,"prefix"],[57,58,47,58],[57,61,47,61],[57,64,47,64,"prefix"],[57,70,47,70],[57,73,47,73],[59,6,49,4],[60,6,50,4],[60,10,50,8],[60,11,50,9,"remaining"],[60,20,50,18],[60,21,50,19,"startsWith"],[60,31,50,29],[60,32,50,30,"normalizedPrefix"],[60,48,50,46],[60,49,50,47],[60,51,50,49],[61,8,51,6],[61,15,51,13,"undefined"],[61,24,51,22],[62,6,52,4],[64,6,54,4],[65,6,55,4,"remaining"],[65,15,55,13],[65,18,55,16,"remaining"],[65,27,55,25],[65,28,55,26,"replace"],[65,35,55,33],[65,36,55,34,"normalizedPrefix"],[65,52,55,50],[65,54,55,52],[65,56,55,54],[65,57,55,55],[66,4,56,2],[67,4,57,2],[67,8,57,6,"screens"],[67,15,57,13],[67,20,57,18,"undefined"],[67,29,57,27],[67,31,57,29],[68,6,58,4],[69,6,59,4],[69,10,59,10,"routes"],[69,17,59,16],[69,20,59,19,"remaining"],[69,29,59,28],[69,30,59,29,"split"],[69,35,59,34],[69,36,59,35],[69,39,59,38],[69,40,59,39],[69,41,59,40,"filter"],[69,47,59,46],[69,48,59,47,"Boolean"],[69,55,59,54],[69,56,59,55],[69,57,59,56,"map"],[69,60,59,59],[69,61,59,60],[69,71,59,60,"segment"],[69,78,59,67],[69,80,59,71],[70,8,60,6],[70,12,60,12,"name"],[70,16,60,16],[70,19,60,19,"decodeURIComponent"],[70,37,60,37],[70,38,60,38,"segment"],[70,45,60,45],[70,46,60,46],[71,8,61,6],[71,15,61,13],[72,10,62,8,"name"],[72,14,62,12],[72,16,62,8,"name"],[73,8,63,6],[73,9,63,7],[74,6,64,4],[74,7,64,5],[74,8,64,6],[75,6,65,4],[75,10,65,8,"routes"],[75,17,65,14],[75,18,65,15,"length"],[75,24,65,21],[75,26,65,23],[76,8,66,6],[76,15,66,13,"createNestedStateObject"],[76,38,66,36],[76,39,66,37,"path"],[76,43,66,41],[76,45,66,43,"routes"],[76,52,66,49],[76,54,66,51,"initialRoutes"],[76,67,66,64],[76,68,66,65],[77,6,67,4],[78,6,68,4],[78,13,68,11,"undefined"],[78,22,68,20],[79,4,69,2],[80,4,70,2],[80,8,70,6,"remaining"],[80,17,70,15],[80,22,70,20],[80,25,70,23],[80,27,70,25],[81,6,71,4],[82,6,72,4],[83,6,73,4],[83,10,73,10,"match"],[83,15,73,15],[83,18,73,18,"configs"],[83,25,73,25],[83,26,73,26,"find"],[83,30,73,30],[83,31,73,31],[83,41,73,31,"config"],[83,47,73,37],[84,8,73,37],[84,15,73,41,"config"],[84,21,73,47],[84,22,73,48,"segments"],[84,30,73,56],[84,31,73,57,"join"],[84,35,73,61],[84,36,73,62],[84,39,73,65],[84,40,73,66],[84,45,73,71],[84,47,73,73],[85,6,73,73],[85,8,73,74],[86,6,74,4],[86,10,74,8,"match"],[86,15,74,13],[86,17,74,15],[87,8,75,6],[87,15,75,13,"createNestedStateObject"],[87,38,75,36],[87,39,75,37,"path"],[87,43,75,41],[87,45,75,43,"match"],[87,50,75,48],[87,51,75,49,"routeNames"],[87,61,75,59],[87,62,75,60,"map"],[87,65,75,63],[87,66,75,64],[87,76,75,64,"name"],[87,80,75,68],[88,10,75,68],[88,17,75,73],[89,12,76,8,"name"],[89,16,76,12],[89,18,76,8,"name"],[90,10,77,6],[90,11,77,7],[91,8,77,7],[91,9,77,8],[91,10,77,9],[91,12,77,11,"initialRoutes"],[91,25,77,24],[91,27,77,26,"configs"],[91,34,77,33],[91,35,77,34],[92,6,78,4],[93,6,79,4],[93,13,79,11,"undefined"],[93,22,79,20],[94,4,80,2],[95,4,81,2],[95,8,81,6,"result"],[95,14,81,12],[96,4,82,2],[96,8,82,6,"current"],[96,15,82,13],[98,4,84,2],[99,4,85,2],[100,4,86,2],[100,8,86,2,"_matchAgainstConfigs"],[100,28,86,2],[100,31,89,6,"matchAgainstConfigs"],[100,50,89,25],[100,51,89,26,"remaining"],[100,60,89,35],[100,62,89,37,"configs"],[100,69,89,44],[100,70,89,45],[101,6,87,4,"routes"],[101,12,87,10],[101,15,87,10,"_matchAgainstConfigs"],[101,35,87,10],[101,36,87,4,"routes"],[101,42,87,10],[102,6,88,4,"remainingPath"],[102,19,88,17],[102,22,88,17,"_matchAgainstConfigs"],[102,42,88,17],[102,43,88,4,"remainingPath"],[102,56,88,17],[103,4,90,2],[103,8,90,6,"routes"],[103,14,90,12],[103,19,90,17,"undefined"],[103,28,90,26],[103,30,90,28],[104,6,91,4],[105,6,92,4,"current"],[105,13,92,11],[105,16,92,14,"createNestedStateObject"],[105,39,92,37],[105,40,92,38,"path"],[105,44,92,42],[105,46,92,44,"routes"],[105,52,92,50],[105,54,92,52,"initialRoutes"],[105,67,92,65],[105,69,92,67,"configs"],[105,76,92,74],[105,77,92,75],[106,6,93,4,"remaining"],[106,15,93,13],[106,18,93,16,"remainingPath"],[106,31,93,29],[107,6,94,4,"result"],[107,12,94,10],[107,15,94,13,"current"],[107,22,94,20],[108,4,95,2],[109,4,96,2],[109,8,96,6,"current"],[109,15,96,13],[109,19,96,17],[109,23,96,21],[109,27,96,25,"result"],[109,33,96,31],[109,37,96,35],[109,41,96,39],[109,43,96,41],[110,6,97,4],[110,13,97,11,"undefined"],[110,22,97,20],[111,4,98,2],[112,4,99,2],[112,11,99,9,"result"],[112,17,99,15],[113,2,100,0],[115,2,102,0],[116,0,103,0],[117,0,104,0],[118,2,105,0],[118,6,105,6,"cachedConfigResources"],[118,27,105,27],[118,30,105,30],[118,34,105,34,"WeakMap"],[118,41,105,41],[118,42,105,42],[118,43,105,43],[119,2,106,0],[119,11,106,9,"getConfigResources"],[119,29,106,27,"getConfigResources"],[119,30,106,28,"options"],[119,37,106,35],[119,39,106,37],[120,4,107,2],[120,8,107,6],[120,9,107,7,"options"],[120,16,107,14],[120,18,107,16],[120,25,107,23,"prepareConfigResources"],[120,47,107,45],[120,48,107,46],[120,49,107,47],[121,4,108,2],[121,8,108,8,"cached"],[121,14,108,14],[121,17,108,17,"cachedConfigResources"],[121,38,108,38],[121,39,108,39,"get"],[121,42,108,42],[121,43,108,43,"options"],[121,50,108,50],[121,51,108,51],[122,4,109,2],[122,8,109,6,"cached"],[122,14,109,12],[122,16,109,14],[122,23,109,21,"cached"],[122,29,109,27],[123,4,110,2],[123,8,110,8,"resources"],[123,17,110,17],[123,20,110,20,"prepareConfigResources"],[123,42,110,42],[123,43,110,43,"options"],[123,50,110,50],[123,51,110,51],[124,4,111,2,"cachedConfigResources"],[124,25,111,23],[124,26,111,24,"set"],[124,29,111,27],[124,30,111,28,"options"],[124,37,111,35],[124,39,111,37,"resources"],[124,48,111,46],[124,49,111,47],[125,4,112,2],[125,11,112,9,"resources"],[125,20,112,18],[126,2,113,0],[127,2,114,0],[127,11,114,9,"prepareConfigResources"],[127,33,114,31,"prepareConfigResources"],[127,34,114,32,"options"],[127,41,114,39],[127,43,114,41],[128,4,115,2],[128,8,115,6,"options"],[128,15,115,13],[128,17,115,15],[129,6,116,4],[129,10,116,4,"validatePathConfig"],[129,48,116,22],[129,50,116,23,"options"],[129,57,116,30],[129,58,116,31],[130,4,117,2],[131,4,118,2],[131,8,118,8,"initialRoutes"],[131,21,118,21],[131,24,118,24,"getInitialRoutes"],[131,40,118,40],[131,41,118,41,"options"],[131,48,118,48],[131,49,118,49],[132,4,119,2],[132,8,119,8,"configs"],[132,15,119,15],[132,18,119,18,"getSortedNormalizedConfigs"],[132,44,119,44],[132,45,119,45,"initialRoutes"],[132,58,119,58],[132,60,119,60,"options"],[132,67,119,67],[132,87,119,60,"options"],[132,94,119,67],[132,95,119,69,"screens"],[132,102,119,76],[132,103,119,77],[133,4,120,2,"checkForDuplicatedConfigs"],[133,29,120,27],[133,30,120,28,"configs"],[133,37,120,35],[133,38,120,36],[134,4,121,2],[134,8,121,8,"configWithRegexes"],[134,25,121,25],[134,28,121,28,"getConfigsWithRegexes"],[134,49,121,49],[134,50,121,50,"configs"],[134,57,121,57],[134,58,121,58],[135,4,122,2],[135,11,122,9],[136,6,123,4,"initialRoutes"],[136,19,123,17],[136,21,123,4,"initialRoutes"],[136,34,123,17],[137,6,124,4,"configs"],[137,13,124,11],[137,15,124,4,"configs"],[137,22,124,11],[138,6,125,4,"configWithRegexes"],[138,23,125,21],[138,25,125,4,"configWithRegexes"],[139,4,126,2],[139,5,126,3],[140,2,127,0],[141,2,128,0],[141,11,128,9,"getInitialRoutes"],[141,27,128,25,"getInitialRoutes"],[141,28,128,26,"options"],[141,35,128,33],[141,37,128,35],[142,4,129,2],[142,8,129,8,"initialRoutes"],[142,21,129,21],[142,24,129,24],[142,26,129,26],[143,4,130,2],[143,8,130,6,"options"],[143,15,130,13],[143,27,130,6,"options"],[143,34,130,13],[143,35,130,15,"initialRouteName"],[143,51,130,31],[143,53,130,33],[144,6,131,4,"initialRoutes"],[144,19,131,17],[144,20,131,18,"push"],[144,24,131,22],[144,25,131,23],[145,8,132,6,"initialRouteName"],[145,24,132,22],[145,26,132,24,"options"],[145,33,132,31],[145,34,132,32,"initialRouteName"],[145,50,132,48],[146,8,133,6,"parentScreens"],[146,21,133,19],[146,23,133,21],[147,6,134,4],[147,7,134,5],[147,8,134,6],[148,4,135,2],[149,4,136,2],[149,11,136,9,"initialRoutes"],[149,24,136,22],[150,2,137,0],[151,2,138,0],[151,11,138,9,"getSortedNormalizedConfigs"],[151,37,138,35,"getSortedNormalizedConfigs"],[151,38,138,36,"initialRoutes"],[151,51,138,49],[151,53,138,65],[152,4,138,65],[152,8,138,65,"_ref"],[152,12,138,65],[153,4,138,65],[153,8,138,51,"screens"],[153,15,138,58],[153,18,138,58,"arguments"],[153,27,138,58],[153,28,138,58,"length"],[153,34,138,58],[153,42,138,58,"arguments"],[153,51,138,58],[153,59,138,58,"undefined"],[153,68,138,58],[153,71,138,58,"arguments"],[153,80,138,58],[153,86,138,61],[153,87,138,62],[153,88,138,63],[154,4,139,2],[155,4,140,2],[155,11,140,9],[155,12,140,9,"_ref"],[155,16,140,9],[155,21,140,11],[155,23,140,12,"concat"],[155,29,140,18],[155,30,140,18,"apply"],[155,35,140,18],[155,36,140,18,"_ref"],[155,40,140,18],[155,46,140,18,"_toConsumableArray2"],[155,65,140,18],[155,66,140,18,"default"],[155,73,140,18],[155,75,140,22,"Object"],[155,81,140,28],[155,82,140,29,"keys"],[155,86,140,33],[155,87,140,34,"screens"],[155,94,140,41],[155,95,140,42],[155,96,140,43,"map"],[155,99,140,46],[155,100,140,47],[155,110,140,47,"key"],[155,113,140,50],[156,6,140,50],[156,13,140,54,"createNormalizedConfigs"],[156,37,140,77],[156,38,140,78,"key"],[156,41,140,81],[156,43,140,83,"screens"],[156,50,140,90],[156,52,140,92,"initialRoutes"],[156,65,140,105],[156,67,140,107],[156,69,140,109],[156,71,140,111],[156,73,140,113],[156,75,140,115],[156,77,140,117],[156,78,140,118],[157,4,140,118],[157,6,140,119],[157,8,140,120],[157,9,140,121,"sort"],[157,13,140,125],[157,14,140,126],[157,24,140,127,"a"],[157,25,140,128],[157,27,140,130,"b"],[157,28,140,131],[157,30,140,136],[158,6,141,4],[159,6,142,4],[160,6,143,4],[161,6,144,4],[162,6,145,4],[163,6,146,4],[165,6,148,4],[166,6,149,4],[167,6,150,4],[167,10,150,8],[167,14,150,8,"isArrayEqual"],[167,40,150,20],[167,42,150,21,"a"],[167,43,150,22],[167,44,150,23,"segments"],[167,52,150,31],[167,54,150,33,"b"],[167,55,150,34],[167,56,150,35,"segments"],[167,64,150,43],[167,65,150,44],[167,67,150,46],[168,8,151,6],[168,15,151,13,"b"],[168,16,151,14],[168,17,151,15,"routeNames"],[168,27,151,25],[168,28,151,26,"join"],[168,32,151,30],[168,33,151,31],[168,36,151,34],[168,37,151,35],[168,38,151,36,"localeCompare"],[168,51,151,49],[168,52,151,50,"a"],[168,53,151,51],[168,54,151,52,"routeNames"],[168,64,151,62],[168,65,151,63,"join"],[168,69,151,67],[168,70,151,68],[168,73,151,71],[168,74,151,72],[168,75,151,73],[169,6,152,4],[171,6,154,4],[172,6,155,4],[173,6,156,4],[173,10,156,8],[173,14,156,8,"arrayStartsWith"],[173,46,156,23],[173,48,156,24,"a"],[173,49,156,25],[173,50,156,26,"segments"],[173,58,156,34],[173,60,156,36,"b"],[173,61,156,37],[173,62,156,38,"segments"],[173,70,156,46],[173,71,156,47],[173,73,156,49],[174,8,157,6],[174,15,157,13],[174,16,157,14],[174,17,157,15],[175,6,158,4],[176,6,159,4],[176,10,159,8],[176,14,159,8,"arrayStartsWith"],[176,46,159,23],[176,48,159,24,"b"],[176,49,159,25],[176,50,159,26,"segments"],[176,58,159,34],[176,60,159,36,"a"],[176,61,159,37],[176,62,159,38,"segments"],[176,70,159,46],[176,71,159,47],[176,73,159,49],[177,8,160,6],[177,15,160,13],[177,16,160,14],[178,6,161,4],[179,6,162,4],[179,11,162,9],[179,15,162,13,"i"],[179,16,162,14],[179,19,162,17],[179,20,162,18],[179,22,162,20,"i"],[179,23,162,21],[179,26,162,24,"Math"],[179,30,162,28],[179,31,162,29,"max"],[179,34,162,32],[179,35,162,33,"a"],[179,36,162,34],[179,37,162,35,"segments"],[179,45,162,43],[179,46,162,44,"length"],[179,52,162,50],[179,54,162,52,"b"],[179,55,162,53],[179,56,162,54,"segments"],[179,64,162,62],[179,65,162,63,"length"],[179,71,162,69],[179,72,162,70],[179,74,162,72,"i"],[179,75,162,73],[179,77,162,75],[179,79,162,77],[180,8,163,6],[181,8,164,6],[181,12,164,10,"a"],[181,13,164,11],[181,14,164,12,"segments"],[181,22,164,20],[181,23,164,21,"i"],[181,24,164,22],[181,25,164,23],[181,29,164,27],[181,33,164,31],[181,35,164,33],[182,10,165,8],[182,17,165,15],[182,18,165,16],[183,8,166,6],[185,8,168,6],[186,8,169,6],[186,12,169,10,"b"],[186,13,169,11],[186,14,169,12,"segments"],[186,22,169,20],[186,23,169,21,"i"],[186,24,169,22],[186,25,169,23],[186,29,169,27],[186,33,169,31],[186,35,169,33],[187,10,170,8],[187,17,170,15],[187,18,170,16],[187,19,170,17],[188,8,171,6],[189,8,172,6],[189,12,172,12,"aWildCard"],[189,21,172,21],[189,24,172,24,"a"],[189,25,172,25],[189,26,172,26,"segments"],[189,34,172,34],[189,35,172,35,"i"],[189,36,172,36],[189,37,172,37],[189,42,172,42],[189,45,172,45],[190,8,173,6],[190,12,173,12,"bWildCard"],[190,21,173,21],[190,24,173,24,"b"],[190,25,173,25],[190,26,173,26,"segments"],[190,34,173,34],[190,35,173,35,"i"],[190,36,173,36],[190,37,173,37],[190,42,173,42],[190,45,173,45],[191,8,174,6],[191,12,174,12,"aParam"],[191,18,174,18],[191,21,174,21,"a"],[191,22,174,22],[191,23,174,23,"segments"],[191,31,174,31],[191,32,174,32,"i"],[191,33,174,33],[191,34,174,34],[191,35,174,35,"startsWith"],[191,45,174,45],[191,46,174,46],[191,49,174,49],[191,50,174,50],[192,8,175,6],[192,12,175,12,"bParam"],[192,18,175,18],[192,21,175,21,"b"],[192,22,175,22],[192,23,175,23,"segments"],[192,31,175,31],[192,32,175,32,"i"],[192,33,175,33],[192,34,175,34],[192,35,175,35,"startsWith"],[192,45,175,45],[192,46,175,46],[192,49,175,49],[192,50,175,50],[193,8,176,6],[193,12,176,12,"aRegex"],[193,18,176,18],[193,21,176,21,"aParam"],[193,27,176,27],[193,31,176,31,"a"],[193,32,176,32],[193,33,176,33,"segments"],[193,41,176,41],[193,42,176,42,"i"],[193,43,176,43],[193,44,176,44],[193,45,176,45,"includes"],[193,53,176,53],[193,54,176,54],[193,57,176,57],[193,58,176,58],[194,8,177,6],[194,12,177,12,"bRegex"],[194,18,177,18],[194,21,177,21,"bParam"],[194,27,177,27],[194,31,177,31,"b"],[194,32,177,32],[194,33,177,33,"segments"],[194,41,177,41],[194,42,177,42,"i"],[194,43,177,43],[194,44,177,44],[194,45,177,45,"includes"],[194,53,177,53],[194,54,177,54],[194,57,177,57],[194,58,177,58],[196,8,179,6],[197,8,180,6],[197,12,180,10,"aWildCard"],[197,21,180,19],[197,25,180,23,"bWildCard"],[197,34,180,32],[197,38,180,36,"aRegex"],[197,44,180,42],[197,48,180,46,"bRegex"],[197,54,180,52],[197,56,180,54],[198,10,181,8],[199,8,182,6],[201,8,184,6],[202,8,185,6],[202,12,185,10,"aWildCard"],[202,21,185,19],[202,25,185,23],[202,26,185,24,"bWildCard"],[202,35,185,33],[202,37,185,35],[203,10,186,8],[203,17,186,15],[203,18,186,16],[204,8,187,6],[206,8,189,6],[207,8,190,6],[207,12,190,10,"bWildCard"],[207,21,190,19],[207,25,190,23],[207,26,190,24,"aWildCard"],[207,35,190,33],[207,37,190,35],[208,10,191,8],[208,17,191,15],[208,18,191,16],[208,19,191,17],[209,8,192,6],[211,8,194,6],[212,8,195,6],[212,12,195,10,"aParam"],[212,18,195,16],[212,22,195,20],[212,23,195,21,"bParam"],[212,29,195,27],[212,31,195,29],[213,10,196,8],[213,17,196,15],[213,18,196,16],[214,8,197,6],[216,8,199,6],[217,8,200,6],[217,12,200,10,"bParam"],[217,18,200,16],[217,22,200,20],[217,23,200,21,"aParam"],[217,29,200,27],[217,31,200,29],[218,10,201,8],[218,17,201,15],[218,18,201,16],[218,19,201,17],[219,8,202,6],[221,8,204,6],[222,8,205,6],[222,12,205,10,"aRegex"],[222,18,205,16],[222,22,205,20],[222,23,205,21,"bRegex"],[222,29,205,27],[222,31,205,29],[223,10,206,8],[223,17,206,15],[223,18,206,16],[223,19,206,17],[224,8,207,6],[226,8,209,6],[227,8,210,6],[227,12,210,10,"bRegex"],[227,18,210,16],[227,22,210,20],[227,23,210,21,"aRegex"],[227,29,210,27],[227,31,210,29],[228,10,211,8],[228,17,211,15],[228,18,211,16],[229,8,212,6],[230,6,213,4],[231,6,214,4],[231,13,214,11,"a"],[231,14,214,12],[231,15,214,13,"segments"],[231,23,214,21],[231,24,214,22,"length"],[231,30,214,28],[231,33,214,31,"b"],[231,34,214,32],[231,35,214,33,"segments"],[231,43,214,41],[231,44,214,42,"length"],[231,50,214,48],[232,4,215,2],[232,5,215,3],[232,6,215,4],[233,2,216,0],[234,2,217,0],[234,11,217,9,"checkForDuplicatedConfigs"],[234,36,217,34,"checkForDuplicatedConfigs"],[234,37,217,35,"configs"],[234,44,217,42],[234,46,217,44],[235,4,218,2],[236,4,219,2,"configs"],[236,11,219,9],[236,12,219,10,"reduce"],[236,18,219,16],[236,19,219,17],[236,29,219,18,"acc"],[236,32,219,21],[236,34,219,23,"config"],[236,40,219,29],[236,42,219,34],[237,6,220,4],[237,10,220,10,"pattern"],[237,17,220,17],[237,20,220,20,"config"],[237,26,220,26],[237,27,220,27,"segments"],[237,35,220,35],[237,36,220,36,"join"],[237,40,220,40],[237,41,220,41],[237,44,220,44],[237,45,220,45],[238,6,221,4],[238,10,221,8,"acc"],[238,13,221,11],[238,14,221,12,"pattern"],[238,21,221,19],[238,22,221,20],[238,24,221,22],[239,8,222,6],[239,12,222,12,"a"],[239,13,222,13],[239,16,222,16,"acc"],[239,19,222,19],[239,20,222,20,"pattern"],[239,27,222,27],[239,28,222,28],[239,29,222,29,"routeNames"],[239,39,222,39],[240,8,223,6],[240,12,223,12,"b"],[240,13,223,13],[240,16,223,16,"config"],[240,22,223,22],[240,23,223,23,"routeNames"],[240,33,223,33],[242,8,225,6],[243,8,226,6],[244,8,227,6],[244,12,227,12,"intersects"],[244,22,227,22],[244,25,227,25,"a"],[244,26,227,26],[244,27,227,27,"length"],[244,33,227,33],[244,36,227,36,"b"],[244,37,227,37],[244,38,227,38,"length"],[244,44,227,44],[244,47,227,47,"b"],[244,48,227,48],[244,49,227,49,"every"],[244,54,227,54],[244,55,227,55],[244,65,227,56,"it"],[244,67,227,58],[244,69,227,60,"i"],[244,70,227,61],[245,10,227,61],[245,17,227,66,"a"],[245,18,227,67],[245,19,227,68,"i"],[245,20,227,69],[245,21,227,70],[245,26,227,75,"it"],[245,28,227,77],[246,8,227,77],[246,10,227,78],[246,13,227,81,"a"],[246,14,227,82],[246,15,227,83,"every"],[246,20,227,88],[246,21,227,89],[246,31,227,90,"it"],[246,33,227,92],[246,35,227,94,"i"],[246,36,227,95],[247,10,227,95],[247,17,227,100,"b"],[247,18,227,101],[247,19,227,102,"i"],[247,20,227,103],[247,21,227,104],[247,26,227,109,"it"],[247,28,227,111],[248,8,227,111],[248,10,227,112],[249,8,228,6],[249,12,228,10],[249,13,228,11,"intersects"],[249,23,228,21],[249,25,228,23],[250,10,229,8],[250,16,229,14],[250,20,229,18,"Error"],[250,25,229,23],[250,26,229,24],[250,91,229,89,"pattern"],[250,98,229,96],[250,121,229,119,"a"],[250,122,229,120],[250,123,229,121,"join"],[250,127,229,125],[250,128,229,126],[250,133,229,131],[250,134,229,132],[250,144,229,142,"b"],[250,145,229,143],[250,146,229,144,"join"],[250,150,229,148],[250,151,229,149],[250,156,229,154],[250,157,229,155],[250,229,229,227],[250,230,229,228],[251,8,230,6],[252,6,231,4],[253,6,232,4],[253,13,232,11,"Object"],[253,19,232,17],[253,20,232,18,"assign"],[253,26,232,24],[253,27,232,25,"acc"],[253,30,232,28],[253,36,232,28,"_defineProperty2"],[253,52,232,28],[253,53,232,28,"default"],[253,60,232,28],[253,66,233,7,"pattern"],[253,73,233,14],[253,75,233,17,"config"],[253,81,233,23],[253,82,234,5],[253,83,234,6],[254,4,235,2],[254,5,235,3],[254,7,235,5],[254,8,235,6],[254,9,235,7],[254,10,235,8],[255,2,236,0],[256,2,237,0],[256,11,237,9,"getConfigsWithRegexes"],[256,32,237,30,"getConfigsWithRegexes"],[256,33,237,31,"configs"],[256,40,237,38],[256,42,237,40],[257,4,238,2],[257,11,238,9,"configs"],[257,18,238,16],[257,19,238,17,"map"],[257,22,238,20],[257,23,238,21],[257,33,238,21,"c"],[257,34,238,22],[258,6,238,22],[258,13,238,22,"Object"],[258,19,238,22],[258,20,238,22,"assign"],[258,26,238,22],[258,31,239,7,"c"],[258,32,239,8],[259,8,240,4],[260,8,241,4,"regex"],[260,13,241,9],[260,15,241,11,"c"],[260,16,241,12],[260,17,241,13,"regex"],[260,22,241,18],[260,25,241,21],[260,29,241,25,"RegExp"],[260,35,241,31],[260,36,241,32,"c"],[260,37,241,33],[260,38,241,34,"regex"],[260,43,241,39],[260,44,241,40,"source"],[260,50,241,46],[260,53,241,49],[260,56,241,52],[260,57,241,53],[260,60,241,56,"undefined"],[261,6,241,65],[262,4,241,65],[262,5,242,4],[262,6,242,5],[263,2,243,0],[264,2,244,0],[264,6,244,6,"matchAgainstConfigs"],[264,25,244,25],[264,28,244,28],[264,37,244,6,"matchAgainstConfigs"],[264,56,244,25,"matchAgainstConfigs"],[264,57,244,29,"remaining"],[264,66,244,38],[264,68,244,40,"configs"],[264,75,244,47],[264,77,244,52],[265,4,245,2],[265,8,245,6,"routes"],[265,14,245,12],[266,4,246,2],[266,8,246,6,"remainingPath"],[266,21,246,19],[266,24,246,22,"remaining"],[266,33,246,31],[268,4,248,2],[269,4,248,2],[269,8,248,2,"_loop"],[269,13,248,2],[269,25,248,2,"_loop"],[269,31,248,2,"config"],[269,37,248,2],[269,39,249,32],[270,8,250,4],[270,12,250,8],[270,13,250,9,"config"],[270,19,250,15],[270,20,250,16,"regex"],[270,25,250,21],[270,27,250,23],[271,10,250,23],[272,8,252,4],[273,8,253,4],[273,12,253,10,"match"],[273,17,253,15],[273,20,253,18,"remainingPath"],[273,33,253,31],[273,34,253,32,"match"],[273,39,253,37],[273,40,253,38,"config"],[273,46,253,44],[273,47,253,45,"regex"],[273,52,253,50],[273,53,253,51],[275,8,255,4],[276,8,256,4],[276,12,256,8,"match"],[276,17,256,13],[276,19,256,15],[277,10,257,6,"routes"],[277,16,257,12],[277,19,257,15,"config"],[277,25,257,21],[277,26,257,22,"routeNames"],[277,36,257,32],[277,37,257,33,"map"],[277,40,257,36],[277,41,257,37],[277,51,257,37,"routeName"],[277,60,257,46],[277,62,257,50],[278,12,258,8],[278,16,258,14,"routeConfig"],[278,27,258,25],[278,30,258,28,"configs"],[278,37,258,35],[278,38,258,36,"find"],[278,42,258,40],[278,43,258,41],[278,53,258,41,"c"],[278,54,258,42],[278,56,258,46],[279,14,259,10],[280,14,260,10],[280,21,260,17,"c"],[280,22,260,18],[280,23,260,19,"screen"],[280,29,260,25],[280,34,260,30,"routeName"],[280,43,260,39],[280,47,260,43],[280,51,260,43,"arrayStartsWith"],[280,83,260,58],[280,85,260,59,"config"],[280,91,260,65],[280,92,260,66,"segments"],[280,100,260,74],[280,102,260,76,"c"],[280,103,260,77],[280,104,260,78,"segments"],[280,112,260,86],[280,113,260,87],[281,12,261,8],[281,13,261,9],[281,14,261,10],[282,12,262,8],[282,16,262,14,"params"],[282,22,262,20],[282,25,262,23,"routeConfig"],[282,36,262,34],[282,40,262,38,"match"],[282,45,262,43],[282,46,262,44,"groups"],[282,52,262,50],[282,55,262,53,"Object"],[282,61,262,59],[282,62,262,60,"fromEntries"],[282,73,262,71],[282,74,262,72,"Object"],[282,80,262,78],[282,81,262,79,"entries"],[282,88,262,86],[282,89,262,87,"match"],[282,94,262,92],[282,95,262,93,"groups"],[282,101,262,99],[282,102,262,100],[282,103,262,101,"map"],[282,106,262,104],[282,107,262,105],[282,117,262,105,"_ref2"],[282,122,262,105],[282,124,262,123],[283,14,262,123],[283,18,262,123,"_ref3"],[283,23,262,123],[283,30,262,123,"_slicedToArray2"],[283,45,262,123],[283,46,262,123,"default"],[283,53,262,123],[283,55,262,123,"_ref2"],[283,60,262,123],[284,16,262,107,"key"],[284,19,262,110],[284,22,262,110,"_ref3"],[284,27,262,110],[285,16,262,112,"value"],[285,21,262,117],[285,24,262,117,"_ref3"],[285,29,262,117],[286,14,263,10],[286,18,263,16,"index"],[286,23,263,21],[286,26,263,24,"Number"],[286,32,263,30],[286,33,263,31,"key"],[286,36,263,34],[286,37,263,35,"replace"],[286,44,263,42],[286,45,263,43],[286,53,263,51],[286,55,263,53],[286,57,263,55],[286,58,263,56],[286,59,263,57],[287,14,264,10],[287,18,264,16,"param"],[287,23,264,21],[287,26,264,24,"routeConfig"],[287,37,264,35],[287,38,264,36,"params"],[287,44,264,42],[287,45,264,43,"find"],[287,49,264,47],[287,50,264,48],[287,60,264,48,"it"],[287,62,264,50],[288,16,264,50],[288,23,264,54,"it"],[288,25,264,56],[288,26,264,57,"index"],[288,31,264,62],[288,36,264,67,"index"],[288,41,264,72],[289,14,264,72],[289,16,264,73],[290,14,265,10],[290,18,265,14],[290,19,265,14,"param"],[290,24,265,19],[290,44,265,14,"param"],[290,49,265,19],[290,50,265,21,"screen"],[290,56,265,27],[290,62,265,32,"routeName"],[290,71,265,41],[290,75,265,45,"param"],[290,80,265,50],[290,92,265,45,"param"],[290,97,265,50],[290,98,265,52,"name"],[290,102,265,56],[290,104,265,58],[291,16,266,12],[291,23,266,19],[291,24,266,20,"param"],[291,29,266,25],[291,30,266,26,"name"],[291,34,266,30],[291,36,266,32,"value"],[291,41,266,37],[291,42,266,38],[292,14,267,10],[293,14,268,10],[293,21,268,17],[293,25,268,21],[294,12,269,8],[294,13,269,9],[294,14,269,10],[294,15,269,11,"filter"],[294,21,269,17],[294,22,269,18],[294,32,269,18,"it"],[294,34,269,20],[295,14,269,20],[295,21,269,24,"it"],[295,23,269,26],[295,27,269,30],[295,31,269,34],[296,12,269,34],[296,14,269,35],[296,15,269,36,"map"],[296,18,269,39],[296,19,269,40],[296,29,269,40,"_ref4"],[296,34,269,40],[296,36,269,58],[297,14,269,58],[297,18,269,58,"_routeConfig$parse"],[297,36,269,58],[298,14,269,58],[298,18,269,58,"_ref5"],[298,23,269,58],[298,30,269,58,"_slicedToArray2"],[298,45,269,58],[298,46,269,58,"default"],[298,53,269,58],[298,55,269,58,"_ref4"],[298,60,269,58],[299,16,269,42,"key"],[299,19,269,45],[299,22,269,45,"_ref5"],[299,27,269,45],[300,16,269,47,"value"],[300,21,269,52],[300,24,269,52,"_ref5"],[300,29,269,52],[301,14,270,10],[301,18,270,14,"value"],[301,23,270,19],[301,27,270,23],[301,31,270,27],[301,33,270,29],[302,16,271,12],[302,23,271,19],[302,24,271,20,"key"],[302,27,271,23],[302,29,271,25,"undefined"],[302,38,271,34],[302,39,271,35],[303,14,272,10],[304,14,273,10],[304,18,273,16,"decoded"],[304,25,273,23],[304,28,273,26,"decodeURIComponent"],[304,46,273,44],[304,47,273,45,"value"],[304,52,273,50],[304,53,273,51],[305,14,274,10],[305,18,274,16,"parsed"],[305,24,274,22],[305,27,274,25],[305,28,274,25,"_routeConfig$parse"],[305,46,274,25],[305,49,274,25,"routeConfig"],[305,60,274,36],[305,61,274,37,"parse"],[305,66,274,42],[305,79,274,25,"_routeConfig$parse"],[305,97,274,25],[305,98,274,45,"key"],[305,101,274,48],[305,102,274,49],[305,105,274,52,"routeConfig"],[305,116,274,63],[305,117,274,64,"parse"],[305,122,274,69],[305,123,274,70,"key"],[305,126,274,73],[305,127,274,74],[305,128,274,75,"decoded"],[305,135,274,82],[305,136,274,83],[305,139,274,86,"decoded"],[305,146,274,93],[306,14,275,10],[306,21,275,17],[306,22,275,18,"key"],[306,25,275,21],[306,27,275,23,"parsed"],[306,33,275,29],[306,34,275,30],[307,12,276,8],[307,13,276,9],[307,14,276,10],[307,15,276,11],[307,18,276,14,"undefined"],[307,27,276,23],[308,12,277,8],[308,16,277,12,"params"],[308,22,277,18],[308,26,277,22,"Object"],[308,32,277,28],[308,33,277,29,"keys"],[308,37,277,33],[308,38,277,34,"params"],[308,44,277,40],[308,45,277,41],[308,46,277,42,"length"],[308,52,277,48],[308,54,277,50],[309,14,278,10],[309,21,278,17],[310,16,279,12,"name"],[310,20,279,16],[310,22,279,18,"routeName"],[310,31,279,27],[311,16,280,12,"params"],[311,22,280,18],[311,24,280,12,"params"],[312,14,281,10],[312,15,281,11],[313,12,282,8],[314,12,283,8],[314,19,283,15],[315,14,284,10,"name"],[315,18,284,14],[315,20,284,16,"routeName"],[316,12,285,8],[316,13,285,9],[317,10,286,6],[317,11,286,7],[317,12,286,8],[318,10,287,6,"remainingPath"],[318,23,287,19],[318,26,287,22,"remainingPath"],[318,39,287,35],[318,40,287,36,"replace"],[318,47,287,43],[318,48,287,44,"match"],[318,53,287,49],[318,54,287,50],[318,55,287,51],[318,56,287,52],[318,58,287,54],[318,60,287,56],[318,61,287,57],[319,10,287,58],[320,8,289,4],[321,6,290,2],[321,7,290,3],[322,6,290,3,"_ret"],[322,10,290,3],[323,4,249,2],[323,9,249,7],[323,13,249,13,"config"],[323,19,249,19],[323,23,249,23,"configs"],[323,30,249,30],[324,6,249,30,"_ret"],[324,10,249,30],[324,13,249,30,"_loop"],[324,18,249,30],[324,19,249,30,"config"],[324,25,249,30],[325,6,249,30],[325,10,249,30,"_ret"],[325,14,249,30],[325,22,251,6],[326,6,251,15],[326,10,251,15,"_ret"],[326,14,251,15],[326,22,288,6],[327,4,288,12],[328,4,291,2],[328,11,291,9],[329,6,292,4,"routes"],[329,12,292,10],[329,14,292,4,"routes"],[329,20,292,10],[330,6,293,4,"remainingPath"],[330,19,293,17],[330,21,293,4,"remainingPath"],[331,4,294,2],[331,5,294,3],[332,2,295,0],[332,3,295,1],[333,2,296,0],[333,6,296,6,"createNormalizedConfigs"],[333,30,296,29],[333,33,296,32],[333,42,296,6,"createNormalizedConfigs"],[333,65,296,29,"createNormalizedConfigs"],[333,66,296,33,"screen"],[333,72,296,39],[333,74,296,41,"routeConfig"],[333,85,296,52],[333,87,296,54,"initials"],[333,95,296,62],[333,97,296,64,"paths"],[333,102,296,69],[333,104,296,71,"parentScreens"],[333,117,296,84],[333,119,296,86,"routeNames"],[333,129,296,96],[333,131,296,101],[334,4,297,2],[334,8,297,8,"configs"],[334,15,297,15],[334,18,297,18],[334,20,297,20],[335,4,298,2,"routeNames"],[335,14,298,12],[335,15,298,13,"push"],[335,19,298,17],[335,20,298,18,"screen"],[335,26,298,24],[335,27,298,25],[336,4,299,2,"parentScreens"],[336,17,299,15],[336,18,299,16,"push"],[336,22,299,20],[336,23,299,21,"screen"],[336,29,299,27],[336,30,299,28],[337,4,300,2],[337,8,300,8,"config"],[337,14,300,14],[337,17,300,17,"routeConfig"],[337,28,300,28],[337,29,300,29,"screen"],[337,35,300,35],[337,36,300,36],[338,4,301,2],[338,8,301,6],[338,15,301,13,"config"],[338,21,301,19],[338,26,301,24],[338,34,301,32],[338,36,301,34],[339,6,302,4,"paths"],[339,11,302,9],[339,12,302,10,"push"],[339,16,302,14],[339,17,302,15],[340,8,303,6,"screen"],[340,14,303,12],[340,16,303,6,"screen"],[340,22,303,12],[341,8,304,6,"path"],[341,12,304,10],[341,14,304,12,"config"],[342,6,305,4],[342,7,305,5],[342,8,305,6],[343,6,306,4,"configs"],[343,13,306,11],[343,14,306,12,"push"],[343,18,306,16],[343,19,306,17,"createConfigItem"],[343,35,306,33],[343,36,306,34,"screen"],[343,42,306,40],[343,48,306,40,"_toConsumableArray2"],[343,67,306,40],[343,68,306,40,"default"],[343,75,306,40],[343,77,306,46,"routeNames"],[343,87,306,56],[343,94,306,56,"_toConsumableArray2"],[343,113,306,56],[343,114,306,56,"default"],[343,121,306,56],[343,123,306,63,"paths"],[343,128,306,68],[343,129,306,69],[343,130,306,70],[343,131,306,71],[344,4,307,2],[344,5,307,3],[344,11,307,9],[344,15,307,13],[344,22,307,20,"config"],[344,28,307,26],[344,33,307,31],[344,41,307,39],[344,43,307,41],[345,6,307,41],[345,10,307,41,"_config$alias"],[345,23,307,41],[346,6,308,4],[347,6,309,4],[348,6,310,4],[349,6,311,4],[349,10,311,8],[349,17,311,15,"config"],[349,23,311,21],[349,24,311,22,"path"],[349,28,311,26],[349,33,311,31],[349,41,311,39],[349,43,311,41],[350,8,312,6],[350,12,312,10,"config"],[350,18,312,16],[350,19,312,17,"exact"],[350,24,312,22],[350,28,312,26,"config"],[350,34,312,32],[350,35,312,33,"path"],[350,39,312,37],[350,43,312,41],[350,47,312,45],[350,49,312,47],[351,10,313,8],[351,16,313,14],[351,20,313,18,"Error"],[351,25,313,23],[351,26,313,24],[351,37,313,35,"screen"],[351,43,313,41],[351,223,313,221],[351,224,313,222],[352,8,314,6],[354,8,316,6],[355,8,317,6],[356,8,318,6],[356,12,318,12,"aliasConfigs"],[356,24,318,24],[356,27,318,27],[356,29,318,29],[357,8,319,6],[357,12,319,10,"config"],[357,18,319,16],[357,19,319,17,"alias"],[357,24,319,22],[357,26,319,24],[358,10,320,8],[358,15,320,13],[358,19,320,19,"alias"],[358,24,320,24],[358,28,320,28,"config"],[358,34,320,34],[358,35,320,35,"alias"],[358,40,320,40],[358,42,320,42],[359,12,321,10],[359,16,321,14],[359,23,321,21,"alias"],[359,28,321,26],[359,33,321,31],[359,41,321,39],[359,43,321,41],[360,14,322,12,"aliasConfigs"],[360,26,322,24],[360,27,322,25,"push"],[360,31,322,29],[360,32,322,30,"createConfigItem"],[360,48,322,46],[360,49,322,47,"screen"],[360,55,322,53],[360,61,322,53,"_toConsumableArray2"],[360,80,322,53],[360,81,322,53,"default"],[360,88,322,53],[360,90,322,59,"routeNames"],[360,100,322,69],[360,106,322,69,"concat"],[360,112,322,69],[360,117,322,69,"_toConsumableArray2"],[360,136,322,69],[360,137,322,69,"default"],[360,144,322,69],[360,146,322,76,"paths"],[360,151,322,81],[360,155,322,83],[361,16,323,14,"screen"],[361,22,323,20],[361,24,323,14,"screen"],[361,30,323,20],[362,16,324,14,"path"],[362,20,324,18],[362,22,324,20,"alias"],[363,14,325,12],[363,15,325,13],[363,19,325,16,"config"],[363,25,325,22],[363,26,325,23,"parse"],[363,31,325,28],[363,32,325,29],[363,33,325,30],[364,12,326,10],[364,13,326,11],[364,19,326,17],[364,23,326,21],[364,30,326,28,"alias"],[364,35,326,33],[364,40,326,38],[364,48,326,46],[364,50,326,48],[365,14,327,12,"aliasConfigs"],[365,26,327,24],[365,27,327,25,"push"],[365,31,327,29],[365,32,327,30,"createConfigItem"],[365,48,327,46],[365,49,327,47,"screen"],[365,55,327,53],[365,61,327,53,"_toConsumableArray2"],[365,80,327,53],[365,81,327,53,"default"],[365,88,327,53],[365,90,327,59,"routeNames"],[365,100,327,69],[365,103,327,72,"alias"],[365,108,327,77],[365,109,327,78,"exact"],[365,114,327,83],[365,117,327,86],[365,118,327,87],[366,16,328,14,"screen"],[366,22,328,20],[366,24,328,14,"screen"],[366,30,328,20],[367,16,329,14,"path"],[367,20,329,18],[367,22,329,20,"alias"],[367,27,329,25],[367,28,329,26,"path"],[368,14,330,12],[368,15,330,13],[368,16,330,14],[368,22,330,14,"concat"],[368,28,330,14],[368,33,330,14,"_toConsumableArray2"],[368,52,330,14],[368,53,330,14,"default"],[368,60,330,14],[368,62,330,21,"paths"],[368,67,330,26],[368,71,330,28],[369,16,331,14,"screen"],[369,22,331,20],[369,24,331,14,"screen"],[369,30,331,20],[370,16,332,14,"path"],[370,20,332,18],[370,22,332,20,"alias"],[370,27,332,25],[370,28,332,26,"path"],[371,14,333,12],[371,15,333,13],[371,17,333,14],[371,19,333,16,"alias"],[371,24,333,21],[371,25,333,22,"parse"],[371,30,333,27],[371,31,333,28],[371,32,333,29],[372,12,334,10],[373,10,335,8],[374,8,336,6],[375,8,337,6],[375,12,337,10,"config"],[375,18,337,16],[375,19,337,17,"exact"],[375,24,337,22],[375,26,337,24],[376,10,338,8],[377,10,339,8],[378,10,340,8,"paths"],[378,15,340,13],[378,16,340,14,"length"],[378,22,340,20],[378,25,340,23],[378,26,340,24],[379,8,341,6],[380,8,342,6,"paths"],[380,13,342,11],[380,14,342,12,"push"],[380,18,342,16],[380,19,342,17],[381,10,343,8,"screen"],[381,16,343,14],[381,18,343,8,"screen"],[381,24,343,14],[382,10,344,8,"path"],[382,14,344,12],[382,16,344,14,"config"],[382,22,344,20],[382,23,344,21,"path"],[383,8,345,6],[383,9,345,7],[383,10,345,8],[384,8,346,6,"configs"],[384,15,346,13],[384,16,346,14,"push"],[384,20,346,18],[384,21,346,19,"createConfigItem"],[384,37,346,35],[384,38,346,36,"screen"],[384,44,346,42],[384,50,346,42,"_toConsumableArray2"],[384,69,346,42],[384,70,346,42,"default"],[384,77,346,42],[384,79,346,48,"routeNames"],[384,89,346,58],[384,96,346,58,"_toConsumableArray2"],[384,115,346,58],[384,116,346,58,"default"],[384,123,346,58],[384,125,346,65,"paths"],[384,130,346,70],[384,133,346,73,"config"],[384,139,346,79],[384,140,346,80,"parse"],[384,145,346,85],[384,146,346,86],[384,147,346,87],[385,8,347,6,"configs"],[385,15,347,13],[385,16,347,14,"push"],[385,20,347,18],[385,21,347,18,"apply"],[385,26,347,18],[385,27,347,6,"configs"],[385,34,347,13],[385,36,347,22,"aliasConfigs"],[385,48,347,34],[385,49,347,35],[386,6,348,4],[387,6,349,4],[387,10,349,8],[387,17,349,15,"config"],[387,23,349,21],[387,28,349,26],[387,36,349,34],[387,40,349,38],[387,47,349,45,"config"],[387,53,349,51],[387,54,349,52,"path"],[387,58,349,56],[387,63,349,61],[387,71,349,69],[387,76,349,69,"_config$alias"],[387,89,349,69],[387,92,349,73,"config"],[387,98,349,79],[387,99,349,80,"alias"],[387,104,349,85],[387,117,349,73,"_config$alias"],[387,130,349,73],[387,131,349,87,"length"],[387,137,349,93],[387,139,349,95],[388,8,350,6],[388,14,350,12],[388,18,350,16,"Error"],[388,23,350,21],[388,24,350,22],[388,35,350,33,"screen"],[388,41,350,39],[388,126,350,124],[388,127,350,125],[389,6,351,4],[390,6,352,4],[390,10,352,8,"config"],[390,16,352,14],[390,17,352,15,"screens"],[390,24,352,22],[390,26,352,24],[391,8,353,6],[392,8,354,6],[392,12,354,10,"config"],[392,18,354,16],[392,19,354,17,"initialRouteName"],[392,35,354,33],[392,37,354,35],[393,10,355,8,"initials"],[393,18,355,16],[393,19,355,17,"push"],[393,23,355,21],[393,24,355,22],[394,12,356,10,"initialRouteName"],[394,28,356,26],[394,30,356,28,"config"],[394,36,356,34],[394,37,356,35,"initialRouteName"],[394,53,356,51],[395,12,357,10,"parentScreens"],[395,25,357,23],[395,27,357,10,"parentScreens"],[396,10,358,8],[396,11,358,9],[396,12,358,10],[397,8,359,6],[398,8,360,6,"Object"],[398,14,360,12],[398,15,360,13,"keys"],[398,19,360,17],[398,20,360,18,"config"],[398,26,360,24],[398,27,360,25,"screens"],[398,34,360,32],[398,35,360,33],[398,36,360,34,"forEach"],[398,43,360,41],[398,44,360,42],[398,54,360,42,"nestedConfig"],[398,66,360,54],[398,68,360,58],[399,10,361,8],[399,14,361,14,"result"],[399,20,361,20],[399,23,361,23,"createNormalizedConfigs"],[399,47,361,46],[399,48,361,47,"nestedConfig"],[399,60,361,59],[399,62,361,61,"config"],[399,68,361,67],[399,69,361,68,"screens"],[399,76,361,75],[399,78,361,77,"initials"],[399,86,361,85],[399,92,361,85,"_toConsumableArray2"],[399,111,361,85],[399,112,361,85,"default"],[399,119,361,85],[399,121,361,91,"paths"],[399,126,361,96],[399,133,361,96,"_toConsumableArray2"],[399,152,361,96],[399,153,361,96,"default"],[399,160,361,96],[399,162,361,103,"parentScreens"],[399,175,361,116],[399,178,361,119,"routeNames"],[399,188,361,129],[399,189,361,130],[400,10,362,8,"configs"],[400,17,362,15],[400,18,362,16,"push"],[400,22,362,20],[400,23,362,20,"apply"],[400,28,362,20],[400,29,362,8,"configs"],[400,36,362,15],[400,42,362,15,"_toConsumableArray2"],[400,61,362,15],[400,62,362,15,"default"],[400,69,362,15],[400,71,362,24,"result"],[400,77,362,30],[400,79,362,31],[401,8,363,6],[401,9,363,7],[401,10,363,8],[402,6,364,4],[403,4,365,2],[404,4,366,2,"routeNames"],[404,14,366,12],[404,15,366,13,"pop"],[404,18,366,16],[404,19,366,17],[404,20,366,18],[405,4,367,2],[405,11,367,9,"configs"],[405,18,367,16],[406,2,368,0],[406,3,368,1],[407,2,369,0],[407,6,369,6,"createConfigItem"],[407,22,369,22],[407,25,369,25],[407,34,369,6,"createConfigItem"],[407,50,369,22,"createConfigItem"],[407,51,369,26,"screen"],[407,57,369,32],[407,59,369,34,"routeNames"],[407,69,369,44],[407,71,369,46,"paths"],[407,76,369,51],[407,78,369,53,"parse"],[407,83,369,58],[407,85,369,63],[408,4,370,2],[408,8,370,8,"parts"],[408,13,370,13],[408,16,370,16],[408,18,370,18],[410,4,372,2],[411,4,372,2],[411,8,372,2,"_loop2"],[411,14,372,2],[411,26,372,2,"_loop2"],[411,33,372,2,"_screen"],[411,40,372,2],[411,42,376,14],[412,6,377,4,"parts"],[412,11,377,9],[412,12,377,10,"push"],[412,16,377,14],[412,17,377,14,"apply"],[412,22,377,14],[412,23,377,4,"parts"],[412,28,377,9],[412,34,377,9,"_toConsumableArray2"],[412,53,377,9],[412,54,377,9,"default"],[412,61,377,9],[412,63,377,18],[412,67,377,18,"getPatternParts"],[412,99,377,33],[412,101,377,34,"path"],[412,105,377,38],[412,106,377,39],[412,107,377,40,"map"],[412,110,377,43],[412,111,377,44],[412,121,377,44,"part"],[412,125,377,48],[413,8,377,48],[413,15,377,48,"Object"],[413,21,377,48],[413,22,377,48,"assign"],[413,28,377,48],[413,33,378,9,"part"],[413,37,378,13],[414,10,379,6,"screen"],[414,16,379,12],[414,18,379,6,"screen"],[415,8,379,12],[416,6,379,12],[416,7,380,6],[416,8,380,7],[416,10,380,8],[417,4,381,2],[417,5,381,3],[418,4,373,2],[418,13,373,2,"_ref6"],[418,18,373,2],[418,22,376,7,"paths"],[418,27,376,12],[419,6,376,12],[419,10,374,4,"screen"],[419,17,374,10],[419,20,374,10,"_ref6"],[419,25,374,10],[419,26,374,4,"screen"],[419,32,374,10],[420,6,374,10],[420,10,375,4,"path"],[420,14,375,8],[420,17,375,8,"_ref6"],[420,22,375,8],[420,23,375,4,"path"],[420,27,375,8],[421,6,375,8,"_loop2"],[421,12,375,8],[421,13,375,8,"_screen"],[421,20,375,8],[422,4,375,8],[423,4,382,2],[423,8,382,8,"regex"],[423,13,382,13],[423,16,382,16,"parts"],[423,21,382,21],[423,22,382,22,"length"],[423,28,382,28],[423,31,382,31],[423,35,382,35,"RegExp"],[423,41,382,41],[423,42,382,42],[423,47,382,47,"parts"],[423,52,382,52],[423,53,382,53,"map"],[423,56,382,56],[423,57,382,57],[423,67,382,58,"it"],[423,69,382,60],[423,71,382,62,"i"],[423,72,382,63],[423,74,382,68],[424,6,383,4],[424,10,383,8,"it"],[424,12,383,10],[424,13,383,11,"param"],[424,18,383,16],[424,20,383,18],[425,8,384,6],[425,12,384,12,"reg"],[425,15,384,15],[425,18,384,18,"it"],[425,20,384,20],[425,21,384,21,"regex"],[425,26,384,26],[425,30,384,30],[425,37,384,37],[426,8,385,6],[426,15,385,13],[426,29,385,27,"i"],[426,30,385,28],[426,34,385,32,"reg"],[426,37,385,35],[426,45,385,43,"it"],[426,47,385,45],[426,48,385,46,"optional"],[426,56,385,54],[426,59,385,57],[426,62,385,60],[426,65,385,63],[426,67,385,65],[426,70,385,68],[427,6,386,4],[428,6,387,4],[428,13,387,11],[428,16,387,14,"it"],[428,18,387,16],[428,19,387,17,"segment"],[428,26,387,24],[428,31,387,29],[428,34,387,32],[428,37,387,35],[428,41,387,39],[428,44,387,42],[428,48,387,42,"escape"],[428,75,387,48],[428,77,387,49,"it"],[428,79,387,51],[428,80,387,52,"segment"],[428,87,387,59],[428,88,387,60],[428,93,387,65],[429,4,388,2],[429,5,388,3],[429,6,388,4],[429,7,388,5,"join"],[429,11,388,9],[429,12,388,10],[429,14,388,12],[429,15,388,13],[429,19,388,17],[429,20,388,18],[429,23,388,21,"undefined"],[429,32,388,30],[430,4,389,2],[430,8,389,8,"segments"],[430,16,389,16],[430,19,389,19,"parts"],[430,24,389,24],[430,25,389,25,"map"],[430,28,389,28],[430,29,389,29],[430,39,389,29,"it"],[430,41,389,31],[431,6,389,31],[431,13,389,35,"it"],[431,15,389,37],[431,16,389,38,"segment"],[431,23,389,45],[432,4,389,45],[432,6,389,46],[433,4,390,2],[433,8,390,8,"params"],[433,14,390,14],[433,17,390,17,"parts"],[433,22,390,22],[433,23,390,23,"map"],[433,26,390,26],[433,27,390,27],[433,37,390,28,"it"],[433,39,390,30],[433,41,390,32,"i"],[433,42,390,33],[434,6,390,33],[434,13,390,38,"it"],[434,15,390,40],[434,16,390,41,"param"],[434,21,390,46],[434,24,390,49],[435,8,391,4,"index"],[435,13,391,9],[435,15,391,11,"i"],[435,16,391,12],[436,8,392,4,"screen"],[436,14,392,10],[436,16,392,12,"it"],[436,18,392,14],[436,19,392,15,"screen"],[436,25,392,21],[437,8,393,4,"name"],[437,12,393,8],[437,14,393,10,"it"],[437,16,393,12],[437,17,393,13,"param"],[438,6,394,2],[438,7,394,3],[438,10,394,6],[438,14,394,10],[439,4,394,10],[439,6,394,11],[439,7,394,12,"filter"],[439,13,394,18],[439,14,394,19],[439,24,394,19,"it"],[439,26,394,21],[440,6,394,21],[440,13,394,25,"it"],[440,15,394,27],[440,19,394,31],[440,23,394,35],[441,4,394,35],[441,6,394,36],[442,4,395,2],[442,11,395,9],[443,6,396,4,"screen"],[443,12,396,10],[443,14,396,4,"screen"],[443,20,396,10],[444,6,397,4,"regex"],[444,11,397,9],[444,13,397,4,"regex"],[444,18,397,9],[445,6,398,4,"segments"],[445,14,398,12],[445,16,398,4,"segments"],[445,24,398,12],[446,6,399,4,"params"],[446,12,399,10],[446,14,399,4,"params"],[446,20,399,10],[447,6,400,4,"routeNames"],[447,16,400,14],[447,18,400,4,"routeNames"],[447,28,400,14],[448,6,401,4,"parse"],[448,11,401,9],[448,13,401,4,"parse"],[449,4,402,2],[449,5,402,3],[450,2,403,0],[450,3,403,1],[451,2,404,0],[451,6,404,6,"findParseConfigForRoute"],[451,29,404,29],[451,32,404,32],[451,41,404,6,"findParseConfigForRoute"],[451,64,404,29,"findParseConfigForRoute"],[451,65,404,33,"routeName"],[451,74,404,42],[451,76,404,44,"flatConfig"],[451,86,404,54],[451,88,404,59],[452,4,405,2],[452,9,405,7],[452,13,405,13,"config"],[452,19,405,19],[452,23,405,23,"flatConfig"],[452,33,405,33],[452,35,405,35],[453,6,406,4],[453,10,406,8,"routeName"],[453,19,406,17],[453,24,406,22,"config"],[453,30,406,28],[453,31,406,29,"routeNames"],[453,41,406,39],[453,42,406,40,"config"],[453,48,406,46],[453,49,406,47,"routeNames"],[453,59,406,57],[453,60,406,58,"length"],[453,66,406,64],[453,69,406,67],[453,70,406,68],[453,71,406,69],[453,73,406,71],[454,8,407,6],[454,15,407,13,"config"],[454,21,407,19],[454,22,407,20,"parse"],[454,27,407,25],[455,6,408,4],[456,4,409,2],[457,4,410,2],[457,11,410,9,"undefined"],[457,20,410,18],[458,2,411,0],[458,3,411,1],[460,2,413,0],[461,2,414,0],[461,6,414,6,"findInitialRoute"],[461,22,414,22],[461,25,414,25],[461,34,414,6,"findInitialRoute"],[461,50,414,22,"findInitialRoute"],[461,51,414,26,"routeName"],[461,60,414,35],[461,62,414,37,"parentScreens"],[461,75,414,50],[461,77,414,52,"initialRoutes"],[461,90,414,65],[461,92,414,70],[462,4,415,2],[462,9,415,7],[462,13,415,13,"config"],[462,19,415,19],[462,23,415,23,"initialRoutes"],[462,36,415,36],[462,38,415,38],[463,6,416,4],[463,10,416,8,"parentScreens"],[463,23,416,21],[463,24,416,22,"length"],[463,30,416,28],[463,35,416,33,"config"],[463,41,416,39],[463,42,416,40,"parentScreens"],[463,55,416,53],[463,56,416,54,"length"],[463,62,416,60],[463,64,416,62],[464,8,417,6],[464,12,417,10,"sameParents"],[464,23,417,21],[464,26,417,24],[464,30,417,28],[465,8,418,6],[465,13,418,11],[465,17,418,15,"i"],[465,18,418,16],[465,21,418,19],[465,22,418,20],[465,24,418,22,"i"],[465,25,418,23],[465,28,418,26,"parentScreens"],[465,41,418,39],[465,42,418,40,"length"],[465,48,418,46],[465,50,418,48,"i"],[465,51,418,49],[465,53,418,51],[465,55,418,53],[466,10,419,8],[466,14,419,12,"parentScreens"],[466,27,419,25],[466,28,419,26,"i"],[466,29,419,27],[466,30,419,28],[466,31,419,29,"localeCompare"],[466,44,419,42],[466,45,419,43,"config"],[466,51,419,49],[466,52,419,50,"parentScreens"],[466,65,419,63],[466,66,419,64,"i"],[466,67,419,65],[466,68,419,66],[466,69,419,67],[466,74,419,72],[466,75,419,73],[466,77,419,75],[467,12,420,10,"sameParents"],[467,23,420,21],[467,26,420,24],[467,31,420,29],[468,12,421,10],[469,10,422,8],[470,8,423,6],[471,8,424,6],[471,12,424,10,"sameParents"],[471,23,424,21],[471,25,424,23],[472,10,425,8],[472,17,425,15,"routeName"],[472,26,425,24],[472,31,425,29,"config"],[472,37,425,35],[472,38,425,36,"initialRouteName"],[472,54,425,52],[472,57,425,55,"config"],[472,63,425,61],[472,64,425,62,"initialRouteName"],[472,80,425,78],[472,83,425,81,"undefined"],[472,92,425,90],[473,8,426,6],[474,6,427,4],[475,4,428,2],[476,4,429,2],[476,11,429,9,"undefined"],[476,20,429,18],[477,2,430,0],[477,3,430,1],[479,2,432,0],[480,2,433,0],[481,2,434,0],[481,6,434,6,"createStateObject"],[481,23,434,23],[481,26,434,26],[481,35,434,6,"createStateObject"],[481,52,434,23,"createStateObject"],[481,53,434,27,"initialRoute"],[481,65,434,39],[481,67,434,41,"route"],[481,72,434,46],[481,74,434,48,"isEmpty"],[481,81,434,55],[481,83,434,60],[482,4,435,2],[482,8,435,6,"isEmpty"],[482,15,435,13],[482,17,435,15],[483,6,436,4],[483,10,436,8,"initialRoute"],[483,22,436,20],[483,24,436,22],[484,8,437,6],[484,15,437,13],[485,10,438,8,"index"],[485,15,438,13],[485,17,438,15],[485,18,438,16],[486,10,439,8,"routes"],[486,16,439,14],[486,18,439,16],[486,19,439,17],[487,12,440,10,"name"],[487,16,440,14],[487,18,440,16,"initialRoute"],[488,10,441,8],[488,11,441,9],[488,13,441,11,"route"],[488,18,441,16],[489,8,442,6],[489,9,442,7],[490,6,443,4],[490,7,443,5],[490,13,443,11],[491,8,444,6],[491,15,444,13],[492,10,445,8,"routes"],[492,16,445,14],[492,18,445,16],[492,19,445,17,"route"],[492,24,445,22],[493,8,446,6],[493,9,446,7],[494,6,447,4],[495,4,448,2],[495,5,448,3],[495,11,448,9],[496,6,449,4],[496,10,449,8,"initialRoute"],[496,22,449,20],[496,24,449,22],[497,8,450,6],[497,15,450,13],[498,10,451,8,"index"],[498,15,451,13],[498,17,451,15],[498,18,451,16],[499,10,452,8,"routes"],[499,16,452,14],[499,18,452,16],[499,19,452,17],[500,12,453,10,"name"],[500,16,453,14],[500,18,453,16,"initialRoute"],[501,10,454,8],[501,11,454,9],[501,13,454,9,"Object"],[501,19,454,9],[501,20,454,9,"assign"],[501,26,454,9],[501,31,455,13,"route"],[501,36,455,18],[502,12,456,10,"state"],[502,17,456,15],[502,19,456,17],[503,14,457,12,"routes"],[503,20,457,18],[503,22,457,20],[504,12,458,10],[505,10,458,11],[506,8,460,6],[506,9,460,7],[507,6,461,4],[507,7,461,5],[507,13,461,11],[508,8,462,6],[508,15,462,13],[509,10,463,8,"routes"],[509,16,463,14],[509,18,463,16],[509,19,463,16,"Object"],[509,25,463,16],[509,26,463,16,"assign"],[509,32,463,16],[509,37,464,13,"route"],[509,42,464,18],[510,12,465,10,"state"],[510,17,465,15],[510,19,465,17],[511,14,466,12,"routes"],[511,20,466,18],[511,22,466,20],[512,12,467,10],[513,10,467,11],[514,8,469,6],[514,9,469,7],[515,6,470,4],[516,4,471,2],[517,2,472,0],[517,3,472,1],[518,2,473,0],[518,6,473,6,"createNestedStateObject"],[518,29,473,29],[518,32,473,32],[518,41,473,6,"createNestedStateObject"],[518,64,473,29,"createNestedStateObject"],[518,65,473,33,"path"],[518,69,473,37],[518,71,473,39,"routes"],[518,77,473,45],[518,79,473,47,"initialRoutes"],[518,92,473,60],[518,94,473,62,"flatConfig"],[518,104,473,72],[518,106,473,77],[519,4,474,2],[519,8,474,6,"route"],[519,13,474,11],[519,16,474,14,"routes"],[519,22,474,20],[519,23,474,21,"shift"],[519,28,474,26],[519,29,474,27],[519,30,474,28],[520,4,475,2],[520,8,475,8,"parentScreens"],[520,21,475,21],[520,24,475,24],[520,26,475,26],[521,4,476,2],[521,8,476,6,"initialRoute"],[521,20,476,18],[521,23,476,21,"findInitialRoute"],[521,39,476,37],[521,40,476,38,"route"],[521,45,476,43],[521,46,476,44,"name"],[521,50,476,48],[521,52,476,50,"parentScreens"],[521,65,476,63],[521,67,476,65,"initialRoutes"],[521,80,476,78],[521,81,476,79],[522,4,477,2,"parentScreens"],[522,17,477,15],[522,18,477,16,"push"],[522,22,477,20],[522,23,477,21,"route"],[522,28,477,26],[522,29,477,27,"name"],[522,33,477,31],[522,34,477,32],[523,4,478,2],[523,8,478,8,"state"],[523,13,478,13],[523,16,478,16,"createStateObject"],[523,33,478,33],[523,34,478,34,"initialRoute"],[523,46,478,46],[523,48,478,48,"route"],[523,53,478,53],[523,55,478,55,"routes"],[523,61,478,61],[523,62,478,62,"length"],[523,68,478,68],[523,73,478,73],[523,74,478,74],[523,75,478,75],[524,4,479,2],[524,8,479,6,"routes"],[524,14,479,12],[524,15,479,13,"length"],[524,21,479,19],[524,24,479,22],[524,25,479,23],[524,27,479,25],[525,6,480,4],[525,10,480,8,"nestedState"],[525,21,480,19],[525,24,480,22,"state"],[525,29,480,27],[526,6,481,4],[526,13,481,11,"route"],[526,18,481,16],[526,21,481,19,"routes"],[526,27,481,25],[526,28,481,26,"shift"],[526,33,481,31],[526,34,481,32],[526,35,481,33],[526,37,481,35],[527,8,482,6,"initialRoute"],[527,20,482,18],[527,23,482,21,"findInitialRoute"],[527,39,482,37],[527,40,482,38,"route"],[527,45,482,43],[527,46,482,44,"name"],[527,50,482,48],[527,52,482,50,"parentScreens"],[527,65,482,63],[527,67,482,65,"initialRoutes"],[527,80,482,78],[527,81,482,79],[528,8,483,6],[528,12,483,12,"nestedStateIndex"],[528,28,483,28],[528,31,483,31,"nestedState"],[528,42,483,42],[528,43,483,43,"index"],[528,48,483,48],[528,52,483,52,"nestedState"],[528,63,483,63],[528,64,483,64,"routes"],[528,70,483,70],[528,71,483,71,"length"],[528,77,483,77],[528,80,483,80],[528,81,483,81],[529,8,484,6,"nestedState"],[529,19,484,17],[529,20,484,18,"routes"],[529,26,484,24],[529,27,484,25,"nestedStateIndex"],[529,43,484,41],[529,44,484,42],[529,45,484,43,"state"],[529,50,484,48],[529,53,484,51,"createStateObject"],[529,70,484,68],[529,71,484,69,"initialRoute"],[529,83,484,81],[529,85,484,83,"route"],[529,90,484,88],[529,92,484,90,"routes"],[529,98,484,96],[529,99,484,97,"length"],[529,105,484,103],[529,110,484,108],[529,111,484,109],[529,112,484,110],[530,8,485,6],[530,12,485,10,"routes"],[530,18,485,16],[530,19,485,17,"length"],[530,25,485,23],[530,28,485,26],[530,29,485,27],[530,31,485,29],[531,10,486,8,"nestedState"],[531,21,486,19],[531,24,486,22,"nestedState"],[531,35,486,33],[531,36,486,34,"routes"],[531,42,486,40],[531,43,486,41,"nestedStateIndex"],[531,59,486,57],[531,60,486,58],[531,61,486,59,"state"],[531,66,486,64],[532,8,487,6],[533,8,488,6,"parentScreens"],[533,21,488,19],[533,22,488,20,"push"],[533,26,488,24],[533,27,488,25,"route"],[533,32,488,30],[533,33,488,31,"name"],[533,37,488,35],[533,38,488,36],[534,6,489,4],[535,4,490,2],[536,4,491,2,"route"],[536,9,491,7],[536,12,491,10],[536,16,491,10,"findFocusedRoute"],[536,50,491,26],[536,52,491,27,"state"],[536,57,491,32],[536,58,491,33],[537,4,492,2,"route"],[537,9,492,7],[537,10,492,8,"path"],[537,14,492,12],[537,17,492,15,"path"],[537,21,492,19],[537,22,492,20,"replace"],[537,29,492,27],[537,30,492,28],[537,35,492,33],[537,37,492,35],[537,39,492,37],[537,40,492,38],[538,4,493,2],[538,8,493,8,"params"],[538,14,493,14],[538,17,493,17,"parseQueryParams"],[538,33,493,33],[538,34,493,34,"path"],[538,38,493,38],[538,40,493,40,"flatConfig"],[538,50,493,50],[538,53,493,53,"findParseConfigForRoute"],[538,76,493,76],[538,77,493,77,"route"],[538,82,493,82],[538,83,493,83,"name"],[538,87,493,87],[538,89,493,89,"flatConfig"],[538,99,493,99],[538,100,493,100],[538,103,493,103,"undefined"],[538,112,493,112],[538,113,493,113],[539,4,494,2],[539,8,494,6,"params"],[539,14,494,12],[539,16,494,14],[540,6,495,4,"route"],[540,11,495,9],[540,12,495,10,"params"],[540,18,495,16],[540,21,495,16,"Object"],[540,27,495,16],[540,28,495,16,"assign"],[540,34,495,16],[540,39,496,9,"route"],[540,44,496,14],[540,45,496,15,"params"],[540,51,496,21],[540,53,497,9,"params"],[540,59,497,15],[540,60,498,5],[541,4,499,2],[542,4,500,2],[542,11,500,9,"state"],[542,16,500,14],[543,2,501,0],[543,3,501,1],[544,2,502,0],[544,6,502,6,"parseQueryParams"],[544,22,502,22],[544,25,502,25],[544,34,502,6,"parseQueryParams"],[544,50,502,22,"parseQueryParams"],[544,51,502,26,"path"],[544,55,502,30],[544,57,502,32,"parseConfig"],[544,68,502,43],[544,70,502,48],[545,4,503,2],[545,8,503,8,"query"],[545,13,503,13],[545,16,503,16,"path"],[545,20,503,20],[545,21,503,21,"split"],[545,26,503,26],[545,27,503,27],[545,30,503,30],[545,31,503,31],[545,32,503,32],[545,33,503,33],[545,34,503,34],[546,4,504,2],[546,8,504,8,"params"],[546,14,504,14],[546,17,504,17,"queryString"],[546,28,504,28],[546,29,504,29,"parse"],[546,34,504,34],[546,35,504,35,"query"],[546,40,504,40],[546,41,504,41],[547,4,505,2],[547,8,505,6,"parseConfig"],[547,19,505,17],[547,21,505,19],[548,6,506,4,"Object"],[548,12,506,10],[548,13,506,11,"keys"],[548,17,506,15],[548,18,506,16,"params"],[548,24,506,22],[548,25,506,23],[548,26,506,24,"forEach"],[548,33,506,31],[548,34,506,32],[548,44,506,32,"name"],[548,48,506,36],[548,50,506,40],[549,8,507,6],[549,12,507,10,"Object"],[549,18,507,16],[549,19,507,17,"hasOwnProperty"],[549,33,507,31],[549,34,507,32,"call"],[549,38,507,36],[549,39,507,37,"parseConfig"],[549,50,507,48],[549,52,507,50,"name"],[549,56,507,54],[549,57,507,55],[549,61,507,59],[549,68,507,66,"params"],[549,74,507,72],[549,75,507,73,"name"],[549,79,507,77],[549,80,507,78],[549,85,507,83],[549,93,507,91],[549,95,507,93],[550,10,508,8,"params"],[550,16,508,14],[550,17,508,15,"name"],[550,21,508,19],[550,22,508,20],[550,25,508,23,"parseConfig"],[550,36,508,34],[550,37,508,35,"name"],[550,41,508,39],[550,42,508,40],[550,43,508,41,"params"],[550,49,508,47],[550,50,508,48,"name"],[550,54,508,52],[550,55,508,53],[550,56,508,54],[551,8,509,6],[552,6,510,4],[552,7,510,5],[552,8,510,6],[553,4,511,2],[554,4,512,2],[554,11,512,9,"Object"],[554,17,512,15],[554,18,512,16,"keys"],[554,22,512,20],[554,23,512,21,"params"],[554,29,512,27],[554,30,512,28],[554,31,512,29,"length"],[554,37,512,35],[554,40,512,38,"params"],[554,46,512,44],[554,49,512,47,"undefined"],[554,58,512,56],[555,2,513,0],[555,3,513,1],[556,0,513,2],[556,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"}},"type":"js/module"}]}