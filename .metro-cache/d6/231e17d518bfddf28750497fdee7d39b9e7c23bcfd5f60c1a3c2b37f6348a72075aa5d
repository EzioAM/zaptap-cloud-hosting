{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":175},"end":{"line":6,"column":69,"index":244}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":246},"end":{"line":7,"column":40,"index":286}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"../supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":288},"end":{"line":8,"column":46,"index":334}}],"key":"q3G/dBcB/lyqe2ZqsudXc9dkd4E=","exportNames":["*"]}},{"name":"../../config/analytics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":336},"end":{"line":9,"column":58,"index":394}}],"key":"4gjS6BEK9IQgu06QXmlywlo09Ys=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":396},"end":{"line":10,"column":54,"index":450}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.trackUserAction = exports.setCurrentScreen = exports.reportError = exports.addContext = exports.addBreadcrumb = exports.CrashReporter = undefined;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3]));\n  var _asyncStorage = _interopRequireDefault(require(_dependencyMap[4]));\n  var _reactNative = require(_dependencyMap[5]);\n  var _client = require(_dependencyMap[6]);\n  var _analytics = require(_dependencyMap[7]);\n  var _EventLogger = require(_dependencyMap[8]);\n  /**\r\n   * CrashReporter - Comprehensive error monitoring and crash reporting service\r\n   * Captures JavaScript errors, native crashes, and provides detailed error context\r\n   */\n  var CrashReporterService = /*#__PURE__*/function () {\n    function CrashReporterService() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, CrashReporterService);\n      this.breadcrumbs = [];\n      this.userActions = [];\n      this.isInitialized = false;\n      this.reportQueue = [];\n      this.isFlushingReports = false;\n      this.databaseAvailable = false;\n      this.databaseUnavailableLogged = false;\n      this.config = {\n        enabled: _analytics.ANALYTICS_CONFIG.errors.enabled,\n        environment: 'production',\n        maxBreadcrumbs: _analytics.ANALYTICS_CONFIG.errors.maxBreadcrumbs,\n        maxUserActions: 50,\n        captureConsoleErrors: _analytics.ANALYTICS_CONFIG.errors.captureConsoleErrors,\n        captureUnhandledPromiseRejections: _analytics.ANALYTICS_CONFIG.errors.captureUnhandledPromiseRejections,\n        sampleRate: _analytics.ANALYTICS_CONFIG.errors.sampleRate,\n        ...config\n      };\n      this.sessionId = this.generateSessionId();\n    }\n\n    /**\r\n     * Initialize the crash reporter\r\n     */\n    return (0, _createClass2.default)(CrashReporterService, [{\n      key: \"initialize\",\n      value: (function () {\n        var _initialize = (0, _asyncToGenerator2.default)(function* () {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          try {\n            this.config = {\n              ...this.config,\n              ...options\n            };\n            if (!this.config.enabled) {\n              _EventLogger.EventLogger.info('CrashReporter', 'Crash reporting disabled');\n              this.isInitialized = true; // Mark as initialized even when disabled\n              return;\n            }\n\n            // Initialize synchronous setup first\n            yield Promise.resolve().then(() => {\n              // Setup global error handlers\n              this.setupGlobalErrorHandlers();\n\n              // Setup console interception\n              this.setupConsoleInterception();\n\n              // Setup periodic flush\n              this.setupPeriodicFlush();\n            });\n\n            // Check database availability in background (only log once)\n            this.checkDatabaseAvailability().catch(error => {\n              if (!this.databaseUnavailableLogged) {\n                _EventLogger.EventLogger.warn('CrashReporter', 'Database not available - reports will be stored locally only', error);\n                this.databaseUnavailableLogged = true;\n              }\n              this.databaseAvailable = false;\n            });\n\n            // Load offline reports in background\n            this.loadOfflineReports().catch(error => {\n              _EventLogger.EventLogger.error('CrashReporter', 'Failed to load offline reports', error);\n            });\n\n            // Add initial breadcrumb\n            this.addBreadcrumb({\n              category: 'lifecycle',\n              message: 'Crash reporter initialized',\n              level: 'info',\n              data: {\n                config: {\n                  enabled: this.config.enabled,\n                  environment: this.config.environment\n                }\n              }\n            });\n            this.isInitialized = true;\n            _EventLogger.EventLogger.info('CrashReporter', 'Crash reporter initialized successfully');\n          } catch (error) {\n            this.isInitialized = true; // Mark as initialized to prevent blocking\n            _EventLogger.EventLogger.error('CrashReporter', 'Failed to initialize crash reporter', error);\n          }\n        });\n        function initialize() {\n          return _initialize.apply(this, arguments);\n        }\n        return initialize;\n      }()\n      /**\r\n       * Check if the database is available and accessible\r\n       */\n      )\n    }, {\n      key: \"checkDatabaseAvailability\",\n      value: (function () {\n        var _checkDatabaseAvailability = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            if (!_client.supabase) {\n              throw new Error('Supabase client not initialized');\n            }\n\n            // Test table access with INSERT capability (more comprehensive than SELECT)\n            // Create a minimal test record to verify the table exists and we can write to it\n            var testReportId = `test-availability-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\n            var _yield$supabase$from$ = yield _client.supabase.from('error_reports').insert({\n                id: testReportId,\n                error_name: 'DatabaseAvailabilityTest',\n                error_message: 'Test error for database availability check',\n                error_type: 'custom',\n                error_fatal: false,\n                severity: 'low',\n                fingerprint: 'test-availability-check',\n                context: {\n                  test: true\n                },\n                tags: {\n                  test: 'availability_check'\n                }\n              }),\n              insertError = _yield$supabase$from$.error;\n            if (insertError) {\n              // Handle specific error cases\n              if (insertError.code === '42P01') {\n                // Table does not exist\n                _EventLogger.EventLogger.warn('CrashReporter', 'Error reports table does not exist', {\n                  suggestion: 'Run the SQL setup script: scripts/setup-monitoring-tables.sql'\n                });\n              } else if (insertError.code === '42501') {\n                // Permission denied\n                _EventLogger.EventLogger.warn('CrashReporter', 'Permission denied for error reports table', {\n                  suggestion: 'Check RLS policies and authentication'\n                });\n              } else {\n                // Other database error\n                _EventLogger.EventLogger.warn('CrashReporter', 'Error reports table not accessible', {\n                  tableError: insertError.message,\n                  code: insertError.code\n                });\n              }\n              this.databaseAvailable = false;\n              throw new Error(`Table access error: ${insertError.message} (code: ${insertError.code})`);\n            }\n\n            // Clean up the test record\n            yield _client.supabase.from('error_reports').delete().eq('id', testReportId);\n            this.databaseAvailable = true;\n            _EventLogger.EventLogger.info('CrashReporter', 'Database available for error reporting');\n          } catch (error) {\n            this.databaseAvailable = false;\n\n            // Log specific guidance based on error type\n            var message = 'Database not available - will store reports locally';\n            var errorDetails = {\n              error: error instanceof Error ? error.message : String(error)\n            };\n            if (error instanceof Error) {\n              if (error.message.includes('42P01') || error.message.includes('does not exist')) {\n                message = 'Error reports table missing - run setup script to create tables';\n                errorDetails.setupScript = 'scripts/setup-monitoring-tables.sql';\n              } else if (error.message.includes('42501') || error.message.includes('permission')) {\n                message = 'Database permission denied - check RLS policies';\n              } else if (error.message.includes('not initialized')) {\n                message = 'Supabase not configured - check environment variables';\n              }\n            }\n            _EventLogger.EventLogger.warn('CrashReporter', message, errorDetails);\n            throw error;\n          }\n        });\n        function checkDatabaseAvailability() {\n          return _checkDatabaseAvailability.apply(this, arguments);\n        }\n        return checkDatabaseAvailability;\n      }()\n      /**\r\n       * Set user context\r\n       */\n      )\n    }, {\n      key: \"setUser\",\n      value: function setUser(userId, context) {\n        this.config.userId = userId;\n        this.config.userContext = context;\n        this.addBreadcrumb({\n          category: 'user',\n          message: 'User context updated',\n          level: 'info',\n          data: {\n            userId,\n            context\n          }\n        });\n      }\n\n      /**\r\n       * Clear user context\r\n       */\n    }, {\n      key: \"clearUser\",\n      value: function clearUser() {\n        var oldUserId = this.config.userId;\n        this.config.userId = undefined;\n        this.config.userContext = undefined;\n        this.addBreadcrumb({\n          category: 'user',\n          message: 'User context cleared',\n          level: 'info',\n          data: {\n            oldUserId\n          }\n        });\n      }\n\n      /**\r\n       * Add a breadcrumb\r\n       */\n    }, {\n      key: \"addBreadcrumb\",\n      value: function addBreadcrumb(breadcrumb) {\n        if (!this.isInitialized) return;\n        var fullBreadcrumb = {\n          timestamp: new Date().toISOString(),\n          ...breadcrumb\n        };\n        this.breadcrumbs.push(fullBreadcrumb);\n\n        // Maintain max breadcrumbs limit\n        if (this.breadcrumbs.length > this.config.maxBreadcrumbs) {\n          this.breadcrumbs = this.breadcrumbs.slice(-this.config.maxBreadcrumbs);\n        }\n      }\n\n      /**\r\n       * Track user action\r\n       */\n    }, {\n      key: \"trackUserAction\",\n      value: function trackUserAction(action) {\n        if (!this.isInitialized) return;\n        var fullAction = {\n          timestamp: new Date().toISOString(),\n          ...action\n        };\n        this.userActions.push(fullAction);\n\n        // Maintain max actions limit\n        if (this.userActions.length > this.config.maxUserActions) {\n          this.userActions = this.userActions.slice(-this.config.maxUserActions);\n        }\n\n        // Also add as breadcrumb\n        this.addBreadcrumb({\n          category: 'user_action',\n          message: `${action.type}: ${action.target}`,\n          level: 'info',\n          data: action.data\n        });\n      }\n\n      /**\r\n       * Manually report an error\r\n       */\n    }, {\n      key: \"reportError\",\n      value: function reportError(error, context) {\n        var severity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'medium';\n        if (!this.shouldReportError()) return;\n        this.createAndQueueReport({\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n          type: 'custom',\n          fatal: false\n        }, context, severity);\n      }\n\n      /**\r\n       * Report a network error\r\n       */\n    }, {\n      key: \"reportNetworkError\",\n      value: function reportNetworkError(url, method, statusCode, error, context) {\n        if (!this.shouldReportError()) return;\n        this.createAndQueueReport({\n          name: 'NetworkError',\n          message: `${method} ${url} - ${statusCode}: ${error.message}`,\n          stack: error.stack,\n          type: 'network',\n          fatal: false\n        }, {\n          url,\n          method,\n          statusCode,\n          ...context\n        }, 'medium');\n      }\n\n      /**\r\n       * Report a fatal error (app crash)\r\n       */\n    }, {\n      key: \"reportFatalError\",\n      value: function reportFatalError(error, context) {\n        this.createAndQueueReport({\n          name: error.name,\n          message: error.message,\n          stack: error.stack,\n          type: 'javascript',\n          fatal: true\n        }, context, 'critical');\n\n        // Immediately flush fatal errors\n        this.flushReports();\n      }\n\n      /**\r\n       * Set current screen context\r\n       */\n    }, {\n      key: \"setCurrentScreen\",\n      value: function setCurrentScreen(screenName, params) {\n        this.addBreadcrumb({\n          category: 'navigation',\n          message: `Navigated to ${screenName}`,\n          level: 'info',\n          data: {\n            screenName,\n            params\n          }\n        });\n\n        // Store current screen for error reports\n        this.config.userContext = {\n          ...this.config.userContext,\n          current_screen: screenName,\n          screen_params: params\n        };\n      }\n\n      /**\r\n       * Add custom context\r\n       */\n    }, {\n      key: \"addContext\",\n      value: function addContext(key, value) {\n        this.config.userContext = {\n          ...this.config.userContext,\n          [key]: value\n        };\n      }\n\n      /**\r\n       * Create and queue an error report\r\n       */\n    }, {\n      key: \"createAndQueueReport\",\n      value: (function () {\n        var _createAndQueueReport = (0, _asyncToGenerator2.default)(function* (error, customContext) {\n          var severity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'medium';\n          try {\n            var report = {\n              id: this.generateReportId(),\n              timestamp: new Date().toISOString(),\n              error,\n              context: yield this.buildErrorContext(customContext),\n              breadcrumbs: [...this.breadcrumbs],\n              user_actions: [...this.userActions],\n              performance_metrics: yield this.getPerformanceMetrics(),\n              severity,\n              fingerprint: this.generateFingerprint(error),\n              tags: {\n                environment: this.config.environment,\n                platform: \"android\",\n                version: '1.0.0' // TODO: Get from package.json\n              }\n            };\n\n            // Apply beforeSend filter\n            var finalReport = this.config.beforeSend ? this.config.beforeSend(report) : report;\n            if (!finalReport) return;\n            this.reportQueue.push(finalReport);\n            _EventLogger.EventLogger.error('CrashReporter', 'Error report queued', error, {\n              report_id: report.id,\n              severity\n            });\n\n            // Auto-flush if queue is getting full or for critical errors\n            if (this.reportQueue.length >= 10 || severity === 'critical') {\n              this.flushReports();\n            }\n          } catch (reportError) {\n            _EventLogger.EventLogger.error('CrashReporter', 'Failed to create error report', reportError);\n          }\n        });\n        function createAndQueueReport(_x, _x2) {\n          return _createAndQueueReport.apply(this, arguments);\n        }\n        return createAndQueueReport;\n      }()\n      /**\r\n       * Build error context\r\n       */\n      )\n    }, {\n      key: \"buildErrorContext\",\n      value: (function () {\n        var _buildErrorContext = (0, _asyncToGenerator2.default)(function* (customContext) {\n          var context = {\n            user_id: this.config.userId,\n            session_id: this.sessionId,\n            app_version: '1.0.0',\n            // TODO: Get from package.json or Constants\n            build_number: 'production',\n            platform: \"android\",\n            os_version: _reactNative.Platform.Version.toString(),\n            screen_name: this.config.userContext?.current_screen,\n            custom_context: {\n              ...this.config.userContext,\n              ...customContext\n            }\n          };\n\n          // Add device info if available\n          try {\n            // In a real implementation, you'd use react-native-device-info\n            // context.device_model = await DeviceInfo.getModel();\n            // context.memory_usage = await DeviceInfo.getTotalMemory();\n            // context.battery_level = await DeviceInfo.getBatteryLevel();\n          } catch (error) {\n            // Device info not available, continue without it\n          }\n          return context;\n        });\n        function buildErrorContext(_x3) {\n          return _buildErrorContext.apply(this, arguments);\n        }\n        return buildErrorContext;\n      }()\n      /**\r\n       * Get current performance metrics\r\n       */\n      )\n    }, {\n      key: \"getPerformanceMetrics\",\n      value: (function () {\n        var _getPerformanceMetrics = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            // In a real implementation, you'd collect actual performance metrics\n            var memoryPressure = false; // Would check actual memory pressure\n\n            return {\n              memory_pressure: memoryPressure\n              // cpu_usage: await getCpuUsage(),\n              // frame_drops: getFrameDrops(),\n            };\n          } catch (error) {\n            return undefined;\n          }\n        });\n        function getPerformanceMetrics() {\n          return _getPerformanceMetrics.apply(this, arguments);\n        }\n        return getPerformanceMetrics;\n      }()\n      /**\r\n       * Generate error fingerprint for deduplication\r\n       */\n      )\n    }, {\n      key: \"generateFingerprint\",\n      value: function generateFingerprint(error) {\n        // Simple fingerprint based on error type and first few lines of stack\n        var stackLines = error.stack?.split('\\n').slice(0, 3) || [];\n        var fingerprintData = {\n          name: error.name,\n          message: error.message.slice(0, 100),\n          stack: stackLines.join('\\n')\n        };\n\n        // In a real implementation, you'd use a proper hashing function\n        return btoa(JSON.stringify(fingerprintData)).slice(0, 20);\n      }\n\n      /**\r\n       * Setup global error handlers\r\n       */\n    }, {\n      key: \"setupGlobalErrorHandlers\",\n      value: function setupGlobalErrorHandlers() {\n        // Handle JavaScript errors\n        if (typeof ErrorUtils !== 'undefined') {\n          var originalHandler = ErrorUtils.getGlobalHandler();\n          ErrorUtils.setGlobalHandler((error, isFatal) => {\n            this.createAndQueueReport({\n              name: error.name,\n              message: error.message,\n              stack: error.stack,\n              type: 'javascript',\n              fatal: isFatal\n            }, undefined, isFatal ? 'critical' : 'high');\n\n            // Call original handler\n            if (originalHandler) {\n              originalHandler(error, isFatal);\n            }\n          });\n        }\n\n        // Handle unhandled promise rejections\n        if (this.config.captureUnhandledPromiseRejections && typeof global !== 'undefined') {\n          var _originalHandler = global.onunhandledrejection;\n          global.onunhandledrejection = event => {\n            this.createAndQueueReport({\n              name: 'UnhandledPromiseRejection',\n              message: event.reason?.message || 'Unhandled promise rejection',\n              stack: event.reason?.stack,\n              type: 'unhandled_rejection',\n              fatal: false\n            }, {\n              promise: event.promise?.toString()\n            }, 'high');\n            if (_originalHandler) {\n              _originalHandler(event);\n            }\n          };\n        }\n      }\n\n      /**\r\n       * Setup console interception\r\n       */\n    }, {\n      key: \"setupConsoleInterception\",\n      value: function setupConsoleInterception() {\n        if (!this.config.captureConsoleErrors) return;\n\n        // Intercept console.error\n        this.originalConsoleError = function () {};\n        console.error = function () {};\n\n        // Intercept console.warn\n        this.originalConsoleWarn = function () {};\n        console.warn = function () {};\n      }\n\n      /**\r\n       * Setup periodic report flushing\r\n       */\n    }, {\n      key: \"setupPeriodicFlush\",\n      value: function setupPeriodicFlush() {\n        // Delay initial flush to ensure services are fully ready\n        setTimeout(() => {\n          setInterval(() => {\n            if (this.isInitialized && this.config.enabled && this.reportQueue.length > 0) {\n              _EventLogger.EventLogger.debug('CrashReporter', 'Periodic flush triggered', {\n                queueLength: this.reportQueue.length\n              });\n              this.flushReports().catch(error => {\n                _EventLogger.EventLogger.error('CrashReporter', 'Periodic flush failed', error);\n              });\n            }\n          }, 60000); // Flush every minute\n        }, 5000); // Wait 5 seconds before starting periodic flush\n      }\n\n      /**\r\n       * Flush queued reports (public interface)\r\n       */\n    }, {\n      key: \"flush\",\n      value: (function () {\n        var _flush = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.isInitialized) {\n            _EventLogger.EventLogger.warn('CrashReporter', 'Cannot flush before initialization');\n            return;\n          }\n          return this.flushReports();\n        });\n        function flush() {\n          return _flush.apply(this, arguments);\n        }\n        return flush;\n      }()\n      /**\r\n       * Flush queued reports (internal implementation)\r\n       */\n      )\n    }, {\n      key: \"flushReports\",\n      value: (function () {\n        var _flushReports = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.config.enabled || !this.isInitialized || this.isFlushingReports || this.reportQueue.length === 0) {\n            _EventLogger.EventLogger.debug('CrashReporter', 'Skipping flush', {\n              enabled: this.config.enabled,\n              initialized: this.isInitialized,\n              flushing: this.isFlushingReports,\n              queueLength: this.reportQueue.length\n            });\n            return;\n          }\n\n          // If database is not available, just store reports offline and don't try to send\n          if (!this.databaseAvailable) {\n            var _reports = [...this.reportQueue];\n            this.reportQueue = [];\n            yield this.storeOfflineReports(_reports);\n            _EventLogger.EventLogger.debug('CrashReporter', 'Stored reports offline - database not available', {\n              count: _reports.length\n            });\n            return;\n          }\n          this.isFlushingReports = true;\n          var reports = [...this.reportQueue];\n          this.reportQueue = [];\n          try {\n            // Send to backend with detailed error tracking\n            yield this.sendReports(reports);\n            _EventLogger.EventLogger.info('CrashReporter', 'Reports flushed successfully', {\n              count: reports.length\n            });\n          } catch (error) {\n            // Put reports back in queue and store offline\n            this.reportQueue.unshift(...reports);\n            yield this.storeOfflineReports(reports);\n\n            // Log actual error details\n            var errorDetails = {\n              name: error instanceof Error ? error.name : 'UnknownError',\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined,\n              reportCount: reports.length,\n              isSupabaseError: error && typeof error === 'object' && 'code' in error,\n              errorCode: error && typeof error === 'object' && 'code' in error ? error.code : undefined\n            };\n            _EventLogger.EventLogger.error('CrashReporter', 'Failed to flush reports - detailed error', errorDetails);\n          } finally {\n            this.isFlushingReports = false;\n          }\n        });\n        function flushReports() {\n          return _flushReports.apply(this, arguments);\n        }\n        return flushReports;\n      }()\n      /**\r\n       * Send reports to backend\r\n       */\n      )\n    }, {\n      key: \"sendReports\",\n      value: (function () {\n        var _sendReports = (0, _asyncToGenerator2.default)(function* (reports) {\n          // Check if Supabase is properly configured\n          if (!_client.supabase) {\n            throw new Error('Supabase client not initialized');\n          }\n\n          // Database availability is already checked in checkDatabaseAvailability()\n          // No need to test again here since we only call this when databaseAvailable is true\n\n          var errors = [];\n          var results = yield Promise.allSettled(reports.map(/*#__PURE__*/function () {\n            var _ref = (0, _asyncToGenerator2.default)(function* (report) {\n              try {\n                var _yield$supabase$from$2 = yield _client.supabase.from('error_reports').insert({\n                    id: report.id,\n                    timestamp: report.timestamp,\n                    error_name: report.error.name,\n                    error_message: report.error.message,\n                    error_stack: report.error.stack,\n                    error_type: report.error.type,\n                    error_fatal: report.error.fatal,\n                    context: report.context,\n                    breadcrumbs: report.breadcrumbs,\n                    user_actions: report.user_actions,\n                    performance_metrics: report.performance_metrics,\n                    severity: report.severity,\n                    fingerprint: report.fingerprint,\n                    tags: report.tags\n                  }),\n                  error = _yield$supabase$from$2.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('CrashReporter', `Failed to insert report ${report.id}`, {\n                    supabaseError: error,\n                    errorCode: error.code,\n                    errorMessage: error.message,\n                    reportId: report.id\n                  });\n                  throw new Error(`Supabase error: ${error.message} (code: ${error.code})`);\n                }\n                return {\n                  success: true,\n                  reportId: report.id\n                };\n              } catch (insertError) {\n                _EventLogger.EventLogger.error('CrashReporter', `Database insert failed for report ${report.id}`, {\n                  error: insertError,\n                  reportId: report.id\n                });\n                throw insertError;\n              }\n            });\n            return function (_x5) {\n              return _ref.apply(this, arguments);\n            };\n          }()));\n\n          // Collect all errors from failed insertions\n          results.forEach((result, index) => {\n            if (result.status === 'rejected') {\n              errors.push(new Error(`Report ${reports[index].id}: ${result.reason}`));\n            }\n          });\n\n          // If any errors occurred, throw with details\n          if (errors.length > 0) {\n            var errorMessage = `Failed to send ${errors.length}/${reports.length} error reports:\\n${errors.map(e => e.message).join('\\n')}`;\n            _EventLogger.EventLogger.error('CrashReporter', 'Batch send failed with detailed errors', {\n              failedCount: errors.length,\n              totalCount: reports.length,\n              errors: errors.map(e => ({\n                name: e.name,\n                message: e.message,\n                stack: e.stack\n              }))\n            });\n            throw new Error(errorMessage);\n          }\n        });\n        function sendReports(_x4) {\n          return _sendReports.apply(this, arguments);\n        }\n        return sendReports;\n      }()\n      /**\r\n       * Load offline reports\r\n       */\n      )\n    }, {\n      key: \"loadOfflineReports\",\n      value: (function () {\n        var _loadOfflineReports = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var offlineReports = yield _asyncStorage.default.getItem(CrashReporterService.OFFLINE_REPORTS_KEY);\n            if (offlineReports) {\n              var reports = JSON.parse(offlineReports);\n              this.reportQueue.unshift(...reports);\n              yield _asyncStorage.default.removeItem(CrashReporterService.OFFLINE_REPORTS_KEY);\n              _EventLogger.EventLogger.info('CrashReporter', 'Loaded offline reports', {\n                count: reports.length\n              });\n\n              // Try to sync loaded reports when database becomes available\n              if (this.databaseAvailable) {\n                this.syncOfflineReports().catch(error => {\n                  _EventLogger.EventLogger.error('CrashReporter', 'Failed to sync offline reports immediately', error);\n                });\n              }\n            }\n          } catch (error) {\n            // Handle oversized data error specifically\n            if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && error.message.includes('Row too big')) {\n              _EventLogger.EventLogger.warn('CrashReporter', 'Offline reports too large, clearing data', {\n                error: error.message\n              });\n              yield this.clearOversizedOfflineData();\n              this.reportQueue = [];\n            } else {\n              _EventLogger.EventLogger.error('CrashReporter', 'Failed to load offline reports', error);\n            }\n          }\n        });\n        function loadOfflineReports() {\n          return _loadOfflineReports.apply(this, arguments);\n        }\n        return loadOfflineReports;\n      }()\n      /**\r\n       * Clear oversized offline data when it cannot be loaded\r\n       */\n      )\n    }, {\n      key: \"clearOversizedOfflineData\",\n      value: (function () {\n        var _clearOversizedOfflineData = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield _asyncStorage.default.removeItem(CrashReporterService.OFFLINE_REPORTS_KEY);\n            _EventLogger.EventLogger.info('CrashReporter', 'Cleared oversized offline reports');\n          } catch (error) {\n            _EventLogger.EventLogger.error('CrashReporter', 'Failed to clear offline data', error);\n          }\n        });\n        function clearOversizedOfflineData() {\n          return _clearOversizedOfflineData.apply(this, arguments);\n        }\n        return clearOversizedOfflineData;\n      }()\n      /**\r\n       * Store reports offline\r\n       */\n      )\n    }, {\n      key: \"storeOfflineReports\",\n      value: (function () {\n        var _storeOfflineReports = (0, _asyncToGenerator2.default)(function* (reports) {\n          try {\n            var existingReports = yield _asyncStorage.default.getItem(CrashReporterService.OFFLINE_REPORTS_KEY);\n            var allReports = existingReports ? JSON.parse(existingReports) : [];\n            allReports.push(...reports);\n\n            // Limit offline storage to prevent storage bloat (keep last 50 reports to avoid cursor overflow)\n            var maxOfflineReports = 50;\n            if (allReports.length > maxOfflineReports) {\n              allReports.splice(0, allReports.length - maxOfflineReports);\n              _EventLogger.EventLogger.debug('CrashReporter', `Trimmed offline reports to ${maxOfflineReports} most recent`);\n            }\n\n            // Check size before storing (rough estimate: 5KB per report max)\n            var estimatedSize = JSON.stringify(allReports).length;\n            if (estimatedSize > 250000) {\n              // ~250KB limit\n              // Keep only the most recent 25 if still too large\n              allReports.splice(0, allReports.length - 25);\n              _EventLogger.EventLogger.warn('CrashReporter', 'Offline reports too large, reduced to 25 most recent');\n            }\n            yield _asyncStorage.default.setItem(CrashReporterService.OFFLINE_REPORTS_KEY, JSON.stringify(allReports));\n            _EventLogger.EventLogger.info('CrashReporter', 'Stored reports offline', {\n              newCount: reports.length,\n              totalStored: allReports.length\n            });\n          } catch (error) {\n            _EventLogger.EventLogger.error('CrashReporter', 'Failed to store offline reports', error);\n          }\n        });\n        function storeOfflineReports(_x6) {\n          return _storeOfflineReports.apply(this, arguments);\n        }\n        return storeOfflineReports;\n      }()\n      /**\r\n       * Sync offline reports when database becomes available\r\n       */\n      )\n    }, {\n      key: \"syncOfflineReports\",\n      value: (function () {\n        var _syncOfflineReports = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.databaseAvailable || !this.isInitialized) {\n            _EventLogger.EventLogger.debug('CrashReporter', 'Cannot sync offline reports - database not available or not initialized');\n            return;\n          }\n          try {\n            // Check if we have reports in queue that came from offline storage\n            if (this.reportQueue.length > 0) {\n              _EventLogger.EventLogger.info('CrashReporter', 'Syncing offline reports to database', {\n                count: this.reportQueue.length\n              });\n              yield this.flushReports();\n            }\n            _EventLogger.EventLogger.info('CrashReporter', 'Offline reports sync completed');\n          } catch (error) {\n            _EventLogger.EventLogger.error('CrashReporter', 'Failed to sync offline reports', error);\n          }\n        });\n        function syncOfflineReports() {\n          return _syncOfflineReports.apply(this, arguments);\n        }\n        return syncOfflineReports;\n      }()\n      /**\r\n       * Check database availability and sync offline data if newly available\r\n       */\n      )\n    }, {\n      key: \"recheckDatabaseAvailability\",\n      value: (function () {\n        var _recheckDatabaseAvailability = (0, _asyncToGenerator2.default)(function* () {\n          var wasAvailable = this.databaseAvailable;\n          try {\n            yield this.checkDatabaseAvailability();\n\n            // If database just became available, sync offline reports and reset log flag\n            if (!wasAvailable && this.databaseAvailable) {\n              _EventLogger.EventLogger.info('CrashReporter', 'Database became available - syncing offline reports');\n              this.databaseUnavailableLogged = false; // Reset so we can log again if it goes down\n              yield this.syncOfflineReports();\n            }\n          } catch (error) {\n            this.databaseAvailable = false;\n            _EventLogger.EventLogger.debug('CrashReporter', 'Database still not available');\n          }\n        });\n        function recheckDatabaseAvailability() {\n          return _recheckDatabaseAvailability.apply(this, arguments);\n        }\n        return recheckDatabaseAvailability;\n      }()\n      /**\r\n       * Check if we should report this error (sampling)\r\n       */\n      )\n    }, {\n      key: \"shouldReportError\",\n      value: function shouldReportError() {\n        if (!this.config.enabled || !this.isInitialized) {\n          return false;\n        }\n\n        // Always report in development\n\n        // Apply sample rate\n        return Math.random() < this.config.sampleRate;\n      }\n\n      /**\r\n       * Generate session ID\r\n       */\n    }, {\n      key: \"generateSessionId\",\n      value: function generateSessionId() {\n        return `crash-session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Generate report ID\r\n       */\n    }, {\n      key: \"generateReportId\",\n      value: function generateReportId() {\n        return `crash-report-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Cleanup when shutting down\r\n       */\n    }, {\n      key: \"shutdown\",\n      value: (function () {\n        var _shutdown = (0, _asyncToGenerator2.default)(function* () {\n          // Restore original console methods\n          if (this.originalConsoleError) {\n            console.error = function () {};\n          }\n          if (this.originalConsoleWarn) {\n            console.warn = function () {};\n          }\n\n          // Flush remaining reports\n          if (this.reportQueue.length > 0) {\n            yield this.flushReports();\n          }\n          this.isInitialized = false;\n          _EventLogger.EventLogger.info('CrashReporter', 'Crash reporter shut down');\n        });\n        function shutdown() {\n          return _shutdown.apply(this, arguments);\n        }\n        return shutdown;\n      }())\n    }]);\n  }(); // Singleton instance\n  // Track if we've already logged database unavailability\n  // Storage keys\n  CrashReporterService.OFFLINE_REPORTS_KEY = 'crash_reports_offline';\n  CrashReporterService.SESSION_ID_KEY = 'crash_reporter_session_id';\n  var CrashReporter = exports.CrashReporter = new CrashReporterService();\n\n  // Convenience functions\n  var reportError = (error, context, severity) => {\n    CrashReporter.reportError(error, context, severity);\n  };\n  exports.reportError = reportError;\n  var addBreadcrumb = breadcrumb => {\n    CrashReporter.addBreadcrumb(breadcrumb);\n  };\n  exports.addBreadcrumb = addBreadcrumb;\n  var trackUserAction = action => {\n    CrashReporter.trackUserAction(action);\n  };\n  exports.trackUserAction = trackUserAction;\n  var setCurrentScreen = (screenName, params) => {\n    CrashReporter.setCurrentScreen(screenName, params);\n  };\n  exports.setCurrentScreen = setCurrentScreen;\n  var addContext = (key, value) => {\n    CrashReporter.addContext(key, value);\n  };\n\n  // Export types\n  exports.addContext = addContext;\n});","lineCount":1015,"map":[[10,2,6,0],[10,6,6,0,"_asyncStorage"],[10,19,6,0],[10,22,6,0,"_interopRequireDefault"],[10,44,6,0],[10,45,6,0,"require"],[10,52,6,0],[10,53,6,0,"_dependencyMap"],[10,67,6,0],[11,2,7,0],[11,6,7,0,"_reactNative"],[11,18,7,0],[11,21,7,0,"require"],[11,28,7,0],[11,29,7,0,"_dependencyMap"],[11,43,7,0],[12,2,8,0],[12,6,8,0,"_client"],[12,13,8,0],[12,16,8,0,"require"],[12,23,8,0],[12,24,8,0,"_dependencyMap"],[12,38,8,0],[13,2,9,0],[13,6,9,0,"_analytics"],[13,16,9,0],[13,19,9,0,"require"],[13,26,9,0],[13,27,9,0,"_dependencyMap"],[13,41,9,0],[14,2,10,0],[14,6,10,0,"_EventLogger"],[14,18,10,0],[14,21,10,0,"require"],[14,28,10,0],[14,29,10,0,"_dependencyMap"],[14,43,10,0],[15,2,1,0],[16,0,2,0],[17,0,3,0],[18,0,4,0],[19,2,1,0],[19,6,79,6,"CrashReporterService"],[19,26,79,26],[20,4,96,2],[20,13,96,2,"CrashReporterService"],[20,34,96,2],[20,36,96,57],[21,6,96,57],[21,10,96,14,"config"],[21,16,96,50],[21,19,96,50,"arguments"],[21,28,96,50],[21,29,96,50,"length"],[21,35,96,50],[21,43,96,50,"arguments"],[21,52,96,50],[21,60,96,50,"undefined"],[21,69,96,50],[21,72,96,50,"arguments"],[21,81,96,50],[21,87,96,53],[21,88,96,54],[21,89,96,55],[22,6,96,55],[22,10,96,55,"_classCallCheck2"],[22,26,96,55],[22,27,96,55,"default"],[22,34,96,55],[22,42,96,55,"CrashReporterService"],[22,62,96,55],[23,6,96,55],[23,11,81,10,"breadcrumbs"],[23,22,81,21],[23,25,81,38],[23,27,81,40],[24,6,81,40],[24,11,82,10,"userActions"],[24,22,82,21],[24,25,82,38],[24,27,82,40],[25,6,82,40],[25,11,83,10,"isInitialized"],[25,24,83,23],[25,27,83,26],[25,32,83,31],[26,6,83,31],[26,11,87,10,"reportQueue"],[26,22,87,21],[26,25,87,39],[26,27,87,41],[27,6,87,41],[27,11,88,10,"isFlushingReports"],[27,28,88,27],[27,31,88,30],[27,36,88,35],[28,6,88,35],[28,11,89,10,"databaseAvailable"],[28,28,89,27],[28,31,89,30],[28,36,89,35],[29,6,89,35],[29,11,90,10,"databaseUnavailableLogged"],[29,36,90,35],[29,39,90,38],[29,44,90,43],[30,6,97,4],[30,10,97,8],[30,11,97,9,"config"],[30,17,97,15],[30,20,97,18],[31,8,98,6,"enabled"],[31,15,98,13],[31,17,98,15,"ANALYTICS_CONFIG"],[31,44,98,31],[31,45,98,32,"errors"],[31,51,98,38],[31,52,98,39,"enabled"],[31,59,98,46],[32,8,99,6,"environment"],[32,19,99,17],[32,21,99,45],[32,33,99,57],[33,8,100,6,"maxBreadcrumbs"],[33,22,100,20],[33,24,100,22,"ANALYTICS_CONFIG"],[33,51,100,38],[33,52,100,39,"errors"],[33,58,100,45],[33,59,100,46,"maxBreadcrumbs"],[33,73,100,60],[34,8,101,6,"maxUserActions"],[34,22,101,20],[34,24,101,22],[34,26,101,24],[35,8,102,6,"captureConsoleErrors"],[35,28,102,26],[35,30,102,28,"ANALYTICS_CONFIG"],[35,57,102,44],[35,58,102,45,"errors"],[35,64,102,51],[35,65,102,52,"captureConsoleErrors"],[35,85,102,72],[36,8,103,6,"captureUnhandledPromiseRejections"],[36,41,103,39],[36,43,103,41,"ANALYTICS_CONFIG"],[36,70,103,57],[36,71,103,58,"errors"],[36,77,103,64],[36,78,103,65,"captureUnhandledPromiseRejections"],[36,111,103,98],[37,8,104,6,"sampleRate"],[37,18,104,16],[37,20,104,18,"ANALYTICS_CONFIG"],[37,47,104,34],[37,48,104,35,"errors"],[37,54,104,41],[37,55,104,42,"sampleRate"],[37,65,104,52],[38,8,105,6],[38,11,105,9,"config"],[39,6,106,4],[39,7,106,5],[40,6,108,4],[40,10,108,8],[40,11,108,9,"sessionId"],[40,20,108,18],[40,23,108,21],[40,27,108,25],[40,28,108,26,"generateSessionId"],[40,45,108,43],[40,46,108,44],[40,47,108,45],[41,4,109,2],[43,4,111,2],[44,0,112,0],[45,0,113,0],[46,4,111,2],[46,15,111,2,"_createClass2"],[46,28,111,2],[46,29,111,2,"default"],[46,36,111,2],[46,38,111,2,"CrashReporterService"],[46,58,111,2],[47,6,111,2,"key"],[47,9,111,2],[48,6,111,2,"value"],[48,11,111,2],[49,8,111,2],[49,12,111,2,"_initialize"],[49,23,111,2],[49,30,111,2,"_asyncToGenerator2"],[49,48,111,2],[49,49,111,2,"default"],[49,56,111,2],[49,58,114,2],[49,71,114,85],[50,10,114,85],[50,14,114,26,"options"],[50,21,114,63],[50,24,114,63,"arguments"],[50,33,114,63],[50,34,114,63,"length"],[50,40,114,63],[50,48,114,63,"arguments"],[50,57,114,63],[50,65,114,63,"undefined"],[50,74,114,63],[50,77,114,63,"arguments"],[50,86,114,63],[50,92,114,66],[50,93,114,67],[50,94,114,68],[51,10,115,4],[51,14,115,8],[52,12,116,6],[52,16,116,10],[52,17,116,11,"config"],[52,23,116,17],[52,26,116,20],[53,14,116,22],[53,17,116,25],[53,21,116,29],[53,22,116,30,"config"],[53,28,116,36],[54,14,116,38],[54,17,116,41,"options"],[55,12,116,49],[55,13,116,50],[56,12,118,6],[56,16,118,10],[56,17,118,11],[56,21,118,15],[56,22,118,16,"config"],[56,28,118,22],[56,29,118,23,"enabled"],[56,36,118,30],[56,38,118,32],[57,14,119,8,"EventLogger"],[57,38,119,19],[57,39,119,20,"info"],[57,43,119,24],[57,44,119,25],[57,59,119,40],[57,61,119,42],[57,87,119,68],[57,88,119,69],[58,14,120,8],[58,18,120,12],[58,19,120,13,"isInitialized"],[58,32,120,26],[58,35,120,29],[58,39,120,33],[58,40,120,34],[58,41,120,35],[59,14,121,8],[60,12,122,6],[62,12,124,6],[63,12,125,6],[63,18,125,12,"Promise"],[63,25,125,19],[63,26,125,20,"resolve"],[63,33,125,27],[63,34,125,28],[63,35,125,29],[63,36,125,30,"then"],[63,40,125,34],[63,41,125,35],[63,47,125,41],[64,14,126,8],[65,14,127,8],[65,18,127,12],[65,19,127,13,"setupGlobalErrorHandlers"],[65,43,127,37],[65,44,127,38],[65,45,127,39],[67,14,129,8],[68,14,130,8],[68,18,130,12],[68,19,130,13,"setupConsoleInterception"],[68,43,130,37],[68,44,130,38],[68,45,130,39],[70,14,132,8],[71,14,133,8],[71,18,133,12],[71,19,133,13,"setupPeriodicFlush"],[71,37,133,31],[71,38,133,32],[71,39,133,33],[72,12,134,6],[72,13,134,7],[72,14,134,8],[74,12,136,6],[75,12,137,6],[75,16,137,10],[75,17,137,11,"checkDatabaseAvailability"],[75,42,137,36],[75,43,137,37],[75,44,137,38],[75,45,137,39,"catch"],[75,50,137,44],[75,51,137,45,"error"],[75,56,137,50],[75,60,137,54],[76,14,138,8],[76,18,138,12],[76,19,138,13],[76,23,138,17],[76,24,138,18,"databaseUnavailableLogged"],[76,49,138,43],[76,51,138,45],[77,16,139,10,"EventLogger"],[77,40,139,21],[77,41,139,22,"warn"],[77,45,139,26],[77,46,139,27],[77,61,139,42],[77,63,139,44],[77,125,139,106],[77,127,139,108,"error"],[77,132,139,122],[77,133,139,123],[78,16,140,10],[78,20,140,14],[78,21,140,15,"databaseUnavailableLogged"],[78,46,140,40],[78,49,140,43],[78,53,140,47],[79,14,141,8],[80,14,142,8],[80,18,142,12],[80,19,142,13,"databaseAvailable"],[80,36,142,30],[80,39,142,33],[80,44,142,38],[81,12,143,6],[81,13,143,7],[81,14,143,8],[83,12,145,6],[84,12,146,6],[84,16,146,10],[84,17,146,11,"loadOfflineReports"],[84,35,146,29],[84,36,146,30],[84,37,146,31],[84,38,146,32,"catch"],[84,43,146,37],[84,44,146,38,"error"],[84,49,146,43],[84,53,146,47],[85,14,147,8,"EventLogger"],[85,38,147,19],[85,39,147,20,"error"],[85,44,147,25],[85,45,147,26],[85,60,147,41],[85,62,147,43],[85,94,147,75],[85,96,147,77,"error"],[85,101,147,91],[85,102,147,92],[86,12,148,6],[86,13,148,7],[86,14,148,8],[88,12,150,6],[89,12,151,6],[89,16,151,10],[89,17,151,11,"addBreadcrumb"],[89,30,151,24],[89,31,151,25],[90,14,152,8,"category"],[90,22,152,16],[90,24,152,18],[90,35,152,29],[91,14,153,8,"message"],[91,21,153,15],[91,23,153,17],[91,51,153,45],[92,14,154,8,"level"],[92,19,154,13],[92,21,154,15],[92,27,154,21],[93,14,155,8,"data"],[93,18,155,12],[93,20,155,14],[94,16,156,10,"config"],[94,22,156,16],[94,24,156,18],[95,18,157,12,"enabled"],[95,25,157,19],[95,27,157,21],[95,31,157,25],[95,32,157,26,"config"],[95,38,157,32],[95,39,157,33,"enabled"],[95,46,157,40],[96,18,158,12,"environment"],[96,29,158,23],[96,31,158,25],[96,35,158,29],[96,36,158,30,"config"],[96,42,158,36],[96,43,158,37,"environment"],[97,16,159,10],[98,14,160,8],[99,12,161,6],[99,13,161,7],[99,14,161,8],[100,12,163,6],[100,16,163,10],[100,17,163,11,"isInitialized"],[100,30,163,24],[100,33,163,27],[100,37,163,31],[101,12,164,6,"EventLogger"],[101,36,164,17],[101,37,164,18,"info"],[101,41,164,22],[101,42,164,23],[101,57,164,38],[101,59,164,40],[101,100,164,81],[101,101,164,82],[102,10,166,4],[102,11,166,5],[102,12,166,6],[102,19,166,13,"error"],[102,24,166,18],[102,26,166,20],[103,12,167,6],[103,16,167,10],[103,17,167,11,"isInitialized"],[103,30,167,24],[103,33,167,27],[103,37,167,31],[103,38,167,32],[103,39,167,33],[104,12,168,6,"EventLogger"],[104,36,168,17],[104,37,168,18,"error"],[104,42,168,23],[104,43,168,24],[104,58,168,39],[104,60,168,41],[104,97,168,78],[104,99,168,80,"error"],[104,104,168,94],[104,105,168,95],[105,10,169,4],[106,8,170,2],[106,9,170,3],[107,8,170,3],[107,17,114,15,"initialize"],[107,27,114,25,"initialize"],[107,28,114,25],[108,10,114,25],[108,17,114,25,"_initialize"],[108,28,114,25],[108,29,114,25,"apply"],[108,34,114,25],[108,41,114,25,"arguments"],[108,50,114,25],[109,8,114,25],[110,8,114,25],[110,15,114,15,"initialize"],[110,25,114,25],[111,6,114,25],[112,6,172,2],[113,0,173,0],[114,0,174,0],[115,6,172,2],[116,4,172,2],[117,6,172,2,"key"],[117,9,172,2],[118,6,172,2,"value"],[118,11,172,2],[119,8,172,2],[119,12,172,2,"_checkDatabaseAvailability"],[119,38,172,2],[119,45,172,2,"_asyncToGenerator2"],[119,63,172,2],[119,64,172,2,"default"],[119,71,172,2],[119,73,175,2],[119,86,175,59],[120,10,176,4],[120,14,176,8],[121,12,177,6],[121,16,177,10],[121,17,177,11,"supabase"],[121,33,177,19],[121,35,177,21],[122,14,178,8],[122,20,178,14],[122,24,178,18,"Error"],[122,29,178,23],[122,30,178,24],[122,63,178,57],[122,64,178,58],[123,12,179,6],[125,12,181,6],[126,12,182,6],[127,12,183,6],[127,16,183,12,"testReportId"],[127,28,183,24],[127,31,183,27],[127,52,183,48,"Date"],[127,56,183,52],[127,57,183,53,"now"],[127,60,183,56],[127,61,183,57],[127,62,183,58],[127,66,183,62,"Math"],[127,70,183,66],[127,71,183,67,"random"],[127,77,183,73],[127,78,183,74],[127,79,183,75],[127,80,183,76,"toString"],[127,88,183,84],[127,89,183,85],[127,91,183,87],[127,92,183,88],[127,93,183,89,"substr"],[127,99,183,95],[127,100,183,96],[127,101,183,97],[127,103,183,99],[127,104,183,100],[127,105,183,101],[127,107,183,103],[128,12,185,6],[128,16,185,6,"_yield$supabase$from$"],[128,37,185,6],[128,46,185,43,"supabase"],[128,62,185,51],[128,63,186,9,"from"],[128,67,186,13],[128,68,186,14],[128,83,186,29],[128,84,186,30],[128,85,187,9,"insert"],[128,91,187,15],[128,92,187,16],[129,16,188,10,"id"],[129,18,188,12],[129,20,188,14,"testReportId"],[129,32,188,26],[130,16,189,10,"error_name"],[130,26,189,20],[130,28,189,22],[130,54,189,48],[131,16,190,10,"error_message"],[131,29,190,23],[131,31,190,25],[131,75,190,69],[132,16,191,10,"error_type"],[132,26,191,20],[132,28,191,22],[132,36,191,30],[133,16,192,10,"error_fatal"],[133,27,192,21],[133,29,192,23],[133,34,192,28],[134,16,193,10,"severity"],[134,24,193,18],[134,26,193,20],[134,31,193,25],[135,16,194,10,"fingerprint"],[135,27,194,21],[135,29,194,23],[135,54,194,48],[136,16,195,10,"context"],[136,23,195,17],[136,25,195,19],[137,18,195,21,"test"],[137,22,195,25],[137,24,195,27],[138,16,195,32],[138,17,195,33],[139,16,196,10,"tags"],[139,20,196,14],[139,22,196,16],[140,18,196,18,"test"],[140,22,196,22],[140,24,196,24],[141,16,196,45],[142,14,197,8],[142,15,197,9],[142,16,197,10],[143,14,185,21,"insertError"],[143,25,185,32],[143,28,185,32,"_yield$supabase$from$"],[143,49,185,32],[143,50,185,14,"error"],[143,55,185,19],[144,12,199,6],[144,16,199,10,"insertError"],[144,27,199,21],[144,29,199,23],[145,14,200,8],[146,14,201,8],[146,18,201,12,"insertError"],[146,29,201,23],[146,30,201,24,"code"],[146,34,201,28],[146,39,201,33],[146,46,201,40],[146,48,201,42],[147,16,202,10],[148,16,203,10,"EventLogger"],[148,40,203,21],[148,41,203,22,"warn"],[148,45,203,26],[148,46,203,27],[148,61,203,42],[148,63,203,44],[148,99,203,80],[148,101,203,82],[149,18,204,12,"suggestion"],[149,28,204,22],[149,30,204,24],[150,16,205,10],[150,17,205,18],[150,18,205,19],[151,14,206,8],[151,15,206,9],[151,21,206,15],[151,25,206,19,"insertError"],[151,36,206,30],[151,37,206,31,"code"],[151,41,206,35],[151,46,206,40],[151,53,206,47],[151,55,206,49],[152,16,207,10],[153,16,208,10,"EventLogger"],[153,40,208,21],[153,41,208,22,"warn"],[153,45,208,26],[153,46,208,27],[153,61,208,42],[153,63,208,44],[153,106,208,87],[153,108,208,89],[154,18,209,12,"suggestion"],[154,28,209,22],[154,30,209,24],[155,16,210,10],[155,17,210,18],[155,18,210,19],[156,14,211,8],[156,15,211,9],[156,21,211,15],[157,16,212,10],[158,16,213,10,"EventLogger"],[158,40,213,21],[158,41,213,22,"warn"],[158,45,213,26],[158,46,213,27],[158,61,213,42],[158,63,213,44],[158,99,213,80],[158,101,213,82],[159,18,214,12,"tableError"],[159,28,214,22],[159,30,214,24,"insertError"],[159,41,214,35],[159,42,214,36,"message"],[159,49,214,43],[160,18,215,12,"code"],[160,22,215,16],[160,24,215,18,"insertError"],[160,35,215,29],[160,36,215,30,"code"],[161,16,216,10],[161,17,216,18],[161,18,216,19],[162,14,217,8],[163,14,219,8],[163,18,219,12],[163,19,219,13,"databaseAvailable"],[163,36,219,30],[163,39,219,33],[163,44,219,38],[164,14,220,8],[164,20,220,14],[164,24,220,18,"Error"],[164,29,220,23],[164,30,220,24],[164,53,220,47,"insertError"],[164,64,220,58],[164,65,220,59,"message"],[164,72,220,66],[164,83,220,77,"insertError"],[164,94,220,88],[164,95,220,89,"code"],[164,99,220,93],[164,102,220,96],[164,103,220,97],[165,12,221,6],[167,12,223,6],[168,12,224,6],[168,18,224,12,"supabase"],[168,34,224,20],[168,35,225,9,"from"],[168,39,225,13],[168,40,225,14],[168,55,225,29],[168,56,225,30],[168,57,226,9,"delete"],[168,63,226,15],[168,64,226,16],[168,65,226,17],[168,66,227,9,"eq"],[168,68,227,11],[168,69,227,12],[168,73,227,16],[168,75,227,18,"testReportId"],[168,87,227,30],[168,88,227,31],[169,12,229,6],[169,16,229,10],[169,17,229,11,"databaseAvailable"],[169,34,229,28],[169,37,229,31],[169,41,229,35],[170,12,230,6,"EventLogger"],[170,36,230,17],[170,37,230,18,"info"],[170,41,230,22],[170,42,230,23],[170,57,230,38],[170,59,230,40],[170,99,230,80],[170,100,230,81],[171,10,232,4],[171,11,232,5],[171,12,232,6],[171,19,232,13,"error"],[171,24,232,18],[171,26,232,20],[172,12,233,6],[172,16,233,10],[172,17,233,11,"databaseAvailable"],[172,34,233,28],[172,37,233,31],[172,42,233,36],[174,12,235,6],[175,12,236,6],[175,16,236,10,"message"],[175,23,236,17],[175,26,236,20],[175,79,236,73],[176,12,237,6],[176,16,237,12,"errorDetails"],[176,28,237,29],[176,31,237,32],[177,14,238,8,"error"],[177,19,238,13],[177,21,238,15,"error"],[177,26,238,20],[177,38,238,32,"Error"],[177,43,238,37],[177,46,238,40,"error"],[177,51,238,45],[177,52,238,46,"message"],[177,59,238,53],[177,62,238,56,"String"],[177,68,238,62],[177,69,238,63,"error"],[177,74,238,68],[178,12,239,6],[178,13,239,7],[179,12,241,6],[179,16,241,10,"error"],[179,21,241,15],[179,33,241,27,"Error"],[179,38,241,32],[179,40,241,34],[180,14,242,8],[180,18,242,12,"error"],[180,23,242,17],[180,24,242,18,"message"],[180,31,242,25],[180,32,242,26,"includes"],[180,40,242,34],[180,41,242,35],[180,48,242,42],[180,49,242,43],[180,53,242,47,"error"],[180,58,242,52],[180,59,242,53,"message"],[180,66,242,60],[180,67,242,61,"includes"],[180,75,242,69],[180,76,242,70],[180,92,242,86],[180,93,242,87],[180,95,242,89],[181,16,243,10,"message"],[181,23,243,17],[181,26,243,20],[181,91,243,85],[182,16,244,10,"errorDetails"],[182,28,244,22],[182,29,244,23,"setupScript"],[182,40,244,34],[182,43,244,37],[182,80,244,74],[183,14,245,8],[183,15,245,9],[183,21,245,15],[183,25,245,19,"error"],[183,30,245,24],[183,31,245,25,"message"],[183,38,245,32],[183,39,245,33,"includes"],[183,47,245,41],[183,48,245,42],[183,55,245,49],[183,56,245,50],[183,60,245,54,"error"],[183,65,245,59],[183,66,245,60,"message"],[183,73,245,67],[183,74,245,68,"includes"],[183,82,245,76],[183,83,245,77],[183,95,245,89],[183,96,245,90],[183,98,245,92],[184,16,246,10,"message"],[184,23,246,17],[184,26,246,20],[184,75,246,69],[185,14,247,8],[185,15,247,9],[185,21,247,15],[185,25,247,19,"error"],[185,30,247,24],[185,31,247,25,"message"],[185,38,247,32],[185,39,247,33,"includes"],[185,47,247,41],[185,48,247,42],[185,65,247,59],[185,66,247,60],[185,68,247,62],[186,16,248,10,"message"],[186,23,248,17],[186,26,248,20],[186,81,248,75],[187,14,249,8],[188,12,250,6],[189,12,252,6,"EventLogger"],[189,36,252,17],[189,37,252,18,"warn"],[189,41,252,22],[189,42,252,23],[189,57,252,38],[189,59,252,40,"message"],[189,66,252,47],[189,68,252,49,"errorDetails"],[189,80,252,61],[189,81,252,62],[190,12,253,6],[190,18,253,12,"error"],[190,23,253,17],[191,10,254,4],[192,8,255,2],[192,9,255,3],[193,8,255,3],[193,17,175,16,"checkDatabaseAvailability"],[193,42,175,41,"checkDatabaseAvailability"],[193,43,175,41],[194,10,175,41],[194,17,175,41,"_checkDatabaseAvailability"],[194,43,175,41],[194,44,175,41,"apply"],[194,49,175,41],[194,56,175,41,"arguments"],[194,65,175,41],[195,8,175,41],[196,8,175,41],[196,15,175,16,"checkDatabaseAvailability"],[196,40,175,41],[197,6,175,41],[198,6,257,2],[199,0,258,0],[200,0,259,0],[201,6,257,2],[202,4,257,2],[203,6,257,2,"key"],[203,9,257,2],[204,6,257,2,"value"],[204,11,257,2],[204,13,260,2],[204,22,260,9,"setUser"],[204,29,260,16,"setUser"],[204,30,260,17,"userId"],[204,36,260,31],[204,38,260,33,"context"],[204,45,260,62],[204,47,260,70],[205,8,261,4],[205,12,261,8],[205,13,261,9,"config"],[205,19,261,15],[205,20,261,16,"userId"],[205,26,261,22],[205,29,261,25,"userId"],[205,35,261,31],[206,8,262,4],[206,12,262,8],[206,13,262,9,"config"],[206,19,262,15],[206,20,262,16,"userContext"],[206,31,262,27],[206,34,262,30,"context"],[206,41,262,37],[207,8,264,4],[207,12,264,8],[207,13,264,9,"addBreadcrumb"],[207,26,264,22],[207,27,264,23],[208,10,265,6,"category"],[208,18,265,14],[208,20,265,16],[208,26,265,22],[209,10,266,6,"message"],[209,17,266,13],[209,19,266,15],[209,41,266,37],[210,10,267,6,"level"],[210,15,267,11],[210,17,267,13],[210,23,267,19],[211,10,268,6,"data"],[211,14,268,10],[211,16,268,12],[212,12,268,14,"userId"],[212,18,268,20],[213,12,268,22,"context"],[214,10,268,30],[215,8,269,4],[215,9,269,5],[215,10,269,6],[216,6,270,2],[218,6,272,2],[219,0,273,0],[220,0,274,0],[221,4,272,2],[222,6,272,2,"key"],[222,9,272,2],[223,6,272,2,"value"],[223,11,272,2],[223,13,275,2],[223,22,275,9,"clearUser"],[223,31,275,18,"clearUser"],[223,32,275,18],[223,34,275,27],[224,8,276,4],[224,12,276,10,"oldUserId"],[224,21,276,19],[224,24,276,22],[224,28,276,26],[224,29,276,27,"config"],[224,35,276,33],[224,36,276,34,"userId"],[224,42,276,40],[225,8,277,4],[225,12,277,8],[225,13,277,9,"config"],[225,19,277,15],[225,20,277,16,"userId"],[225,26,277,22],[225,29,277,25,"undefined"],[225,38,277,34],[226,8,278,4],[226,12,278,8],[226,13,278,9,"config"],[226,19,278,15],[226,20,278,16,"userContext"],[226,31,278,27],[226,34,278,30,"undefined"],[226,43,278,39],[227,8,280,4],[227,12,280,8],[227,13,280,9,"addBreadcrumb"],[227,26,280,22],[227,27,280,23],[228,10,281,6,"category"],[228,18,281,14],[228,20,281,16],[228,26,281,22],[229,10,282,6,"message"],[229,17,282,13],[229,19,282,15],[229,41,282,37],[230,10,283,6,"level"],[230,15,283,11],[230,17,283,13],[230,23,283,19],[231,10,284,6,"data"],[231,14,284,10],[231,16,284,12],[232,12,284,14,"oldUserId"],[233,10,284,24],[234,8,285,4],[234,9,285,5],[234,10,285,6],[235,6,286,2],[237,6,288,2],[238,0,289,0],[239,0,290,0],[240,4,288,2],[241,6,288,2,"key"],[241,9,288,2],[242,6,288,2,"value"],[242,11,288,2],[242,13,291,2],[242,22,291,9,"addBreadcrumb"],[242,35,291,22,"addBreadcrumb"],[242,36,291,23,"breadcrumb"],[242,46,291,64],[242,48,291,72],[243,8,292,4],[243,12,292,8],[243,13,292,9],[243,17,292,13],[243,18,292,14,"isInitialized"],[243,31,292,27],[243,33,292,29],[244,8,294,4],[244,12,294,10,"fullBreadcrumb"],[244,26,294,36],[244,29,294,39],[245,10,295,6,"timestamp"],[245,19,295,15],[245,21,295,17],[245,25,295,21,"Date"],[245,29,295,25],[245,30,295,26],[245,31,295,27],[245,32,295,28,"toISOString"],[245,43,295,39],[245,44,295,40],[245,45,295,41],[246,10,296,6],[246,13,296,9,"breadcrumb"],[247,8,297,4],[247,9,297,5],[248,8,299,4],[248,12,299,8],[248,13,299,9,"breadcrumbs"],[248,24,299,20],[248,25,299,21,"push"],[248,29,299,25],[248,30,299,26,"fullBreadcrumb"],[248,44,299,40],[248,45,299,41],[250,8,301,4],[251,8,302,4],[251,12,302,8],[251,16,302,12],[251,17,302,13,"breadcrumbs"],[251,28,302,24],[251,29,302,25,"length"],[251,35,302,31],[251,38,302,34],[251,42,302,38],[251,43,302,39,"config"],[251,49,302,45],[251,50,302,46,"maxBreadcrumbs"],[251,64,302,60],[251,66,302,62],[252,10,303,6],[252,14,303,10],[252,15,303,11,"breadcrumbs"],[252,26,303,22],[252,29,303,25],[252,33,303,29],[252,34,303,30,"breadcrumbs"],[252,45,303,41],[252,46,303,42,"slice"],[252,51,303,47],[252,52,303,48],[252,53,303,49],[252,57,303,53],[252,58,303,54,"config"],[252,64,303,60],[252,65,303,61,"maxBreadcrumbs"],[252,79,303,75],[252,80,303,76],[253,8,304,4],[254,6,305,2],[256,6,307,2],[257,0,308,0],[258,0,309,0],[259,4,307,2],[260,6,307,2,"key"],[260,9,307,2],[261,6,307,2,"value"],[261,11,307,2],[261,13,310,2],[261,22,310,9,"trackUserAction"],[261,37,310,24,"trackUserAction"],[261,38,310,25,"action"],[261,44,310,62],[261,46,310,70],[262,8,311,4],[262,12,311,8],[262,13,311,9],[262,17,311,13],[262,18,311,14,"isInitialized"],[262,31,311,27],[262,33,311,29],[263,8,313,4],[263,12,313,10,"fullAction"],[263,22,313,32],[263,25,313,35],[264,10,314,6,"timestamp"],[264,19,314,15],[264,21,314,17],[264,25,314,21,"Date"],[264,29,314,25],[264,30,314,26],[264,31,314,27],[264,32,314,28,"toISOString"],[264,43,314,39],[264,44,314,40],[264,45,314,41],[265,10,315,6],[265,13,315,9,"action"],[266,8,316,4],[266,9,316,5],[267,8,318,4],[267,12,318,8],[267,13,318,9,"userActions"],[267,24,318,20],[267,25,318,21,"push"],[267,29,318,25],[267,30,318,26,"fullAction"],[267,40,318,36],[267,41,318,37],[269,8,320,4],[270,8,321,4],[270,12,321,8],[270,16,321,12],[270,17,321,13,"userActions"],[270,28,321,24],[270,29,321,25,"length"],[270,35,321,31],[270,38,321,34],[270,42,321,38],[270,43,321,39,"config"],[270,49,321,45],[270,50,321,46,"maxUserActions"],[270,64,321,60],[270,66,321,62],[271,10,322,6],[271,14,322,10],[271,15,322,11,"userActions"],[271,26,322,22],[271,29,322,25],[271,33,322,29],[271,34,322,30,"userActions"],[271,45,322,41],[271,46,322,42,"slice"],[271,51,322,47],[271,52,322,48],[271,53,322,49],[271,57,322,53],[271,58,322,54,"config"],[271,64,322,60],[271,65,322,61,"maxUserActions"],[271,79,322,75],[271,80,322,76],[272,8,323,4],[274,8,325,4],[275,8,326,4],[275,12,326,8],[275,13,326,9,"addBreadcrumb"],[275,26,326,22],[275,27,326,23],[276,10,327,6,"category"],[276,18,327,14],[276,20,327,16],[276,33,327,29],[277,10,328,6,"message"],[277,17,328,13],[277,19,328,15],[277,22,328,18,"action"],[277,28,328,24],[277,29,328,25,"type"],[277,33,328,29],[277,38,328,34,"action"],[277,44,328,40],[277,45,328,41,"target"],[277,51,328,47],[277,53,328,49],[278,10,329,6,"level"],[278,15,329,11],[278,17,329,13],[278,23,329,19],[279,10,330,6,"data"],[279,14,330,10],[279,16,330,12,"action"],[279,22,330,18],[279,23,330,19,"data"],[280,8,331,4],[280,9,331,5],[280,10,331,6],[281,6,332,2],[283,6,334,2],[284,0,335,0],[285,0,336,0],[286,4,334,2],[287,6,334,2,"key"],[287,9,334,2],[288,6,334,2,"value"],[288,11,334,2],[288,13,337,2],[288,22,337,9,"reportError"],[288,33,337,20,"reportError"],[288,34,338,4,"error"],[288,39,338,16],[288,41,339,4,"context"],[288,48,339,33],[288,50,341,10],[289,8,341,10],[289,12,340,4,"severity"],[289,20,340,37],[289,23,340,37,"arguments"],[289,32,340,37],[289,33,340,37,"length"],[289,39,340,37],[289,47,340,37,"arguments"],[289,56,340,37],[289,64,340,37,"undefined"],[289,73,340,37],[289,76,340,37,"arguments"],[289,85,340,37],[289,91,340,40],[289,99,340,48],[290,8,342,4],[290,12,342,8],[290,13,342,9],[290,17,342,13],[290,18,342,14,"shouldReportError"],[290,35,342,31],[290,36,342,32],[290,37,342,33],[290,39,342,35],[291,8,344,4],[291,12,344,8],[291,13,344,9,"createAndQueueReport"],[291,33,344,29],[291,34,344,30],[292,10,345,6,"name"],[292,14,345,10],[292,16,345,12,"error"],[292,21,345,17],[292,22,345,18,"name"],[292,26,345,22],[293,10,346,6,"message"],[293,17,346,13],[293,19,346,15,"error"],[293,24,346,20],[293,25,346,21,"message"],[293,32,346,28],[294,10,347,6,"stack"],[294,15,347,11],[294,17,347,13,"error"],[294,22,347,18],[294,23,347,19,"stack"],[294,28,347,24],[295,10,348,6,"type"],[295,14,348,10],[295,16,348,12],[295,24,348,20],[296,10,349,6,"fatal"],[296,15,349,11],[296,17,349,13],[297,8,350,4],[297,9,350,5],[297,11,350,7,"context"],[297,18,350,14],[297,20,350,16,"severity"],[297,28,350,24],[297,29,350,25],[298,6,351,2],[300,6,353,2],[301,0,354,0],[302,0,355,0],[303,4,353,2],[304,6,353,2,"key"],[304,9,353,2],[305,6,353,2,"value"],[305,11,353,2],[305,13,356,2],[305,22,356,9,"reportNetworkError"],[305,40,356,27,"reportNetworkError"],[305,41,357,4,"url"],[305,44,357,15],[305,46,358,4,"method"],[305,52,358,18],[305,54,359,4,"statusCode"],[305,64,359,22],[305,66,360,4,"error"],[305,71,360,16],[305,73,361,4,"context"],[305,80,361,33],[305,82,362,10],[306,8,363,4],[306,12,363,8],[306,13,363,9],[306,17,363,13],[306,18,363,14,"shouldReportError"],[306,35,363,31],[306,36,363,32],[306,37,363,33],[306,39,363,35],[307,8,365,4],[307,12,365,8],[307,13,365,9,"createAndQueueReport"],[307,33,365,29],[307,34,365,30],[308,10,366,6,"name"],[308,14,366,10],[308,16,366,12],[308,30,366,26],[309,10,367,6,"message"],[309,17,367,13],[309,19,367,15],[309,22,367,18,"method"],[309,28,367,24],[309,32,367,28,"url"],[309,35,367,31],[309,41,367,37,"statusCode"],[309,51,367,47],[309,56,367,52,"error"],[309,61,367,57],[309,62,367,58,"message"],[309,69,367,65],[309,71,367,67],[310,10,368,6,"stack"],[310,15,368,11],[310,17,368,13,"error"],[310,22,368,18],[310,23,368,19,"stack"],[310,28,368,24],[311,10,369,6,"type"],[311,14,369,10],[311,16,369,12],[311,25,369,21],[312,10,370,6,"fatal"],[312,15,370,11],[312,17,370,13],[313,8,371,4],[313,9,371,5],[313,11,371,7],[314,10,372,6,"url"],[314,13,372,9],[315,10,373,6,"method"],[315,16,373,12],[316,10,374,6,"statusCode"],[316,20,374,16],[317,10,375,6],[317,13,375,9,"context"],[318,8,376,4],[318,9,376,5],[318,11,376,7],[318,19,376,15],[318,20,376,16],[319,6,377,2],[321,6,379,2],[322,0,380,0],[323,0,381,0],[324,4,379,2],[325,6,379,2,"key"],[325,9,379,2],[326,6,379,2,"value"],[326,11,379,2],[326,13,382,2],[326,22,382,9,"reportFatalError"],[326,38,382,25,"reportFatalError"],[326,39,382,26,"error"],[326,44,382,38],[326,46,382,40,"context"],[326,53,382,69],[326,55,382,77],[327,8,383,4],[327,12,383,8],[327,13,383,9,"createAndQueueReport"],[327,33,383,29],[327,34,383,30],[328,10,384,6,"name"],[328,14,384,10],[328,16,384,12,"error"],[328,21,384,17],[328,22,384,18,"name"],[328,26,384,22],[329,10,385,6,"message"],[329,17,385,13],[329,19,385,15,"error"],[329,24,385,20],[329,25,385,21,"message"],[329,32,385,28],[330,10,386,6,"stack"],[330,15,386,11],[330,17,386,13,"error"],[330,22,386,18],[330,23,386,19,"stack"],[330,28,386,24],[331,10,387,6,"type"],[331,14,387,10],[331,16,387,12],[331,28,387,24],[332,10,388,6,"fatal"],[332,15,388,11],[332,17,388,13],[333,8,389,4],[333,9,389,5],[333,11,389,7,"context"],[333,18,389,14],[333,20,389,16],[333,30,389,26],[333,31,389,27],[335,8,391,4],[336,8,392,4],[336,12,392,8],[336,13,392,9,"flushReports"],[336,25,392,21],[336,26,392,22],[336,27,392,23],[337,6,393,2],[339,6,395,2],[340,0,396,0],[341,0,397,0],[342,4,395,2],[343,6,395,2,"key"],[343,9,395,2],[344,6,395,2,"value"],[344,11,395,2],[344,13,398,2],[344,22,398,9,"setCurrentScreen"],[344,38,398,25,"setCurrentScreen"],[344,39,398,26,"screenName"],[344,49,398,44],[344,51,398,46,"params"],[344,57,398,74],[344,59,398,82],[345,8,399,4],[345,12,399,8],[345,13,399,9,"addBreadcrumb"],[345,26,399,22],[345,27,399,23],[346,10,400,6,"category"],[346,18,400,14],[346,20,400,16],[346,32,400,28],[347,10,401,6,"message"],[347,17,401,13],[347,19,401,15],[347,35,401,31,"screenName"],[347,45,401,41],[347,47,401,43],[348,10,402,6,"level"],[348,15,402,11],[348,17,402,13],[348,23,402,19],[349,10,403,6,"data"],[349,14,403,10],[349,16,403,12],[350,12,403,14,"screenName"],[350,22,403,24],[351,12,403,26,"params"],[352,10,403,33],[353,8,404,4],[353,9,404,5],[353,10,404,6],[355,8,406,4],[356,8,407,4],[356,12,407,8],[356,13,407,9,"config"],[356,19,407,15],[356,20,407,16,"userContext"],[356,31,407,27],[356,34,407,30],[357,10,408,6],[357,13,408,9],[357,17,408,13],[357,18,408,14,"config"],[357,24,408,20],[357,25,408,21,"userContext"],[357,36,408,32],[358,10,409,6,"current_screen"],[358,24,409,20],[358,26,409,22,"screenName"],[358,36,409,32],[359,10,410,6,"screen_params"],[359,23,410,19],[359,25,410,21,"params"],[360,8,411,4],[360,9,411,5],[361,6,412,2],[363,6,414,2],[364,0,415,0],[365,0,416,0],[366,4,414,2],[367,6,414,2,"key"],[367,9,414,2],[368,6,414,2,"value"],[368,11,414,2],[368,13,417,2],[368,22,417,9,"addContext"],[368,32,417,19,"addContext"],[368,33,417,20,"key"],[368,36,417,31],[368,38,417,33,"value"],[368,43,417,43],[368,45,417,51],[369,8,418,4],[369,12,418,8],[369,13,418,9,"config"],[369,19,418,15],[369,20,418,16,"userContext"],[369,31,418,27],[369,34,418,30],[370,10,419,6],[370,13,419,9],[370,17,419,13],[370,18,419,14,"config"],[370,24,419,20],[370,25,419,21,"userContext"],[370,36,419,32],[371,10,420,6],[371,11,420,7,"key"],[371,14,420,10],[371,17,420,13,"value"],[372,8,421,4],[372,9,421,5],[373,6,422,2],[375,6,424,2],[376,0,425,0],[377,0,426,0],[378,4,424,2],[379,6,424,2,"key"],[379,9,424,2],[380,6,424,2,"value"],[380,11,424,2],[381,8,424,2],[381,12,424,2,"_createAndQueueReport"],[381,33,424,2],[381,40,424,2,"_asyncToGenerator2"],[381,58,424,2],[381,59,424,2,"default"],[381,66,424,2],[381,68,427,2],[381,79,428,4,"error"],[381,84,428,31],[381,86,429,4,"customContext"],[381,99,429,39],[381,101,431,19],[382,10,431,19],[382,14,430,4,"severity"],[382,22,430,37],[382,25,430,37,"arguments"],[382,34,430,37],[382,35,430,37,"length"],[382,41,430,37],[382,49,430,37,"arguments"],[382,58,430,37],[382,66,430,37,"undefined"],[382,75,430,37],[382,78,430,37,"arguments"],[382,87,430,37],[382,93,430,40],[382,101,430,48],[383,10,432,4],[383,14,432,8],[384,12,433,6],[384,16,433,12,"report"],[384,22,433,31],[384,25,433,34],[385,14,434,8,"id"],[385,16,434,10],[385,18,434,12],[385,22,434,16],[385,23,434,17,"generateReportId"],[385,39,434,33],[385,40,434,34],[385,41,434,35],[386,14,435,8,"timestamp"],[386,23,435,17],[386,25,435,19],[386,29,435,23,"Date"],[386,33,435,27],[386,34,435,28],[386,35,435,29],[386,36,435,30,"toISOString"],[386,47,435,41],[386,48,435,42],[386,49,435,43],[387,14,436,8,"error"],[387,19,436,13],[388,14,437,8,"context"],[388,21,437,15],[388,29,437,23],[388,33,437,27],[388,34,437,28,"buildErrorContext"],[388,51,437,45],[388,52,437,46,"customContext"],[388,65,437,59],[388,66,437,60],[389,14,438,8,"breadcrumbs"],[389,25,438,19],[389,27,438,21],[389,28,438,22],[389,31,438,25],[389,35,438,29],[389,36,438,30,"breadcrumbs"],[389,47,438,41],[389,48,438,42],[390,14,439,8,"user_actions"],[390,26,439,20],[390,28,439,22],[390,29,439,23],[390,32,439,26],[390,36,439,30],[390,37,439,31,"userActions"],[390,48,439,42],[390,49,439,43],[391,14,440,8,"performance_metrics"],[391,33,440,27],[391,41,440,35],[391,45,440,39],[391,46,440,40,"getPerformanceMetrics"],[391,67,440,61],[391,68,440,62],[391,69,440,63],[392,14,441,8,"severity"],[392,22,441,16],[393,14,442,8,"fingerprint"],[393,25,442,19],[393,27,442,21],[393,31,442,25],[393,32,442,26,"generateFingerprint"],[393,51,442,45],[393,52,442,46,"error"],[393,57,442,51],[393,58,442,52],[394,14,443,8,"tags"],[394,18,443,12],[394,20,443,14],[395,16,444,10,"environment"],[395,27,444,21],[395,29,444,23],[395,33,444,27],[395,34,444,28,"config"],[395,40,444,34],[395,41,444,35,"environment"],[395,52,444,46],[396,16,445,10,"platform"],[396,24,445,18],[396,35,445,31],[397,16,446,10,"version"],[397,23,446,17],[397,25,446,19],[397,32,446,26],[397,33,446,28],[398,14,447,8],[399,12,448,6],[399,13,448,7],[401,12,450,6],[402,12,451,6],[402,16,451,12,"finalReport"],[402,27,451,23],[402,30,451,26],[402,34,451,30],[402,35,451,31,"config"],[402,41,451,37],[402,42,451,38,"beforeSend"],[402,52,451,48],[402,55,451,51],[402,59,451,55],[402,60,451,56,"config"],[402,66,451,62],[402,67,451,63,"beforeSend"],[402,77,451,73],[402,78,451,74,"report"],[402,84,451,80],[402,85,451,81],[402,88,451,84,"report"],[402,94,451,90],[403,12,452,6],[403,16,452,10],[403,17,452,11,"finalReport"],[403,28,452,22],[403,30,452,24],[404,12,454,6],[404,16,454,10],[404,17,454,11,"reportQueue"],[404,28,454,22],[404,29,454,23,"push"],[404,33,454,27],[404,34,454,28,"finalReport"],[404,45,454,39],[404,46,454,40],[405,12,455,6,"EventLogger"],[405,36,455,17],[405,37,455,18,"error"],[405,42,455,23],[405,43,455,24],[405,58,455,39],[405,60,455,41],[405,81,455,62],[405,83,455,64,"error"],[405,88,455,69],[405,90,455,78],[406,14,456,8,"report_id"],[406,23,456,17],[406,25,456,19,"report"],[406,31,456,25],[406,32,456,26,"id"],[406,34,456,28],[407,14,457,8,"severity"],[408,12,458,6],[408,13,458,7],[408,14,458,8],[410,12,460,6],[411,12,461,6],[411,16,461,10],[411,20,461,14],[411,21,461,15,"reportQueue"],[411,32,461,26],[411,33,461,27,"length"],[411,39,461,33],[411,43,461,37],[411,45,461,39],[411,49,461,43,"severity"],[411,57,461,51],[411,62,461,56],[411,72,461,66],[411,74,461,68],[412,14,462,8],[412,18,462,12],[412,19,462,13,"flushReports"],[412,31,462,25],[412,32,462,26],[412,33,462,27],[413,12,463,6],[414,10,465,4],[414,11,465,5],[414,12,465,6],[414,19,465,13,"reportError"],[414,30,465,24],[414,32,465,26],[415,12,466,6,"EventLogger"],[415,36,466,17],[415,37,466,18,"error"],[415,42,466,23],[415,43,466,24],[415,58,466,39],[415,60,466,41],[415,91,466,72],[415,93,466,74,"reportError"],[415,104,466,94],[415,105,466,95],[416,10,467,4],[417,8,468,2],[417,9,468,3],[418,8,468,3],[418,17,427,16,"createAndQueueReport"],[418,37,427,36,"createAndQueueReport"],[418,38,427,36,"_x"],[418,40,427,36],[418,42,427,36,"_x2"],[418,45,427,36],[419,10,427,36],[419,17,427,36,"_createAndQueueReport"],[419,38,427,36],[419,39,427,36,"apply"],[419,44,427,36],[419,51,427,36,"arguments"],[419,60,427,36],[420,8,427,36],[421,8,427,36],[421,15,427,16,"createAndQueueReport"],[421,35,427,36],[422,6,427,36],[423,6,470,2],[424,0,471,0],[425,0,472,0],[426,6,470,2],[427,4,470,2],[428,6,470,2,"key"],[428,9,470,2],[429,6,470,2,"value"],[429,11,470,2],[430,8,470,2],[430,12,470,2,"_buildErrorContext"],[430,30,470,2],[430,37,470,2,"_asyncToGenerator2"],[430,55,470,2],[430,56,470,2,"default"],[430,63,470,2],[430,65,473,2],[430,76,473,34,"customContext"],[430,89,473,69],[430,91,473,104],[431,10,474,4],[431,14,474,10,"context"],[431,21,474,41],[431,24,474,44],[432,12,475,6,"user_id"],[432,19,475,13],[432,21,475,15],[432,25,475,19],[432,26,475,20,"config"],[432,32,475,26],[432,33,475,27,"userId"],[432,39,475,33],[433,12,476,6,"session_id"],[433,22,476,16],[433,24,476,18],[433,28,476,22],[433,29,476,23,"sessionId"],[433,38,476,32],[434,12,477,6,"app_version"],[434,23,477,17],[434,25,477,19],[434,32,477,26],[435,12,477,28],[436,12,478,6,"build_number"],[436,24,478,18],[436,26,478,46],[436,38,478,58],[437,12,479,6,"platform"],[437,20,479,14],[437,31,479,27],[438,12,480,6,"os_version"],[438,22,480,16],[438,24,480,18,"Platform"],[438,45,480,26],[438,46,480,27,"Version"],[438,53,480,34],[438,54,480,35,"toString"],[438,62,480,43],[438,63,480,44],[438,64,480,45],[439,12,481,6,"screen_name"],[439,23,481,17],[439,25,481,19],[439,29,481,23],[439,30,481,24,"config"],[439,36,481,30],[439,37,481,31,"userContext"],[439,48,481,42],[439,50,481,44,"current_screen"],[439,64,481,58],[440,12,482,6,"custom_context"],[440,26,482,20],[440,28,482,22],[441,14,483,8],[441,17,483,11],[441,21,483,15],[441,22,483,16,"config"],[441,28,483,22],[441,29,483,23,"userContext"],[441,40,483,34],[442,14,484,8],[442,17,484,11,"customContext"],[443,12,485,6],[444,10,486,4],[444,11,486,5],[446,10,488,4],[447,10,489,4],[447,14,489,8],[448,12,490,6],[449,12,491,6],[450,12,492,6],[451,12,493,6],[452,10,493,6],[452,11,494,5],[452,12,494,6],[452,19,494,13,"error"],[452,24,494,18],[452,26,494,20],[453,12,495,6],[454,10,495,6],[455,10,498,4],[455,17,498,11,"context"],[455,24,498,18],[456,8,499,2],[456,9,499,3],[457,8,499,3],[457,17,473,16,"buildErrorContext"],[457,34,473,33,"buildErrorContext"],[457,35,473,33,"_x3"],[457,38,473,33],[458,10,473,33],[458,17,473,33,"_buildErrorContext"],[458,35,473,33],[458,36,473,33,"apply"],[458,41,473,33],[458,48,473,33,"arguments"],[458,57,473,33],[459,8,473,33],[460,8,473,33],[460,15,473,16,"buildErrorContext"],[460,32,473,33],[461,6,473,33],[462,6,501,2],[463,0,502,0],[464,0,503,0],[465,6,501,2],[466,4,501,2],[467,6,501,2,"key"],[467,9,501,2],[468,6,501,2,"value"],[468,11,501,2],[469,8,501,2],[469,12,501,2,"_getPerformanceMetrics"],[469,34,501,2],[469,41,501,2,"_asyncToGenerator2"],[469,59,501,2],[469,60,501,2,"default"],[469,67,501,2],[469,69,504,2],[469,82,504,85],[470,10,505,4],[470,14,505,8],[471,12,506,6],[472,12,507,6],[472,16,507,12,"memoryPressure"],[472,30,507,26],[472,33,507,29],[472,38,507,34],[472,39,507,35],[472,40,507,36],[474,12,509,6],[474,19,509,13],[475,14,510,8,"memory_pressure"],[475,29,510,23],[475,31,510,25,"memoryPressure"],[476,14,511,8],[477,14,512,8],[478,12,513,6],[478,13,513,7],[479,10,514,4],[479,11,514,5],[479,12,514,6],[479,19,514,13,"error"],[479,24,514,18],[479,26,514,20],[480,12,515,6],[480,19,515,13,"undefined"],[480,28,515,22],[481,10,516,4],[482,8,517,2],[482,9,517,3],[483,8,517,3],[483,17,504,16,"getPerformanceMetrics"],[483,38,504,37,"getPerformanceMetrics"],[483,39,504,37],[484,10,504,37],[484,17,504,37,"_getPerformanceMetrics"],[484,39,504,37],[484,40,504,37,"apply"],[484,45,504,37],[484,52,504,37,"arguments"],[484,61,504,37],[485,8,504,37],[486,8,504,37],[486,15,504,16,"getPerformanceMetrics"],[486,36,504,37],[487,6,504,37],[488,6,519,2],[489,0,520,0],[490,0,521,0],[491,6,519,2],[492,4,519,2],[493,6,519,2,"key"],[493,9,519,2],[494,6,519,2,"value"],[494,11,519,2],[494,13,522,2],[494,22,522,10,"generateFingerprint"],[494,41,522,29,"generateFingerprint"],[494,42,522,30,"error"],[494,47,522,57],[494,49,522,67],[495,8,523,4],[496,8,524,4],[496,12,524,10,"stackLines"],[496,22,524,20],[496,25,524,23,"error"],[496,30,524,28],[496,31,524,29,"stack"],[496,36,524,34],[496,38,524,36,"split"],[496,43,524,41],[496,44,524,42],[496,48,524,46],[496,49,524,47],[496,50,524,48,"slice"],[496,55,524,53],[496,56,524,54],[496,57,524,55],[496,59,524,57],[496,60,524,58],[496,61,524,59],[496,65,524,63],[496,67,524,65],[497,8,525,4],[497,12,525,10,"fingerprintData"],[497,27,525,25],[497,30,525,28],[498,10,526,6,"name"],[498,14,526,10],[498,16,526,12,"error"],[498,21,526,17],[498,22,526,18,"name"],[498,26,526,22],[499,10,527,6,"message"],[499,17,527,13],[499,19,527,15,"error"],[499,24,527,20],[499,25,527,21,"message"],[499,32,527,28],[499,33,527,29,"slice"],[499,38,527,34],[499,39,527,35],[499,40,527,36],[499,42,527,38],[499,45,527,41],[499,46,527,42],[500,10,528,6,"stack"],[500,15,528,11],[500,17,528,13,"stackLines"],[500,27,528,23],[500,28,528,24,"join"],[500,32,528,28],[500,33,528,29],[500,37,528,33],[501,8,529,4],[501,9,529,5],[503,8,531,4],[504,8,532,4],[504,15,532,11,"btoa"],[504,19,532,15],[504,20,532,16,"JSON"],[504,24,532,20],[504,25,532,21,"stringify"],[504,34,532,30],[504,35,532,31,"fingerprintData"],[504,50,532,46],[504,51,532,47],[504,52,532,48],[504,53,532,49,"slice"],[504,58,532,54],[504,59,532,55],[504,60,532,56],[504,62,532,58],[504,64,532,60],[504,65,532,61],[505,6,533,2],[507,6,535,2],[508,0,536,0],[509,0,537,0],[510,4,535,2],[511,6,535,2,"key"],[511,9,535,2],[512,6,535,2,"value"],[512,11,535,2],[512,13,538,2],[512,22,538,10,"setupGlobalErrorHandlers"],[512,46,538,34,"setupGlobalErrorHandlers"],[512,47,538,34],[512,49,538,43],[513,8,539,4],[514,8,540,4],[514,12,540,8],[514,19,540,15,"ErrorUtils"],[514,29,540,25],[514,34,540,30],[514,45,540,41],[514,47,540,43],[515,10,541,6],[515,14,541,12,"originalHandler"],[515,29,541,27],[515,32,541,30,"ErrorUtils"],[515,42,541,40],[515,43,541,41,"getGlobalHandler"],[515,59,541,57],[515,60,541,58],[515,61,541,59],[516,10,542,6,"ErrorUtils"],[516,20,542,16],[516,21,542,17,"setGlobalHandler"],[516,37,542,33],[516,38,542,34],[516,39,542,35,"error"],[516,44,542,47],[516,46,542,49,"isFatal"],[516,53,542,65],[516,58,542,70],[517,12,543,8],[517,16,543,12],[517,17,543,13,"createAndQueueReport"],[517,37,543,33],[517,38,543,34],[518,14,544,10,"name"],[518,18,544,14],[518,20,544,16,"error"],[518,25,544,21],[518,26,544,22,"name"],[518,30,544,26],[519,14,545,10,"message"],[519,21,545,17],[519,23,545,19,"error"],[519,28,545,24],[519,29,545,25,"message"],[519,36,545,32],[520,14,546,10,"stack"],[520,19,546,15],[520,21,546,17,"error"],[520,26,546,22],[520,27,546,23,"stack"],[520,32,546,28],[521,14,547,10,"type"],[521,18,547,14],[521,20,547,16],[521,32,547,28],[522,14,548,10,"fatal"],[522,19,548,15],[522,21,548,17,"isFatal"],[523,12,549,8],[523,13,549,9],[523,15,549,11,"undefined"],[523,24,549,20],[523,26,549,22,"isFatal"],[523,33,549,29],[523,36,549,32],[523,46,549,42],[523,49,549,45],[523,55,549,51],[523,56,549,52],[525,12,551,8],[526,12,552,8],[526,16,552,12,"originalHandler"],[526,31,552,27],[526,33,552,29],[527,14,553,10,"originalHandler"],[527,29,553,25],[527,30,553,26,"error"],[527,35,553,31],[527,37,553,33,"isFatal"],[527,44,553,40],[527,45,553,41],[528,12,554,8],[529,10,555,6],[529,11,555,7],[529,12,555,8],[530,8,556,4],[532,8,558,4],[533,8,559,4],[533,12,559,8],[533,16,559,12],[533,17,559,13,"config"],[533,23,559,19],[533,24,559,20,"captureUnhandledPromiseRejections"],[533,57,559,53],[533,61,559,57],[533,68,559,64,"global"],[533,74,559,70],[533,79,559,75],[533,90,559,86],[533,92,559,88],[534,10,560,6],[534,14,560,12,"originalHandler"],[534,30,560,27],[534,33,560,30,"global"],[534,39,560,36],[534,40,560,37,"onunhandledrejection"],[534,60,560,57],[535,10,561,6,"global"],[535,16,561,12],[535,17,561,13,"onunhandledrejection"],[535,37,561,33],[535,40,561,37,"event"],[535,45,561,47],[535,49,561,52],[536,12,562,8],[536,16,562,12],[536,17,562,13,"createAndQueueReport"],[536,37,562,33],[536,38,562,34],[537,14,563,10,"name"],[537,18,563,14],[537,20,563,16],[537,47,563,43],[538,14,564,10,"message"],[538,21,564,17],[538,23,564,19,"event"],[538,28,564,24],[538,29,564,25,"reason"],[538,35,564,31],[538,37,564,33,"message"],[538,44,564,40],[538,48,564,44],[538,77,564,73],[539,14,565,10,"stack"],[539,19,565,15],[539,21,565,17,"event"],[539,26,565,22],[539,27,565,23,"reason"],[539,33,565,29],[539,35,565,31,"stack"],[539,40,565,36],[540,14,566,10,"type"],[540,18,566,14],[540,20,566,16],[540,41,566,37],[541,14,567,10,"fatal"],[541,19,567,15],[541,21,567,17],[542,12,568,8],[542,13,568,9],[542,15,568,11],[543,14,569,10,"promise"],[543,21,569,17],[543,23,569,19,"event"],[543,28,569,24],[543,29,569,25,"promise"],[543,36,569,32],[543,38,569,34,"toString"],[543,46,569,42],[543,47,569,43],[544,12,570,8],[544,13,570,9],[544,15,570,11],[544,21,570,17],[544,22,570,18],[545,12,572,8],[545,16,572,12,"originalHandler"],[545,32,572,27],[545,34,572,29],[546,14,573,10,"originalHandler"],[546,30,573,25],[546,31,573,26,"event"],[546,36,573,31],[546,37,573,32],[547,12,574,8],[548,10,575,6],[548,11,575,7],[549,8,576,4],[550,6,577,2],[552,6,579,2],[553,0,580,0],[554,0,581,0],[555,4,579,2],[556,6,579,2,"key"],[556,9,579,2],[557,6,579,2,"value"],[557,11,579,2],[557,13,582,2],[557,22,582,10,"setupConsoleInterception"],[557,46,582,34,"setupConsoleInterception"],[557,47,582,34],[557,49,582,43],[558,8,583,4],[558,12,583,8],[558,13,583,9],[558,17,583,13],[558,18,583,14,"config"],[558,24,583,20],[558,25,583,21,"captureConsoleErrors"],[558,45,583,41],[558,47,583,43],[560,8,585,4],[561,8,586,4],[561,12,586,8],[561,13,586,9,"originalConsoleError"],[561,33,586,29],[561,50,586,45],[562,8,587,4,"console"],[562,15,587,11],[562,16,587,12,"error"],[562,21,587,17],[562,38,594,5],[564,8,596,4],[565,8,597,4],[565,12,597,8],[565,13,597,9,"originalConsoleWarn"],[565,32,597,28],[565,49,597,43],[566,8,598,4,"console"],[566,15,598,11],[566,16,598,12,"warn"],[566,20,598,16],[566,37,605,5],[567,6,606,2],[569,6,608,2],[570,0,609,0],[571,0,610,0],[572,4,608,2],[573,6,608,2,"key"],[573,9,608,2],[574,6,608,2,"value"],[574,11,608,2],[574,13,611,2],[574,22,611,10,"setupPeriodicFlush"],[574,40,611,28,"setupPeriodicFlush"],[574,41,611,28],[574,43,611,37],[575,8,612,4],[576,8,613,4,"setTimeout"],[576,18,613,14],[576,19,613,15],[576,25,613,21],[577,10,614,6,"setInterval"],[577,21,614,17],[577,22,614,18],[577,28,614,24],[578,12,615,8],[578,16,615,12],[578,20,615,16],[578,21,615,17,"isInitialized"],[578,34,615,30],[578,38,615,34],[578,42,615,38],[578,43,615,39,"config"],[578,49,615,45],[578,50,615,46,"enabled"],[578,57,615,53],[578,61,615,57],[578,65,615,61],[578,66,615,62,"reportQueue"],[578,77,615,73],[578,78,615,74,"length"],[578,84,615,80],[578,87,615,83],[578,88,615,84],[578,90,615,86],[579,14,616,10,"EventLogger"],[579,38,616,21],[579,39,616,22,"debug"],[579,44,616,27],[579,45,616,28],[579,60,616,43],[579,62,616,45],[579,88,616,71],[579,90,616,73],[580,16,616,75,"queueLength"],[580,27,616,86],[580,29,616,88],[580,33,616,92],[580,34,616,93,"reportQueue"],[580,45,616,104],[580,46,616,105,"length"],[581,14,616,112],[581,15,616,113],[581,16,616,114],[582,14,617,10],[582,18,617,14],[582,19,617,15,"flushReports"],[582,31,617,27],[582,32,617,28],[582,33,617,29],[582,34,617,30,"catch"],[582,39,617,35],[582,40,617,36,"error"],[582,45,617,41],[582,49,617,45],[583,16,618,12,"EventLogger"],[583,40,618,23],[583,41,618,24,"error"],[583,46,618,29],[583,47,618,30],[583,62,618,45],[583,64,618,47],[583,87,618,70],[583,89,618,72,"error"],[583,94,618,86],[583,95,618,87],[584,14,619,10],[584,15,619,11],[584,16,619,12],[585,12,620,8],[586,10,621,6],[586,11,621,7],[586,13,621,9],[586,18,621,14],[586,19,621,15],[586,20,621,16],[586,21,621,17],[587,8,622,4],[587,9,622,5],[587,11,622,7],[587,15,622,11],[587,16,622,12],[587,17,622,13],[587,18,622,14],[588,6,623,2],[590,6,625,2],[591,0,626,0],[592,0,627,0],[593,4,625,2],[594,6,625,2,"key"],[594,9,625,2],[595,6,625,2,"value"],[595,11,625,2],[596,8,625,2],[596,12,625,2,"_flush"],[596,18,625,2],[596,25,625,2,"_asyncToGenerator2"],[596,43,625,2],[596,44,625,2,"default"],[596,51,625,2],[596,53,628,2],[596,66,628,38],[597,10,629,4],[597,14,629,8],[597,15,629,9],[597,19,629,13],[597,20,629,14,"isInitialized"],[597,33,629,27],[597,35,629,29],[598,12,630,6,"EventLogger"],[598,36,630,17],[598,37,630,18,"warn"],[598,41,630,22],[598,42,630,23],[598,57,630,38],[598,59,630,40],[598,95,630,76],[598,96,630,77],[599,12,631,6],[600,10,632,4],[601,10,633,4],[601,17,633,11],[601,21,633,15],[601,22,633,16,"flushReports"],[601,34,633,28],[601,35,633,29],[601,36,633,30],[602,8,634,2],[602,9,634,3],[603,8,634,3],[603,17,628,15,"flush"],[603,22,628,20,"flush"],[603,23,628,20],[604,10,628,20],[604,17,628,20,"_flush"],[604,23,628,20],[604,24,628,20,"apply"],[604,29,628,20],[604,36,628,20,"arguments"],[604,45,628,20],[605,8,628,20],[606,8,628,20],[606,15,628,15,"flush"],[606,20,628,20],[607,6,628,20],[608,6,636,2],[609,0,637,0],[610,0,638,0],[611,6,636,2],[612,4,636,2],[613,6,636,2,"key"],[613,9,636,2],[614,6,636,2,"value"],[614,11,636,2],[615,8,636,2],[615,12,636,2,"_flushReports"],[615,25,636,2],[615,32,636,2,"_asyncToGenerator2"],[615,50,636,2],[615,51,636,2,"default"],[615,58,636,2],[615,60,639,2],[615,73,639,46],[616,10,640,4],[616,14,640,8],[616,15,640,9],[616,19,640,13],[616,20,640,14,"config"],[616,26,640,20],[616,27,640,21,"enabled"],[616,34,640,28],[616,38,640,32],[616,39,640,33],[616,43,640,37],[616,44,640,38,"isInitialized"],[616,57,640,51],[616,61,640,55],[616,65,640,59],[616,66,640,60,"isFlushingReports"],[616,83,640,77],[616,87,640,81],[616,91,640,85],[616,92,640,86,"reportQueue"],[616,103,640,97],[616,104,640,98,"length"],[616,110,640,104],[616,115,640,109],[616,116,640,110],[616,118,640,112],[617,12,641,6,"EventLogger"],[617,36,641,17],[617,37,641,18,"debug"],[617,42,641,23],[617,43,641,24],[617,58,641,39],[617,60,641,41],[617,76,641,57],[617,78,641,59],[618,14,642,8,"enabled"],[618,21,642,15],[618,23,642,17],[618,27,642,21],[618,28,642,22,"config"],[618,34,642,28],[618,35,642,29,"enabled"],[618,42,642,36],[619,14,643,8,"initialized"],[619,25,643,19],[619,27,643,21],[619,31,643,25],[619,32,643,26,"isInitialized"],[619,45,643,39],[620,14,644,8,"flushing"],[620,22,644,16],[620,24,644,18],[620,28,644,22],[620,29,644,23,"isFlushingReports"],[620,46,644,40],[621,14,645,8,"queueLength"],[621,25,645,19],[621,27,645,21],[621,31,645,25],[621,32,645,26,"reportQueue"],[621,43,645,37],[621,44,645,38,"length"],[622,12,646,6],[622,13,646,7],[622,14,646,8],[623,12,647,6],[624,10,648,4],[626,10,650,4],[627,10,651,4],[627,14,651,8],[627,15,651,9],[627,19,651,13],[627,20,651,14,"databaseAvailable"],[627,37,651,31],[627,39,651,33],[628,12,652,6],[628,16,652,12,"reports"],[628,24,652,19],[628,27,652,22],[628,28,652,23],[628,31,652,26],[628,35,652,30],[628,36,652,31,"reportQueue"],[628,47,652,42],[628,48,652,43],[629,12,653,6],[629,16,653,10],[629,17,653,11,"reportQueue"],[629,28,653,22],[629,31,653,25],[629,33,653,27],[630,12,654,6],[630,18,654,12],[630,22,654,16],[630,23,654,17,"storeOfflineReports"],[630,42,654,36],[630,43,654,37,"reports"],[630,51,654,44],[630,52,654,45],[631,12,655,6,"EventLogger"],[631,36,655,17],[631,37,655,18,"debug"],[631,42,655,23],[631,43,655,24],[631,58,655,39],[631,60,655,41],[631,109,655,90],[631,111,655,92],[632,14,655,94,"count"],[632,19,655,99],[632,21,655,101,"reports"],[632,29,655,108],[632,30,655,109,"length"],[633,12,655,116],[633,13,655,117],[633,14,655,118],[634,12,656,6],[635,10,657,4],[636,10,659,4],[636,14,659,8],[636,15,659,9,"isFlushingReports"],[636,32,659,26],[636,35,659,29],[636,39,659,33],[637,10,660,4],[637,14,660,10,"reports"],[637,21,660,17],[637,24,660,20],[637,25,660,21],[637,28,660,24],[637,32,660,28],[637,33,660,29,"reportQueue"],[637,44,660,40],[637,45,660,41],[638,10,661,4],[638,14,661,8],[638,15,661,9,"reportQueue"],[638,26,661,20],[638,29,661,23],[638,31,661,25],[639,10,663,4],[639,14,663,8],[640,12,664,6],[641,12,665,6],[641,18,665,12],[641,22,665,16],[641,23,665,17,"sendReports"],[641,34,665,28],[641,35,665,29,"reports"],[641,42,665,36],[641,43,665,37],[642,12,666,6,"EventLogger"],[642,36,666,17],[642,37,666,18,"info"],[642,41,666,22],[642,42,666,23],[642,57,666,38],[642,59,666,40],[642,89,666,70],[642,91,666,72],[643,14,666,74,"count"],[643,19,666,79],[643,21,666,81,"reports"],[643,28,666,88],[643,29,666,89,"length"],[644,12,666,96],[644,13,666,97],[644,14,666,98],[645,10,668,4],[645,11,668,5],[645,12,668,6],[645,19,668,13,"error"],[645,24,668,18],[645,26,668,20],[646,12,669,6],[647,12,670,6],[647,16,670,10],[647,17,670,11,"reportQueue"],[647,28,670,22],[647,29,670,23,"unshift"],[647,36,670,30],[647,37,670,31],[647,40,670,34,"reports"],[647,47,670,41],[647,48,670,42],[648,12,671,6],[648,18,671,12],[648,22,671,16],[648,23,671,17,"storeOfflineReports"],[648,42,671,36],[648,43,671,37,"reports"],[648,50,671,44],[648,51,671,45],[650,12,673,6],[651,12,674,6],[651,16,674,12,"errorDetails"],[651,28,674,24],[651,31,674,27],[652,14,675,8,"name"],[652,18,675,12],[652,20,675,14,"error"],[652,25,675,19],[652,37,675,31,"Error"],[652,42,675,36],[652,45,675,39,"error"],[652,50,675,44],[652,51,675,45,"name"],[652,55,675,49],[652,58,675,52],[652,72,675,66],[653,14,676,8,"message"],[653,21,676,15],[653,23,676,17,"error"],[653,28,676,22],[653,40,676,34,"Error"],[653,45,676,39],[653,48,676,42,"error"],[653,53,676,47],[653,54,676,48,"message"],[653,61,676,55],[653,64,676,58,"String"],[653,70,676,64],[653,71,676,65,"error"],[653,76,676,70],[653,77,676,71],[654,14,677,8,"stack"],[654,19,677,13],[654,21,677,15,"error"],[654,26,677,20],[654,38,677,32,"Error"],[654,43,677,37],[654,46,677,40,"error"],[654,51,677,45],[654,52,677,46,"stack"],[654,57,677,51],[654,60,677,54,"undefined"],[654,69,677,63],[655,14,678,8,"reportCount"],[655,25,678,19],[655,27,678,21,"reports"],[655,34,678,28],[655,35,678,29,"length"],[655,41,678,35],[656,14,679,8,"isSupabaseError"],[656,29,679,23],[656,31,679,25,"error"],[656,36,679,30],[656,40,679,34],[656,47,679,41,"error"],[656,52,679,46],[656,57,679,51],[656,65,679,59],[656,69,679,63],[656,75,679,69],[656,79,679,73,"error"],[656,84,679,78],[657,14,680,8,"errorCode"],[657,23,680,17],[657,25,680,19,"error"],[657,30,680,24],[657,34,680,28],[657,41,680,35,"error"],[657,46,680,40],[657,51,680,45],[657,59,680,53],[657,63,680,57],[657,69,680,63],[657,73,680,67,"error"],[657,78,680,72],[657,81,680,76,"error"],[657,86,680,81],[657,87,680,90,"code"],[657,91,680,94],[657,94,680,97,"undefined"],[658,12,681,6],[658,13,681,7],[659,12,683,6,"EventLogger"],[659,36,683,17],[659,37,683,18,"error"],[659,42,683,23],[659,43,683,24],[659,58,683,39],[659,60,683,41],[659,102,683,83],[659,104,683,85,"errorDetails"],[659,116,683,104],[659,117,683,105],[660,10,684,4],[660,11,684,5],[660,20,684,14],[661,12,685,6],[661,16,685,10],[661,17,685,11,"isFlushingReports"],[661,34,685,28],[661,37,685,31],[661,42,685,36],[662,10,686,4],[663,8,687,2],[663,9,687,3],[664,8,687,3],[664,17,639,16,"flushReports"],[664,29,639,28,"flushReports"],[664,30,639,28],[665,10,639,28],[665,17,639,28,"_flushReports"],[665,30,639,28],[665,31,639,28,"apply"],[665,36,639,28],[665,43,639,28,"arguments"],[665,52,639,28],[666,8,639,28],[667,8,639,28],[667,15,639,16,"flushReports"],[667,27,639,28],[668,6,639,28],[669,6,689,2],[670,0,690,0],[671,0,691,0],[672,6,689,2],[673,4,689,2],[674,6,689,2,"key"],[674,9,689,2],[675,6,689,2,"value"],[675,11,689,2],[676,8,689,2],[676,12,689,2,"_sendReports"],[676,24,689,2],[676,31,689,2,"_asyncToGenerator2"],[676,49,689,2],[676,50,689,2,"default"],[676,57,689,2],[676,59,692,2],[676,70,692,28,"reports"],[676,77,692,50],[676,79,692,67],[677,10,693,4],[678,10,694,4],[678,14,694,8],[678,15,694,9,"supabase"],[678,31,694,17],[678,33,694,19],[679,12,695,6],[679,18,695,12],[679,22,695,16,"Error"],[679,27,695,21],[679,28,695,22],[679,61,695,55],[679,62,695,56],[680,10,696,4],[682,10,698,4],[683,10,699,4],[685,10,701,4],[685,14,701,10,"errors"],[685,20,701,25],[685,23,701,28],[685,25,701,30],[686,10,702,4],[686,14,702,10,"results"],[686,21,702,17],[686,30,702,26,"Promise"],[686,37,702,33],[686,38,702,34,"allSettled"],[686,48,702,44],[686,49,702,45,"reports"],[686,56,702,52],[686,57,702,53,"map"],[686,60,702,56],[687,12,702,56],[687,16,702,56,"_ref"],[687,20,702,56],[687,27,702,56,"_asyncToGenerator2"],[687,45,702,56],[687,46,702,56,"default"],[687,53,702,56],[687,55,702,57],[687,66,702,64,"report"],[687,72,702,70],[687,74,702,75],[688,14,703,6],[688,18,703,10],[689,16,704,8],[689,20,704,8,"_yield$supabase$from$2"],[689,42,704,8],[689,51,704,32,"supabase"],[689,67,704,40],[689,68,705,11,"from"],[689,72,705,15],[689,73,705,16],[689,88,705,31],[689,89,705,32],[689,90,706,11,"insert"],[689,96,706,17],[689,97,706,18],[690,20,707,12,"id"],[690,22,707,14],[690,24,707,16,"report"],[690,30,707,22],[690,31,707,23,"id"],[690,33,707,25],[691,20,708,12,"timestamp"],[691,29,708,21],[691,31,708,23,"report"],[691,37,708,29],[691,38,708,30,"timestamp"],[691,47,708,39],[692,20,709,12,"error_name"],[692,30,709,22],[692,32,709,24,"report"],[692,38,709,30],[692,39,709,31,"error"],[692,44,709,36],[692,45,709,37,"name"],[692,49,709,41],[693,20,710,12,"error_message"],[693,33,710,25],[693,35,710,27,"report"],[693,41,710,33],[693,42,710,34,"error"],[693,47,710,39],[693,48,710,40,"message"],[693,55,710,47],[694,20,711,12,"error_stack"],[694,31,711,23],[694,33,711,25,"report"],[694,39,711,31],[694,40,711,32,"error"],[694,45,711,37],[694,46,711,38,"stack"],[694,51,711,43],[695,20,712,12,"error_type"],[695,30,712,22],[695,32,712,24,"report"],[695,38,712,30],[695,39,712,31,"error"],[695,44,712,36],[695,45,712,37,"type"],[695,49,712,41],[696,20,713,12,"error_fatal"],[696,31,713,23],[696,33,713,25,"report"],[696,39,713,31],[696,40,713,32,"error"],[696,45,713,37],[696,46,713,38,"fatal"],[696,51,713,43],[697,20,714,12,"context"],[697,27,714,19],[697,29,714,21,"report"],[697,35,714,27],[697,36,714,28,"context"],[697,43,714,35],[698,20,715,12,"breadcrumbs"],[698,31,715,23],[698,33,715,25,"report"],[698,39,715,31],[698,40,715,32,"breadcrumbs"],[698,51,715,43],[699,20,716,12,"user_actions"],[699,32,716,24],[699,34,716,26,"report"],[699,40,716,32],[699,41,716,33,"user_actions"],[699,53,716,45],[700,20,717,12,"performance_metrics"],[700,39,717,31],[700,41,717,33,"report"],[700,47,717,39],[700,48,717,40,"performance_metrics"],[700,67,717,59],[701,20,718,12,"severity"],[701,28,718,20],[701,30,718,22,"report"],[701,36,718,28],[701,37,718,29,"severity"],[701,45,718,37],[702,20,719,12,"fingerprint"],[702,31,719,23],[702,33,719,25,"report"],[702,39,719,31],[702,40,719,32,"fingerprint"],[702,51,719,43],[703,20,720,12,"tags"],[703,24,720,16],[703,26,720,18,"report"],[703,32,720,24],[703,33,720,25,"tags"],[704,18,721,10],[704,19,721,11],[704,20,721,12],[705,18,704,16,"error"],[705,23,704,21],[705,26,704,21,"_yield$supabase$from$2"],[705,48,704,21],[705,49,704,16,"error"],[705,54,704,21],[706,16,723,8],[706,20,723,12,"error"],[706,25,723,17],[706,27,723,19],[707,18,724,10,"EventLogger"],[707,42,724,21],[707,43,724,22,"error"],[707,48,724,27],[707,49,724,28],[707,64,724,43],[707,66,724,45],[707,93,724,72,"report"],[707,99,724,78],[707,100,724,79,"id"],[707,102,724,81],[707,104,724,83],[707,106,724,85],[708,20,725,12,"supabaseError"],[708,33,725,25],[708,35,725,27,"error"],[708,40,725,32],[709,20,726,12,"errorCode"],[709,29,726,21],[709,31,726,23,"error"],[709,36,726,28],[709,37,726,29,"code"],[709,41,726,33],[710,20,727,12,"errorMessage"],[710,32,727,24],[710,34,727,26,"error"],[710,39,727,31],[710,40,727,32,"message"],[710,47,727,39],[711,20,728,12,"reportId"],[711,28,728,20],[711,30,728,22,"report"],[711,36,728,28],[711,37,728,29,"id"],[712,18,729,10],[712,19,729,18],[712,20,729,19],[713,18,730,10],[713,24,730,16],[713,28,730,20,"Error"],[713,33,730,25],[713,34,730,26],[713,53,730,45,"error"],[713,58,730,50],[713,59,730,51,"message"],[713,66,730,58],[713,77,730,69,"error"],[713,82,730,74],[713,83,730,75,"code"],[713,87,730,79],[713,90,730,82],[713,91,730,83],[714,16,731,8],[715,16,733,8],[715,23,733,15],[716,18,733,17,"success"],[716,25,733,24],[716,27,733,26],[716,31,733,30],[717,18,733,32,"reportId"],[717,26,733,40],[717,28,733,42,"report"],[717,34,733,48],[717,35,733,49,"id"],[718,16,733,52],[718,17,733,53],[719,14,734,6],[719,15,734,7],[719,16,734,8],[719,23,734,15,"insertError"],[719,34,734,26],[719,36,734,28],[720,16,735,8,"EventLogger"],[720,40,735,19],[720,41,735,20,"error"],[720,46,735,25],[720,47,735,26],[720,62,735,41],[720,64,735,43],[720,101,735,80,"report"],[720,107,735,86],[720,108,735,87,"id"],[720,110,735,89],[720,112,735,91],[720,114,735,93],[721,18,736,10,"error"],[721,23,736,15],[721,25,736,17,"insertError"],[721,36,736,28],[722,18,737,10,"reportId"],[722,26,737,18],[722,28,737,20,"report"],[722,34,737,26],[722,35,737,27,"id"],[723,16,738,8],[723,17,738,16],[723,18,738,17],[724,16,739,8],[724,22,739,14,"insertError"],[724,33,739,25],[725,14,740,6],[726,12,741,4],[726,13,741,5],[727,12,741,5],[727,29,741,5,"_x5"],[727,32,741,5],[728,14,741,5],[728,21,741,5,"_ref"],[728,25,741,5],[728,26,741,5,"apply"],[728,31,741,5],[728,38,741,5,"arguments"],[728,47,741,5],[729,12,741,5],[730,10,741,5],[730,14,741,6],[730,15,741,7],[732,10,743,4],[733,10,744,4,"results"],[733,17,744,11],[733,18,744,12,"forEach"],[733,25,744,19],[733,26,744,20],[733,27,744,21,"result"],[733,33,744,27],[733,35,744,29,"index"],[733,40,744,34],[733,45,744,39],[734,12,745,6],[734,16,745,10,"result"],[734,22,745,16],[734,23,745,17,"status"],[734,29,745,23],[734,34,745,28],[734,44,745,38],[734,46,745,40],[735,14,746,8,"errors"],[735,20,746,14],[735,21,746,15,"push"],[735,25,746,19],[735,26,746,20],[735,30,746,24,"Error"],[735,35,746,29],[735,36,746,30],[735,46,746,40,"reports"],[735,53,746,47],[735,54,746,48,"index"],[735,59,746,53],[735,60,746,54],[735,61,746,55,"id"],[735,63,746,57],[735,68,746,62,"result"],[735,74,746,68],[735,75,746,69,"reason"],[735,81,746,75],[735,83,746,77],[735,84,746,78],[735,85,746,79],[736,12,747,6],[737,10,748,4],[737,11,748,5],[737,12,748,6],[739,10,750,4],[740,10,751,4],[740,14,751,8,"errors"],[740,20,751,14],[740,21,751,15,"length"],[740,27,751,21],[740,30,751,24],[740,31,751,25],[740,33,751,27],[741,12,752,6],[741,16,752,12,"errorMessage"],[741,28,752,24],[741,31,752,27],[741,49,752,45,"errors"],[741,55,752,51],[741,56,752,52,"length"],[741,62,752,58],[741,66,752,62,"reports"],[741,73,752,69],[741,74,752,70,"length"],[741,80,752,76],[741,100,752,96,"errors"],[741,106,752,102],[741,107,752,103,"map"],[741,110,752,106],[741,111,752,107,"e"],[741,112,752,108],[741,116,752,112,"e"],[741,117,752,113],[741,118,752,114,"message"],[741,125,752,121],[741,126,752,122],[741,127,752,123,"join"],[741,131,752,127],[741,132,752,128],[741,136,752,132],[741,137,752,133],[741,139,752,135],[742,12,753,6,"EventLogger"],[742,36,753,17],[742,37,753,18,"error"],[742,42,753,23],[742,43,753,24],[742,58,753,39],[742,60,753,41],[742,100,753,81],[742,102,753,83],[743,14,754,8,"failedCount"],[743,25,754,19],[743,27,754,21,"errors"],[743,33,754,27],[743,34,754,28,"length"],[743,40,754,34],[744,14,755,8,"totalCount"],[744,24,755,18],[744,26,755,20,"reports"],[744,33,755,27],[744,34,755,28,"length"],[744,40,755,34],[745,14,756,8,"errors"],[745,20,756,14],[745,22,756,16,"errors"],[745,28,756,22],[745,29,756,23,"map"],[745,32,756,26],[745,33,756,27,"e"],[745,34,756,28],[745,39,756,33],[746,16,756,35,"name"],[746,20,756,39],[746,22,756,41,"e"],[746,23,756,42],[746,24,756,43,"name"],[746,28,756,47],[747,16,756,49,"message"],[747,23,756,56],[747,25,756,58,"e"],[747,26,756,59],[747,27,756,60,"message"],[747,34,756,67],[748,16,756,69,"stack"],[748,21,756,74],[748,23,756,76,"e"],[748,24,756,77],[748,25,756,78,"stack"],[749,14,756,84],[749,15,756,85],[749,16,756,86],[750,12,757,6],[750,13,757,14],[750,14,757,15],[751,12,758,6],[751,18,758,12],[751,22,758,16,"Error"],[751,27,758,21],[751,28,758,22,"errorMessage"],[751,40,758,34],[751,41,758,35],[752,10,759,4],[753,8,760,2],[753,9,760,3],[754,8,760,3],[754,17,692,16,"sendReports"],[754,28,692,27,"sendReports"],[754,29,692,27,"_x4"],[754,32,692,27],[755,10,692,27],[755,17,692,27,"_sendReports"],[755,29,692,27],[755,30,692,27,"apply"],[755,35,692,27],[755,42,692,27,"arguments"],[755,51,692,27],[756,8,692,27],[757,8,692,27],[757,15,692,16,"sendReports"],[757,26,692,27],[758,6,692,27],[759,6,762,2],[760,0,763,0],[761,0,764,0],[762,6,762,2],[763,4,762,2],[764,6,762,2,"key"],[764,9,762,2],[765,6,762,2,"value"],[765,11,762,2],[766,8,762,2],[766,12,762,2,"_loadOfflineReports"],[766,31,762,2],[766,38,762,2,"_asyncToGenerator2"],[766,56,762,2],[766,57,762,2,"default"],[766,64,762,2],[766,66,765,2],[766,79,765,52],[767,10,766,4],[767,14,766,8],[768,12,767,6],[768,16,767,12,"offlineReports"],[768,30,767,26],[768,39,767,35,"AsyncStorage"],[768,60,767,47],[768,61,767,48,"getItem"],[768,68,767,55],[768,69,767,56,"CrashReporterService"],[768,89,767,76],[768,90,767,77,"OFFLINE_REPORTS_KEY"],[768,109,767,96],[768,110,767,97],[769,12,768,6],[769,16,768,10,"offlineReports"],[769,30,768,24],[769,32,768,26],[770,14,769,8],[770,18,769,14,"reports"],[770,25,769,36],[770,28,769,39,"JSON"],[770,32,769,43],[770,33,769,44,"parse"],[770,38,769,49],[770,39,769,50,"offlineReports"],[770,53,769,64],[770,54,769,65],[771,14,770,8],[771,18,770,12],[771,19,770,13,"reportQueue"],[771,30,770,24],[771,31,770,25,"unshift"],[771,38,770,32],[771,39,770,33],[771,42,770,36,"reports"],[771,49,770,43],[771,50,770,44],[772,14,771,8],[772,20,771,14,"AsyncStorage"],[772,41,771,26],[772,42,771,27,"removeItem"],[772,52,771,37],[772,53,771,38,"CrashReporterService"],[772,73,771,58],[772,74,771,59,"OFFLINE_REPORTS_KEY"],[772,93,771,78],[772,94,771,79],[773,14,772,8,"EventLogger"],[773,38,772,19],[773,39,772,20,"info"],[773,43,772,24],[773,44,772,25],[773,59,772,40],[773,61,772,42],[773,85,772,66],[773,87,772,68],[774,16,772,70,"count"],[774,21,772,75],[774,23,772,77,"reports"],[774,30,772,84],[774,31,772,85,"length"],[775,14,772,92],[775,15,772,93],[775,16,772,94],[777,14,774,8],[778,14,775,8],[778,18,775,12],[778,22,775,16],[778,23,775,17,"databaseAvailable"],[778,40,775,34],[778,42,775,36],[779,16,776,10],[779,20,776,14],[779,21,776,15,"syncOfflineReports"],[779,39,776,33],[779,40,776,34],[779,41,776,35],[779,42,776,36,"catch"],[779,47,776,41],[779,48,776,42,"error"],[779,53,776,47],[779,57,776,51],[780,18,777,12,"EventLogger"],[780,42,777,23],[780,43,777,24,"error"],[780,48,777,29],[780,49,777,30],[780,64,777,45],[780,66,777,47],[780,110,777,91],[780,112,777,93,"error"],[780,117,777,107],[780,118,777,108],[781,16,778,10],[781,17,778,11],[781,18,778,12],[782,14,779,8],[783,12,780,6],[784,10,781,4],[784,11,781,5],[784,12,781,6],[784,19,781,13,"error"],[784,24,781,18],[784,26,781,20],[785,12,782,6],[786,12,783,6],[786,16,783,10,"error"],[786,21,783,15],[786,25,783,19],[786,32,783,26,"error"],[786,37,783,31],[786,42,783,36],[786,50,783,44],[786,54,783,48],[786,63,783,57],[786,67,783,61,"error"],[786,72,783,66],[786,76,784,10],[786,83,784,17,"error"],[786,88,784,22],[786,89,784,23,"message"],[786,96,784,30],[786,101,784,35],[786,109,784,43],[786,113,785,10,"error"],[786,118,785,15],[786,119,785,16,"message"],[786,126,785,23],[786,127,785,24,"includes"],[786,135,785,32],[786,136,785,33],[786,149,785,46],[786,150,785,47],[786,152,785,49],[787,14,786,8,"EventLogger"],[787,38,786,19],[787,39,786,20,"warn"],[787,43,786,24],[787,44,786,25],[787,59,786,40],[787,61,786,42],[787,103,786,84],[787,105,786,86],[788,16,786,88,"error"],[788,21,786,93],[788,23,786,95,"error"],[788,28,786,100],[788,29,786,101,"message"],[789,14,786,109],[789,15,786,110],[789,16,786,111],[790,14,787,8],[790,20,787,14],[790,24,787,18],[790,25,787,19,"clearOversizedOfflineData"],[790,50,787,44],[790,51,787,45],[790,52,787,46],[791,14,788,8],[791,18,788,12],[791,19,788,13,"reportQueue"],[791,30,788,24],[791,33,788,27],[791,35,788,29],[792,12,789,6],[792,13,789,7],[792,19,789,13],[793,14,790,8,"EventLogger"],[793,38,790,19],[793,39,790,20,"error"],[793,44,790,25],[793,45,790,26],[793,60,790,41],[793,62,790,43],[793,94,790,75],[793,96,790,77,"error"],[793,101,790,91],[793,102,790,92],[794,12,791,6],[795,10,792,4],[796,8,793,2],[796,9,793,3],[797,8,793,3],[797,17,765,16,"loadOfflineReports"],[797,35,765,34,"loadOfflineReports"],[797,36,765,34],[798,10,765,34],[798,17,765,34,"_loadOfflineReports"],[798,36,765,34],[798,37,765,34,"apply"],[798,42,765,34],[798,49,765,34,"arguments"],[798,58,765,34],[799,8,765,34],[800,8,765,34],[800,15,765,16,"loadOfflineReports"],[800,33,765,34],[801,6,765,34],[802,6,795,2],[803,0,796,0],[804,0,797,0],[805,6,795,2],[806,4,795,2],[807,6,795,2,"key"],[807,9,795,2],[808,6,795,2,"value"],[808,11,795,2],[809,8,795,2],[809,12,795,2,"_clearOversizedOfflineData"],[809,38,795,2],[809,45,795,2,"_asyncToGenerator2"],[809,63,795,2],[809,64,795,2,"default"],[809,71,795,2],[809,73,798,2],[809,86,798,59],[810,10,799,4],[810,14,799,8],[811,12,800,6],[811,18,800,12,"AsyncStorage"],[811,39,800,24],[811,40,800,25,"removeItem"],[811,50,800,35],[811,51,800,36,"CrashReporterService"],[811,71,800,56],[811,72,800,57,"OFFLINE_REPORTS_KEY"],[811,91,800,76],[811,92,800,77],[812,12,801,6,"EventLogger"],[812,36,801,17],[812,37,801,18,"info"],[812,41,801,22],[812,42,801,23],[812,57,801,38],[812,59,801,40],[812,94,801,75],[812,95,801,76],[813,10,802,4],[813,11,802,5],[813,12,802,6],[813,19,802,13,"error"],[813,24,802,18],[813,26,802,20],[814,12,803,6,"EventLogger"],[814,36,803,17],[814,37,803,18,"error"],[814,42,803,23],[814,43,803,24],[814,58,803,39],[814,60,803,41],[814,90,803,71],[814,92,803,73,"error"],[814,97,803,87],[814,98,803,88],[815,10,804,4],[816,8,805,2],[816,9,805,3],[817,8,805,3],[817,17,798,16,"clearOversizedOfflineData"],[817,42,798,41,"clearOversizedOfflineData"],[817,43,798,41],[818,10,798,41],[818,17,798,41,"_clearOversizedOfflineData"],[818,43,798,41],[818,44,798,41,"apply"],[818,49,798,41],[818,56,798,41,"arguments"],[818,65,798,41],[819,8,798,41],[820,8,798,41],[820,15,798,16,"clearOversizedOfflineData"],[820,40,798,41],[821,6,798,41],[822,6,807,2],[823,0,808,0],[824,0,809,0],[825,6,807,2],[826,4,807,2],[827,6,807,2,"key"],[827,9,807,2],[828,6,807,2,"value"],[828,11,807,2],[829,8,807,2],[829,12,807,2,"_storeOfflineReports"],[829,32,807,2],[829,39,807,2,"_asyncToGenerator2"],[829,57,807,2],[829,58,807,2,"default"],[829,65,807,2],[829,67,810,2],[829,78,810,36,"reports"],[829,85,810,58],[829,87,810,75],[830,10,811,4],[830,14,811,8],[831,12,812,6],[831,16,812,12,"existingReports"],[831,31,812,27],[831,40,812,36,"AsyncStorage"],[831,61,812,48],[831,62,812,49,"getItem"],[831,69,812,56],[831,70,812,57,"CrashReporterService"],[831,90,812,77],[831,91,812,78,"OFFLINE_REPORTS_KEY"],[831,110,812,97],[831,111,812,98],[832,12,813,6],[832,16,813,12,"allReports"],[832,26,813,22],[832,29,813,25,"existingReports"],[832,44,813,40],[832,47,813,43,"JSON"],[832,51,813,47],[832,52,813,48,"parse"],[832,57,813,53],[832,58,813,54,"existingReports"],[832,73,813,69],[832,74,813,70],[832,77,813,73],[832,79,813,75],[833,12,815,6,"allReports"],[833,22,815,16],[833,23,815,17,"push"],[833,27,815,21],[833,28,815,22],[833,31,815,25,"reports"],[833,38,815,32],[833,39,815,33],[835,12,817,6],[836,12,818,6],[836,16,818,12,"maxOfflineReports"],[836,33,818,29],[836,36,818,32],[836,38,818,34],[837,12,819,6],[837,16,819,10,"allReports"],[837,26,819,20],[837,27,819,21,"length"],[837,33,819,27],[837,36,819,30,"maxOfflineReports"],[837,53,819,47],[837,55,819,49],[838,14,820,8,"allReports"],[838,24,820,18],[838,25,820,19,"splice"],[838,31,820,25],[838,32,820,26],[838,33,820,27],[838,35,820,29,"allReports"],[838,45,820,39],[838,46,820,40,"length"],[838,52,820,46],[838,55,820,49,"maxOfflineReports"],[838,72,820,66],[838,73,820,67],[839,14,821,8,"EventLogger"],[839,38,821,19],[839,39,821,20,"debug"],[839,44,821,25],[839,45,821,26],[839,60,821,41],[839,62,821,43],[839,92,821,73,"maxOfflineReports"],[839,109,821,90],[839,123,821,104],[839,124,821,105],[840,12,822,6],[842,12,824,6],[843,12,825,6],[843,16,825,12,"estimatedSize"],[843,29,825,25],[843,32,825,28,"JSON"],[843,36,825,32],[843,37,825,33,"stringify"],[843,46,825,42],[843,47,825,43,"allReports"],[843,57,825,53],[843,58,825,54],[843,59,825,55,"length"],[843,65,825,61],[844,12,826,6],[844,16,826,10,"estimatedSize"],[844,29,826,23],[844,32,826,26],[844,38,826,32],[844,40,826,34],[845,14,826,36],[846,14,827,8],[847,14,828,8,"allReports"],[847,24,828,18],[847,25,828,19,"splice"],[847,31,828,25],[847,32,828,26],[847,33,828,27],[847,35,828,29,"allReports"],[847,45,828,39],[847,46,828,40,"length"],[847,52,828,46],[847,55,828,49],[847,57,828,51],[847,58,828,52],[848,14,829,8,"EventLogger"],[848,38,829,19],[848,39,829,20,"warn"],[848,43,829,24],[848,44,829,25],[848,59,829,40],[848,61,829,42],[848,115,829,96],[848,116,829,97],[849,12,830,6],[850,12,832,6],[850,18,832,12,"AsyncStorage"],[850,39,832,24],[850,40,832,25,"setItem"],[850,47,832,32],[850,48,832,33,"CrashReporterService"],[850,68,832,53],[850,69,832,54,"OFFLINE_REPORTS_KEY"],[850,88,832,73],[850,90,832,75,"JSON"],[850,94,832,79],[850,95,832,80,"stringify"],[850,104,832,89],[850,105,832,90,"allReports"],[850,115,832,100],[850,116,832,101],[850,117,832,102],[851,12,834,6,"EventLogger"],[851,36,834,17],[851,37,834,18,"info"],[851,41,834,22],[851,42,834,23],[851,57,834,38],[851,59,834,40],[851,83,834,64],[851,85,834,66],[852,14,835,8,"newCount"],[852,22,835,16],[852,24,835,18,"reports"],[852,31,835,25],[852,32,835,26,"length"],[852,38,835,32],[853,14,836,8,"totalStored"],[853,25,836,19],[853,27,836,21,"allReports"],[853,37,836,31],[853,38,836,32,"length"],[854,12,837,6],[854,13,837,7],[854,14,837,8],[855,10,838,4],[855,11,838,5],[855,12,838,6],[855,19,838,13,"error"],[855,24,838,18],[855,26,838,20],[856,12,839,6,"EventLogger"],[856,36,839,17],[856,37,839,18,"error"],[856,42,839,23],[856,43,839,24],[856,58,839,39],[856,60,839,41],[856,93,839,74],[856,95,839,76,"error"],[856,100,839,90],[856,101,839,91],[857,10,840,4],[858,8,841,2],[858,9,841,3],[859,8,841,3],[859,17,810,16,"storeOfflineReports"],[859,36,810,35,"storeOfflineReports"],[859,37,810,35,"_x6"],[859,40,810,35],[860,10,810,35],[860,17,810,35,"_storeOfflineReports"],[860,37,810,35],[860,38,810,35,"apply"],[860,43,810,35],[860,50,810,35,"arguments"],[860,59,810,35],[861,8,810,35],[862,8,810,35],[862,15,810,16,"storeOfflineReports"],[862,34,810,35],[863,6,810,35],[864,6,843,2],[865,0,844,0],[866,0,845,0],[867,6,843,2],[868,4,843,2],[869,6,843,2,"key"],[869,9,843,2],[870,6,843,2,"value"],[870,11,843,2],[871,8,843,2],[871,12,843,2,"_syncOfflineReports"],[871,31,843,2],[871,38,843,2,"_asyncToGenerator2"],[871,56,843,2],[871,57,843,2,"default"],[871,64,843,2],[871,66,846,2],[871,79,846,52],[872,10,847,4],[872,14,847,8],[872,15,847,9],[872,19,847,13],[872,20,847,14,"databaseAvailable"],[872,37,847,31],[872,41,847,35],[872,42,847,36],[872,46,847,40],[872,47,847,41,"isInitialized"],[872,60,847,54],[872,62,847,56],[873,12,848,6,"EventLogger"],[873,36,848,17],[873,37,848,18,"debug"],[873,42,848,23],[873,43,848,24],[873,58,848,39],[873,60,848,41],[873,133,848,114],[873,134,848,115],[874,12,849,6],[875,10,850,4],[876,10,852,4],[876,14,852,8],[877,12,853,6],[878,12,854,6],[878,16,854,10],[878,20,854,14],[878,21,854,15,"reportQueue"],[878,32,854,26],[878,33,854,27,"length"],[878,39,854,33],[878,42,854,36],[878,43,854,37],[878,45,854,39],[879,14,855,8,"EventLogger"],[879,38,855,19],[879,39,855,20,"info"],[879,43,855,24],[879,44,855,25],[879,59,855,40],[879,61,855,42],[879,98,855,79],[879,100,855,81],[880,16,855,83,"count"],[880,21,855,88],[880,23,855,90],[880,27,855,94],[880,28,855,95,"reportQueue"],[880,39,855,106],[880,40,855,107,"length"],[881,14,855,114],[881,15,855,115],[881,16,855,116],[882,14,856,8],[882,20,856,14],[882,24,856,18],[882,25,856,19,"flushReports"],[882,37,856,31],[882,38,856,32],[882,39,856,33],[883,12,857,6],[884,12,859,6,"EventLogger"],[884,36,859,17],[884,37,859,18,"info"],[884,41,859,22],[884,42,859,23],[884,57,859,38],[884,59,859,40],[884,91,859,72],[884,92,859,73],[885,10,860,4],[885,11,860,5],[885,12,860,6],[885,19,860,13,"error"],[885,24,860,18],[885,26,860,20],[886,12,861,6,"EventLogger"],[886,36,861,17],[886,37,861,18,"error"],[886,42,861,23],[886,43,861,24],[886,58,861,39],[886,60,861,41],[886,92,861,73],[886,94,861,75,"error"],[886,99,861,89],[886,100,861,90],[887,10,862,4],[888,8,863,2],[888,9,863,3],[889,8,863,3],[889,17,846,16,"syncOfflineReports"],[889,35,846,34,"syncOfflineReports"],[889,36,846,34],[890,10,846,34],[890,17,846,34,"_syncOfflineReports"],[890,36,846,34],[890,37,846,34,"apply"],[890,42,846,34],[890,49,846,34,"arguments"],[890,58,846,34],[891,8,846,34],[892,8,846,34],[892,15,846,16,"syncOfflineReports"],[892,33,846,34],[893,6,846,34],[894,6,865,2],[895,0,866,0],[896,0,867,0],[897,6,865,2],[898,4,865,2],[899,6,865,2,"key"],[899,9,865,2],[900,6,865,2,"value"],[900,11,865,2],[901,8,865,2],[901,12,865,2,"_recheckDatabaseAvailability"],[901,40,865,2],[901,47,865,2,"_asyncToGenerator2"],[901,65,865,2],[901,66,865,2,"default"],[901,73,865,2],[901,75,868,2],[901,88,868,60],[902,10,869,4],[902,14,869,10,"wasAvailable"],[902,26,869,22],[902,29,869,25],[902,33,869,29],[902,34,869,30,"databaseAvailable"],[902,51,869,47],[903,10,871,4],[903,14,871,8],[904,12,872,6],[904,18,872,12],[904,22,872,16],[904,23,872,17,"checkDatabaseAvailability"],[904,48,872,42],[904,49,872,43],[904,50,872,44],[906,12,874,6],[907,12,875,6],[907,16,875,10],[907,17,875,11,"wasAvailable"],[907,29,875,23],[907,33,875,27],[907,37,875,31],[907,38,875,32,"databaseAvailable"],[907,55,875,49],[907,57,875,51],[908,14,876,8,"EventLogger"],[908,38,876,19],[908,39,876,20,"info"],[908,43,876,24],[908,44,876,25],[908,59,876,40],[908,61,876,42],[908,114,876,95],[908,115,876,96],[909,14,877,8],[909,18,877,12],[909,19,877,13,"databaseUnavailableLogged"],[909,44,877,38],[909,47,877,41],[909,52,877,46],[909,53,877,47],[909,54,877,48],[910,14,878,8],[910,20,878,14],[910,24,878,18],[910,25,878,19,"syncOfflineReports"],[910,43,878,37],[910,44,878,38],[910,45,878,39],[911,12,879,6],[912,10,880,4],[912,11,880,5],[912,12,880,6],[912,19,880,13,"error"],[912,24,880,18],[912,26,880,20],[913,12,881,6],[913,16,881,10],[913,17,881,11,"databaseAvailable"],[913,34,881,28],[913,37,881,31],[913,42,881,36],[914,12,882,6,"EventLogger"],[914,36,882,17],[914,37,882,18,"debug"],[914,42,882,23],[914,43,882,24],[914,58,882,39],[914,60,882,41],[914,90,882,71],[914,91,882,72],[915,10,883,4],[916,8,884,2],[916,9,884,3],[917,8,884,3],[917,17,868,15,"recheckDatabaseAvailability"],[917,44,868,42,"recheckDatabaseAvailability"],[917,45,868,42],[918,10,868,42],[918,17,868,42,"_recheckDatabaseAvailability"],[918,45,868,42],[918,46,868,42,"apply"],[918,51,868,42],[918,58,868,42,"arguments"],[918,67,868,42],[919,8,868,42],[920,8,868,42],[920,15,868,15,"recheckDatabaseAvailability"],[920,42,868,42],[921,6,868,42],[922,6,886,2],[923,0,887,0],[924,0,888,0],[925,6,886,2],[926,4,886,2],[927,6,886,2,"key"],[927,9,886,2],[928,6,886,2,"value"],[928,11,886,2],[928,13,889,2],[928,22,889,10,"shouldReportError"],[928,39,889,27,"shouldReportError"],[928,40,889,27],[928,42,889,39],[929,8,890,4],[929,12,890,8],[929,13,890,9],[929,17,890,13],[929,18,890,14,"config"],[929,24,890,20],[929,25,890,21,"enabled"],[929,32,890,28],[929,36,890,32],[929,37,890,33],[929,41,890,37],[929,42,890,38,"isInitialized"],[929,55,890,51],[929,57,890,53],[930,10,891,6],[930,17,891,13],[930,22,891,18],[931,8,892,4],[933,8,894,4],[935,8,899,4],[936,8,900,4],[936,15,900,11,"Math"],[936,19,900,15],[936,20,900,16,"random"],[936,26,900,22],[936,27,900,23],[936,28,900,24],[936,31,900,27],[936,35,900,31],[936,36,900,32,"config"],[936,42,900,38],[936,43,900,39,"sampleRate"],[936,53,900,49],[937,6,901,2],[939,6,903,2],[940,0,904,0],[941,0,905,0],[942,4,903,2],[943,6,903,2,"key"],[943,9,903,2],[944,6,903,2,"value"],[944,11,903,2],[944,13,906,2],[944,22,906,10,"generateSessionId"],[944,39,906,27,"generateSessionId"],[944,40,906,27],[944,42,906,38],[945,8,907,4],[945,15,907,11],[945,32,907,28,"Date"],[945,36,907,32],[945,37,907,33,"now"],[945,40,907,36],[945,41,907,37],[945,42,907,38],[945,46,907,42,"Math"],[945,50,907,46],[945,51,907,47,"random"],[945,57,907,53],[945,58,907,54],[945,59,907,55],[945,60,907,56,"toString"],[945,68,907,64],[945,69,907,65],[945,71,907,67],[945,72,907,68],[945,73,907,69,"substr"],[945,79,907,75],[945,80,907,76],[945,81,907,77],[945,83,907,79],[945,84,907,80],[945,85,907,81],[945,87,907,83],[946,6,908,2],[948,6,910,2],[949,0,911,0],[950,0,912,0],[951,4,910,2],[952,6,910,2,"key"],[952,9,910,2],[953,6,910,2,"value"],[953,11,910,2],[953,13,913,2],[953,22,913,10,"generateReportId"],[953,38,913,26,"generateReportId"],[953,39,913,26],[953,41,913,37],[954,8,914,4],[954,15,914,11],[954,31,914,27,"Date"],[954,35,914,31],[954,36,914,32,"now"],[954,39,914,35],[954,40,914,36],[954,41,914,37],[954,45,914,41,"Math"],[954,49,914,45],[954,50,914,46,"random"],[954,56,914,52],[954,57,914,53],[954,58,914,54],[954,59,914,55,"toString"],[954,67,914,63],[954,68,914,64],[954,70,914,66],[954,71,914,67],[954,72,914,68,"substr"],[954,78,914,74],[954,79,914,75],[954,80,914,76],[954,82,914,78],[954,83,914,79],[954,84,914,80],[954,86,914,82],[955,6,915,2],[957,6,917,2],[958,0,918,0],[959,0,919,0],[960,4,917,2],[961,6,917,2,"key"],[961,9,917,2],[962,6,917,2,"value"],[962,11,917,2],[963,8,917,2],[963,12,917,2,"_shutdown"],[963,21,917,2],[963,28,917,2,"_asyncToGenerator2"],[963,46,917,2],[963,47,917,2,"default"],[963,54,917,2],[963,56,920,2],[963,69,920,41],[964,10,921,4],[965,10,922,4],[965,14,922,8],[965,18,922,12],[965,19,922,13,"originalConsoleError"],[965,39,922,33],[965,41,922,35],[966,12,923,6,"console"],[966,19,923,13],[966,20,923,14,"error"],[966,25,923,19],[966,42,923,47],[967,10,924,4],[968,10,925,4],[968,14,925,8],[968,18,925,12],[968,19,925,13,"originalConsoleWarn"],[968,38,925,32],[968,40,925,34],[969,12,926,6,"console"],[969,19,926,13],[969,20,926,14,"warn"],[969,24,926,18],[969,41,926,45],[970,10,927,4],[972,10,929,4],[973,10,930,4],[973,14,930,8],[973,18,930,12],[973,19,930,13,"reportQueue"],[973,30,930,24],[973,31,930,25,"length"],[973,37,930,31],[973,40,930,34],[973,41,930,35],[973,43,930,37],[974,12,931,6],[974,18,931,12],[974,22,931,16],[974,23,931,17,"flushReports"],[974,35,931,29],[974,36,931,30],[974,37,931,31],[975,10,932,4],[976,10,934,4],[976,14,934,8],[976,15,934,9,"isInitialized"],[976,28,934,22],[976,31,934,25],[976,36,934,30],[977,10,935,4,"EventLogger"],[977,34,935,15],[977,35,935,16,"info"],[977,39,935,20],[977,40,935,21],[977,55,935,36],[977,57,935,38],[977,83,935,64],[977,84,935,65],[978,8,936,2],[978,9,936,3],[979,8,936,3],[979,17,920,15,"shutdown"],[979,25,920,23,"shutdown"],[979,26,920,23],[980,10,920,23],[980,17,920,23,"_shutdown"],[980,26,920,23],[980,27,920,23,"apply"],[980,32,920,23],[980,39,920,23,"arguments"],[980,48,920,23],[981,8,920,23],[982,8,920,23],[982,15,920,15,"shutdown"],[982,23,920,23],[983,6,920,23],[984,4,920,23],[985,2,920,23],[985,7,939,0],[986,2,90,45],[987,2,92,2],[988,2,79,6,"CrashReporterService"],[988,22,79,26],[988,23,93,26,"OFFLINE_REPORTS_KEY"],[988,42,93,45],[988,45,93,48],[988,68,93,71],[989,2,79,6,"CrashReporterService"],[989,22,79,26],[989,23,94,26,"SESSION_ID_KEY"],[989,37,94,40],[989,40,94,43],[989,67,94,70],[990,2,940,7],[990,6,940,13,"CrashReporter"],[990,19,940,26],[990,22,940,26,"exports"],[990,29,940,26],[990,30,940,26,"CrashReporter"],[990,43,940,26],[990,46,940,29],[990,50,940,33,"CrashReporterService"],[990,70,940,53],[990,71,940,54],[990,72,940,55],[992,2,942,0],[993,2,943,7],[993,6,943,13,"reportError"],[993,17,943,24],[993,20,943,27,"reportError"],[993,21,943,28,"error"],[993,26,943,40],[993,28,943,42,"context"],[993,35,943,71],[993,37,943,73,"severity"],[993,45,943,107],[993,50,943,112],[994,4,944,2,"CrashReporter"],[994,17,944,15],[994,18,944,16,"reportError"],[994,29,944,27],[994,30,944,28,"error"],[994,35,944,33],[994,37,944,35,"context"],[994,44,944,42],[994,46,944,44,"severity"],[994,54,944,52],[994,55,944,53],[995,2,945,0],[995,3,945,1],[996,2,945,2,"exports"],[996,9,945,2],[996,10,945,2,"reportError"],[996,21,945,2],[996,24,945,2,"reportError"],[996,35,945,2],[997,2,947,7],[997,6,947,13,"addBreadcrumb"],[997,19,947,26],[997,22,947,30,"breadcrumb"],[997,32,947,71],[997,36,947,76],[998,4,948,2,"CrashReporter"],[998,17,948,15],[998,18,948,16,"addBreadcrumb"],[998,31,948,29],[998,32,948,30,"breadcrumb"],[998,42,948,40],[998,43,948,41],[999,2,949,0],[999,3,949,1],[1000,2,949,2,"exports"],[1000,9,949,2],[1000,10,949,2,"addBreadcrumb"],[1000,23,949,2],[1000,26,949,2,"addBreadcrumb"],[1000,39,949,2],[1001,2,951,7],[1001,6,951,13,"trackUserAction"],[1001,21,951,28],[1001,24,951,32,"action"],[1001,30,951,69],[1001,34,951,74],[1002,4,952,2,"CrashReporter"],[1002,17,952,15],[1002,18,952,16,"trackUserAction"],[1002,33,952,31],[1002,34,952,32,"action"],[1002,40,952,38],[1002,41,952,39],[1003,2,953,0],[1003,3,953,1],[1004,2,953,2,"exports"],[1004,9,953,2],[1004,10,953,2,"trackUserAction"],[1004,25,953,2],[1004,28,953,2,"trackUserAction"],[1004,43,953,2],[1005,2,955,7],[1005,6,955,13,"setCurrentScreen"],[1005,22,955,29],[1005,25,955,32,"setCurrentScreen"],[1005,26,955,33,"screenName"],[1005,36,955,51],[1005,38,955,53,"params"],[1005,44,955,81],[1005,49,955,86],[1006,4,956,2,"CrashReporter"],[1006,17,956,15],[1006,18,956,16,"setCurrentScreen"],[1006,34,956,32],[1006,35,956,33,"screenName"],[1006,45,956,43],[1006,47,956,45,"params"],[1006,53,956,51],[1006,54,956,52],[1007,2,957,0],[1007,3,957,1],[1008,2,957,2,"exports"],[1008,9,957,2],[1008,10,957,2,"setCurrentScreen"],[1008,26,957,2],[1008,29,957,2,"setCurrentScreen"],[1008,45,957,2],[1009,2,959,7],[1009,6,959,13,"addContext"],[1009,16,959,23],[1009,19,959,26,"addContext"],[1009,20,959,27,"key"],[1009,23,959,38],[1009,25,959,40,"value"],[1009,30,959,50],[1009,35,959,55],[1010,4,960,2,"CrashReporter"],[1010,17,960,15],[1010,18,960,16,"addContext"],[1010,28,960,26],[1010,29,960,27,"key"],[1010,32,960,30],[1010,34,960,32,"value"],[1010,39,960,37],[1010,40,960,38],[1011,2,961,0],[1011,3,961,1],[1013,2,963,0],[1014,2,963,0,"exports"],[1014,9,963,0],[1014,10,963,0,"addContext"],[1014,20,963,0],[1014,23,963,0,"addContext"],[1014,33,963,0],[1015,0,963,0],[1015,3]],"functionMap":{"names":["<global>","CrashReporterService","CrashReporterService#constructor","CrashReporterService#initialize","Promise.resolve.then$argument_0","checkDatabaseAvailability._catch$argument_0","loadOfflineReports._catch$argument_0","CrashReporterService#checkDatabaseAvailability","CrashReporterService#setUser","CrashReporterService#clearUser","CrashReporterService#addBreadcrumb","CrashReporterService#trackUserAction","CrashReporterService#reportError","CrashReporterService#reportNetworkError","CrashReporterService#reportFatalError","CrashReporterService#setCurrentScreen","CrashReporterService#addContext","CrashReporterService#createAndQueueReport","CrashReporterService#buildErrorContext","CrashReporterService#getPerformanceMetrics","CrashReporterService#generateFingerprint","CrashReporterService#setupGlobalErrorHandlers","ErrorUtils.setGlobalHandler$argument_0","global.onunhandledrejection","CrashReporterService#setupConsoleInterception","console.error","args.map$argument_0","console.warn","CrashReporterService#setupPeriodicFlush","setTimeout$argument_0","setInterval$argument_0","flushReports._catch$argument_0","CrashReporterService#flush","CrashReporterService#flushReports","CrashReporterService#sendReports","reports.map$argument_0","results.forEach$argument_0","errors.map$argument_0","CrashReporterService#loadOfflineReports","syncOfflineReports._catch$argument_0","CrashReporterService#clearOversizedOfflineData","CrashReporterService#storeOfflineReports","CrashReporterService#syncOfflineReports","CrashReporterService#recheckDatabaseAvailability","CrashReporterService#shouldReportError","CrashReporterService#generateSessionId","CrashReporterService#generateReportId","CrashReporterService#shutdown","reportError","addBreadcrumb","trackUserAction","setCurrentScreen","addContext"],"mappings":"AAA;AC8E;ECiB;GDa;EEK;mCCW;ODS;6CEG;OFM;sCGG;OHE;GFsB;EMK;GNgF;EOK;GPU;EQK;GRW;ESK;GTc;EUK;GVsB;EWK;GXc;EYK;GZqB;EaK;GbW;EcK;Gdc;EeK;GfK;EgBK;GhByC;EiBK;GjB0B;EkBK;GlBa;EmBK;GnBW;EoBK;kCCI;ODa;oCEM;OFc;GpBE;EuBK;oBCK;0BCG,kBD;KDI;mBGI;0BDG,kBC;KHI;GvBC;E2BK;eCE;kBCC;oCCG;WDE;ODE;KDC;G3BC;E+BK;G/BM;EgCK;GhCgD;EiCK;yDCU;KDuC;oBEG;KFI;2GGI,cH;2BGI,2DH;GjCI;EqCK;0CCW;WDE;GrCe;EuCK;GvCO;EwCK;GxC+B;EyCK;GzCiB;E0CK;G1CgB;E2CK;G3CY;E4CK;G5CE;E6CK;G7CE;E8CK;G9CgB;CDC;2BgDM;ChDE;6BiDE;CjDE;+BkDE;ClDE;gCmDE;CnDE;0BoDE;CpDE"}},"type":"js/module"}]}