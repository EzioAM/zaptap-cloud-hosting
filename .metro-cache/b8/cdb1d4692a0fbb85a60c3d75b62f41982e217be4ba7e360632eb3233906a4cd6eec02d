{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"domhandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":77,"index":77}}],"key":"KYhnx5+o028X5IFQh7qGm6XZdSU=","exportNames":["*"]}},{"name":"dom-serializer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":78},"end":{"line":2,"column":40,"index":118}}],"key":"1LlUHcSOfk/O/at41id2iTgNHbQ=","exportNames":["*"]}},{"name":"domelementtype","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":45,"index":164}}],"key":"tVJ16XfW1AI8lcfhJrZBho14ocA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getInnerHTML = getInnerHTML;\n  exports.getOuterHTML = getOuterHTML;\n  exports.getText = getText;\n  exports.innerText = innerText;\n  exports.textContent = textContent;\n  var _domhandler = require(_dependencyMap[1], \"domhandler\");\n  var _domSerializer = _interopRequireDefault(require(_dependencyMap[2], \"dom-serializer\"));\n  var _domelementtype = require(_dependencyMap[3], \"domelementtype\");\n  /**\n   * @category Stringify\n   * @deprecated Use the `dom-serializer` module directly.\n   * @param node Node to get the outer HTML of.\n   * @param options Options for serialization.\n   * @returns `node`'s outer HTML.\n   */\n  function getOuterHTML(node, options) {\n    return (0, _domSerializer.default)(node, options);\n  }\n  /**\n   * @category Stringify\n   * @deprecated Use the `dom-serializer` module directly.\n   * @param node Node to get the inner HTML of.\n   * @param options Options for serialization.\n   * @returns `node`'s inner HTML.\n   */\n  function getInnerHTML(node, options) {\n    return (0, _domhandler.hasChildren)(node) ? node.children.map(function (node) {\n      return getOuterHTML(node, options);\n    }).join(\"\") : \"\";\n  }\n  /**\n   * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags. Ignores comments.\n   *\n   * @category Stringify\n   * @deprecated Use `textContent` instead.\n   * @param node Node to get the inner text of.\n   * @returns `node`'s inner text.\n   */\n  function getText(node) {\n    if (Array.isArray(node)) return node.map(getText).join(\"\");\n    if ((0, _domhandler.isTag)(node)) return node.name === \"br\" ? \"\\n\" : getText(node.children);\n    if ((0, _domhandler.isCDATA)(node)) return getText(node.children);\n    if ((0, _domhandler.isText)(node)) return node.data;\n    return \"\";\n  }\n  /**\n   * Get a node's text content. Ignores comments.\n   *\n   * @category Stringify\n   * @param node Node to get the text content of.\n   * @returns `node`'s text content.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n   */\n  function textContent(node) {\n    if (Array.isArray(node)) return node.map(textContent).join(\"\");\n    if ((0, _domhandler.hasChildren)(node) && !(0, _domhandler.isComment)(node)) {\n      return textContent(node.children);\n    }\n    if ((0, _domhandler.isText)(node)) return node.data;\n    return \"\";\n  }\n  /**\n   * Get a node's inner text, ignoring `<script>` and `<style>` tags. Ignores comments.\n   *\n   * @category Stringify\n   * @param node Node to get the inner text of.\n   * @returns `node`'s inner text.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n   */\n  function innerText(node) {\n    if (Array.isArray(node)) return node.map(innerText).join(\"\");\n    if ((0, _domhandler.hasChildren)(node) && (node.type === _domelementtype.ElementType.Tag || (0, _domhandler.isCDATA)(node))) {\n      return innerText(node.children);\n    }\n    if ((0, _domhandler.isText)(node)) return node.data;\n    return \"\";\n  }\n});","lineCount":83,"map":[[11,2,1,0],[11,6,1,0,"_domhandler"],[11,17,1,0],[11,20,1,0,"require"],[11,27,1,0],[11,28,1,0,"_dependencyMap"],[11,42,1,0],[12,2,2,0],[12,6,2,0,"_domSerializer"],[12,20,2,0],[12,23,2,0,"_interopRequireDefault"],[12,45,2,0],[12,46,2,0,"require"],[12,53,2,0],[12,54,2,0,"_dependencyMap"],[12,68,2,0],[13,2,3,0],[13,6,3,0,"_domelementtype"],[13,21,3,0],[13,24,3,0,"require"],[13,31,3,0],[13,32,3,0,"_dependencyMap"],[13,46,3,0],[14,2,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,0,8,0],[19,0,9,0],[20,0,10,0],[21,2,11,7],[21,11,11,16,"getOuterHTML"],[21,23,11,28,"getOuterHTML"],[21,24,11,29,"node"],[21,28,11,33],[21,30,11,35,"options"],[21,37,11,42],[21,39,11,44],[22,4,12,4],[22,11,12,11],[22,15,12,11,"renderHTML"],[22,37,12,21],[22,39,12,22,"node"],[22,43,12,26],[22,45,12,28,"options"],[22,52,12,35],[22,53,12,36],[23,2,13,0],[24,2,14,0],[25,0,15,0],[26,0,16,0],[27,0,17,0],[28,0,18,0],[29,0,19,0],[30,0,20,0],[31,2,21,7],[31,11,21,16,"getInnerHTML"],[31,23,21,28,"getInnerHTML"],[31,24,21,29,"node"],[31,28,21,33],[31,30,21,35,"options"],[31,37,21,42],[31,39,21,44],[32,4,22,4],[32,11,22,11],[32,15,22,11,"hasChildren"],[32,38,22,22],[32,40,22,23,"node"],[32,44,22,27],[32,45,22,28],[32,48,23,10,"node"],[32,52,23,14],[32,53,23,15,"children"],[32,61,23,23],[32,62,23,24,"map"],[32,65,23,27],[32,66,23,28],[32,76,23,29,"node"],[32,80,23,33],[33,6,23,33],[33,13,23,38,"getOuterHTML"],[33,25,23,50],[33,26,23,51,"node"],[33,30,23,55],[33,32,23,57,"options"],[33,39,23,64],[33,40,23,65],[34,4,23,65],[34,6,23,66],[34,7,23,67,"join"],[34,11,23,71],[34,12,23,72],[34,14,23,74],[34,15,23,75],[34,18,24,10],[34,20,24,12],[35,2,25,0],[36,2,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,0,30,0],[41,0,31,0],[42,0,32,0],[43,0,33,0],[44,2,34,7],[44,11,34,16,"getText"],[44,18,34,23,"getText"],[44,19,34,24,"node"],[44,23,34,28],[44,25,34,30],[45,4,35,4],[45,8,35,8,"Array"],[45,13,35,13],[45,14,35,14,"isArray"],[45,21,35,21],[45,22,35,22,"node"],[45,26,35,26],[45,27,35,27],[45,29,36,8],[45,36,36,15,"node"],[45,40,36,19],[45,41,36,20,"map"],[45,44,36,23],[45,45,36,24,"getText"],[45,52,36,31],[45,53,36,32],[45,54,36,33,"join"],[45,58,36,37],[45,59,36,38],[45,61,36,40],[45,62,36,41],[46,4,37,4],[46,8,37,8],[46,12,37,8,"isTag"],[46,29,37,13],[46,31,37,14,"node"],[46,35,37,18],[46,36,37,19],[46,38,38,8],[46,45,38,15,"node"],[46,49,38,19],[46,50,38,20,"name"],[46,54,38,24],[46,59,38,29],[46,63,38,33],[46,66,38,36],[46,70,38,40],[46,73,38,43,"getText"],[46,80,38,50],[46,81,38,51,"node"],[46,85,38,55],[46,86,38,56,"children"],[46,94,38,64],[46,95,38,65],[47,4,39,4],[47,8,39,8],[47,12,39,8,"isCDATA"],[47,31,39,15],[47,33,39,16,"node"],[47,37,39,20],[47,38,39,21],[47,40,40,8],[47,47,40,15,"getText"],[47,54,40,22],[47,55,40,23,"node"],[47,59,40,27],[47,60,40,28,"children"],[47,68,40,36],[47,69,40,37],[48,4,41,4],[48,8,41,8],[48,12,41,8,"isText"],[48,30,41,14],[48,32,41,15,"node"],[48,36,41,19],[48,37,41,20],[48,39,42,8],[48,46,42,15,"node"],[48,50,42,19],[48,51,42,20,"data"],[48,55,42,24],[49,4,43,4],[49,11,43,11],[49,13,43,13],[50,2,44,0],[51,2,45,0],[52,0,46,0],[53,0,47,0],[54,0,48,0],[55,0,49,0],[56,0,50,0],[57,0,51,0],[58,0,52,0],[59,2,53,7],[59,11,53,16,"textContent"],[59,22,53,27,"textContent"],[59,23,53,28,"node"],[59,27,53,32],[59,29,53,34],[60,4,54,4],[60,8,54,8,"Array"],[60,13,54,13],[60,14,54,14,"isArray"],[60,21,54,21],[60,22,54,22,"node"],[60,26,54,26],[60,27,54,27],[60,29,55,8],[60,36,55,15,"node"],[60,40,55,19],[60,41,55,20,"map"],[60,44,55,23],[60,45,55,24,"textContent"],[60,56,55,35],[60,57,55,36],[60,58,55,37,"join"],[60,62,55,41],[60,63,55,42],[60,65,55,44],[60,66,55,45],[61,4,56,4],[61,8,56,8],[61,12,56,8,"hasChildren"],[61,35,56,19],[61,37,56,20,"node"],[61,41,56,24],[61,42,56,25],[61,46,56,29],[61,47,56,30],[61,51,56,30,"isComment"],[61,72,56,39],[61,74,56,40,"node"],[61,78,56,44],[61,79,56,45],[61,81,56,47],[62,6,57,8],[62,13,57,15,"textContent"],[62,24,57,26],[62,25,57,27,"node"],[62,29,57,31],[62,30,57,32,"children"],[62,38,57,40],[62,39,57,41],[63,4,58,4],[64,4,59,4],[64,8,59,8],[64,12,59,8,"isText"],[64,30,59,14],[64,32,59,15,"node"],[64,36,59,19],[64,37,59,20],[64,39,60,8],[64,46,60,15,"node"],[64,50,60,19],[64,51,60,20,"data"],[64,55,60,24],[65,4,61,4],[65,11,61,11],[65,13,61,13],[66,2,62,0],[67,2,63,0],[68,0,64,0],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,0,70,0],[75,2,71,7],[75,11,71,16,"innerText"],[75,20,71,25,"innerText"],[75,21,71,26,"node"],[75,25,71,30],[75,27,71,32],[76,4,72,4],[76,8,72,8,"Array"],[76,13,72,13],[76,14,72,14,"isArray"],[76,21,72,21],[76,22,72,22,"node"],[76,26,72,26],[76,27,72,27],[76,29,73,8],[76,36,73,15,"node"],[76,40,73,19],[76,41,73,20,"map"],[76,44,73,23],[76,45,73,24,"innerText"],[76,54,73,33],[76,55,73,34],[76,56,73,35,"join"],[76,60,73,39],[76,61,73,40],[76,63,73,42],[76,64,73,43],[77,4,74,4],[77,8,74,8],[77,12,74,8,"hasChildren"],[77,35,74,19],[77,37,74,20,"node"],[77,41,74,24],[77,42,74,25],[77,47,74,30,"node"],[77,51,74,34],[77,52,74,35,"type"],[77,56,74,39],[77,61,74,44,"ElementType"],[77,88,74,55],[77,89,74,56,"Tag"],[77,92,74,59],[77,96,74,63],[77,100,74,63,"isCDATA"],[77,119,74,70],[77,121,74,71,"node"],[77,125,74,75],[77,126,74,76],[77,127,74,77],[77,129,74,79],[78,6,75,8],[78,13,75,15,"innerText"],[78,22,75,24],[78,23,75,25,"node"],[78,27,75,29],[78,28,75,30,"children"],[78,36,75,38],[78,37,75,39],[79,4,76,4],[80,4,77,4],[80,8,77,8],[80,12,77,8,"isText"],[80,30,77,14],[80,32,77,15,"node"],[80,36,77,19],[80,37,77,20],[80,39,78,8],[80,46,78,15,"node"],[80,50,78,19],[80,51,78,20,"data"],[80,55,78,24],[81,4,79,4],[81,11,79,11],[81,13,79,13],[82,2,80,0],[83,0,80,1],[83,3]],"functionMap":{"names":["<global>","getOuterHTML","getInnerHTML","node.children.map$argument_0","getText","textContent","innerText"],"mappings":"AAA;OCU;CDE;OEQ;4BCE,qCD;CFE;OIS;CJU;OKS;CLS;OMS;CNS"}},"type":"js/module"}]}