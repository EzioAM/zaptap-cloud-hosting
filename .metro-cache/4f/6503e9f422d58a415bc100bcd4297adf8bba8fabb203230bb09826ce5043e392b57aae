{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":177},"end":{"line":6,"column":69,"index":246}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":248},"end":{"line":7,"column":60,"index":308}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"../supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":310},"end":{"line":8,"column":46,"index":356}}],"key":"q3G/dBcB/lyqe2ZqsudXc9dkd4E=","exportNames":["*"]}},{"name":"../../config/analytics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":358},"end":{"line":9,"column":58,"index":416}}],"key":"4gjS6BEK9IQgu06QXmlywlo09Ys=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":418},"end":{"line":10,"column":54,"index":472}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.trackCustomMetric = exports.startScreenRender = exports.startApiCall = exports.endScreenRender = exports.endApiCall = exports.PerformanceMonitor = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _toConsumableArray2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[5], \"@babel/runtime/helpers/createClass\"));\n  var _asyncStorage = _interopRequireDefault(require(_dependencyMap[6], \"@react-native-async-storage/async-storage\"));\n  var _reactNative = require(_dependencyMap[7], \"react-native\");\n  var _client = require(_dependencyMap[8], \"../supabase/client\");\n  var _analytics = require(_dependencyMap[9], \"../../config/analytics\");\n  var _EventLogger = require(_dependencyMap[10], \"../../utils/EventLogger\");\n  /**\r\n   * PerformanceMonitor - Comprehensive app performance tracking service\r\n   * Monitors app launch time, screen render time, API response times, memory usage, and more\r\n   */\n  var PerformanceMonitorService = /*#__PURE__*/function () {\n    function PerformanceMonitorService() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, PerformanceMonitorService);\n      this.metrics = [];\n      this.alerts = [];\n      this.isInitialized = false;\n      this.screenStartTimes = new Map();\n      this.apiCallTimes = new Map();\n      this.metricQueue = [];\n      this.isFlushingMetrics = false;\n      this.databaseAvailable = false;\n      this.databaseUnavailableLogged = false;\n      this.config = Object.assign({\n        enabled: _analytics.ANALYTICS_CONFIG.performance.trackFPS,\n        sampleRate: _analytics.ANALYTICS_CONFIG.performance.sampleRate,\n        alertThresholds: {\n          slowAppLaunch: 3000,\n          // 3 seconds\n          slowScreenRender: 2000,\n          // 2 seconds\n          slowApiResponse: _analytics.ANALYTICS_CONFIG.performance.slowThresholdMs,\n          memoryUsagePercent: 80,\n          // 80%\n          lowBatteryPercent: 20,\n          // 20%\n          lowFpsThreshold: 50 // 50 FPS\n        },\n        trackingEnabled: {\n          appLaunch: _analytics.ANALYTICS_CONFIG.performance.trackAppLaunchTime,\n          screenRender: _analytics.ANALYTICS_CONFIG.performance.trackScreenRenderTime,\n          apiCalls: _analytics.ANALYTICS_CONFIG.performance.trackNetworkLatency,\n          memoryUsage: _analytics.ANALYTICS_CONFIG.performance.trackMemory,\n          batteryUsage: true,\n          frameRate: _analytics.ANALYTICS_CONFIG.performance.trackFPS,\n          networkLatency: _analytics.ANALYTICS_CONFIG.performance.trackNetworkLatency\n        }\n      }, config);\n      this.sessionId = this.generateSessionId();\n      this.appStartTime = Date.now();\n    }\n\n    /**\r\n     * Initialize performance monitoring\r\n     */\n    return (0, _createClass2.default)(PerformanceMonitorService, [{\n      key: \"initialize\",\n      value: (function () {\n        var _initialize = (0, _asyncToGenerator2.default)(function* () {\n          var _this = this;\n          try {\n            if (!this.config.enabled) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance monitoring disabled');\n              this.isInitialized = true; // Mark as initialized even when disabled\n              return;\n            }\n\n            // Initialize in batches to avoid blocking\n            yield Promise.resolve().then(function () {\n              // Setup periodic memory monitoring\n              if (_this.config.trackingEnabled.memoryUsage) {\n                _this.setupMemoryMonitoring();\n              }\n\n              // Setup frame rate monitoring\n              if (_this.config.trackingEnabled.frameRate) {\n                _this.setupFrameRateMonitoring();\n              }\n\n              // Setup periodic metric flushing\n              _this.setupPeriodicFlush();\n            });\n\n            // Check database availability in background (only log once)\n            this.checkDatabaseAvailability().catch(function (error) {\n              if (!_this.databaseUnavailableLogged) {\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Database not available - metrics will be stored locally only', error);\n                _this.databaseUnavailableLogged = true;\n              }\n              _this.databaseAvailable = false;\n            });\n\n            // Load offline data in background\n            this.loadOfflineData().catch(function (error) {\n              _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to load offline data', error);\n            });\n\n            // Track app launch time\n            if (this.config.trackingEnabled.appLaunch) {\n              Promise.resolve().then(function () {\n                return _this.trackAppLaunchTime();\n              });\n            }\n            this.isInitialized = true;\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance monitoring initialized');\n          } catch (error) {\n            this.isInitialized = true; // Mark as initialized to prevent blocking\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to initialize performance monitor', error);\n          }\n        });\n        function initialize() {\n          return _initialize.apply(this, arguments);\n        }\n        return initialize;\n      }()\n      /**\r\n       * Check if the database is available and accessible\r\n       */\n      )\n    }, {\n      key: \"checkDatabaseAvailability\",\n      value: (function () {\n        var _checkDatabaseAvailability = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            if (!_client.supabase) {\n              throw new Error('Supabase client not initialized');\n            }\n\n            // Test table access with INSERT capability (more comprehensive than SELECT)\n            // Create a minimal test record to verify the table exists and we can write to it\n            var testMetricId = `test-availability-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\n            var _yield$supabase$from$ = yield _client.supabase.from('performance_metrics').insert({\n                id: testMetricId,\n                type: 'custom',\n                name: 'database_availability_test',\n                value: 1,\n                unit: 'count',\n                context: {\n                  test: true\n                },\n                tags: {\n                  test: 'availability_check'\n                }\n              }),\n              insertError = _yield$supabase$from$.error;\n            if (insertError) {\n              // Handle specific error cases\n              if (insertError.code === '42P01') {\n                // Table does not exist\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Performance metrics table does not exist', {\n                  suggestion: 'Run the SQL setup script: scripts/setup-monitoring-tables.sql'\n                });\n              } else if (insertError.code === '42501') {\n                // Permission denied\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Permission denied for performance metrics table', {\n                  suggestion: 'Check RLS policies and authentication'\n                });\n              } else {\n                // Other database error\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Performance metrics table not accessible', {\n                  tableError: insertError.message,\n                  code: insertError.code\n                });\n              }\n              this.databaseAvailable = false;\n              throw new Error(`Table access error: ${insertError.message} (code: ${insertError.code})`);\n            }\n\n            // Clean up the test record\n            yield _client.supabase.from('performance_metrics').delete().eq('id', testMetricId);\n            this.databaseAvailable = true;\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Database available for metrics storage');\n          } catch (error) {\n            this.databaseAvailable = false;\n\n            // Log specific guidance based on error type\n            var message = 'Database not available - will store metrics locally';\n            var errorDetails = {\n              error: error instanceof Error ? error.message : String(error)\n            };\n            if (error instanceof Error) {\n              if (error.message.includes('42P01') || error.message.includes('does not exist')) {\n                message = 'Performance metrics table missing - run setup script to create tables';\n                errorDetails.setupScript = 'scripts/setup-monitoring-tables.sql';\n              } else if (error.message.includes('42501') || error.message.includes('permission')) {\n                message = 'Database permission denied - check RLS policies';\n              } else if (error.message.includes('not initialized')) {\n                message = 'Supabase not configured - check environment variables';\n              }\n            }\n            _EventLogger.EventLogger.warn('PerformanceMonitor', message, errorDetails);\n            throw error;\n          }\n        });\n        function checkDatabaseAvailability() {\n          return _checkDatabaseAvailability.apply(this, arguments);\n        }\n        return checkDatabaseAvailability;\n      }()\n      /**\r\n       * Track app launch time\r\n       */\n      )\n    }, {\n      key: \"trackAppLaunchTime\",\n      value: function trackAppLaunchTime() {\n        var _this2 = this;\n        _reactNative.InteractionManager.runAfterInteractions(function () {\n          var launchTime = Date.now() - _this2.appStartTime;\n          _this2.trackMetric({\n            type: 'app_launch',\n            name: 'app_launch_time',\n            value: launchTime,\n            unit: 'ms',\n            context: {\n              platform: _reactNative.Platform.OS,\n              os_version: _reactNative.Platform.Version.toString()\n            }\n          });\n\n          // Check for slow launch\n          if (launchTime > _this2.config.alertThresholds.slowAppLaunch) {\n            _this2.createAlert({\n              type: 'slow_launch',\n              severity: launchTime > _this2.config.alertThresholds.slowAppLaunch * 2 ? 'high' : 'medium',\n              message: `App launch took ${launchTime}ms`,\n              value: launchTime,\n              threshold: _this2.config.alertThresholds.slowAppLaunch\n            });\n          }\n          _EventLogger.EventLogger.performance('App', 'launch_time', launchTime, {\n            platform: _reactNative.Platform.OS\n          });\n        });\n      }\n\n      /**\r\n       * Start tracking screen render time\r\n       */\n    }, {\n      key: \"startScreenRender\",\n      value: function startScreenRender(screenName) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.screenRender) return;\n        var startTime = Date.now();\n        this.screenStartTimes.set(screenName, startTime);\n        _EventLogger.EventLogger.debug('PerformanceMonitor', `Started tracking render for ${screenName}`);\n      }\n\n      /**\r\n       * End tracking screen render time\r\n       */\n    }, {\n      key: \"endScreenRender\",\n      value: function endScreenRender(screenName, additionalContext) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.screenRender) return;\n        var startTime = this.screenStartTimes.get(screenName);\n        if (!startTime) {\n          _EventLogger.EventLogger.warn('PerformanceMonitor', `No start time found for screen ${screenName}`);\n          return;\n        }\n        var renderTime = Date.now() - startTime;\n        this.screenStartTimes.delete(screenName);\n        this.trackMetric({\n          type: 'screen_render',\n          name: 'screen_render_time',\n          value: renderTime,\n          unit: 'ms',\n          context: Object.assign({\n            screen_name: screenName\n          }, additionalContext)\n        });\n\n        // Check for slow render\n        if (renderTime > this.config.alertThresholds.slowScreenRender) {\n          this.createAlert({\n            type: 'slow_render',\n            severity: renderTime > this.config.alertThresholds.slowScreenRender * 2 ? 'high' : 'medium',\n            message: `Screen ${screenName} rendered in ${renderTime}ms`,\n            value: renderTime,\n            threshold: this.config.alertThresholds.slowScreenRender,\n            context: {\n              screen_name: screenName\n            }\n          });\n        }\n        _EventLogger.EventLogger.performance('Screen', `render_${screenName}`, renderTime);\n      }\n\n      /**\r\n       * Start tracking API call\r\n       */\n    }, {\n      key: \"startApiCall\",\n      value: function startApiCall(requestId, endpoint, method) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.apiCalls) return;\n        var startTime = Date.now();\n        this.apiCallTimes.set(requestId, startTime);\n        _EventLogger.EventLogger.debug('PerformanceMonitor', `Started tracking API call ${method} ${endpoint}`, {\n          requestId: requestId\n        });\n      }\n\n      /**\r\n       * End tracking API call\r\n       */\n    }, {\n      key: \"endApiCall\",\n      value: function endApiCall(requestId, endpoint, method, statusCode, error) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.apiCalls) return;\n        var startTime = this.apiCallTimes.get(requestId);\n        if (!startTime) {\n          _EventLogger.EventLogger.warn('PerformanceMonitor', `No start time found for API call ${requestId}`);\n          return;\n        }\n        var responseTime = Date.now() - startTime;\n        this.apiCallTimes.delete(requestId);\n        this.trackMetric({\n          type: 'api_call',\n          name: 'api_response_time',\n          value: responseTime,\n          unit: 'ms',\n          context: {\n            api_endpoint: endpoint,\n            method: method,\n            status_code: statusCode,\n            success: !error && statusCode >= 200 && statusCode < 300,\n            error_message: error == null ? void 0 : error.message\n          }\n        });\n\n        // Check for slow API response\n        if (responseTime > this.config.alertThresholds.slowApiResponse) {\n          this.createAlert({\n            type: 'slow_api',\n            severity: responseTime > this.config.alertThresholds.slowApiResponse * 2 ? 'high' : 'medium',\n            message: `API ${method} ${endpoint} responded in ${responseTime}ms`,\n            value: responseTime,\n            threshold: this.config.alertThresholds.slowApiResponse,\n            context: {\n              endpoint: endpoint,\n              method: method,\n              status_code: statusCode\n            }\n          });\n        }\n        _EventLogger.EventLogger.networkRequest(endpoint, method, statusCode, responseTime, error);\n      }\n\n      /**\r\n       * Track custom performance metric\r\n       */\n    }, {\n      key: \"trackCustomMetric\",\n      value: function trackCustomMetric(name, value, unit, context) {\n        if (!this.shouldTrack()) return;\n        this.trackMetric({\n          type: 'custom',\n          name: name,\n          value: value,\n          unit: unit,\n          context: context\n        });\n        _EventLogger.EventLogger.performance('Custom', name, value, context);\n      }\n\n      /**\r\n       * Track memory usage\r\n       */\n    }, {\n      key: \"trackMemoryUsage\",\n      value: function trackMemoryUsage() {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.memoryUsage) return;\n        try {\n          // In React Native, memory info is limited\n          // You'd typically use a native module or react-native-device-info\n\n          if (typeof performance.memory !== 'undefined') {\n            var memInfo = performance.memory;\n            var usedMemory = memInfo.usedJSHeapSize;\n            var totalMemory = memInfo.totalJSHeapSize;\n            var memoryPercent = usedMemory / totalMemory * 100;\n            this.trackMetric({\n              type: 'memory_usage',\n              name: 'js_heap_usage',\n              value: usedMemory,\n              unit: 'bytes',\n              context: {\n                total_memory: totalMemory,\n                usage_percent: memoryPercent,\n                memory_pressure: memoryPercent > this.config.alertThresholds.memoryUsagePercent\n              }\n            });\n\n            // Check for memory warning\n            if (memoryPercent > this.config.alertThresholds.memoryUsagePercent) {\n              this.createAlert({\n                type: 'memory_warning',\n                severity: memoryPercent > 90 ? 'high' : 'medium',\n                message: `Memory usage at ${memoryPercent.toFixed(1)}%`,\n                value: memoryPercent,\n                threshold: this.config.alertThresholds.memoryUsagePercent\n              });\n            }\n          }\n        } catch (error) {\n          _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to track memory usage', error);\n        }\n      }\n\n      /**\r\n       * Track battery level (would need native module)\r\n       */\n    }, {\n      key: \"trackBatteryUsage\",\n      value: function trackBatteryUsage() {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.batteryUsage) return;\n\n        // In a real implementation, you'd use react-native-device-info\n        // DeviceInfo.getBatteryLevel().then((batteryLevel) => {\n        //   this.trackMetric({\n        //     type: 'battery',\n        //     name: 'battery_level',\n        //     value: batteryLevel * 100,\n        //     unit: 'percent',\n        //   });\n        //   \n        //   if (batteryLevel * 100 < this.config.alertThresholds.lowBatteryPercent) {\n        //     this.createAlert({\n        //       type: 'low_battery',\n        //       severity: 'medium',\n        //       message: `Battery level at ${(batteryLevel * 100).toFixed(1)}%`,\n        //       value: batteryLevel * 100,\n        //       threshold: this.config.alertThresholds.lowBatteryPercent,\n        //     });\n        //   }\n        // });\n      }\n\n      /**\r\n       * Get performance summary\r\n       */\n    }, {\n      key: \"getPerformanceSummary\",\n      value: function getPerformanceSummary() {\n        var summary = {\n          app_launch_time: this.calculateStats(this.metrics.filter(function (m) {\n            return m.name === 'app_launch_time';\n          })),\n          screen_render_times: this.groupScreenRenderStats(),\n          api_performance: this.groupApiPerformanceStats(),\n          memory_usage: this.calculateMemoryStats(),\n          battery_impact: this.calculateBatteryStats(),\n          frame_rate: this.calculateFrameRateStats()\n        };\n        return summary;\n      }\n\n      /**\r\n       * Get recent alerts\r\n       */\n    }, {\n      key: \"getRecentAlerts\",\n      value: function getRecentAlerts() {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n        return this.alerts.sort(function (a, b) {\n          return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();\n        }).slice(0, limit);\n      }\n\n      /**\r\n       * Clear all metrics and alerts\r\n       */\n    }, {\n      key: \"clearData\",\n      value: function clearData() {\n        this.metrics = [];\n        this.alerts = [];\n        _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance data cleared');\n      }\n\n      /**\r\n       * Export performance data\r\n       */\n    }, {\n      key: \"exportData\",\n      value: function exportData() {\n        return {\n          metrics: (0, _toConsumableArray2.default)(this.metrics),\n          alerts: (0, _toConsumableArray2.default)(this.alerts)\n        };\n      }\n\n      /**\r\n       * Track a performance metric internally\r\n       */\n    }, {\n      key: \"trackMetric\",\n      value: function trackMetric(metricData) {\n        var metric = Object.assign({\n          id: this.generateMetricId(),\n          timestamp: new Date().toISOString(),\n          context: Object.assign({\n            session_id: this.sessionId\n          }, metricData.context)\n        }, metricData);\n        this.metrics.push(metric);\n        this.metricQueue.push(metric);\n\n        // Maintain metrics limit\n        if (this.metrics.length > 1000) {\n          this.metrics = this.metrics.slice(-1000);\n        }\n\n        // Auto-flush if queue is full\n        if (this.metricQueue.length >= 50) {\n          this.flushMetrics();\n        }\n      }\n\n      /**\r\n       * Create a performance alert\r\n       */\n    }, {\n      key: \"createAlert\",\n      value: function createAlert(alertData) {\n        var alert = Object.assign({\n          id: this.generateAlertId(),\n          timestamp: new Date().toISOString()\n        }, alertData);\n        this.alerts.push(alert);\n\n        // Maintain alerts limit\n        if (this.alerts.length > 100) {\n          this.alerts = this.alerts.slice(-100);\n        }\n\n        // Store alert offline if database is not available\n        if (!this.databaseAvailable) {\n          this.storeOfflineAlerts([alert]).catch(function (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to store alert offline', error);\n          });\n        }\n        _EventLogger.EventLogger.warn('PerformanceMonitor', `Performance alert: ${alert.message}`, {\n          type: alert.type,\n          severity: alert.severity,\n          value: alert.value,\n          threshold: alert.threshold\n        });\n      }\n\n      /**\r\n       * Setup memory monitoring\r\n       */\n    }, {\n      key: \"setupMemoryMonitoring\",\n      value: function setupMemoryMonitoring() {\n        var _this3 = this;\n        this.memoryCheckInterval = setInterval(function () {\n          _this3.trackMemoryUsage();\n        }, 30000); // Every 30 seconds\n      }\n\n      /**\r\n       * Setup frame rate monitoring\r\n       */\n    }, {\n      key: \"setupFrameRateMonitoring\",\n      value: function setupFrameRateMonitoring() {\n        // Frame rate monitoring would require a native module\n        // This is a placeholder for the concept\n        _EventLogger.EventLogger.debug('PerformanceMonitor', 'Frame rate monitoring setup (requires native module)');\n      }\n\n      /**\r\n       * Setup periodic metric flushing\r\n       */\n    }, {\n      key: \"setupPeriodicFlush\",\n      value: function setupPeriodicFlush() {\n        var _this4 = this;\n        // Delay initial flush to ensure services are fully ready\n        setTimeout(function () {\n          setInterval(function () {\n            if (_this4.isInitialized && _this4.config.enabled && _this4.metricQueue.length > 0) {\n              _EventLogger.EventLogger.debug('PerformanceMonitor', 'Periodic flush triggered', {\n                queueLength: _this4.metricQueue.length\n              });\n              _this4.flushMetrics().catch(function (error) {\n                _EventLogger.EventLogger.error('PerformanceMonitor', 'Periodic flush failed', error);\n              });\n            }\n          }, 60000); // Flush every minute\n        }, 5000); // Wait 5 seconds before starting periodic flush\n      }\n\n      /**\r\n       * Flush metrics to backend\r\n       */\n    }, {\n      key: \"flush\",\n      value: (function () {\n        var _flush = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.isInitialized) {\n            _EventLogger.EventLogger.warn('PerformanceMonitor', 'Cannot flush before initialization');\n            return;\n          }\n          return this.flushMetrics();\n        });\n        function flush() {\n          return _flush.apply(this, arguments);\n        }\n        return flush;\n      }()\n      /**\r\n       * Flush metrics to backend (internal implementation)\r\n       */\n      )\n    }, {\n      key: \"flushMetrics\",\n      value: (function () {\n        var _flushMetrics = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.config.enabled || !this.isInitialized || this.isFlushingMetrics || this.metricQueue.length === 0) {\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Skipping flush', {\n              enabled: this.config.enabled,\n              initialized: this.isInitialized,\n              flushing: this.isFlushingMetrics,\n              queueLength: this.metricQueue.length\n            });\n            return;\n          }\n\n          // If database is not available, just store metrics offline and don't try to send\n          if (!this.databaseAvailable) {\n            var _metrics = (0, _toConsumableArray2.default)(this.metricQueue);\n            this.metricQueue = [];\n            yield this.storeOfflineMetrics(_metrics);\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Stored metrics offline - database not available', {\n              count: _metrics.length\n            });\n            return;\n          }\n          this.isFlushingMetrics = true;\n          var metrics = (0, _toConsumableArray2.default)(this.metricQueue);\n          this.metricQueue = [];\n          try {\n            yield this.sendMetrics(metrics);\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Metrics flushed successfully', {\n              count: metrics.length\n            });\n          } catch (error) {\n            var _this$metricQueue;\n            // Put metrics back in queue and store offline\n            (_this$metricQueue = this.metricQueue).unshift.apply(_this$metricQueue, (0, _toConsumableArray2.default)(metrics));\n            yield this.storeOfflineMetrics(metrics);\n\n            // Log actual error details\n            var errorDetails = {\n              name: error instanceof Error ? error.name : 'UnknownError',\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined,\n              metricCount: metrics.length,\n              isSupabaseError: error && typeof error === 'object' && 'code' in error,\n              errorCode: error && typeof error === 'object' && 'code' in error ? error.code : undefined\n            };\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to flush metrics - detailed error', errorDetails);\n          } finally {\n            this.isFlushingMetrics = false;\n          }\n        });\n        function flushMetrics() {\n          return _flushMetrics.apply(this, arguments);\n        }\n        return flushMetrics;\n      }()\n      /**\r\n       * Send metrics to backend\r\n       */\n      )\n    }, {\n      key: \"sendMetrics\",\n      value: (function () {\n        var _sendMetrics = (0, _asyncToGenerator2.default)(function* (metrics) {\n          // Check if Supabase is properly configured\n          if (!_client.supabase) {\n            throw new Error('Supabase client not initialized');\n          }\n\n          // Database availability is already checked in checkDatabaseAvailability()\n          // No need to test again here since we only call this when databaseAvailable is true\n\n          var errors = [];\n          var results = yield Promise.allSettled(metrics.map(/*#__PURE__*/function () {\n            var _ref = (0, _asyncToGenerator2.default)(function* (metric) {\n              try {\n                var _yield$supabase$from$2 = yield _client.supabase.from('performance_metrics').insert({\n                    id: metric.id,\n                    timestamp: metric.timestamp,\n                    type: metric.type,\n                    name: metric.name,\n                    value: metric.value,\n                    unit: metric.unit,\n                    context: metric.context,\n                    tags: metric.tags\n                  }),\n                  error = _yield$supabase$from$2.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('PerformanceMonitor', `Failed to insert metric ${metric.id}`, {\n                    supabaseError: error,\n                    errorCode: error.code,\n                    errorMessage: error.message,\n                    metricId: metric.id\n                  });\n                  throw new Error(`Supabase error: ${error.message} (code: ${error.code})`);\n                }\n                return {\n                  success: true,\n                  metricId: metric.id\n                };\n              } catch (insertError) {\n                _EventLogger.EventLogger.error('PerformanceMonitor', `Database insert failed for metric ${metric.id}`, {\n                  error: insertError,\n                  metricId: metric.id\n                });\n                throw insertError;\n              }\n            });\n            return function (_x2) {\n              return _ref.apply(this, arguments);\n            };\n          }()));\n\n          // Collect all errors from failed insertions\n          results.forEach(function (result, index) {\n            if (result.status === 'rejected') {\n              errors.push(new Error(`Metric ${metrics[index].id}: ${result.reason}`));\n            }\n          });\n\n          // If any errors occurred, throw with details\n          if (errors.length > 0) {\n            var errorMessage = `Failed to send ${errors.length}/${metrics.length} performance metrics:\\n${errors.map(function (e) {\n              return e.message;\n            }).join('\\n')}`;\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Batch send failed with detailed errors', {\n              failedCount: errors.length,\n              totalCount: metrics.length,\n              errors: errors.map(function (e) {\n                return {\n                  name: e.name,\n                  message: e.message,\n                  stack: e.stack\n                };\n              })\n            });\n            throw new Error(errorMessage);\n          }\n        });\n        function sendMetrics(_x) {\n          return _sendMetrics.apply(this, arguments);\n        }\n        return sendMetrics;\n      }()\n      /**\r\n       * Load offline data (metrics and alerts)\r\n       */\n      )\n    }, {\n      key: \"loadOfflineData\",\n      value: (function () {\n        var _loadOfflineData = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var _yield$AsyncStorage$m = yield _asyncStorage.default.multiGet([PerformanceMonitorService.OFFLINE_METRICS_KEY, PerformanceMonitorService.OFFLINE_ALERTS_KEY]),\n              _yield$AsyncStorage$m2 = (0, _slicedToArray2.default)(_yield$AsyncStorage$m, 2),\n              offlineMetrics = _yield$AsyncStorage$m2[0],\n              offlineAlerts = _yield$AsyncStorage$m2[1];\n            var loadedMetrics = 0;\n            var loadedAlerts = 0;\n            if (offlineMetrics[1]) {\n              var _this$metricQueue2;\n              var metrics = JSON.parse(offlineMetrics[1]);\n\n              // Clean up old metrics (older than 24 hours) and limit to most recent 100\n              var oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;\n              var recentMetrics = metrics.filter(function (m) {\n                return m.timestamp > oneDayAgo;\n              }).slice(-100); // Keep only the most recent 100\n\n              (_this$metricQueue2 = this.metricQueue).unshift.apply(_this$metricQueue2, (0, _toConsumableArray2.default)(recentMetrics));\n              loadedMetrics = recentMetrics.length;\n              yield _asyncStorage.default.removeItem(PerformanceMonitorService.OFFLINE_METRICS_KEY);\n              if (metrics.length !== recentMetrics.length) {\n                _EventLogger.EventLogger.debug('PerformanceMonitor', `Cleaned up ${metrics.length - recentMetrics.length} old/excess metrics`);\n              }\n            }\n            if (offlineAlerts[1]) {\n              var _this$alerts;\n              var alerts = JSON.parse(offlineAlerts[1]);\n\n              // Limit alerts to most recent 50\n              var recentAlerts = alerts.slice(-50);\n              (_this$alerts = this.alerts).unshift.apply(_this$alerts, (0, _toConsumableArray2.default)(recentAlerts));\n              loadedAlerts = recentAlerts.length;\n              yield _asyncStorage.default.removeItem(PerformanceMonitorService.OFFLINE_ALERTS_KEY);\n              if (alerts.length !== recentAlerts.length) {\n                _EventLogger.EventLogger.debug('PerformanceMonitor', `Trimmed alerts from ${alerts.length} to ${recentAlerts.length}`);\n              }\n            }\n            if (loadedMetrics > 0 || loadedAlerts > 0) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Loaded offline performance data', {\n                metricsLoaded: loadedMetrics,\n                alertsLoaded: loadedAlerts\n              });\n\n              // Try to sync loaded data when database becomes available\n              if (this.databaseAvailable) {\n                this.syncOfflineData().catch(function (error) {\n                  _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to sync offline data immediately', error);\n                });\n              }\n            }\n          } catch (error) {\n            // Handle oversized data error specifically\n            if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && error.message.includes('Row too big')) {\n              _EventLogger.EventLogger.warn('PerformanceMonitor', 'Offline data too large, clearing data', {\n                error: error.message\n              });\n              yield this.clearOversizedOfflineData();\n              this.metricQueue = [];\n              this.alerts = [];\n            } else {\n              _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to load offline data', error);\n            }\n          }\n        });\n        function loadOfflineData() {\n          return _loadOfflineData.apply(this, arguments);\n        }\n        return loadOfflineData;\n      }()\n      /**\r\n       * Clear oversized offline data when it cannot be loaded\r\n       */\n      )\n    }, {\n      key: \"clearOversizedOfflineData\",\n      value: (function () {\n        var _clearOversizedOfflineData = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield _asyncStorage.default.multiRemove([PerformanceMonitorService.OFFLINE_METRICS_KEY, PerformanceMonitorService.OFFLINE_ALERTS_KEY]);\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Cleared oversized offline data');\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to clear offline data', error);\n          }\n        });\n        function clearOversizedOfflineData() {\n          return _clearOversizedOfflineData.apply(this, arguments);\n        }\n        return clearOversizedOfflineData;\n      }()\n      /**\r\n       * Store metrics offline\r\n       */\n      )\n    }, {\n      key: \"storeOfflineMetrics\",\n      value: (function () {\n        var _storeOfflineMetrics = (0, _asyncToGenerator2.default)(function* (metrics) {\n          try {\n            // Get existing offline metrics to append to\n            var existingData = yield _asyncStorage.default.getItem(PerformanceMonitorService.OFFLINE_METRICS_KEY);\n            var existingMetrics = existingData ? JSON.parse(existingData) : [];\n\n            // Combine with new metrics\n            var allMetrics = [].concat((0, _toConsumableArray2.default)(existingMetrics), (0, _toConsumableArray2.default)(metrics));\n\n            // Limit offline storage to prevent storage bloat (keep last 100 metrics to avoid cursor overflow)\n            var maxOfflineMetrics = 100;\n            if (allMetrics.length > maxOfflineMetrics) {\n              allMetrics.splice(0, allMetrics.length - maxOfflineMetrics);\n              _EventLogger.EventLogger.debug('PerformanceMonitor', `Trimmed offline metrics to ${maxOfflineMetrics} most recent`);\n            }\n\n            // Check size before storing (rough estimate: 2KB per metric max)\n            var estimatedSize = JSON.stringify(allMetrics).length;\n            if (estimatedSize > 200000) {\n              // ~200KB limit\n              // Keep only the most recent 50 if still too large\n              allMetrics.splice(0, allMetrics.length - 50);\n              _EventLogger.EventLogger.warn('PerformanceMonitor', 'Offline metrics too large, reduced to 50 most recent');\n            }\n            yield _asyncStorage.default.setItem(PerformanceMonitorService.OFFLINE_METRICS_KEY, JSON.stringify(allMetrics));\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Stored metrics offline', {\n              newCount: metrics.length,\n              totalStored: allMetrics.length\n            });\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to store offline metrics', error);\n          }\n        });\n        function storeOfflineMetrics(_x3) {\n          return _storeOfflineMetrics.apply(this, arguments);\n        }\n        return storeOfflineMetrics;\n      }()\n      /**\r\n       * Store alerts offline\r\n       */\n      )\n    }, {\n      key: \"storeOfflineAlerts\",\n      value: (function () {\n        var _storeOfflineAlerts = (0, _asyncToGenerator2.default)(function* (alerts) {\n          try {\n            // Get existing offline alerts to append to\n            var existingData = yield _asyncStorage.default.getItem(PerformanceMonitorService.OFFLINE_ALERTS_KEY);\n            var existingAlerts = existingData ? JSON.parse(existingData) : [];\n\n            // Combine with new alerts\n            var allAlerts = [].concat((0, _toConsumableArray2.default)(existingAlerts), (0, _toConsumableArray2.default)(alerts));\n\n            // Limit offline storage to prevent storage bloat (keep last 50 alerts to avoid cursor overflow)\n            var maxOfflineAlerts = 50;\n            if (allAlerts.length > maxOfflineAlerts) {\n              allAlerts.splice(0, allAlerts.length - maxOfflineAlerts);\n              _EventLogger.EventLogger.debug('PerformanceMonitor', `Trimmed offline alerts to ${maxOfflineAlerts} most recent`);\n            }\n\n            // Check size before storing (rough estimate: 3KB per alert max)\n            var estimatedSize = JSON.stringify(allAlerts).length;\n            if (estimatedSize > 150000) {\n              // ~150KB limit\n              // Keep only the most recent 25 if still too large\n              allAlerts.splice(0, allAlerts.length - 25);\n              _EventLogger.EventLogger.warn('PerformanceMonitor', 'Offline alerts too large, reduced to 25 most recent');\n            }\n            yield _asyncStorage.default.setItem(PerformanceMonitorService.OFFLINE_ALERTS_KEY, JSON.stringify(allAlerts));\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Stored alerts offline', {\n              newCount: alerts.length,\n              totalStored: allAlerts.length\n            });\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to store offline alerts', error);\n          }\n        });\n        function storeOfflineAlerts(_x4) {\n          return _storeOfflineAlerts.apply(this, arguments);\n        }\n        return storeOfflineAlerts;\n      }()\n      /**\r\n       * Sync offline data when database becomes available\r\n       */\n      )\n    }, {\n      key: \"syncOfflineData\",\n      value: (function () {\n        var _syncOfflineData = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.databaseAvailable || !this.isInitialized) {\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Cannot sync offline data - database not available or not initialized');\n            return;\n          }\n          try {\n            // Check if we have metrics in queue that came from offline storage\n            if (this.metricQueue.length > 0) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Syncing offline metrics to database', {\n                count: this.metricQueue.length\n              });\n              yield this.flushMetrics();\n            }\n\n            // Note: Alerts are typically not sent to database individually like metrics\n            // They're mainly used locally for monitoring and debugging purposes\n            // If alerts need to be synced, implement alert syncing logic here\n\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Offline data sync completed');\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to sync offline data', error);\n          }\n        });\n        function syncOfflineData() {\n          return _syncOfflineData.apply(this, arguments);\n        }\n        return syncOfflineData;\n      }()\n      /**\r\n       * Check database availability and sync offline data if newly available\r\n       */\n      )\n    }, {\n      key: \"recheckDatabaseAvailability\",\n      value: (function () {\n        var _recheckDatabaseAvailability = (0, _asyncToGenerator2.default)(function* () {\n          var wasAvailable = this.databaseAvailable;\n          try {\n            yield this.checkDatabaseAvailability();\n\n            // If database just became available, sync offline data and reset log flag\n            if (!wasAvailable && this.databaseAvailable) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Database became available - syncing offline data');\n              this.databaseUnavailableLogged = false; // Reset so we can log again if it goes down\n              yield this.syncOfflineData();\n            }\n          } catch (error) {\n            this.databaseAvailable = false;\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Database still not available');\n          }\n        });\n        function recheckDatabaseAvailability() {\n          return _recheckDatabaseAvailability.apply(this, arguments);\n        }\n        return recheckDatabaseAvailability;\n      }()\n      /**\r\n       * Check if we should track (sampling)\r\n       */\n      )\n    }, {\n      key: \"shouldTrack\",\n      value: function shouldTrack() {\n        if (!this.config.enabled || !this.isInitialized) {\n          return false;\n        }\n\n        // Always track in development\n        if (__DEV__) {\n          return true;\n        }\n\n        // Apply sample rate\n        return Math.random() < this.config.sampleRate;\n      }\n\n      /**\r\n       * Calculate statistics for metrics\r\n       */\n    }, {\n      key: \"calculateStats\",\n      value: function calculateStats(metrics) {\n        if (metrics.length === 0) {\n          return {\n            average: 0,\n            p50: 0,\n            p90: 0,\n            p99: 0,\n            samples: 0\n          };\n        }\n        var values = metrics.map(function (m) {\n          return m.value;\n        }).sort(function (a, b) {\n          return a - b;\n        });\n        var len = values.length;\n        return {\n          average: values.reduce(function (a, b) {\n            return a + b;\n          }, 0) / len,\n          p50: values[Math.floor(len * 0.5)],\n          p90: values[Math.floor(len * 0.9)],\n          p99: values[Math.floor(len * 0.99)],\n          samples: len\n        };\n      }\n\n      /**\r\n       * Group screen render statistics\r\n       */\n    }, {\n      key: \"groupScreenRenderStats\",\n      value: function groupScreenRenderStats() {\n        var screenMetrics = this.metrics.filter(function (m) {\n          return m.type === 'screen_render';\n        });\n        var grouped = {};\n        screenMetrics.forEach(function (metric) {\n          var _metric$context;\n          var screenName = ((_metric$context = metric.context) == null ? void 0 : _metric$context.screen_name) || 'unknown';\n          if (!grouped[screenName]) {\n            grouped[screenName] = [];\n          }\n          grouped[screenName].push(metric);\n        });\n        var result = {};\n        Object.entries(grouped).forEach(function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n            screenName = _ref3[0],\n            metrics = _ref3[1];\n          var values = metrics.map(function (m) {\n            return m.value;\n          });\n          var sortedValues = values.sort(function (a, b) {\n            return a - b;\n          });\n          result[screenName] = {\n            average: values.reduce(function (a, b) {\n              return a + b;\n            }, 0) / values.length,\n            p90: sortedValues[Math.floor(sortedValues.length * 0.9)],\n            samples: values.length\n          };\n        });\n        return result;\n      }\n\n      /**\r\n       * Group API performance statistics\r\n       */\n    }, {\n      key: \"groupApiPerformanceStats\",\n      value: function groupApiPerformanceStats() {\n        var apiMetrics = this.metrics.filter(function (m) {\n          return m.type === 'api_call';\n        });\n        var grouped = {};\n        apiMetrics.forEach(function (metric) {\n          var _metric$context2;\n          var endpoint = ((_metric$context2 = metric.context) == null ? void 0 : _metric$context2.api_endpoint) || 'unknown';\n          if (!grouped[endpoint]) {\n            grouped[endpoint] = [];\n          }\n          grouped[endpoint].push(metric);\n        });\n        var result = {};\n        Object.entries(grouped).forEach(function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n            endpoint = _ref5[0],\n            metrics = _ref5[1];\n          var responseTimes = metrics.map(function (m) {\n            return m.value;\n          });\n          var successfulRequests = metrics.filter(function (m) {\n            var _m$context;\n            return ((_m$context = m.context) == null ? void 0 : _m$context.success) === true;\n          });\n          var errorRequests = metrics.filter(function (m) {\n            var _m$context2;\n            return ((_m$context2 = m.context) == null ? void 0 : _m$context2.success) === false;\n          });\n          result[endpoint] = {\n            average_response_time: responseTimes.reduce(function (a, b) {\n              return a + b;\n            }, 0) / responseTimes.length,\n            success_rate: successfulRequests.length / metrics.length * 100,\n            error_rate: errorRequests.length / metrics.length * 100,\n            total_requests: metrics.length\n          };\n        });\n        return result;\n      }\n\n      /**\r\n       * Calculate memory statistics\r\n       */\n    }, {\n      key: \"calculateMemoryStats\",\n      value: function calculateMemoryStats() {\n        var memoryMetrics = this.metrics.filter(function (m) {\n          return m.type === 'memory_usage';\n        });\n        if (memoryMetrics.length === 0) {\n          return {\n            average: 0,\n            peak: 0,\n            warnings: 0\n          };\n        }\n        var values = memoryMetrics.map(function (m) {\n          return m.value;\n        });\n        var warnings = memoryMetrics.filter(function (m) {\n          var _m$context3;\n          return ((_m$context3 = m.context) == null ? void 0 : _m$context3.memory_pressure) === true;\n        }).length;\n        return {\n          average: values.reduce(function (a, b) {\n            return a + b;\n          }, 0) / values.length,\n          peak: Math.max.apply(Math, (0, _toConsumableArray2.default)(values)),\n          warnings: warnings\n        };\n      }\n\n      /**\r\n       * Calculate battery statistics\r\n       */\n    }, {\n      key: \"calculateBatteryStats\",\n      value: function calculateBatteryStats() {\n        var batteryMetrics = this.metrics.filter(function (m) {\n          return m.type === 'battery';\n        });\n        return {\n          average_drain: 0,\n          // Would calculate based on battery level changes\n          high_usage_events: 0 // Would track periods of high CPU/GPU usage\n        };\n      }\n\n      /**\r\n       * Calculate frame rate statistics\r\n       */\n    }, {\n      key: \"calculateFrameRateStats\",\n      value: function calculateFrameRateStats() {\n        // Would be populated by actual frame rate monitoring\n        return {\n          average_fps: 60,\n          // Default assumption\n          dropped_frames: 0\n        };\n      }\n\n      /**\r\n       * Generate metric ID\r\n       */\n    }, {\n      key: \"generateMetricId\",\n      value: function generateMetricId() {\n        return `perf-metric-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Generate alert ID\r\n       */\n    }, {\n      key: \"generateAlertId\",\n      value: function generateAlertId() {\n        return `perf-alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Generate session ID\r\n       */\n    }, {\n      key: \"generateSessionId\",\n      value: function generateSessionId() {\n        return `perf-session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Cleanup when shutting down\r\n       */\n    }, {\n      key: \"shutdown\",\n      value: (function () {\n        var _shutdown = (0, _asyncToGenerator2.default)(function* () {\n          if (this.memoryCheckInterval) {\n            clearInterval(this.memoryCheckInterval);\n          }\n\n          // Flush remaining metrics\n          if (this.metricQueue.length > 0) {\n            yield this.flushMetrics();\n          }\n          this.isInitialized = false;\n          _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance monitor shut down');\n        });\n        function shutdown() {\n          return _shutdown.apply(this, arguments);\n        }\n        return shutdown;\n      }())\n    }]);\n  }(); // Singleton instance\n  // Track if we've already logged database unavailability\n  // Storage keys\n  PerformanceMonitorService.OFFLINE_METRICS_KEY = 'performance_metrics_offline';\n  PerformanceMonitorService.OFFLINE_ALERTS_KEY = 'performance_alerts_offline';\n  var PerformanceMonitor = exports.PerformanceMonitor = new PerformanceMonitorService();\n\n  // Convenience functions\n  var startScreenRender = exports.startScreenRender = function startScreenRender(screenName) {\n    PerformanceMonitor.startScreenRender(screenName);\n  };\n  var endScreenRender = exports.endScreenRender = function endScreenRender(screenName, context) {\n    PerformanceMonitor.endScreenRender(screenName, context);\n  };\n  var startApiCall = exports.startApiCall = function startApiCall(requestId, endpoint, method) {\n    PerformanceMonitor.startApiCall(requestId, endpoint, method);\n  };\n  var endApiCall = exports.endApiCall = function endApiCall(requestId, endpoint, method, statusCode, error) {\n    PerformanceMonitor.endApiCall(requestId, endpoint, method, statusCode, error);\n  };\n  var trackCustomMetric = exports.trackCustomMetric = function trackCustomMetric(name, value, unit, context) {\n    PerformanceMonitor.trackCustomMetric(name, value, unit, context);\n  };\n\n  // Export types\n});","lineCount":1299,"map":[[12,2,6,0],[12,6,6,0,"_asyncStorage"],[12,19,6,0],[12,22,6,0,"_interopRequireDefault"],[12,44,6,0],[12,45,6,0,"require"],[12,52,6,0],[12,53,6,0,"_dependencyMap"],[12,67,6,0],[13,2,7,0],[13,6,7,0,"_reactNative"],[13,18,7,0],[13,21,7,0,"require"],[13,28,7,0],[13,29,7,0,"_dependencyMap"],[13,43,7,0],[14,2,8,0],[14,6,8,0,"_client"],[14,13,8,0],[14,16,8,0,"require"],[14,23,8,0],[14,24,8,0,"_dependencyMap"],[14,38,8,0],[15,2,9,0],[15,6,9,0,"_analytics"],[15,16,9,0],[15,19,9,0,"require"],[15,26,9,0],[15,27,9,0,"_dependencyMap"],[15,41,9,0],[16,2,10,0],[16,6,10,0,"_EventLogger"],[16,18,10,0],[16,21,10,0,"require"],[16,28,10,0],[16,29,10,0,"_dependencyMap"],[16,43,10,0],[17,2,1,0],[18,0,2,0],[19,0,3,0],[20,0,4,0],[21,2,1,0],[21,6,108,6,"PerformanceMonitorService"],[21,31,108,31],[22,4,128,2],[22,13,128,2,"PerformanceMonitorService"],[22,39,128,2],[22,41,128,55],[23,6,128,55],[23,10,128,14,"config"],[23,16,128,48],[23,19,128,48,"arguments"],[23,28,128,48],[23,29,128,48,"length"],[23,35,128,48],[23,43,128,48,"arguments"],[23,52,128,48],[23,60,128,48,"undefined"],[23,69,128,48],[23,72,128,48,"arguments"],[23,81,128,48],[23,87,128,51],[23,88,128,52],[23,89,128,53],[24,6,128,53],[24,10,128,53,"_classCallCheck2"],[24,26,128,53],[24,27,128,53,"default"],[24,34,128,53],[24,42,128,53,"PerformanceMonitorService"],[24,67,128,53],[25,6,128,53],[25,11,110,10,"metrics"],[25,18,110,17],[25,21,110,41],[25,23,110,43],[26,6,110,43],[26,11,111,10,"alerts"],[26,17,111,16],[26,20,111,39],[26,22,111,41],[27,6,111,41],[27,11,112,10,"isInitialized"],[27,24,112,23],[27,27,112,26],[27,32,112,31],[28,6,112,31],[28,11,115,10,"screenStartTimes"],[28,27,115,26],[28,30,115,50],[28,34,115,54,"Map"],[28,37,115,57],[28,38,115,58],[28,39,115,59],[29,6,115,59],[29,11,116,10,"apiCallTimes"],[29,23,116,22],[29,26,116,46],[29,30,116,50,"Map"],[29,33,116,53],[29,34,116,54],[29,35,116,55],[30,6,116,55],[30,11,119,10,"metricQueue"],[30,22,119,21],[30,25,119,45],[30,27,119,47],[31,6,119,47],[31,11,120,10,"isFlushingMetrics"],[31,28,120,27],[31,31,120,30],[31,36,120,35],[32,6,120,35],[32,11,121,10,"databaseAvailable"],[32,28,121,27],[32,31,121,30],[32,36,121,35],[33,6,121,35],[33,11,122,10,"databaseUnavailableLogged"],[33,36,122,35],[33,39,122,38],[33,44,122,43],[34,6,129,4],[34,10,129,8],[34,11,129,9,"config"],[34,17,129,15],[34,20,129,15,"Object"],[34,26,129,15],[34,27,129,15,"assign"],[34,33,129,15],[35,8,130,6,"enabled"],[35,15,130,13],[35,17,130,15,"ANALYTICS_CONFIG"],[35,44,130,31],[35,45,130,32,"performance"],[35,56,130,43],[35,57,130,44,"trackFPS"],[35,65,130,52],[36,8,131,6,"sampleRate"],[36,18,131,16],[36,20,131,18,"ANALYTICS_CONFIG"],[36,47,131,34],[36,48,131,35,"performance"],[36,59,131,46],[36,60,131,47,"sampleRate"],[36,70,131,57],[37,8,132,6,"alertThresholds"],[37,23,132,21],[37,25,132,23],[38,10,133,8,"slowAppLaunch"],[38,23,133,21],[38,25,133,23],[38,29,133,27],[39,10,133,29],[40,10,134,8,"slowScreenRender"],[40,26,134,24],[40,28,134,26],[40,32,134,30],[41,10,134,32],[42,10,135,8,"slowApiResponse"],[42,25,135,23],[42,27,135,25,"ANALYTICS_CONFIG"],[42,54,135,41],[42,55,135,42,"performance"],[42,66,135,53],[42,67,135,54,"slowThresholdMs"],[42,82,135,69],[43,10,136,8,"memoryUsagePercent"],[43,28,136,26],[43,30,136,28],[43,32,136,30],[44,10,136,32],[45,10,137,8,"lowBatteryPercent"],[45,27,137,25],[45,29,137,27],[45,31,137,29],[46,10,137,31],[47,10,138,8,"lowFpsThreshold"],[47,25,138,23],[47,27,138,25],[47,29,138,27],[47,30,138,29],[48,8,139,6],[48,9,139,7],[49,8,140,6,"trackingEnabled"],[49,23,140,21],[49,25,140,23],[50,10,141,8,"appLaunch"],[50,19,141,17],[50,21,141,19,"ANALYTICS_CONFIG"],[50,48,141,35],[50,49,141,36,"performance"],[50,60,141,47],[50,61,141,48,"trackAppLaunchTime"],[50,79,141,66],[51,10,142,8,"screenRender"],[51,22,142,20],[51,24,142,22,"ANALYTICS_CONFIG"],[51,51,142,38],[51,52,142,39,"performance"],[51,63,142,50],[51,64,142,51,"trackScreenRenderTime"],[51,85,142,72],[52,10,143,8,"apiCalls"],[52,18,143,16],[52,20,143,18,"ANALYTICS_CONFIG"],[52,47,143,34],[52,48,143,35,"performance"],[52,59,143,46],[52,60,143,47,"trackNetworkLatency"],[52,79,143,66],[53,10,144,8,"memoryUsage"],[53,21,144,19],[53,23,144,21,"ANALYTICS_CONFIG"],[53,50,144,37],[53,51,144,38,"performance"],[53,62,144,49],[53,63,144,50,"trackMemory"],[53,74,144,61],[54,10,145,8,"batteryUsage"],[54,22,145,20],[54,24,145,22],[54,28,145,26],[55,10,146,8,"frameRate"],[55,19,146,17],[55,21,146,19,"ANALYTICS_CONFIG"],[55,48,146,35],[55,49,146,36,"performance"],[55,60,146,47],[55,61,146,48,"trackFPS"],[55,69,146,56],[56,10,147,8,"networkLatency"],[56,24,147,22],[56,26,147,24,"ANALYTICS_CONFIG"],[56,53,147,40],[56,54,147,41,"performance"],[56,65,147,52],[56,66,147,53,"trackNetworkLatency"],[57,8,148,6],[58,6,148,7],[58,9,149,9,"config"],[58,15,149,15],[58,16,150,5],[59,6,152,4],[59,10,152,8],[59,11,152,9,"sessionId"],[59,20,152,18],[59,23,152,21],[59,27,152,25],[59,28,152,26,"generateSessionId"],[59,45,152,43],[59,46,152,44],[59,47,152,45],[60,6,153,4],[60,10,153,8],[60,11,153,9,"appStartTime"],[60,23,153,21],[60,26,153,24,"Date"],[60,30,153,28],[60,31,153,29,"now"],[60,34,153,32],[60,35,153,33],[60,36,153,34],[61,4,154,2],[63,4,156,2],[64,0,157,0],[65,0,158,0],[66,4,156,2],[66,15,156,2,"_createClass2"],[66,28,156,2],[66,29,156,2,"default"],[66,36,156,2],[66,38,156,2,"PerformanceMonitorService"],[66,63,156,2],[67,6,156,2,"key"],[67,9,156,2],[68,6,156,2,"value"],[68,11,156,2],[69,8,156,2],[69,12,156,2,"_initialize"],[69,23,156,2],[69,30,156,2,"_asyncToGenerator2"],[69,48,156,2],[69,49,156,2,"default"],[69,56,156,2],[69,58,159,2],[69,71,159,43],[70,10,159,43],[70,14,159,43,"_this"],[70,19,159,43],[71,10,160,4],[71,14,160,8],[72,12,161,6],[72,16,161,10],[72,17,161,11],[72,21,161,15],[72,22,161,16,"config"],[72,28,161,22],[72,29,161,23,"enabled"],[72,36,161,30],[72,38,161,32],[73,14,162,8,"EventLogger"],[73,38,162,19],[73,39,162,20,"info"],[73,43,162,24],[73,44,162,25],[73,64,162,45],[73,66,162,47],[73,99,162,80],[73,100,162,81],[74,14,163,8],[74,18,163,12],[74,19,163,13,"isInitialized"],[74,32,163,26],[74,35,163,29],[74,39,163,33],[74,40,163,34],[74,41,163,35],[75,14,164,8],[76,12,165,6],[78,12,167,6],[79,12,168,6],[79,18,168,12,"Promise"],[79,25,168,19],[79,26,168,20,"resolve"],[79,33,168,27],[79,34,168,28],[79,35,168,29],[79,36,168,30,"then"],[79,40,168,34],[79,41,168,35],[79,53,168,41],[80,14,169,8],[81,14,170,8],[81,18,170,12,"_this"],[81,23,170,16],[81,24,170,17,"config"],[81,30,170,23],[81,31,170,24,"trackingEnabled"],[81,46,170,39],[81,47,170,40,"memoryUsage"],[81,58,170,51],[81,60,170,53],[82,16,171,10,"_this"],[82,21,171,14],[82,22,171,15,"setupMemoryMonitoring"],[82,43,171,36],[82,44,171,37],[82,45,171,38],[83,14,172,8],[85,14,174,8],[86,14,175,8],[86,18,175,12,"_this"],[86,23,175,16],[86,24,175,17,"config"],[86,30,175,23],[86,31,175,24,"trackingEnabled"],[86,46,175,39],[86,47,175,40,"frameRate"],[86,56,175,49],[86,58,175,51],[87,16,176,10,"_this"],[87,21,176,14],[87,22,176,15,"setupFrameRateMonitoring"],[87,46,176,39],[87,47,176,40],[87,48,176,41],[88,14,177,8],[90,14,179,8],[91,14,180,8,"_this"],[91,19,180,12],[91,20,180,13,"setupPeriodicFlush"],[91,38,180,31],[91,39,180,32],[91,40,180,33],[92,12,181,6],[92,13,181,7],[92,14,181,8],[94,12,183,6],[95,12,184,6],[95,16,184,10],[95,17,184,11,"checkDatabaseAvailability"],[95,42,184,36],[95,43,184,37],[95,44,184,38],[95,45,184,39,"catch"],[95,50,184,44],[95,51,184,45],[95,61,184,45,"error"],[95,66,184,50],[95,68,184,54],[96,14,185,8],[96,18,185,12],[96,19,185,13,"_this"],[96,24,185,17],[96,25,185,18,"databaseUnavailableLogged"],[96,50,185,43],[96,52,185,45],[97,16,186,10,"EventLogger"],[97,40,186,21],[97,41,186,22,"warn"],[97,45,186,26],[97,46,186,27],[97,66,186,47],[97,68,186,49],[97,130,186,111],[97,132,186,113,"error"],[97,137,186,127],[97,138,186,128],[98,16,187,10,"_this"],[98,21,187,14],[98,22,187,15,"databaseUnavailableLogged"],[98,47,187,40],[98,50,187,43],[98,54,187,47],[99,14,188,8],[100,14,189,8,"_this"],[100,19,189,12],[100,20,189,13,"databaseAvailable"],[100,37,189,30],[100,40,189,33],[100,45,189,38],[101,12,190,6],[101,13,190,7],[101,14,190,8],[103,12,192,6],[104,12,193,6],[104,16,193,10],[104,17,193,11,"loadOfflineData"],[104,32,193,26],[104,33,193,27],[104,34,193,28],[104,35,193,29,"catch"],[104,40,193,34],[104,41,193,35],[104,51,193,35,"error"],[104,56,193,40],[104,58,193,44],[105,14,194,8,"EventLogger"],[105,38,194,19],[105,39,194,20,"error"],[105,44,194,25],[105,45,194,26],[105,65,194,46],[105,67,194,48],[105,96,194,77],[105,98,194,79,"error"],[105,103,194,93],[105,104,194,94],[106,12,195,6],[106,13,195,7],[106,14,195,8],[108,12,197,6],[109,12,198,6],[109,16,198,10],[109,20,198,14],[109,21,198,15,"config"],[109,27,198,21],[109,28,198,22,"trackingEnabled"],[109,43,198,37],[109,44,198,38,"appLaunch"],[109,53,198,47],[109,55,198,49],[110,14,199,8,"Promise"],[110,21,199,15],[110,22,199,16,"resolve"],[110,29,199,23],[110,30,199,24],[110,31,199,25],[110,32,199,26,"then"],[110,36,199,30],[110,37,199,31],[111,16,199,31],[111,23,199,37,"_this"],[111,28,199,41],[111,29,199,42,"trackAppLaunchTime"],[111,47,199,60],[111,48,199,61],[111,49,199,62],[112,14,199,62],[112,16,199,63],[113,12,200,6],[114,12,202,6],[114,16,202,10],[114,17,202,11,"isInitialized"],[114,30,202,24],[114,33,202,27],[114,37,202,31],[115,12,203,6,"EventLogger"],[115,36,203,17],[115,37,203,18,"info"],[115,41,203,22],[115,42,203,23],[115,62,203,43],[115,64,203,45],[115,100,203,81],[115,101,203,82],[116,10,205,4],[116,11,205,5],[116,12,205,6],[116,19,205,13,"error"],[116,24,205,18],[116,26,205,20],[117,12,206,6],[117,16,206,10],[117,17,206,11,"isInitialized"],[117,30,206,24],[117,33,206,27],[117,37,206,31],[117,38,206,32],[117,39,206,33],[118,12,207,6,"EventLogger"],[118,36,207,17],[118,37,207,18,"error"],[118,42,207,23],[118,43,207,24],[118,63,207,44],[118,65,207,46],[118,107,207,88],[118,109,207,90,"error"],[118,114,207,104],[118,115,207,105],[119,10,208,4],[120,8,209,2],[120,9,209,3],[121,8,209,3],[121,17,159,15,"initialize"],[121,27,159,25,"initialize"],[121,28,159,25],[122,10,159,25],[122,17,159,25,"_initialize"],[122,28,159,25],[122,29,159,25,"apply"],[122,34,159,25],[122,41,159,25,"arguments"],[122,50,159,25],[123,8,159,25],[124,8,159,25],[124,15,159,15,"initialize"],[124,25,159,25],[125,6,159,25],[126,6,211,2],[127,0,212,0],[128,0,213,0],[129,6,211,2],[130,4,211,2],[131,6,211,2,"key"],[131,9,211,2],[132,6,211,2,"value"],[132,11,211,2],[133,8,211,2],[133,12,211,2,"_checkDatabaseAvailability"],[133,38,211,2],[133,45,211,2,"_asyncToGenerator2"],[133,63,211,2],[133,64,211,2,"default"],[133,71,211,2],[133,73,214,2],[133,86,214,59],[134,10,215,4],[134,14,215,8],[135,12,216,6],[135,16,216,10],[135,17,216,11,"supabase"],[135,33,216,19],[135,35,216,21],[136,14,217,8],[136,20,217,14],[136,24,217,18,"Error"],[136,29,217,23],[136,30,217,24],[136,63,217,57],[136,64,217,58],[137,12,218,6],[139,12,220,6],[140,12,221,6],[141,12,222,6],[141,16,222,12,"testMetricId"],[141,28,222,24],[141,31,222,27],[141,52,222,48,"Date"],[141,56,222,52],[141,57,222,53,"now"],[141,60,222,56],[141,61,222,57],[141,62,222,58],[141,66,222,62,"Math"],[141,70,222,66],[141,71,222,67,"random"],[141,77,222,73],[141,78,222,74],[141,79,222,75],[141,80,222,76,"toString"],[141,88,222,84],[141,89,222,85],[141,91,222,87],[141,92,222,88],[141,93,222,89,"substr"],[141,99,222,95],[141,100,222,96],[141,101,222,97],[141,103,222,99],[141,104,222,100],[141,105,222,101],[141,107,222,103],[142,12,224,6],[142,16,224,6,"_yield$supabase$from$"],[142,37,224,6],[142,46,224,43,"supabase"],[142,62,224,51],[142,63,225,9,"from"],[142,67,225,13],[142,68,225,14],[142,89,225,35],[142,90,225,36],[142,91,226,9,"insert"],[142,97,226,15],[142,98,226,16],[143,16,227,10,"id"],[143,18,227,12],[143,20,227,14,"testMetricId"],[143,32,227,26],[144,16,228,10,"type"],[144,20,228,14],[144,22,228,16],[144,30,228,24],[145,16,229,10,"name"],[145,20,229,14],[145,22,229,16],[145,50,229,44],[146,16,230,10,"value"],[146,21,230,15],[146,23,230,17],[146,24,230,18],[147,16,231,10,"unit"],[147,20,231,14],[147,22,231,16],[147,29,231,23],[148,16,232,10,"context"],[148,23,232,17],[148,25,232,19],[149,18,232,21,"test"],[149,22,232,25],[149,24,232,27],[150,16,232,32],[150,17,232,33],[151,16,233,10,"tags"],[151,20,233,14],[151,22,233,16],[152,18,233,18,"test"],[152,22,233,22],[152,24,233,24],[153,16,233,45],[154,14,234,8],[154,15,234,9],[154,16,234,10],[155,14,224,21,"insertError"],[155,25,224,32],[155,28,224,32,"_yield$supabase$from$"],[155,49,224,32],[155,50,224,14,"error"],[155,55,224,19],[156,12,236,6],[156,16,236,10,"insertError"],[156,27,236,21],[156,29,236,23],[157,14,237,8],[158,14,238,8],[158,18,238,12,"insertError"],[158,29,238,23],[158,30,238,24,"code"],[158,34,238,28],[158,39,238,33],[158,46,238,40],[158,48,238,42],[159,16,239,10],[160,16,240,10,"EventLogger"],[160,40,240,21],[160,41,240,22,"warn"],[160,45,240,26],[160,46,240,27],[160,66,240,47],[160,68,240,49],[160,110,240,91],[160,112,240,93],[161,18,241,12,"suggestion"],[161,28,241,22],[161,30,241,24],[162,16,242,10],[162,17,242,18],[162,18,242,19],[163,14,243,8],[163,15,243,9],[163,21,243,15],[163,25,243,19,"insertError"],[163,36,243,30],[163,37,243,31,"code"],[163,41,243,35],[163,46,243,40],[163,53,243,47],[163,55,243,49],[164,16,244,10],[165,16,245,10,"EventLogger"],[165,40,245,21],[165,41,245,22,"warn"],[165,45,245,26],[165,46,245,27],[165,66,245,47],[165,68,245,49],[165,117,245,98],[165,119,245,100],[166,18,246,12,"suggestion"],[166,28,246,22],[166,30,246,24],[167,16,247,10],[167,17,247,18],[167,18,247,19],[168,14,248,8],[168,15,248,9],[168,21,248,15],[169,16,249,10],[170,16,250,10,"EventLogger"],[170,40,250,21],[170,41,250,22,"warn"],[170,45,250,26],[170,46,250,27],[170,66,250,47],[170,68,250,49],[170,110,250,91],[170,112,250,93],[171,18,251,12,"tableError"],[171,28,251,22],[171,30,251,24,"insertError"],[171,41,251,35],[171,42,251,36,"message"],[171,49,251,43],[172,18,252,12,"code"],[172,22,252,16],[172,24,252,18,"insertError"],[172,35,252,29],[172,36,252,30,"code"],[173,16,253,10],[173,17,253,18],[173,18,253,19],[174,14,254,8],[175,14,256,8],[175,18,256,12],[175,19,256,13,"databaseAvailable"],[175,36,256,30],[175,39,256,33],[175,44,256,38],[176,14,257,8],[176,20,257,14],[176,24,257,18,"Error"],[176,29,257,23],[176,30,257,24],[176,53,257,47,"insertError"],[176,64,257,58],[176,65,257,59,"message"],[176,72,257,66],[176,83,257,77,"insertError"],[176,94,257,88],[176,95,257,89,"code"],[176,99,257,93],[176,102,257,96],[176,103,257,97],[177,12,258,6],[179,12,260,6],[180,12,261,6],[180,18,261,12,"supabase"],[180,34,261,20],[180,35,262,9,"from"],[180,39,262,13],[180,40,262,14],[180,61,262,35],[180,62,262,36],[180,63,263,9,"delete"],[180,69,263,15],[180,70,263,16],[180,71,263,17],[180,72,264,9,"eq"],[180,74,264,11],[180,75,264,12],[180,79,264,16],[180,81,264,18,"testMetricId"],[180,93,264,30],[180,94,264,31],[181,12,266,6],[181,16,266,10],[181,17,266,11,"databaseAvailable"],[181,34,266,28],[181,37,266,31],[181,41,266,35],[182,12,267,6,"EventLogger"],[182,36,267,17],[182,37,267,18,"info"],[182,41,267,22],[182,42,267,23],[182,62,267,43],[182,64,267,45],[182,104,267,85],[182,105,267,86],[183,10,269,4],[183,11,269,5],[183,12,269,6],[183,19,269,13,"error"],[183,24,269,18],[183,26,269,20],[184,12,270,6],[184,16,270,10],[184,17,270,11,"databaseAvailable"],[184,34,270,28],[184,37,270,31],[184,42,270,36],[186,12,272,6],[187,12,273,6],[187,16,273,10,"message"],[187,23,273,17],[187,26,273,20],[187,79,273,73],[188,12,274,6],[188,16,274,12,"errorDetails"],[188,28,274,29],[188,31,274,32],[189,14,275,8,"error"],[189,19,275,13],[189,21,275,15,"error"],[189,26,275,20],[189,38,275,32,"Error"],[189,43,275,37],[189,46,275,40,"error"],[189,51,275,45],[189,52,275,46,"message"],[189,59,275,53],[189,62,275,56,"String"],[189,68,275,62],[189,69,275,63,"error"],[189,74,275,68],[190,12,276,6],[190,13,276,7],[191,12,278,6],[191,16,278,10,"error"],[191,21,278,15],[191,33,278,27,"Error"],[191,38,278,32],[191,40,278,34],[192,14,279,8],[192,18,279,12,"error"],[192,23,279,17],[192,24,279,18,"message"],[192,31,279,25],[192,32,279,26,"includes"],[192,40,279,34],[192,41,279,35],[192,48,279,42],[192,49,279,43],[192,53,279,47,"error"],[192,58,279,52],[192,59,279,53,"message"],[192,66,279,60],[192,67,279,61,"includes"],[192,75,279,69],[192,76,279,70],[192,92,279,86],[192,93,279,87],[192,95,279,89],[193,16,280,10,"message"],[193,23,280,17],[193,26,280,20],[193,97,280,91],[194,16,281,10,"errorDetails"],[194,28,281,22],[194,29,281,23,"setupScript"],[194,40,281,34],[194,43,281,37],[194,80,281,74],[195,14,282,8],[195,15,282,9],[195,21,282,15],[195,25,282,19,"error"],[195,30,282,24],[195,31,282,25,"message"],[195,38,282,32],[195,39,282,33,"includes"],[195,47,282,41],[195,48,282,42],[195,55,282,49],[195,56,282,50],[195,60,282,54,"error"],[195,65,282,59],[195,66,282,60,"message"],[195,73,282,67],[195,74,282,68,"includes"],[195,82,282,76],[195,83,282,77],[195,95,282,89],[195,96,282,90],[195,98,282,92],[196,16,283,10,"message"],[196,23,283,17],[196,26,283,20],[196,75,283,69],[197,14,284,8],[197,15,284,9],[197,21,284,15],[197,25,284,19,"error"],[197,30,284,24],[197,31,284,25,"message"],[197,38,284,32],[197,39,284,33,"includes"],[197,47,284,41],[197,48,284,42],[197,65,284,59],[197,66,284,60],[197,68,284,62],[198,16,285,10,"message"],[198,23,285,17],[198,26,285,20],[198,81,285,75],[199,14,286,8],[200,12,287,6],[201,12,289,6,"EventLogger"],[201,36,289,17],[201,37,289,18,"warn"],[201,41,289,22],[201,42,289,23],[201,62,289,43],[201,64,289,45,"message"],[201,71,289,52],[201,73,289,54,"errorDetails"],[201,85,289,66],[201,86,289,67],[202,12,290,6],[202,18,290,12,"error"],[202,23,290,17],[203,10,291,4],[204,8,292,2],[204,9,292,3],[205,8,292,3],[205,17,214,16,"checkDatabaseAvailability"],[205,42,214,41,"checkDatabaseAvailability"],[205,43,214,41],[206,10,214,41],[206,17,214,41,"_checkDatabaseAvailability"],[206,43,214,41],[206,44,214,41,"apply"],[206,49,214,41],[206,56,214,41,"arguments"],[206,65,214,41],[207,8,214,41],[208,8,214,41],[208,15,214,16,"checkDatabaseAvailability"],[208,40,214,41],[209,6,214,41],[210,6,294,2],[211,0,295,0],[212,0,296,0],[213,6,294,2],[214,4,294,2],[215,6,294,2,"key"],[215,9,294,2],[216,6,294,2,"value"],[216,11,294,2],[216,13,297,2],[216,22,297,10,"trackAppLaunchTime"],[216,40,297,28,"trackAppLaunchTime"],[216,41,297,28],[216,43,297,37],[217,8,297,37],[217,12,297,37,"_this2"],[217,18,297,37],[218,8,298,4,"InteractionManager"],[218,39,298,22],[218,40,298,23,"runAfterInteractions"],[218,60,298,43],[218,61,298,44],[218,73,298,50],[219,10,299,6],[219,14,299,12,"launchTime"],[219,24,299,22],[219,27,299,25,"Date"],[219,31,299,29],[219,32,299,30,"now"],[219,35,299,33],[219,36,299,34],[219,37,299,35],[219,40,299,38,"_this2"],[219,46,299,42],[219,47,299,43,"appStartTime"],[219,59,299,55],[220,10,301,6,"_this2"],[220,16,301,10],[220,17,301,11,"trackMetric"],[220,28,301,22],[220,29,301,23],[221,12,302,8,"type"],[221,16,302,12],[221,18,302,14],[221,30,302,26],[222,12,303,8,"name"],[222,16,303,12],[222,18,303,14],[222,35,303,31],[223,12,304,8,"value"],[223,17,304,13],[223,19,304,15,"launchTime"],[223,29,304,25],[224,12,305,8,"unit"],[224,16,305,12],[224,18,305,14],[224,22,305,18],[225,12,306,8,"context"],[225,19,306,15],[225,21,306,17],[226,14,307,10,"platform"],[226,22,307,18],[226,24,307,20,"Platform"],[226,45,307,28],[226,46,307,29,"OS"],[226,48,307,31],[227,14,308,10,"os_version"],[227,24,308,20],[227,26,308,22,"Platform"],[227,47,308,30],[227,48,308,31,"Version"],[227,55,308,38],[227,56,308,39,"toString"],[227,64,308,47],[227,65,308,48],[228,12,309,8],[229,10,310,6],[229,11,310,7],[229,12,310,8],[231,10,312,6],[232,10,313,6],[232,14,313,10,"launchTime"],[232,24,313,20],[232,27,313,23,"_this2"],[232,33,313,27],[232,34,313,28,"config"],[232,40,313,34],[232,41,313,35,"alertThresholds"],[232,56,313,50],[232,57,313,51,"slowAppLaunch"],[232,70,313,64],[232,72,313,66],[233,12,314,8,"_this2"],[233,18,314,12],[233,19,314,13,"createAlert"],[233,30,314,24],[233,31,314,25],[234,14,315,10,"type"],[234,18,315,14],[234,20,315,16],[234,33,315,29],[235,14,316,10,"severity"],[235,22,316,18],[235,24,316,20,"launchTime"],[235,34,316,30],[235,37,316,33,"_this2"],[235,43,316,37],[235,44,316,38,"config"],[235,50,316,44],[235,51,316,45,"alertThresholds"],[235,66,316,60],[235,67,316,61,"slowAppLaunch"],[235,80,316,74],[235,83,316,77],[235,84,316,78],[235,87,316,81],[235,93,316,87],[235,96,316,90],[235,104,316,98],[236,14,317,10,"message"],[236,21,317,17],[236,23,317,19],[236,42,317,38,"launchTime"],[236,52,317,48],[236,56,317,52],[237,14,318,10,"value"],[237,19,318,15],[237,21,318,17,"launchTime"],[237,31,318,27],[238,14,319,10,"threshold"],[238,23,319,19],[238,25,319,21,"_this2"],[238,31,319,25],[238,32,319,26,"config"],[238,38,319,32],[238,39,319,33,"alertThresholds"],[238,54,319,48],[238,55,319,49,"slowAppLaunch"],[239,12,320,8],[239,13,320,9],[239,14,320,10],[240,10,321,6],[241,10,323,6,"EventLogger"],[241,34,323,17],[241,35,323,18,"performance"],[241,46,323,29],[241,47,323,30],[241,52,323,35],[241,54,323,37],[241,67,323,50],[241,69,323,52,"launchTime"],[241,79,323,62],[241,81,323,64],[242,12,323,66,"platform"],[242,20,323,74],[242,22,323,76,"Platform"],[242,43,323,84],[242,44,323,85,"OS"],[243,10,323,88],[243,11,323,89],[243,12,323,90],[244,8,324,4],[244,9,324,5],[244,10,324,6],[245,6,325,2],[247,6,327,2],[248,0,328,0],[249,0,329,0],[250,4,327,2],[251,6,327,2,"key"],[251,9,327,2],[252,6,327,2,"value"],[252,11,327,2],[252,13,330,2],[252,22,330,9,"startScreenRender"],[252,39,330,26,"startScreenRender"],[252,40,330,27,"screenName"],[252,50,330,45],[252,52,330,53],[253,8,331,4],[253,12,331,8],[253,13,331,9],[253,17,331,13],[253,18,331,14,"shouldTrack"],[253,29,331,25],[253,30,331,26],[253,31,331,27],[253,35,331,31],[253,36,331,32],[253,40,331,36],[253,41,331,37,"config"],[253,47,331,43],[253,48,331,44,"trackingEnabled"],[253,63,331,59],[253,64,331,60,"screenRender"],[253,76,331,72],[253,78,331,74],[254,8,333,4],[254,12,333,10,"startTime"],[254,21,333,19],[254,24,333,22,"Date"],[254,28,333,26],[254,29,333,27,"now"],[254,32,333,30],[254,33,333,31],[254,34,333,32],[255,8,334,4],[255,12,334,8],[255,13,334,9,"screenStartTimes"],[255,29,334,25],[255,30,334,26,"set"],[255,33,334,29],[255,34,334,30,"screenName"],[255,44,334,40],[255,46,334,42,"startTime"],[255,55,334,51],[255,56,334,52],[256,8,336,4,"EventLogger"],[256,32,336,15],[256,33,336,16,"debug"],[256,38,336,21],[256,39,336,22],[256,59,336,42],[256,61,336,44],[256,92,336,75,"screenName"],[256,102,336,85],[256,104,336,87],[256,105,336,88],[257,6,337,2],[259,6,339,2],[260,0,340,0],[261,0,341,0],[262,4,339,2],[263,6,339,2,"key"],[263,9,339,2],[264,6,339,2,"value"],[264,11,339,2],[264,13,342,2],[264,22,342,9,"endScreenRender"],[264,37,342,24,"endScreenRender"],[264,38,342,25,"screenName"],[264,48,342,43],[264,50,342,45,"additionalContext"],[264,67,342,84],[264,69,342,92],[265,8,343,4],[265,12,343,8],[265,13,343,9],[265,17,343,13],[265,18,343,14,"shouldTrack"],[265,29,343,25],[265,30,343,26],[265,31,343,27],[265,35,343,31],[265,36,343,32],[265,40,343,36],[265,41,343,37,"config"],[265,47,343,43],[265,48,343,44,"trackingEnabled"],[265,63,343,59],[265,64,343,60,"screenRender"],[265,76,343,72],[265,78,343,74],[266,8,345,4],[266,12,345,10,"startTime"],[266,21,345,19],[266,24,345,22],[266,28,345,26],[266,29,345,27,"screenStartTimes"],[266,45,345,43],[266,46,345,44,"get"],[266,49,345,47],[266,50,345,48,"screenName"],[266,60,345,58],[266,61,345,59],[267,8,346,4],[267,12,346,8],[267,13,346,9,"startTime"],[267,22,346,18],[267,24,346,20],[268,10,347,6,"EventLogger"],[268,34,347,17],[268,35,347,18,"warn"],[268,39,347,22],[268,40,347,23],[268,60,347,43],[268,62,347,45],[268,96,347,79,"screenName"],[268,106,347,89],[268,108,347,91],[268,109,347,92],[269,10,348,6],[270,8,349,4],[271,8,351,4],[271,12,351,10,"renderTime"],[271,22,351,20],[271,25,351,23,"Date"],[271,29,351,27],[271,30,351,28,"now"],[271,33,351,31],[271,34,351,32],[271,35,351,33],[271,38,351,36,"startTime"],[271,47,351,45],[272,8,352,4],[272,12,352,8],[272,13,352,9,"screenStartTimes"],[272,29,352,25],[272,30,352,26,"delete"],[272,36,352,32],[272,37,352,33,"screenName"],[272,47,352,43],[272,48,352,44],[273,8,354,4],[273,12,354,8],[273,13,354,9,"trackMetric"],[273,24,354,20],[273,25,354,21],[274,10,355,6,"type"],[274,14,355,10],[274,16,355,12],[274,31,355,27],[275,10,356,6,"name"],[275,14,356,10],[275,16,356,12],[275,36,356,32],[276,10,357,6,"value"],[276,15,357,11],[276,17,357,13,"renderTime"],[276,27,357,23],[277,10,358,6,"unit"],[277,14,358,10],[277,16,358,12],[277,20,358,16],[278,10,359,6,"context"],[278,17,359,13],[278,19,359,13,"Object"],[278,25,359,13],[278,26,359,13,"assign"],[278,32,359,13],[279,12,360,8,"screen_name"],[279,23,360,19],[279,25,360,21,"screenName"],[280,10,360,31],[280,13,361,11,"additionalContext"],[280,30,361,28],[281,8,363,4],[281,9,363,5],[281,10,363,6],[283,8,365,4],[284,8,366,4],[284,12,366,8,"renderTime"],[284,22,366,18],[284,25,366,21],[284,29,366,25],[284,30,366,26,"config"],[284,36,366,32],[284,37,366,33,"alertThresholds"],[284,52,366,48],[284,53,366,49,"slowScreenRender"],[284,69,366,65],[284,71,366,67],[285,10,367,6],[285,14,367,10],[285,15,367,11,"createAlert"],[285,26,367,22],[285,27,367,23],[286,12,368,8,"type"],[286,16,368,12],[286,18,368,14],[286,31,368,27],[287,12,369,8,"severity"],[287,20,369,16],[287,22,369,18,"renderTime"],[287,32,369,28],[287,35,369,31],[287,39,369,35],[287,40,369,36,"config"],[287,46,369,42],[287,47,369,43,"alertThresholds"],[287,62,369,58],[287,63,369,59,"slowScreenRender"],[287,79,369,75],[287,82,369,78],[287,83,369,79],[287,86,369,82],[287,92,369,88],[287,95,369,91],[287,103,369,99],[288,12,370,8,"message"],[288,19,370,15],[288,21,370,17],[288,31,370,27,"screenName"],[288,41,370,37],[288,57,370,53,"renderTime"],[288,67,370,63],[288,71,370,67],[289,12,371,8,"value"],[289,17,371,13],[289,19,371,15,"renderTime"],[289,29,371,25],[290,12,372,8,"threshold"],[290,21,372,17],[290,23,372,19],[290,27,372,23],[290,28,372,24,"config"],[290,34,372,30],[290,35,372,31,"alertThresholds"],[290,50,372,46],[290,51,372,47,"slowScreenRender"],[290,67,372,63],[291,12,373,8,"context"],[291,19,373,15],[291,21,373,17],[292,14,373,19,"screen_name"],[292,25,373,30],[292,27,373,32,"screenName"],[293,12,373,43],[294,10,374,6],[294,11,374,7],[294,12,374,8],[295,8,375,4],[296,8,377,4,"EventLogger"],[296,32,377,15],[296,33,377,16,"performance"],[296,44,377,27],[296,45,377,28],[296,53,377,36],[296,55,377,38],[296,65,377,48,"screenName"],[296,75,377,58],[296,77,377,60],[296,79,377,62,"renderTime"],[296,89,377,72],[296,90,377,73],[297,6,378,2],[299,6,380,2],[300,0,381,0],[301,0,382,0],[302,4,380,2],[303,6,380,2,"key"],[303,9,380,2],[304,6,380,2,"value"],[304,11,380,2],[304,13,383,2],[304,22,383,9,"startApiCall"],[304,34,383,21,"startApiCall"],[304,35,383,22,"requestId"],[304,44,383,39],[304,46,383,41,"endpoint"],[304,54,383,57],[304,56,383,59,"method"],[304,62,383,73],[304,64,383,81],[305,8,384,4],[305,12,384,8],[305,13,384,9],[305,17,384,13],[305,18,384,14,"shouldTrack"],[305,29,384,25],[305,30,384,26],[305,31,384,27],[305,35,384,31],[305,36,384,32],[305,40,384,36],[305,41,384,37,"config"],[305,47,384,43],[305,48,384,44,"trackingEnabled"],[305,63,384,59],[305,64,384,60,"apiCalls"],[305,72,384,68],[305,74,384,70],[306,8,386,4],[306,12,386,10,"startTime"],[306,21,386,19],[306,24,386,22,"Date"],[306,28,386,26],[306,29,386,27,"now"],[306,32,386,30],[306,33,386,31],[306,34,386,32],[307,8,387,4],[307,12,387,8],[307,13,387,9,"apiCallTimes"],[307,25,387,21],[307,26,387,22,"set"],[307,29,387,25],[307,30,387,26,"requestId"],[307,39,387,35],[307,41,387,37,"startTime"],[307,50,387,46],[307,51,387,47],[308,8,389,4,"EventLogger"],[308,32,389,15],[308,33,389,16,"debug"],[308,38,389,21],[308,39,389,22],[308,59,389,42],[308,61,389,44],[308,90,389,73,"method"],[308,96,389,79],[308,100,389,83,"endpoint"],[308,108,389,91],[308,110,389,93],[308,112,389,95],[309,10,389,97,"requestId"],[309,19,389,106],[309,21,389,97,"requestId"],[310,8,389,107],[310,9,389,108],[310,10,389,109],[311,6,390,2],[313,6,392,2],[314,0,393,0],[315,0,394,0],[316,4,392,2],[317,6,392,2,"key"],[317,9,392,2],[318,6,392,2,"value"],[318,11,392,2],[318,13,395,2],[318,22,395,9,"endApiCall"],[318,32,395,19,"endApiCall"],[318,33,396,4,"requestId"],[318,42,396,21],[318,44,397,4,"endpoint"],[318,52,397,20],[318,54,398,4,"method"],[318,60,398,18],[318,62,399,4,"statusCode"],[318,72,399,22],[318,74,400,4,"error"],[318,79,400,17],[318,81,401,10],[319,8,402,4],[319,12,402,8],[319,13,402,9],[319,17,402,13],[319,18,402,14,"shouldTrack"],[319,29,402,25],[319,30,402,26],[319,31,402,27],[319,35,402,31],[319,36,402,32],[319,40,402,36],[319,41,402,37,"config"],[319,47,402,43],[319,48,402,44,"trackingEnabled"],[319,63,402,59],[319,64,402,60,"apiCalls"],[319,72,402,68],[319,74,402,70],[320,8,404,4],[320,12,404,10,"startTime"],[320,21,404,19],[320,24,404,22],[320,28,404,26],[320,29,404,27,"apiCallTimes"],[320,41,404,39],[320,42,404,40,"get"],[320,45,404,43],[320,46,404,44,"requestId"],[320,55,404,53],[320,56,404,54],[321,8,405,4],[321,12,405,8],[321,13,405,9,"startTime"],[321,22,405,18],[321,24,405,20],[322,10,406,6,"EventLogger"],[322,34,406,17],[322,35,406,18,"warn"],[322,39,406,22],[322,40,406,23],[322,60,406,43],[322,62,406,45],[322,98,406,81,"requestId"],[322,107,406,90],[322,109,406,92],[322,110,406,93],[323,10,407,6],[324,8,408,4],[325,8,410,4],[325,12,410,10,"responseTime"],[325,24,410,22],[325,27,410,25,"Date"],[325,31,410,29],[325,32,410,30,"now"],[325,35,410,33],[325,36,410,34],[325,37,410,35],[325,40,410,38,"startTime"],[325,49,410,47],[326,8,411,4],[326,12,411,8],[326,13,411,9,"apiCallTimes"],[326,25,411,21],[326,26,411,22,"delete"],[326,32,411,28],[326,33,411,29,"requestId"],[326,42,411,38],[326,43,411,39],[327,8,413,4],[327,12,413,8],[327,13,413,9,"trackMetric"],[327,24,413,20],[327,25,413,21],[328,10,414,6,"type"],[328,14,414,10],[328,16,414,12],[328,26,414,22],[329,10,415,6,"name"],[329,14,415,10],[329,16,415,12],[329,35,415,31],[330,10,416,6,"value"],[330,15,416,11],[330,17,416,13,"responseTime"],[330,29,416,25],[331,10,417,6,"unit"],[331,14,417,10],[331,16,417,12],[331,20,417,16],[332,10,418,6,"context"],[332,17,418,13],[332,19,418,15],[333,12,419,8,"api_endpoint"],[333,24,419,20],[333,26,419,22,"endpoint"],[333,34,419,30],[334,12,420,8,"method"],[334,18,420,14],[334,20,420,8,"method"],[334,26,420,14],[335,12,421,8,"status_code"],[335,23,421,19],[335,25,421,21,"statusCode"],[335,35,421,31],[336,12,422,8,"success"],[336,19,422,15],[336,21,422,17],[336,22,422,18,"error"],[336,27,422,23],[336,31,422,27,"statusCode"],[336,41,422,37],[336,45,422,41],[336,48,422,44],[336,52,422,48,"statusCode"],[336,62,422,58],[336,65,422,61],[336,68,422,64],[337,12,423,8,"error_message"],[337,25,423,21],[337,27,423,23,"error"],[337,32,423,28],[337,52,423,23,"error"],[337,57,423,28],[337,58,423,30,"message"],[338,10,424,6],[339,8,425,4],[339,9,425,5],[339,10,425,6],[341,8,427,4],[342,8,428,4],[342,12,428,8,"responseTime"],[342,24,428,20],[342,27,428,23],[342,31,428,27],[342,32,428,28,"config"],[342,38,428,34],[342,39,428,35,"alertThresholds"],[342,54,428,50],[342,55,428,51,"slowApiResponse"],[342,70,428,66],[342,72,428,68],[343,10,429,6],[343,14,429,10],[343,15,429,11,"createAlert"],[343,26,429,22],[343,27,429,23],[344,12,430,8,"type"],[344,16,430,12],[344,18,430,14],[344,28,430,24],[345,12,431,8,"severity"],[345,20,431,16],[345,22,431,18,"responseTime"],[345,34,431,30],[345,37,431,33],[345,41,431,37],[345,42,431,38,"config"],[345,48,431,44],[345,49,431,45,"alertThresholds"],[345,64,431,60],[345,65,431,61,"slowApiResponse"],[345,80,431,76],[345,83,431,79],[345,84,431,80],[345,87,431,83],[345,93,431,89],[345,96,431,92],[345,104,431,100],[346,12,432,8,"message"],[346,19,432,15],[346,21,432,17],[346,28,432,24,"method"],[346,34,432,30],[346,38,432,34,"endpoint"],[346,46,432,42],[346,63,432,59,"responseTime"],[346,75,432,71],[346,79,432,75],[347,12,433,8,"value"],[347,17,433,13],[347,19,433,15,"responseTime"],[347,31,433,27],[348,12,434,8,"threshold"],[348,21,434,17],[348,23,434,19],[348,27,434,23],[348,28,434,24,"config"],[348,34,434,30],[348,35,434,31,"alertThresholds"],[348,50,434,46],[348,51,434,47,"slowApiResponse"],[348,66,434,62],[349,12,435,8,"context"],[349,19,435,15],[349,21,435,17],[350,14,435,19,"endpoint"],[350,22,435,27],[350,24,435,19,"endpoint"],[350,32,435,27],[351,14,435,29,"method"],[351,20,435,35],[351,22,435,29,"method"],[351,28,435,35],[352,14,435,37,"status_code"],[352,25,435,48],[352,27,435,50,"statusCode"],[353,12,435,61],[354,10,436,6],[354,11,436,7],[354,12,436,8],[355,8,437,4],[356,8,439,4,"EventLogger"],[356,32,439,15],[356,33,439,16,"networkRequest"],[356,47,439,30],[356,48,439,31,"endpoint"],[356,56,439,39],[356,58,439,41,"method"],[356,64,439,47],[356,66,439,49,"statusCode"],[356,76,439,59],[356,78,439,61,"responseTime"],[356,90,439,73],[356,92,439,75,"error"],[356,97,439,80],[356,98,439,81],[357,6,440,2],[359,6,442,2],[360,0,443,0],[361,0,444,0],[362,4,442,2],[363,6,442,2,"key"],[363,9,442,2],[364,6,442,2,"value"],[364,11,442,2],[364,13,445,2],[364,22,445,9,"trackCustomMetric"],[364,39,445,26,"trackCustomMetric"],[364,40,446,4,"name"],[364,44,446,16],[364,46,447,4,"value"],[364,51,447,17],[364,53,448,4,"unit"],[364,57,448,35],[364,59,449,4,"context"],[364,66,449,33],[364,68,450,10],[365,8,451,4],[365,12,451,8],[365,13,451,9],[365,17,451,13],[365,18,451,14,"shouldTrack"],[365,29,451,25],[365,30,451,26],[365,31,451,27],[365,33,451,29],[366,8,453,4],[366,12,453,8],[366,13,453,9,"trackMetric"],[366,24,453,20],[366,25,453,21],[367,10,454,6,"type"],[367,14,454,10],[367,16,454,12],[367,24,454,20],[368,10,455,6,"name"],[368,14,455,10],[368,16,455,6,"name"],[368,20,455,10],[369,10,456,6,"value"],[369,15,456,11],[369,17,456,6,"value"],[369,22,456,11],[370,10,457,6,"unit"],[370,14,457,10],[370,16,457,6,"unit"],[370,20,457,10],[371,10,458,6,"context"],[371,17,458,13],[371,19,458,6,"context"],[372,8,459,4],[372,9,459,5],[372,10,459,6],[373,8,461,4,"EventLogger"],[373,32,461,15],[373,33,461,16,"performance"],[373,44,461,27],[373,45,461,28],[373,53,461,36],[373,55,461,38,"name"],[373,59,461,42],[373,61,461,44,"value"],[373,66,461,49],[373,68,461,51,"context"],[373,75,461,58],[373,76,461,59],[374,6,462,2],[376,6,464,2],[377,0,465,0],[378,0,466,0],[379,4,464,2],[380,6,464,2,"key"],[380,9,464,2],[381,6,464,2,"value"],[381,11,464,2],[381,13,467,2],[381,22,467,9,"trackMemoryUsage"],[381,38,467,25,"trackMemoryUsage"],[381,39,467,25],[381,41,467,34],[382,8,468,4],[382,12,468,8],[382,13,468,9],[382,17,468,13],[382,18,468,14,"shouldTrack"],[382,29,468,25],[382,30,468,26],[382,31,468,27],[382,35,468,31],[382,36,468,32],[382,40,468,36],[382,41,468,37,"config"],[382,47,468,43],[382,48,468,44,"trackingEnabled"],[382,63,468,59],[382,64,468,60,"memoryUsage"],[382,75,468,71],[382,77,468,73],[383,8,470,4],[383,12,470,8],[384,10,471,6],[385,10,472,6],[387,10,474,6],[387,14,474,10],[387,21,474,18,"performance"],[387,32,474,29],[387,33,474,38,"memory"],[387,39,474,44],[387,44,474,49],[387,55,474,60],[387,57,474,62],[388,12,475,8],[388,16,475,14,"memInfo"],[388,23,475,21],[388,26,475,25,"performance"],[388,37,475,36],[388,38,475,45,"memory"],[388,44,475,51],[389,12,476,8],[389,16,476,14,"usedMemory"],[389,26,476,24],[389,29,476,27,"memInfo"],[389,36,476,34],[389,37,476,35,"usedJSHeapSize"],[389,51,476,49],[390,12,477,8],[390,16,477,14,"totalMemory"],[390,27,477,25],[390,30,477,28,"memInfo"],[390,37,477,35],[390,38,477,36,"totalJSHeapSize"],[390,53,477,51],[391,12,478,8],[391,16,478,14,"memoryPercent"],[391,29,478,27],[391,32,478,31,"usedMemory"],[391,42,478,41],[391,45,478,44,"totalMemory"],[391,56,478,55],[391,59,478,59],[391,62,478,62],[392,12,480,8],[392,16,480,12],[392,17,480,13,"trackMetric"],[392,28,480,24],[392,29,480,25],[393,14,481,10,"type"],[393,18,481,14],[393,20,481,16],[393,34,481,30],[394,14,482,10,"name"],[394,18,482,14],[394,20,482,16],[394,35,482,31],[395,14,483,10,"value"],[395,19,483,15],[395,21,483,17,"usedMemory"],[395,31,483,27],[396,14,484,10,"unit"],[396,18,484,14],[396,20,484,16],[396,27,484,23],[397,14,485,10,"context"],[397,21,485,17],[397,23,485,19],[398,16,486,12,"total_memory"],[398,28,486,24],[398,30,486,26,"totalMemory"],[398,41,486,37],[399,16,487,12,"usage_percent"],[399,29,487,25],[399,31,487,27,"memoryPercent"],[399,44,487,40],[400,16,488,12,"memory_pressure"],[400,31,488,27],[400,33,488,29,"memoryPercent"],[400,46,488,42],[400,49,488,45],[400,53,488,49],[400,54,488,50,"config"],[400,60,488,56],[400,61,488,57,"alertThresholds"],[400,76,488,72],[400,77,488,73,"memoryUsagePercent"],[401,14,489,10],[402,12,490,8],[402,13,490,9],[402,14,490,10],[404,12,492,8],[405,12,493,8],[405,16,493,12,"memoryPercent"],[405,29,493,25],[405,32,493,28],[405,36,493,32],[405,37,493,33,"config"],[405,43,493,39],[405,44,493,40,"alertThresholds"],[405,59,493,55],[405,60,493,56,"memoryUsagePercent"],[405,78,493,74],[405,80,493,76],[406,14,494,10],[406,18,494,14],[406,19,494,15,"createAlert"],[406,30,494,26],[406,31,494,27],[407,16,495,12,"type"],[407,20,495,16],[407,22,495,18],[407,38,495,34],[408,16,496,12,"severity"],[408,24,496,20],[408,26,496,22,"memoryPercent"],[408,39,496,35],[408,42,496,38],[408,44,496,40],[408,47,496,43],[408,53,496,49],[408,56,496,52],[408,64,496,60],[409,16,497,12,"message"],[409,23,497,19],[409,25,497,21],[409,44,497,40,"memoryPercent"],[409,57,497,53],[409,58,497,54,"toFixed"],[409,65,497,61],[409,66,497,62],[409,67,497,63],[409,68,497,64],[409,71,497,67],[410,16,498,12,"value"],[410,21,498,17],[410,23,498,19,"memoryPercent"],[410,36,498,32],[411,16,499,12,"threshold"],[411,25,499,21],[411,27,499,23],[411,31,499,27],[411,32,499,28,"config"],[411,38,499,34],[411,39,499,35,"alertThresholds"],[411,54,499,50],[411,55,499,51,"memoryUsagePercent"],[412,14,500,10],[412,15,500,11],[412,16,500,12],[413,12,501,8],[414,10,502,6],[415,8,503,4],[415,9,503,5],[415,10,503,6],[415,17,503,13,"error"],[415,22,503,18],[415,24,503,20],[416,10,504,6,"EventLogger"],[416,34,504,17],[416,35,504,18,"error"],[416,40,504,23],[416,41,504,24],[416,61,504,44],[416,63,504,46],[416,93,504,76],[416,95,504,78,"error"],[416,100,504,92],[416,101,504,93],[417,8,505,4],[418,6,506,2],[420,6,508,2],[421,0,509,0],[422,0,510,0],[423,4,508,2],[424,6,508,2,"key"],[424,9,508,2],[425,6,508,2,"value"],[425,11,508,2],[425,13,511,2],[425,22,511,9,"trackBatteryUsage"],[425,39,511,26,"trackBatteryUsage"],[425,40,511,26],[425,42,511,35],[426,8,512,4],[426,12,512,8],[426,13,512,9],[426,17,512,13],[426,18,512,14,"shouldTrack"],[426,29,512,25],[426,30,512,26],[426,31,512,27],[426,35,512,31],[426,36,512,32],[426,40,512,36],[426,41,512,37,"config"],[426,47,512,43],[426,48,512,44,"trackingEnabled"],[426,63,512,59],[426,64,512,60,"batteryUsage"],[426,76,512,72],[426,78,512,74],[428,8,514,4],[429,8,515,4],[430,8,516,4],[431,8,517,4],[432,8,518,4],[433,8,519,4],[434,8,520,4],[435,8,521,4],[436,8,522,4],[437,8,523,4],[438,8,524,4],[439,8,525,4],[440,8,526,4],[441,8,527,4],[442,8,528,4],[443,8,529,4],[444,8,530,4],[445,8,531,4],[446,8,532,4],[447,6,533,2],[449,6,535,2],[450,0,536,0],[451,0,537,0],[452,4,535,2],[453,6,535,2,"key"],[453,9,535,2],[454,6,535,2,"value"],[454,11,535,2],[454,13,538,2],[454,22,538,9,"getPerformanceSummary"],[454,43,538,30,"getPerformanceSummary"],[454,44,538,30],[454,46,538,53],[455,8,539,4],[455,12,539,10,"summary"],[455,19,539,37],[455,22,539,40],[456,10,540,6,"app_launch_time"],[456,25,540,21],[456,27,540,23],[456,31,540,27],[456,32,540,28,"calculateStats"],[456,46,540,42],[456,47,540,43],[456,51,540,47],[456,52,540,48,"metrics"],[456,59,540,55],[456,60,540,56,"filter"],[456,66,540,62],[456,67,540,63],[456,77,540,63,"m"],[456,78,540,64],[457,12,540,64],[457,19,540,68,"m"],[457,20,540,69],[457,21,540,70,"name"],[457,25,540,74],[457,30,540,79],[457,47,540,96],[458,10,540,96],[458,12,540,97],[458,13,540,98],[459,10,541,6,"screen_render_times"],[459,29,541,25],[459,31,541,27],[459,35,541,31],[459,36,541,32,"groupScreenRenderStats"],[459,58,541,54],[459,59,541,55],[459,60,541,56],[460,10,542,6,"api_performance"],[460,25,542,21],[460,27,542,23],[460,31,542,27],[460,32,542,28,"groupApiPerformanceStats"],[460,56,542,52],[460,57,542,53],[460,58,542,54],[461,10,543,6,"memory_usage"],[461,22,543,18],[461,24,543,20],[461,28,543,24],[461,29,543,25,"calculateMemoryStats"],[461,49,543,45],[461,50,543,46],[461,51,543,47],[462,10,544,6,"battery_impact"],[462,24,544,20],[462,26,544,22],[462,30,544,26],[462,31,544,27,"calculateBatteryStats"],[462,52,544,48],[462,53,544,49],[462,54,544,50],[463,10,545,6,"frame_rate"],[463,20,545,16],[463,22,545,18],[463,26,545,22],[463,27,545,23,"calculateFrameRateStats"],[463,50,545,46],[463,51,545,47],[464,8,546,4],[464,9,546,5],[465,8,548,4],[465,15,548,11,"summary"],[465,22,548,18],[466,6,549,2],[468,6,551,2],[469,0,552,0],[470,0,553,0],[471,4,551,2],[472,6,551,2,"key"],[472,9,551,2],[473,6,551,2,"value"],[473,11,551,2],[473,13,554,2],[473,22,554,9,"getRecentAlerts"],[473,37,554,24,"getRecentAlerts"],[473,38,554,24],[473,40,554,65],[474,8,554,65],[474,12,554,25,"limit"],[474,17,554,38],[474,20,554,38,"arguments"],[474,29,554,38],[474,30,554,38,"length"],[474,36,554,38],[474,44,554,38,"arguments"],[474,53,554,38],[474,61,554,38,"undefined"],[474,70,554,38],[474,73,554,38,"arguments"],[474,82,554,38],[474,88,554,41],[474,90,554,43],[475,8,555,4],[475,15,555,11],[475,19,555,15],[475,20,555,16,"alerts"],[475,26,555,22],[475,27,556,7,"sort"],[475,31,556,11],[475,32,556,12],[475,42,556,13,"a"],[475,43,556,14],[475,45,556,16,"b"],[475,46,556,17],[476,10,556,17],[476,17,556,22],[476,21,556,26,"Date"],[476,25,556,30],[476,26,556,31,"b"],[476,27,556,32],[476,28,556,33,"timestamp"],[476,37,556,42],[476,38,556,43],[476,39,556,44,"getTime"],[476,46,556,51],[476,47,556,52],[476,48,556,53],[476,51,556,56],[476,55,556,60,"Date"],[476,59,556,64],[476,60,556,65,"a"],[476,61,556,66],[476,62,556,67,"timestamp"],[476,71,556,76],[476,72,556,77],[476,73,556,78,"getTime"],[476,80,556,85],[476,81,556,86],[476,82,556,87],[477,8,556,87],[477,10,556,88],[477,11,557,7,"slice"],[477,16,557,12],[477,17,557,13],[477,18,557,14],[477,20,557,16,"limit"],[477,25,557,21],[477,26,557,22],[478,6,558,2],[480,6,560,2],[481,0,561,0],[482,0,562,0],[483,4,560,2],[484,6,560,2,"key"],[484,9,560,2],[485,6,560,2,"value"],[485,11,560,2],[485,13,563,2],[485,22,563,9,"clearData"],[485,31,563,18,"clearData"],[485,32,563,18],[485,34,563,27],[486,8,564,4],[486,12,564,8],[486,13,564,9,"metrics"],[486,20,564,16],[486,23,564,19],[486,25,564,21],[487,8,565,4],[487,12,565,8],[487,13,565,9,"alerts"],[487,19,565,15],[487,22,565,18],[487,24,565,20],[488,8,566,4,"EventLogger"],[488,32,566,15],[488,33,566,16,"info"],[488,37,566,20],[488,38,566,21],[488,58,566,41],[488,60,566,43],[488,86,566,69],[488,87,566,70],[489,6,567,2],[491,6,569,2],[492,0,570,0],[493,0,571,0],[494,4,569,2],[495,6,569,2,"key"],[495,9,569,2],[496,6,569,2,"value"],[496,11,569,2],[496,13,572,2],[496,22,572,9,"exportData"],[496,32,572,19,"exportData"],[496,33,572,19],[496,35,572,84],[497,8,573,4],[497,15,573,11],[498,10,574,6,"metrics"],[498,17,574,13],[498,23,574,13,"_toConsumableArray2"],[498,42,574,13],[498,43,574,13,"default"],[498,50,574,13],[498,52,574,19],[498,56,574,23],[498,57,574,24,"metrics"],[498,64,574,31],[498,65,574,32],[499,10,575,6,"alerts"],[499,16,575,12],[499,22,575,12,"_toConsumableArray2"],[499,41,575,12],[499,42,575,12,"default"],[499,49,575,12],[499,51,575,18],[499,55,575,22],[499,56,575,23,"alerts"],[499,62,575,29],[500,8,576,4],[500,9,576,5],[501,6,577,2],[503,6,579,2],[504,0,580,0],[505,0,581,0],[506,4,579,2],[507,6,579,2,"key"],[507,9,579,2],[508,6,579,2,"value"],[508,11,579,2],[508,13,582,2],[508,22,582,10,"trackMetric"],[508,33,582,21,"trackMetric"],[508,34,582,22,"metricData"],[508,44,582,77],[508,46,582,85],[509,8,583,4],[509,12,583,10,"metric"],[509,18,583,35],[509,21,583,35,"Object"],[509,27,583,35],[509,28,583,35,"assign"],[509,34,583,35],[510,10,584,6,"id"],[510,12,584,8],[510,14,584,10],[510,18,584,14],[510,19,584,15,"generateMetricId"],[510,35,584,31],[510,36,584,32],[510,37,584,33],[511,10,585,6,"timestamp"],[511,19,585,15],[511,21,585,17],[511,25,585,21,"Date"],[511,29,585,25],[511,30,585,26],[511,31,585,27],[511,32,585,28,"toISOString"],[511,43,585,39],[511,44,585,40],[511,45,585,41],[512,10,586,6,"context"],[512,17,586,13],[512,19,586,13,"Object"],[512,25,586,13],[512,26,586,13,"assign"],[512,32,586,13],[513,12,587,8,"session_id"],[513,22,587,18],[513,24,587,20],[513,28,587,24],[513,29,587,25,"sessionId"],[514,10,587,34],[514,13,588,11,"metricData"],[514,23,588,21],[514,24,588,22,"context"],[514,31,588,29],[515,8,589,7],[515,11,590,9,"metricData"],[515,21,590,19],[515,22,591,5],[516,8,593,4],[516,12,593,8],[516,13,593,9,"metrics"],[516,20,593,16],[516,21,593,17,"push"],[516,25,593,21],[516,26,593,22,"metric"],[516,32,593,28],[516,33,593,29],[517,8,594,4],[517,12,594,8],[517,13,594,9,"metricQueue"],[517,24,594,20],[517,25,594,21,"push"],[517,29,594,25],[517,30,594,26,"metric"],[517,36,594,32],[517,37,594,33],[519,8,596,4],[520,8,597,4],[520,12,597,8],[520,16,597,12],[520,17,597,13,"metrics"],[520,24,597,20],[520,25,597,21,"length"],[520,31,597,27],[520,34,597,30],[520,38,597,34],[520,40,597,36],[521,10,598,6],[521,14,598,10],[521,15,598,11,"metrics"],[521,22,598,18],[521,25,598,21],[521,29,598,25],[521,30,598,26,"metrics"],[521,37,598,33],[521,38,598,34,"slice"],[521,43,598,39],[521,44,598,40],[521,45,598,41],[521,49,598,45],[521,50,598,46],[522,8,599,4],[524,8,601,4],[525,8,602,4],[525,12,602,8],[525,16,602,12],[525,17,602,13,"metricQueue"],[525,28,602,24],[525,29,602,25,"length"],[525,35,602,31],[525,39,602,35],[525,41,602,37],[525,43,602,39],[526,10,603,6],[526,14,603,10],[526,15,603,11,"flushMetrics"],[526,27,603,23],[526,28,603,24],[526,29,603,25],[527,8,604,4],[528,6,605,2],[530,6,607,2],[531,0,608,0],[532,0,609,0],[533,4,607,2],[534,6,607,2,"key"],[534,9,607,2],[535,6,607,2,"value"],[535,11,607,2],[535,13,610,2],[535,22,610,10,"createAlert"],[535,33,610,21,"createAlert"],[535,34,610,22,"alertData"],[535,43,610,75],[535,45,610,83],[536,8,611,4],[536,12,611,10,"alert"],[536,17,611,33],[536,20,611,33,"Object"],[536,26,611,33],[536,27,611,33,"assign"],[536,33,611,33],[537,10,612,6,"id"],[537,12,612,8],[537,14,612,10],[537,18,612,14],[537,19,612,15,"generateAlertId"],[537,34,612,30],[537,35,612,31],[537,36,612,32],[538,10,613,6,"timestamp"],[538,19,613,15],[538,21,613,17],[538,25,613,21,"Date"],[538,29,613,25],[538,30,613,26],[538,31,613,27],[538,32,613,28,"toISOString"],[538,43,613,39],[538,44,613,40],[539,8,613,41],[539,11,614,9,"alertData"],[539,20,614,18],[539,21,615,5],[540,8,617,4],[540,12,617,8],[540,13,617,9,"alerts"],[540,19,617,15],[540,20,617,16,"push"],[540,24,617,20],[540,25,617,21,"alert"],[540,30,617,26],[540,31,617,27],[542,8,619,4],[543,8,620,4],[543,12,620,8],[543,16,620,12],[543,17,620,13,"alerts"],[543,23,620,19],[543,24,620,20,"length"],[543,30,620,26],[543,33,620,29],[543,36,620,32],[543,38,620,34],[544,10,621,6],[544,14,621,10],[544,15,621,11,"alerts"],[544,21,621,17],[544,24,621,20],[544,28,621,24],[544,29,621,25,"alerts"],[544,35,621,31],[544,36,621,32,"slice"],[544,41,621,37],[544,42,621,38],[544,43,621,39],[544,46,621,42],[544,47,621,43],[545,8,622,4],[547,8,624,4],[548,8,625,4],[548,12,625,8],[548,13,625,9],[548,17,625,13],[548,18,625,14,"databaseAvailable"],[548,35,625,31],[548,37,625,33],[549,10,626,6],[549,14,626,10],[549,15,626,11,"storeOfflineAlerts"],[549,33,626,29],[549,34,626,30],[549,35,626,31,"alert"],[549,40,626,36],[549,41,626,37],[549,42,626,38],[549,43,626,39,"catch"],[549,48,626,44],[549,49,626,45],[549,59,626,45,"error"],[549,64,626,50],[549,66,626,54],[550,12,627,8,"EventLogger"],[550,36,627,19],[550,37,627,20,"error"],[550,42,627,25],[550,43,627,26],[550,63,627,46],[550,65,627,48],[550,96,627,79],[550,98,627,81,"error"],[550,103,627,95],[550,104,627,96],[551,10,628,6],[551,11,628,7],[551,12,628,8],[552,8,629,4],[553,8,631,4,"EventLogger"],[553,32,631,15],[553,33,631,16,"warn"],[553,37,631,20],[553,38,631,21],[553,58,631,41],[553,60,631,43],[553,82,631,65,"alert"],[553,87,631,70],[553,88,631,71,"message"],[553,95,631,78],[553,97,631,80],[553,99,631,82],[554,10,632,6,"type"],[554,14,632,10],[554,16,632,12,"alert"],[554,21,632,17],[554,22,632,18,"type"],[554,26,632,22],[555,10,633,6,"severity"],[555,18,633,14],[555,20,633,16,"alert"],[555,25,633,21],[555,26,633,22,"severity"],[555,34,633,30],[556,10,634,6,"value"],[556,15,634,11],[556,17,634,13,"alert"],[556,22,634,18],[556,23,634,19,"value"],[556,28,634,24],[557,10,635,6,"threshold"],[557,19,635,15],[557,21,635,17,"alert"],[557,26,635,22],[557,27,635,23,"threshold"],[558,8,636,4],[558,9,636,5],[558,10,636,6],[559,6,637,2],[561,6,639,2],[562,0,640,0],[563,0,641,0],[564,4,639,2],[565,6,639,2,"key"],[565,9,639,2],[566,6,639,2,"value"],[566,11,639,2],[566,13,642,2],[566,22,642,10,"setupMemoryMonitoring"],[566,43,642,31,"setupMemoryMonitoring"],[566,44,642,31],[566,46,642,40],[567,8,642,40],[567,12,642,40,"_this3"],[567,18,642,40],[568,8,643,4],[568,12,643,8],[568,13,643,9,"memoryCheckInterval"],[568,32,643,28],[568,35,643,31,"setInterval"],[568,46,643,42],[568,47,643,43],[568,59,643,49],[569,10,644,6,"_this3"],[569,16,644,10],[569,17,644,11,"trackMemoryUsage"],[569,33,644,27],[569,34,644,28],[569,35,644,29],[570,8,645,4],[570,9,645,5],[570,11,645,7],[570,16,645,12],[570,17,645,13],[570,18,645,14],[570,19,645,15],[571,6,646,2],[573,6,648,2],[574,0,649,0],[575,0,650,0],[576,4,648,2],[577,6,648,2,"key"],[577,9,648,2],[578,6,648,2,"value"],[578,11,648,2],[578,13,651,2],[578,22,651,10,"setupFrameRateMonitoring"],[578,46,651,34,"setupFrameRateMonitoring"],[578,47,651,34],[578,49,651,43],[579,8,652,4],[580,8,653,4],[581,8,654,4,"EventLogger"],[581,32,654,15],[581,33,654,16,"debug"],[581,38,654,21],[581,39,654,22],[581,59,654,42],[581,61,654,44],[581,115,654,98],[581,116,654,99],[582,6,655,2],[584,6,657,2],[585,0,658,0],[586,0,659,0],[587,4,657,2],[588,6,657,2,"key"],[588,9,657,2],[589,6,657,2,"value"],[589,11,657,2],[589,13,660,2],[589,22,660,10,"setupPeriodicFlush"],[589,40,660,28,"setupPeriodicFlush"],[589,41,660,28],[589,43,660,37],[590,8,660,37],[590,12,660,37,"_this4"],[590,18,660,37],[591,8,661,4],[592,8,662,4,"setTimeout"],[592,18,662,14],[592,19,662,15],[592,31,662,21],[593,10,663,6,"setInterval"],[593,21,663,17],[593,22,663,18],[593,34,663,24],[594,12,664,8],[594,16,664,12,"_this4"],[594,22,664,16],[594,23,664,17,"isInitialized"],[594,36,664,30],[594,40,664,34,"_this4"],[594,46,664,38],[594,47,664,39,"config"],[594,53,664,45],[594,54,664,46,"enabled"],[594,61,664,53],[594,65,664,57,"_this4"],[594,71,664,61],[594,72,664,62,"metricQueue"],[594,83,664,73],[594,84,664,74,"length"],[594,90,664,80],[594,93,664,83],[594,94,664,84],[594,96,664,86],[595,14,665,10,"EventLogger"],[595,38,665,21],[595,39,665,22,"debug"],[595,44,665,27],[595,45,665,28],[595,65,665,48],[595,67,665,50],[595,93,665,76],[595,95,665,78],[596,16,665,80,"queueLength"],[596,27,665,91],[596,29,665,93,"_this4"],[596,35,665,97],[596,36,665,98,"metricQueue"],[596,47,665,109],[596,48,665,110,"length"],[597,14,665,117],[597,15,665,118],[597,16,665,119],[598,14,666,10,"_this4"],[598,20,666,14],[598,21,666,15,"flushMetrics"],[598,33,666,27],[598,34,666,28],[598,35,666,29],[598,36,666,30,"catch"],[598,41,666,35],[598,42,666,36],[598,52,666,36,"error"],[598,57,666,41],[598,59,666,45],[599,16,667,12,"EventLogger"],[599,40,667,23],[599,41,667,24,"error"],[599,46,667,29],[599,47,667,30],[599,67,667,50],[599,69,667,52],[599,92,667,75],[599,94,667,77,"error"],[599,99,667,91],[599,100,667,92],[600,14,668,10],[600,15,668,11],[600,16,668,12],[601,12,669,8],[602,10,670,6],[602,11,670,7],[602,13,670,9],[602,18,670,14],[602,19,670,15],[602,20,670,16],[602,21,670,17],[603,8,671,4],[603,9,671,5],[603,11,671,7],[603,15,671,11],[603,16,671,12],[603,17,671,13],[603,18,671,14],[604,6,672,2],[606,6,674,2],[607,0,675,0],[608,0,676,0],[609,4,674,2],[610,6,674,2,"key"],[610,9,674,2],[611,6,674,2,"value"],[611,11,674,2],[612,8,674,2],[612,12,674,2,"_flush"],[612,18,674,2],[612,25,674,2,"_asyncToGenerator2"],[612,43,674,2],[612,44,674,2,"default"],[612,51,674,2],[612,53,677,2],[612,66,677,38],[613,10,678,4],[613,14,678,8],[613,15,678,9],[613,19,678,13],[613,20,678,14,"isInitialized"],[613,33,678,27],[613,35,678,29],[614,12,679,6,"EventLogger"],[614,36,679,17],[614,37,679,18,"warn"],[614,41,679,22],[614,42,679,23],[614,62,679,43],[614,64,679,45],[614,100,679,81],[614,101,679,82],[615,12,680,6],[616,10,681,4],[617,10,682,4],[617,17,682,11],[617,21,682,15],[617,22,682,16,"flushMetrics"],[617,34,682,28],[617,35,682,29],[617,36,682,30],[618,8,683,2],[618,9,683,3],[619,8,683,3],[619,17,677,15,"flush"],[619,22,677,20,"flush"],[619,23,677,20],[620,10,677,20],[620,17,677,20,"_flush"],[620,23,677,20],[620,24,677,20,"apply"],[620,29,677,20],[620,36,677,20,"arguments"],[620,45,677,20],[621,8,677,20],[622,8,677,20],[622,15,677,15,"flush"],[622,20,677,20],[623,6,677,20],[624,6,685,2],[625,0,686,0],[626,0,687,0],[627,6,685,2],[628,4,685,2],[629,6,685,2,"key"],[629,9,685,2],[630,6,685,2,"value"],[630,11,685,2],[631,8,685,2],[631,12,685,2,"_flushMetrics"],[631,25,685,2],[631,32,685,2,"_asyncToGenerator2"],[631,50,685,2],[631,51,685,2,"default"],[631,58,685,2],[631,60,688,2],[631,73,688,46],[632,10,689,4],[632,14,689,8],[632,15,689,9],[632,19,689,13],[632,20,689,14,"config"],[632,26,689,20],[632,27,689,21,"enabled"],[632,34,689,28],[632,38,689,32],[632,39,689,33],[632,43,689,37],[632,44,689,38,"isInitialized"],[632,57,689,51],[632,61,689,55],[632,65,689,59],[632,66,689,60,"isFlushingMetrics"],[632,83,689,77],[632,87,689,81],[632,91,689,85],[632,92,689,86,"metricQueue"],[632,103,689,97],[632,104,689,98,"length"],[632,110,689,104],[632,115,689,109],[632,116,689,110],[632,118,689,112],[633,12,690,6,"EventLogger"],[633,36,690,17],[633,37,690,18,"debug"],[633,42,690,23],[633,43,690,24],[633,63,690,44],[633,65,690,46],[633,81,690,62],[633,83,690,64],[634,14,691,8,"enabled"],[634,21,691,15],[634,23,691,17],[634,27,691,21],[634,28,691,22,"config"],[634,34,691,28],[634,35,691,29,"enabled"],[634,42,691,36],[635,14,692,8,"initialized"],[635,25,692,19],[635,27,692,21],[635,31,692,25],[635,32,692,26,"isInitialized"],[635,45,692,39],[636,14,693,8,"flushing"],[636,22,693,16],[636,24,693,18],[636,28,693,22],[636,29,693,23,"isFlushingMetrics"],[636,46,693,40],[637,14,694,8,"queueLength"],[637,25,694,19],[637,27,694,21],[637,31,694,25],[637,32,694,26,"metricQueue"],[637,43,694,37],[637,44,694,38,"length"],[638,12,695,6],[638,13,695,7],[638,14,695,8],[639,12,696,6],[640,10,697,4],[642,10,699,4],[643,10,700,4],[643,14,700,8],[643,15,700,9],[643,19,700,13],[643,20,700,14,"databaseAvailable"],[643,37,700,31],[643,39,700,33],[644,12,701,6],[644,16,701,12,"metrics"],[644,24,701,19],[644,31,701,19,"_toConsumableArray2"],[644,50,701,19],[644,51,701,19,"default"],[644,58,701,19],[644,60,701,26],[644,64,701,30],[644,65,701,31,"metricQueue"],[644,76,701,42],[644,77,701,43],[645,12,702,6],[645,16,702,10],[645,17,702,11,"metricQueue"],[645,28,702,22],[645,31,702,25],[645,33,702,27],[646,12,703,6],[646,18,703,12],[646,22,703,16],[646,23,703,17,"storeOfflineMetrics"],[646,42,703,36],[646,43,703,37,"metrics"],[646,51,703,44],[646,52,703,45],[647,12,704,6,"EventLogger"],[647,36,704,17],[647,37,704,18,"debug"],[647,42,704,23],[647,43,704,24],[647,63,704,44],[647,65,704,46],[647,114,704,95],[647,116,704,97],[648,14,704,99,"count"],[648,19,704,104],[648,21,704,106,"metrics"],[648,29,704,113],[648,30,704,114,"length"],[649,12,704,121],[649,13,704,122],[649,14,704,123],[650,12,705,6],[651,10,706,4],[652,10,708,4],[652,14,708,8],[652,15,708,9,"isFlushingMetrics"],[652,32,708,26],[652,35,708,29],[652,39,708,33],[653,10,709,4],[653,14,709,10,"metrics"],[653,21,709,17],[653,28,709,17,"_toConsumableArray2"],[653,47,709,17],[653,48,709,17,"default"],[653,55,709,17],[653,57,709,24],[653,61,709,28],[653,62,709,29,"metricQueue"],[653,73,709,40],[653,74,709,41],[654,10,710,4],[654,14,710,8],[654,15,710,9,"metricQueue"],[654,26,710,20],[654,29,710,23],[654,31,710,25],[655,10,712,4],[655,14,712,8],[656,12,713,6],[656,18,713,12],[656,22,713,16],[656,23,713,17,"sendMetrics"],[656,34,713,28],[656,35,713,29,"metrics"],[656,42,713,36],[656,43,713,37],[657,12,714,6,"EventLogger"],[657,36,714,17],[657,37,714,18,"info"],[657,41,714,22],[657,42,714,23],[657,62,714,43],[657,64,714,45],[657,94,714,75],[657,96,714,77],[658,14,714,79,"count"],[658,19,714,84],[658,21,714,86,"metrics"],[658,28,714,93],[658,29,714,94,"length"],[659,12,714,101],[659,13,714,102],[659,14,714,103],[660,10,716,4],[660,11,716,5],[660,12,716,6],[660,19,716,13,"error"],[660,24,716,18],[660,26,716,20],[661,12,716,20],[661,16,716,20,"_this$metricQueue"],[661,33,716,20],[662,12,717,6],[663,12,718,6],[663,13,718,6,"_this$metricQueue"],[663,30,718,6],[663,37,718,10],[663,38,718,11,"metricQueue"],[663,49,718,22],[663,51,718,23,"unshift"],[663,58,718,30],[663,59,718,30,"apply"],[663,64,718,30],[663,65,718,30,"_this$metricQueue"],[663,82,718,30],[663,88,718,30,"_toConsumableArray2"],[663,107,718,30],[663,108,718,30,"default"],[663,115,718,30],[663,117,718,34,"metrics"],[663,124,718,41],[663,126,718,42],[664,12,719,6],[664,18,719,12],[664,22,719,16],[664,23,719,17,"storeOfflineMetrics"],[664,42,719,36],[664,43,719,37,"metrics"],[664,50,719,44],[664,51,719,45],[666,12,721,6],[667,12,722,6],[667,16,722,12,"errorDetails"],[667,28,722,24],[667,31,722,27],[668,14,723,8,"name"],[668,18,723,12],[668,20,723,14,"error"],[668,25,723,19],[668,37,723,31,"Error"],[668,42,723,36],[668,45,723,39,"error"],[668,50,723,44],[668,51,723,45,"name"],[668,55,723,49],[668,58,723,52],[668,72,723,66],[669,14,724,8,"message"],[669,21,724,15],[669,23,724,17,"error"],[669,28,724,22],[669,40,724,34,"Error"],[669,45,724,39],[669,48,724,42,"error"],[669,53,724,47],[669,54,724,48,"message"],[669,61,724,55],[669,64,724,58,"String"],[669,70,724,64],[669,71,724,65,"error"],[669,76,724,70],[669,77,724,71],[670,14,725,8,"stack"],[670,19,725,13],[670,21,725,15,"error"],[670,26,725,20],[670,38,725,32,"Error"],[670,43,725,37],[670,46,725,40,"error"],[670,51,725,45],[670,52,725,46,"stack"],[670,57,725,51],[670,60,725,54,"undefined"],[670,69,725,63],[671,14,726,8,"metricCount"],[671,25,726,19],[671,27,726,21,"metrics"],[671,34,726,28],[671,35,726,29,"length"],[671,41,726,35],[672,14,727,8,"isSupabaseError"],[672,29,727,23],[672,31,727,25,"error"],[672,36,727,30],[672,40,727,34],[672,47,727,41,"error"],[672,52,727,46],[672,57,727,51],[672,65,727,59],[672,69,727,63],[672,75,727,69],[672,79,727,73,"error"],[672,84,727,78],[673,14,728,8,"errorCode"],[673,23,728,17],[673,25,728,19,"error"],[673,30,728,24],[673,34,728,28],[673,41,728,35,"error"],[673,46,728,40],[673,51,728,45],[673,59,728,53],[673,63,728,57],[673,69,728,63],[673,73,728,67,"error"],[673,78,728,72],[673,81,728,76,"error"],[673,86,728,81],[673,87,728,90,"code"],[673,91,728,94],[673,94,728,97,"undefined"],[674,12,729,6],[674,13,729,7],[675,12,731,6,"EventLogger"],[675,36,731,17],[675,37,731,18,"error"],[675,42,731,23],[675,43,731,24],[675,63,731,44],[675,65,731,46],[675,107,731,88],[675,109,731,90,"errorDetails"],[675,121,731,109],[675,122,731,110],[676,10,732,4],[676,11,732,5],[676,20,732,14],[677,12,733,6],[677,16,733,10],[677,17,733,11,"isFlushingMetrics"],[677,34,733,28],[677,37,733,31],[677,42,733,36],[678,10,734,4],[679,8,735,2],[679,9,735,3],[680,8,735,3],[680,17,688,16,"flushMetrics"],[680,29,688,28,"flushMetrics"],[680,30,688,28],[681,10,688,28],[681,17,688,28,"_flushMetrics"],[681,30,688,28],[681,31,688,28,"apply"],[681,36,688,28],[681,43,688,28,"arguments"],[681,52,688,28],[682,8,688,28],[683,8,688,28],[683,15,688,16,"flushMetrics"],[683,27,688,28],[684,6,688,28],[685,6,737,2],[686,0,738,0],[687,0,739,0],[688,6,737,2],[689,4,737,2],[690,6,737,2,"key"],[690,9,737,2],[691,6,737,2,"value"],[691,11,737,2],[692,8,737,2],[692,12,737,2,"_sendMetrics"],[692,24,737,2],[692,31,737,2,"_asyncToGenerator2"],[692,49,737,2],[692,50,737,2,"default"],[692,57,737,2],[692,59,740,2],[692,70,740,28,"metrics"],[692,77,740,56],[692,79,740,73],[693,10,741,4],[694,10,742,4],[694,14,742,8],[694,15,742,9,"supabase"],[694,31,742,17],[694,33,742,19],[695,12,743,6],[695,18,743,12],[695,22,743,16,"Error"],[695,27,743,21],[695,28,743,22],[695,61,743,55],[695,62,743,56],[696,10,744,4],[698,10,746,4],[699,10,747,4],[701,10,749,4],[701,14,749,10,"errors"],[701,20,749,25],[701,23,749,28],[701,25,749,30],[702,10,750,4],[702,14,750,10,"results"],[702,21,750,17],[702,30,750,26,"Promise"],[702,37,750,33],[702,38,750,34,"allSettled"],[702,48,750,44],[702,49,750,45,"metrics"],[702,56,750,52],[702,57,750,53,"map"],[702,60,750,56],[703,12,750,56],[703,16,750,56,"_ref"],[703,20,750,56],[703,27,750,56,"_asyncToGenerator2"],[703,45,750,56],[703,46,750,56,"default"],[703,53,750,56],[703,55,750,57],[703,66,750,64,"metric"],[703,72,750,70],[703,74,750,75],[704,14,751,6],[704,18,751,10],[705,16,752,8],[705,20,752,8,"_yield$supabase$from$2"],[705,42,752,8],[705,51,752,32,"supabase"],[705,67,752,40],[705,68,753,11,"from"],[705,72,753,15],[705,73,753,16],[705,94,753,37],[705,95,753,38],[705,96,754,11,"insert"],[705,102,754,17],[705,103,754,18],[706,20,755,12,"id"],[706,22,755,14],[706,24,755,16,"metric"],[706,30,755,22],[706,31,755,23,"id"],[706,33,755,25],[707,20,756,12,"timestamp"],[707,29,756,21],[707,31,756,23,"metric"],[707,37,756,29],[707,38,756,30,"timestamp"],[707,47,756,39],[708,20,757,12,"type"],[708,24,757,16],[708,26,757,18,"metric"],[708,32,757,24],[708,33,757,25,"type"],[708,37,757,29],[709,20,758,12,"name"],[709,24,758,16],[709,26,758,18,"metric"],[709,32,758,24],[709,33,758,25,"name"],[709,37,758,29],[710,20,759,12,"value"],[710,25,759,17],[710,27,759,19,"metric"],[710,33,759,25],[710,34,759,26,"value"],[710,39,759,31],[711,20,760,12,"unit"],[711,24,760,16],[711,26,760,18,"metric"],[711,32,760,24],[711,33,760,25,"unit"],[711,37,760,29],[712,20,761,12,"context"],[712,27,761,19],[712,29,761,21,"metric"],[712,35,761,27],[712,36,761,28,"context"],[712,43,761,35],[713,20,762,12,"tags"],[713,24,762,16],[713,26,762,18,"metric"],[713,32,762,24],[713,33,762,25,"tags"],[714,18,763,10],[714,19,763,11],[714,20,763,12],[715,18,752,16,"error"],[715,23,752,21],[715,26,752,21,"_yield$supabase$from$2"],[715,48,752,21],[715,49,752,16,"error"],[715,54,752,21],[716,16,765,8],[716,20,765,12,"error"],[716,25,765,17],[716,27,765,19],[717,18,766,10,"EventLogger"],[717,42,766,21],[717,43,766,22,"error"],[717,48,766,27],[717,49,766,28],[717,69,766,48],[717,71,766,50],[717,98,766,77,"metric"],[717,104,766,83],[717,105,766,84,"id"],[717,107,766,86],[717,109,766,88],[717,111,766,90],[718,20,767,12,"supabaseError"],[718,33,767,25],[718,35,767,27,"error"],[718,40,767,32],[719,20,768,12,"errorCode"],[719,29,768,21],[719,31,768,23,"error"],[719,36,768,28],[719,37,768,29,"code"],[719,41,768,33],[720,20,769,12,"errorMessage"],[720,32,769,24],[720,34,769,26,"error"],[720,39,769,31],[720,40,769,32,"message"],[720,47,769,39],[721,20,770,12,"metricId"],[721,28,770,20],[721,30,770,22,"metric"],[721,36,770,28],[721,37,770,29,"id"],[722,18,771,10],[722,19,771,18],[722,20,771,19],[723,18,772,10],[723,24,772,16],[723,28,772,20,"Error"],[723,33,772,25],[723,34,772,26],[723,53,772,45,"error"],[723,58,772,50],[723,59,772,51,"message"],[723,66,772,58],[723,77,772,69,"error"],[723,82,772,74],[723,83,772,75,"code"],[723,87,772,79],[723,90,772,82],[723,91,772,83],[724,16,773,8],[725,16,775,8],[725,23,775,15],[726,18,775,17,"success"],[726,25,775,24],[726,27,775,26],[726,31,775,30],[727,18,775,32,"metricId"],[727,26,775,40],[727,28,775,42,"metric"],[727,34,775,48],[727,35,775,49,"id"],[728,16,775,52],[728,17,775,53],[729,14,776,6],[729,15,776,7],[729,16,776,8],[729,23,776,15,"insertError"],[729,34,776,26],[729,36,776,28],[730,16,777,8,"EventLogger"],[730,40,777,19],[730,41,777,20,"error"],[730,46,777,25],[730,47,777,26],[730,67,777,46],[730,69,777,48],[730,106,777,85,"metric"],[730,112,777,91],[730,113,777,92,"id"],[730,115,777,94],[730,117,777,96],[730,119,777,98],[731,18,778,10,"error"],[731,23,778,15],[731,25,778,17,"insertError"],[731,36,778,28],[732,18,779,10,"metricId"],[732,26,779,18],[732,28,779,20,"metric"],[732,34,779,26],[732,35,779,27,"id"],[733,16,780,8],[733,17,780,16],[733,18,780,17],[734,16,781,8],[734,22,781,14,"insertError"],[734,33,781,25],[735,14,782,6],[736,12,783,4],[736,13,783,5],[737,12,783,5],[737,29,783,5,"_x2"],[737,32,783,5],[738,14,783,5],[738,21,783,5,"_ref"],[738,25,783,5],[738,26,783,5,"apply"],[738,31,783,5],[738,38,783,5,"arguments"],[738,47,783,5],[739,12,783,5],[740,10,783,5],[740,14,783,6],[740,15,783,7],[742,10,785,4],[743,10,786,4,"results"],[743,17,786,11],[743,18,786,12,"forEach"],[743,25,786,19],[743,26,786,20],[743,36,786,21,"result"],[743,42,786,27],[743,44,786,29,"index"],[743,49,786,34],[743,51,786,39],[744,12,787,6],[744,16,787,10,"result"],[744,22,787,16],[744,23,787,17,"status"],[744,29,787,23],[744,34,787,28],[744,44,787,38],[744,46,787,40],[745,14,788,8,"errors"],[745,20,788,14],[745,21,788,15,"push"],[745,25,788,19],[745,26,788,20],[745,30,788,24,"Error"],[745,35,788,29],[745,36,788,30],[745,46,788,40,"metrics"],[745,53,788,47],[745,54,788,48,"index"],[745,59,788,53],[745,60,788,54],[745,61,788,55,"id"],[745,63,788,57],[745,68,788,62,"result"],[745,74,788,68],[745,75,788,69,"reason"],[745,81,788,75],[745,83,788,77],[745,84,788,78],[745,85,788,79],[746,12,789,6],[747,10,790,4],[747,11,790,5],[747,12,790,6],[749,10,792,4],[750,10,793,4],[750,14,793,8,"errors"],[750,20,793,14],[750,21,793,15,"length"],[750,27,793,21],[750,30,793,24],[750,31,793,25],[750,33,793,27],[751,12,794,6],[751,16,794,12,"errorMessage"],[751,28,794,24],[751,31,794,27],[751,49,794,45,"errors"],[751,55,794,51],[751,56,794,52,"length"],[751,62,794,58],[751,66,794,62,"metrics"],[751,73,794,69],[751,74,794,70,"length"],[751,80,794,76],[751,106,794,102,"errors"],[751,112,794,108],[751,113,794,109,"map"],[751,116,794,112],[751,117,794,113],[751,127,794,113,"e"],[751,128,794,114],[752,14,794,114],[752,21,794,118,"e"],[752,22,794,119],[752,23,794,120,"message"],[752,30,794,127],[753,12,794,127],[753,14,794,128],[753,15,794,129,"join"],[753,19,794,133],[753,20,794,134],[753,24,794,138],[753,25,794,139],[753,27,794,141],[754,12,795,6,"EventLogger"],[754,36,795,17],[754,37,795,18,"error"],[754,42,795,23],[754,43,795,24],[754,63,795,44],[754,65,795,46],[754,105,795,86],[754,107,795,88],[755,14,796,8,"failedCount"],[755,25,796,19],[755,27,796,21,"errors"],[755,33,796,27],[755,34,796,28,"length"],[755,40,796,34],[756,14,797,8,"totalCount"],[756,24,797,18],[756,26,797,20,"metrics"],[756,33,797,27],[756,34,797,28,"length"],[756,40,797,34],[757,14,798,8,"errors"],[757,20,798,14],[757,22,798,16,"errors"],[757,28,798,22],[757,29,798,23,"map"],[757,32,798,26],[757,33,798,27],[757,43,798,27,"e"],[757,44,798,28],[758,16,798,28],[758,23,798,33],[759,18,798,35,"name"],[759,22,798,39],[759,24,798,41,"e"],[759,25,798,42],[759,26,798,43,"name"],[759,30,798,47],[760,18,798,49,"message"],[760,25,798,56],[760,27,798,58,"e"],[760,28,798,59],[760,29,798,60,"message"],[760,36,798,67],[761,18,798,69,"stack"],[761,23,798,74],[761,25,798,76,"e"],[761,26,798,77],[761,27,798,78,"stack"],[762,16,798,84],[762,17,798,85],[763,14,798,85],[763,15,798,86],[764,12,799,6],[764,13,799,14],[764,14,799,15],[765,12,800,6],[765,18,800,12],[765,22,800,16,"Error"],[765,27,800,21],[765,28,800,22,"errorMessage"],[765,40,800,34],[765,41,800,35],[766,10,801,4],[767,8,802,2],[767,9,802,3],[768,8,802,3],[768,17,740,16,"sendMetrics"],[768,28,740,27,"sendMetrics"],[768,29,740,27,"_x"],[768,31,740,27],[769,10,740,27],[769,17,740,27,"_sendMetrics"],[769,29,740,27],[769,30,740,27,"apply"],[769,35,740,27],[769,42,740,27,"arguments"],[769,51,740,27],[770,8,740,27],[771,8,740,27],[771,15,740,16,"sendMetrics"],[771,26,740,27],[772,6,740,27],[773,6,804,2],[774,0,805,0],[775,0,806,0],[776,6,804,2],[777,4,804,2],[778,6,804,2,"key"],[778,9,804,2],[779,6,804,2,"value"],[779,11,804,2],[780,8,804,2],[780,12,804,2,"_loadOfflineData"],[780,28,804,2],[780,35,804,2,"_asyncToGenerator2"],[780,53,804,2],[780,54,804,2,"default"],[780,61,804,2],[780,63,807,2],[780,76,807,49],[781,10,808,4],[781,14,808,8],[782,12,809,6],[782,16,809,6,"_yield$AsyncStorage$m"],[782,37,809,6],[782,46,809,52,"AsyncStorage"],[782,67,809,64],[782,68,809,65,"multiGet"],[782,76,809,73],[782,77,809,74],[782,78,810,8,"PerformanceMonitorService"],[782,103,810,33],[782,104,810,34,"OFFLINE_METRICS_KEY"],[782,123,810,53],[782,125,811,8,"PerformanceMonitorService"],[782,150,811,33],[782,151,811,34,"OFFLINE_ALERTS_KEY"],[782,169,811,52],[782,170,812,7],[782,171,812,8],[783,14,812,8,"_yield$AsyncStorage$m2"],[783,36,812,8],[783,43,812,8,"_slicedToArray2"],[783,58,812,8],[783,59,812,8,"default"],[783,66,812,8],[783,68,812,8,"_yield$AsyncStorage$m"],[783,89,812,8],[784,14,809,13,"offlineMetrics"],[784,28,809,27],[784,31,809,27,"_yield$AsyncStorage$m2"],[784,53,809,27],[785,14,809,29,"offlineAlerts"],[785,27,809,42],[785,30,809,42,"_yield$AsyncStorage$m2"],[785,52,809,42],[786,12,814,6],[786,16,814,10,"loadedMetrics"],[786,29,814,23],[786,32,814,26],[786,33,814,27],[787,12,815,6],[787,16,815,10,"loadedAlerts"],[787,28,815,22],[787,31,815,25],[787,32,815,26],[788,12,817,6],[788,16,817,10,"offlineMetrics"],[788,30,817,24],[788,31,817,25],[788,32,817,26],[788,33,817,27],[788,35,817,29],[789,14,817,29],[789,18,817,29,"_this$metricQueue2"],[789,36,817,29],[790,14,818,8],[790,18,818,14,"metrics"],[790,25,818,42],[790,28,818,45,"JSON"],[790,32,818,49],[790,33,818,50,"parse"],[790,38,818,55],[790,39,818,56,"offlineMetrics"],[790,53,818,70],[790,54,818,71],[790,55,818,72],[790,56,818,73],[790,57,818,74],[792,14,820,8],[793,14,821,8],[793,18,821,14,"oneDayAgo"],[793,27,821,23],[793,30,821,26,"Date"],[793,34,821,30],[793,35,821,31,"now"],[793,38,821,34],[793,39,821,35],[793,40,821,36],[793,43,821,40],[793,45,821,42],[793,48,821,45],[793,50,821,47],[793,53,821,50],[793,55,821,52],[793,58,821,55],[793,62,821,60],[794,14,822,8],[794,18,822,14,"recentMetrics"],[794,31,822,27],[794,34,822,30,"metrics"],[794,41,822,37],[794,42,823,11,"filter"],[794,48,823,17],[794,49,823,18],[794,59,823,18,"m"],[794,60,823,19],[795,16,823,19],[795,23,823,23,"m"],[795,24,823,24],[795,25,823,25,"timestamp"],[795,34,823,34],[795,37,823,37,"oneDayAgo"],[795,46,823,46],[796,14,823,46],[796,16,823,47],[796,17,824,11,"slice"],[796,22,824,16],[796,23,824,17],[796,24,824,18],[796,27,824,21],[796,28,824,22],[796,29,824,23],[796,30,824,24],[798,14,826,8],[798,15,826,8,"_this$metricQueue2"],[798,33,826,8],[798,40,826,12],[798,41,826,13,"metricQueue"],[798,52,826,24],[798,54,826,25,"unshift"],[798,61,826,32],[798,62,826,32,"apply"],[798,67,826,32],[798,68,826,32,"_this$metricQueue2"],[798,86,826,32],[798,92,826,32,"_toConsumableArray2"],[798,111,826,32],[798,112,826,32,"default"],[798,119,826,32],[798,121,826,36,"recentMetrics"],[798,134,826,49],[798,136,826,50],[799,14,827,8,"loadedMetrics"],[799,27,827,21],[799,30,827,24,"recentMetrics"],[799,43,827,37],[799,44,827,38,"length"],[799,50,827,44],[800,14,828,8],[800,20,828,14,"AsyncStorage"],[800,41,828,26],[800,42,828,27,"removeItem"],[800,52,828,37],[800,53,828,38,"PerformanceMonitorService"],[800,78,828,63],[800,79,828,64,"OFFLINE_METRICS_KEY"],[800,98,828,83],[800,99,828,84],[801,14,830,8],[801,18,830,12,"metrics"],[801,25,830,19],[801,26,830,20,"length"],[801,32,830,26],[801,37,830,31,"recentMetrics"],[801,50,830,44],[801,51,830,45,"length"],[801,57,830,51],[801,59,830,53],[802,16,831,10,"EventLogger"],[802,40,831,21],[802,41,831,22,"debug"],[802,46,831,27],[802,47,831,28],[802,67,831,48],[802,69,831,50],[802,83,831,64,"metrics"],[802,90,831,71],[802,91,831,72,"length"],[802,97,831,78],[802,100,831,81,"recentMetrics"],[802,113,831,94],[802,114,831,95,"length"],[802,120,831,101],[802,141,831,122],[802,142,831,123],[803,14,832,8],[804,12,833,6],[805,12,835,6],[805,16,835,10,"offlineAlerts"],[805,29,835,23],[805,30,835,24],[805,31,835,25],[805,32,835,26],[805,34,835,28],[806,14,835,28],[806,18,835,28,"_this$alerts"],[806,30,835,28],[807,14,836,8],[807,18,836,14,"alerts"],[807,24,836,40],[807,27,836,43,"JSON"],[807,31,836,47],[807,32,836,48,"parse"],[807,37,836,53],[807,38,836,54,"offlineAlerts"],[807,51,836,67],[807,52,836,68],[807,53,836,69],[807,54,836,70],[807,55,836,71],[809,14,838,8],[810,14,839,8],[810,18,839,14,"recentAlerts"],[810,30,839,26],[810,33,839,29,"alerts"],[810,39,839,35],[810,40,839,36,"slice"],[810,45,839,41],[810,46,839,42],[810,47,839,43],[810,49,839,45],[810,50,839,46],[811,14,841,8],[811,15,841,8,"_this$alerts"],[811,27,841,8],[811,34,841,12],[811,35,841,13,"alerts"],[811,41,841,19],[811,43,841,20,"unshift"],[811,50,841,27],[811,51,841,27,"apply"],[811,56,841,27],[811,57,841,27,"_this$alerts"],[811,69,841,27],[811,75,841,27,"_toConsumableArray2"],[811,94,841,27],[811,95,841,27,"default"],[811,102,841,27],[811,104,841,31,"recentAlerts"],[811,116,841,43],[811,118,841,44],[812,14,842,8,"loadedAlerts"],[812,26,842,20],[812,29,842,23,"recentAlerts"],[812,41,842,35],[812,42,842,36,"length"],[812,48,842,42],[813,14,843,8],[813,20,843,14,"AsyncStorage"],[813,41,843,26],[813,42,843,27,"removeItem"],[813,52,843,37],[813,53,843,38,"PerformanceMonitorService"],[813,78,843,63],[813,79,843,64,"OFFLINE_ALERTS_KEY"],[813,97,843,82],[813,98,843,83],[814,14,845,8],[814,18,845,12,"alerts"],[814,24,845,18],[814,25,845,19,"length"],[814,31,845,25],[814,36,845,30,"recentAlerts"],[814,48,845,42],[814,49,845,43,"length"],[814,55,845,49],[814,57,845,51],[815,16,846,10,"EventLogger"],[815,40,846,21],[815,41,846,22,"debug"],[815,46,846,27],[815,47,846,28],[815,67,846,48],[815,69,846,50],[815,92,846,73,"alerts"],[815,98,846,79],[815,99,846,80,"length"],[815,105,846,86],[815,112,846,93,"recentAlerts"],[815,124,846,105],[815,125,846,106,"length"],[815,131,846,112],[815,133,846,114],[815,134,846,115],[816,14,847,8],[817,12,848,6],[818,12,850,6],[818,16,850,10,"loadedMetrics"],[818,29,850,23],[818,32,850,26],[818,33,850,27],[818,37,850,31,"loadedAlerts"],[818,49,850,43],[818,52,850,46],[818,53,850,47],[818,55,850,49],[819,14,851,8,"EventLogger"],[819,38,851,19],[819,39,851,20,"info"],[819,43,851,24],[819,44,851,25],[819,64,851,45],[819,66,851,47],[819,99,851,80],[819,101,851,82],[820,16,852,10,"metricsLoaded"],[820,29,852,23],[820,31,852,25,"loadedMetrics"],[820,44,852,38],[821,16,853,10,"alertsLoaded"],[821,28,853,22],[821,30,853,24,"loadedAlerts"],[822,14,854,8],[822,15,854,9],[822,16,854,10],[824,14,856,8],[825,14,857,8],[825,18,857,12],[825,22,857,16],[825,23,857,17,"databaseAvailable"],[825,40,857,34],[825,42,857,36],[826,16,858,10],[826,20,858,14],[826,21,858,15,"syncOfflineData"],[826,36,858,30],[826,37,858,31],[826,38,858,32],[826,39,858,33,"catch"],[826,44,858,38],[826,45,858,39],[826,55,858,39,"error"],[826,60,858,44],[826,62,858,48],[827,18,859,12,"EventLogger"],[827,42,859,23],[827,43,859,24,"error"],[827,48,859,29],[827,49,859,30],[827,69,859,50],[827,71,859,52],[827,112,859,93],[827,114,859,95,"error"],[827,119,859,109],[827,120,859,110],[828,16,860,10],[828,17,860,11],[828,18,860,12],[829,14,861,8],[830,12,862,6],[831,10,863,4],[831,11,863,5],[831,12,863,6],[831,19,863,13,"error"],[831,24,863,18],[831,26,863,20],[832,12,864,6],[833,12,865,6],[833,16,865,10,"error"],[833,21,865,15],[833,25,865,19],[833,32,865,26,"error"],[833,37,865,31],[833,42,865,36],[833,50,865,44],[833,54,865,48],[833,63,865,57],[833,67,865,61,"error"],[833,72,865,66],[833,76,866,10],[833,83,866,17,"error"],[833,88,866,22],[833,89,866,23,"message"],[833,96,866,30],[833,101,866,35],[833,109,866,43],[833,113,867,10,"error"],[833,118,867,15],[833,119,867,16,"message"],[833,126,867,23],[833,127,867,24,"includes"],[833,135,867,32],[833,136,867,33],[833,149,867,46],[833,150,867,47],[833,152,867,49],[834,14,868,8,"EventLogger"],[834,38,868,19],[834,39,868,20,"warn"],[834,43,868,24],[834,44,868,25],[834,64,868,45],[834,66,868,47],[834,105,868,86],[834,107,868,88],[835,16,868,90,"error"],[835,21,868,95],[835,23,868,97,"error"],[835,28,868,102],[835,29,868,103,"message"],[836,14,868,111],[836,15,868,112],[836,16,868,113],[837,14,869,8],[837,20,869,14],[837,24,869,18],[837,25,869,19,"clearOversizedOfflineData"],[837,50,869,44],[837,51,869,45],[837,52,869,46],[838,14,870,8],[838,18,870,12],[838,19,870,13,"metricQueue"],[838,30,870,24],[838,33,870,27],[838,35,870,29],[839,14,871,8],[839,18,871,12],[839,19,871,13,"alerts"],[839,25,871,19],[839,28,871,22],[839,30,871,24],[840,12,872,6],[840,13,872,7],[840,19,872,13],[841,14,873,8,"EventLogger"],[841,38,873,19],[841,39,873,20,"error"],[841,44,873,25],[841,45,873,26],[841,65,873,46],[841,67,873,48],[841,96,873,77],[841,98,873,79,"error"],[841,103,873,93],[841,104,873,94],[842,12,874,6],[843,10,875,4],[844,8,876,2],[844,9,876,3],[845,8,876,3],[845,17,807,16,"loadOfflineData"],[845,32,807,31,"loadOfflineData"],[845,33,807,31],[846,10,807,31],[846,17,807,31,"_loadOfflineData"],[846,33,807,31],[846,34,807,31,"apply"],[846,39,807,31],[846,46,807,31,"arguments"],[846,55,807,31],[847,8,807,31],[848,8,807,31],[848,15,807,16,"loadOfflineData"],[848,30,807,31],[849,6,807,31],[850,6,878,2],[851,0,879,0],[852,0,880,0],[853,6,878,2],[854,4,878,2],[855,6,878,2,"key"],[855,9,878,2],[856,6,878,2,"value"],[856,11,878,2],[857,8,878,2],[857,12,878,2,"_clearOversizedOfflineData"],[857,38,878,2],[857,45,878,2,"_asyncToGenerator2"],[857,63,878,2],[857,64,878,2,"default"],[857,71,878,2],[857,73,881,2],[857,86,881,59],[858,10,882,4],[858,14,882,8],[859,12,883,6],[859,18,883,12,"AsyncStorage"],[859,39,883,24],[859,40,883,25,"multiRemove"],[859,51,883,36],[859,52,883,37],[859,53,884,8,"PerformanceMonitorService"],[859,78,884,33],[859,79,884,34,"OFFLINE_METRICS_KEY"],[859,98,884,53],[859,100,885,8,"PerformanceMonitorService"],[859,125,885,33],[859,126,885,34,"OFFLINE_ALERTS_KEY"],[859,144,885,52],[859,145,886,7],[859,146,886,8],[860,12,887,6,"EventLogger"],[860,36,887,17],[860,37,887,18,"info"],[860,41,887,22],[860,42,887,23],[860,62,887,43],[860,64,887,45],[860,96,887,77],[860,97,887,78],[861,10,888,4],[861,11,888,5],[861,12,888,6],[861,19,888,13,"error"],[861,24,888,18],[861,26,888,20],[862,12,889,6,"EventLogger"],[862,36,889,17],[862,37,889,18,"error"],[862,42,889,23],[862,43,889,24],[862,63,889,44],[862,65,889,46],[862,95,889,76],[862,97,889,78,"error"],[862,102,889,92],[862,103,889,93],[863,10,890,4],[864,8,891,2],[864,9,891,3],[865,8,891,3],[865,17,881,16,"clearOversizedOfflineData"],[865,42,881,41,"clearOversizedOfflineData"],[865,43,881,41],[866,10,881,41],[866,17,881,41,"_clearOversizedOfflineData"],[866,43,881,41],[866,44,881,41,"apply"],[866,49,881,41],[866,56,881,41,"arguments"],[866,65,881,41],[867,8,881,41],[868,8,881,41],[868,15,881,16,"clearOversizedOfflineData"],[868,40,881,41],[869,6,881,41],[870,6,893,2],[871,0,894,0],[872,0,895,0],[873,6,893,2],[874,4,893,2],[875,6,893,2,"key"],[875,9,893,2],[876,6,893,2,"value"],[876,11,893,2],[877,8,893,2],[877,12,893,2,"_storeOfflineMetrics"],[877,32,893,2],[877,39,893,2,"_asyncToGenerator2"],[877,57,893,2],[877,58,893,2,"default"],[877,65,893,2],[877,67,896,2],[877,78,896,36,"metrics"],[877,85,896,64],[877,87,896,81],[878,10,897,4],[878,14,897,8],[879,12,898,6],[880,12,899,6],[880,16,899,12,"existingData"],[880,28,899,24],[880,37,899,33,"AsyncStorage"],[880,58,899,45],[880,59,899,46,"getItem"],[880,66,899,53],[880,67,899,54,"PerformanceMonitorService"],[880,92,899,79],[880,93,899,80,"OFFLINE_METRICS_KEY"],[880,112,899,99],[880,113,899,100],[881,12,900,6],[881,16,900,12,"existingMetrics"],[881,31,900,27],[881,34,900,30,"existingData"],[881,46,900,42],[881,49,900,45,"JSON"],[881,53,900,49],[881,54,900,50,"parse"],[881,59,900,55],[881,60,900,56,"existingData"],[881,72,900,68],[881,73,900,69],[881,76,900,72],[881,78,900,74],[883,12,902,6],[884,12,903,6],[884,16,903,12,"allMetrics"],[884,26,903,22],[884,32,903,22,"concat"],[884,38,903,22],[884,43,903,22,"_toConsumableArray2"],[884,62,903,22],[884,63,903,22,"default"],[884,70,903,22],[884,72,903,29,"existingMetrics"],[884,87,903,44],[884,94,903,44,"_toConsumableArray2"],[884,113,903,44],[884,114,903,44,"default"],[884,121,903,44],[884,123,903,49,"metrics"],[884,130,903,56],[884,132,903,57],[886,12,905,6],[887,12,906,6],[887,16,906,12,"maxOfflineMetrics"],[887,33,906,29],[887,36,906,32],[887,39,906,35],[888,12,907,6],[888,16,907,10,"allMetrics"],[888,26,907,20],[888,27,907,21,"length"],[888,33,907,27],[888,36,907,30,"maxOfflineMetrics"],[888,53,907,47],[888,55,907,49],[889,14,908,8,"allMetrics"],[889,24,908,18],[889,25,908,19,"splice"],[889,31,908,25],[889,32,908,26],[889,33,908,27],[889,35,908,29,"allMetrics"],[889,45,908,39],[889,46,908,40,"length"],[889,52,908,46],[889,55,908,49,"maxOfflineMetrics"],[889,72,908,66],[889,73,908,67],[890,14,909,8,"EventLogger"],[890,38,909,19],[890,39,909,20,"debug"],[890,44,909,25],[890,45,909,26],[890,65,909,46],[890,67,909,48],[890,97,909,78,"maxOfflineMetrics"],[890,114,909,95],[890,128,909,109],[890,129,909,110],[891,12,910,6],[893,12,912,6],[894,12,913,6],[894,16,913,12,"estimatedSize"],[894,29,913,25],[894,32,913,28,"JSON"],[894,36,913,32],[894,37,913,33,"stringify"],[894,46,913,42],[894,47,913,43,"allMetrics"],[894,57,913,53],[894,58,913,54],[894,59,913,55,"length"],[894,65,913,61],[895,12,914,6],[895,16,914,10,"estimatedSize"],[895,29,914,23],[895,32,914,26],[895,38,914,32],[895,40,914,34],[896,14,914,36],[897,14,915,8],[898,14,916,8,"allMetrics"],[898,24,916,18],[898,25,916,19,"splice"],[898,31,916,25],[898,32,916,26],[898,33,916,27],[898,35,916,29,"allMetrics"],[898,45,916,39],[898,46,916,40,"length"],[898,52,916,46],[898,55,916,49],[898,57,916,51],[898,58,916,52],[899,14,917,8,"EventLogger"],[899,38,917,19],[899,39,917,20,"warn"],[899,43,917,24],[899,44,917,25],[899,64,917,45],[899,66,917,47],[899,120,917,101],[899,121,917,102],[900,12,918,6],[901,12,920,6],[901,18,920,12,"AsyncStorage"],[901,39,920,24],[901,40,920,25,"setItem"],[901,47,920,32],[901,48,921,8,"PerformanceMonitorService"],[901,73,921,33],[901,74,921,34,"OFFLINE_METRICS_KEY"],[901,93,921,53],[901,95,922,8,"JSON"],[901,99,922,12],[901,100,922,13,"stringify"],[901,109,922,22],[901,110,922,23,"allMetrics"],[901,120,922,33],[901,121,923,6],[901,122,923,7],[902,12,925,6,"EventLogger"],[902,36,925,17],[902,37,925,18,"info"],[902,41,925,22],[902,42,925,23],[902,62,925,43],[902,64,925,45],[902,88,925,69],[902,90,925,71],[903,14,926,8,"newCount"],[903,22,926,16],[903,24,926,18,"metrics"],[903,31,926,25],[903,32,926,26,"length"],[903,38,926,32],[904,14,927,8,"totalStored"],[904,25,927,19],[904,27,927,21,"allMetrics"],[904,37,927,31],[904,38,927,32,"length"],[905,12,928,6],[905,13,928,7],[905,14,928,8],[906,10,929,4],[906,11,929,5],[906,12,929,6],[906,19,929,13,"error"],[906,24,929,18],[906,26,929,20],[907,12,930,6,"EventLogger"],[907,36,930,17],[907,37,930,18,"error"],[907,42,930,23],[907,43,930,24],[907,63,930,44],[907,65,930,46],[907,98,930,79],[907,100,930,81,"error"],[907,105,930,95],[907,106,930,96],[908,10,931,4],[909,8,932,2],[909,9,932,3],[910,8,932,3],[910,17,896,16,"storeOfflineMetrics"],[910,36,896,35,"storeOfflineMetrics"],[910,37,896,35,"_x3"],[910,40,896,35],[911,10,896,35],[911,17,896,35,"_storeOfflineMetrics"],[911,37,896,35],[911,38,896,35,"apply"],[911,43,896,35],[911,50,896,35,"arguments"],[911,59,896,35],[912,8,896,35],[913,8,896,35],[913,15,896,16,"storeOfflineMetrics"],[913,34,896,35],[914,6,896,35],[915,6,934,2],[916,0,935,0],[917,0,936,0],[918,6,934,2],[919,4,934,2],[920,6,934,2,"key"],[920,9,934,2],[921,6,934,2,"value"],[921,11,934,2],[922,8,934,2],[922,12,934,2,"_storeOfflineAlerts"],[922,31,934,2],[922,38,934,2,"_asyncToGenerator2"],[922,56,934,2],[922,57,934,2,"default"],[922,64,934,2],[922,66,937,2],[922,77,937,35,"alerts"],[922,83,937,61],[922,85,937,78],[923,10,938,4],[923,14,938,8],[924,12,939,6],[925,12,940,6],[925,16,940,12,"existingData"],[925,28,940,24],[925,37,940,33,"AsyncStorage"],[925,58,940,45],[925,59,940,46,"getItem"],[925,66,940,53],[925,67,940,54,"PerformanceMonitorService"],[925,92,940,79],[925,93,940,80,"OFFLINE_ALERTS_KEY"],[925,111,940,98],[925,112,940,99],[926,12,941,6],[926,16,941,12,"existingAlerts"],[926,30,941,26],[926,33,941,29,"existingData"],[926,45,941,41],[926,48,941,44,"JSON"],[926,52,941,48],[926,53,941,49,"parse"],[926,58,941,54],[926,59,941,55,"existingData"],[926,71,941,67],[926,72,941,68],[926,75,941,71],[926,77,941,73],[928,12,943,6],[929,12,944,6],[929,16,944,12,"allAlerts"],[929,25,944,21],[929,31,944,21,"concat"],[929,37,944,21],[929,42,944,21,"_toConsumableArray2"],[929,61,944,21],[929,62,944,21,"default"],[929,69,944,21],[929,71,944,28,"existingAlerts"],[929,85,944,42],[929,92,944,42,"_toConsumableArray2"],[929,111,944,42],[929,112,944,42,"default"],[929,119,944,42],[929,121,944,47,"alerts"],[929,127,944,53],[929,129,944,54],[931,12,946,6],[932,12,947,6],[932,16,947,12,"maxOfflineAlerts"],[932,32,947,28],[932,35,947,31],[932,37,947,33],[933,12,948,6],[933,16,948,10,"allAlerts"],[933,25,948,19],[933,26,948,20,"length"],[933,32,948,26],[933,35,948,29,"maxOfflineAlerts"],[933,51,948,45],[933,53,948,47],[934,14,949,8,"allAlerts"],[934,23,949,17],[934,24,949,18,"splice"],[934,30,949,24],[934,31,949,25],[934,32,949,26],[934,34,949,28,"allAlerts"],[934,43,949,37],[934,44,949,38,"length"],[934,50,949,44],[934,53,949,47,"maxOfflineAlerts"],[934,69,949,63],[934,70,949,64],[935,14,950,8,"EventLogger"],[935,38,950,19],[935,39,950,20,"debug"],[935,44,950,25],[935,45,950,26],[935,65,950,46],[935,67,950,48],[935,96,950,77,"maxOfflineAlerts"],[935,112,950,93],[935,126,950,107],[935,127,950,108],[936,12,951,6],[938,12,953,6],[939,12,954,6],[939,16,954,12,"estimatedSize"],[939,29,954,25],[939,32,954,28,"JSON"],[939,36,954,32],[939,37,954,33,"stringify"],[939,46,954,42],[939,47,954,43,"allAlerts"],[939,56,954,52],[939,57,954,53],[939,58,954,54,"length"],[939,64,954,60],[940,12,955,6],[940,16,955,10,"estimatedSize"],[940,29,955,23],[940,32,955,26],[940,38,955,32],[940,40,955,34],[941,14,955,36],[942,14,956,8],[943,14,957,8,"allAlerts"],[943,23,957,17],[943,24,957,18,"splice"],[943,30,957,24],[943,31,957,25],[943,32,957,26],[943,34,957,28,"allAlerts"],[943,43,957,37],[943,44,957,38,"length"],[943,50,957,44],[943,53,957,47],[943,55,957,49],[943,56,957,50],[944,14,958,8,"EventLogger"],[944,38,958,19],[944,39,958,20,"warn"],[944,43,958,24],[944,44,958,25],[944,64,958,45],[944,66,958,47],[944,119,958,100],[944,120,958,101],[945,12,959,6],[946,12,961,6],[946,18,961,12,"AsyncStorage"],[946,39,961,24],[946,40,961,25,"setItem"],[946,47,961,32],[946,48,962,8,"PerformanceMonitorService"],[946,73,962,33],[946,74,962,34,"OFFLINE_ALERTS_KEY"],[946,92,962,52],[946,94,963,8,"JSON"],[946,98,963,12],[946,99,963,13,"stringify"],[946,108,963,22],[946,109,963,23,"allAlerts"],[946,118,963,32],[946,119,964,6],[946,120,964,7],[947,12,966,6,"EventLogger"],[947,36,966,17],[947,37,966,18,"info"],[947,41,966,22],[947,42,966,23],[947,62,966,43],[947,64,966,45],[947,87,966,68],[947,89,966,70],[948,14,967,8,"newCount"],[948,22,967,16],[948,24,967,18,"alerts"],[948,30,967,24],[948,31,967,25,"length"],[948,37,967,31],[949,14,968,8,"totalStored"],[949,25,968,19],[949,27,968,21,"allAlerts"],[949,36,968,30],[949,37,968,31,"length"],[950,12,969,6],[950,13,969,7],[950,14,969,8],[951,10,970,4],[951,11,970,5],[951,12,970,6],[951,19,970,13,"error"],[951,24,970,18],[951,26,970,20],[952,12,971,6,"EventLogger"],[952,36,971,17],[952,37,971,18,"error"],[952,42,971,23],[952,43,971,24],[952,63,971,44],[952,65,971,46],[952,97,971,78],[952,99,971,80,"error"],[952,104,971,94],[952,105,971,95],[953,10,972,4],[954,8,973,2],[954,9,973,3],[955,8,973,3],[955,17,937,16,"storeOfflineAlerts"],[955,35,937,34,"storeOfflineAlerts"],[955,36,937,34,"_x4"],[955,39,937,34],[956,10,937,34],[956,17,937,34,"_storeOfflineAlerts"],[956,36,937,34],[956,37,937,34,"apply"],[956,42,937,34],[956,49,937,34,"arguments"],[956,58,937,34],[957,8,937,34],[958,8,937,34],[958,15,937,16,"storeOfflineAlerts"],[958,33,937,34],[959,6,937,34],[960,6,975,2],[961,0,976,0],[962,0,977,0],[963,6,975,2],[964,4,975,2],[965,6,975,2,"key"],[965,9,975,2],[966,6,975,2,"value"],[966,11,975,2],[967,8,975,2],[967,12,975,2,"_syncOfflineData"],[967,28,975,2],[967,35,975,2,"_asyncToGenerator2"],[967,53,975,2],[967,54,975,2,"default"],[967,61,975,2],[967,63,978,2],[967,76,978,49],[968,10,979,4],[968,14,979,8],[968,15,979,9],[968,19,979,13],[968,20,979,14,"databaseAvailable"],[968,37,979,31],[968,41,979,35],[968,42,979,36],[968,46,979,40],[968,47,979,41,"isInitialized"],[968,60,979,54],[968,62,979,56],[969,12,980,6,"EventLogger"],[969,36,980,17],[969,37,980,18,"debug"],[969,42,980,23],[969,43,980,24],[969,63,980,44],[969,65,980,46],[969,135,980,116],[969,136,980,117],[970,12,981,6],[971,10,982,4],[972,10,984,4],[972,14,984,8],[973,12,985,6],[974,12,986,6],[974,16,986,10],[974,20,986,14],[974,21,986,15,"metricQueue"],[974,32,986,26],[974,33,986,27,"length"],[974,39,986,33],[974,42,986,36],[974,43,986,37],[974,45,986,39],[975,14,987,8,"EventLogger"],[975,38,987,19],[975,39,987,20,"info"],[975,43,987,24],[975,44,987,25],[975,64,987,45],[975,66,987,47],[975,103,987,84],[975,105,987,86],[976,16,987,88,"count"],[976,21,987,93],[976,23,987,95],[976,27,987,99],[976,28,987,100,"metricQueue"],[976,39,987,111],[976,40,987,112,"length"],[977,14,987,119],[977,15,987,120],[977,16,987,121],[978,14,988,8],[978,20,988,14],[978,24,988,18],[978,25,988,19,"flushMetrics"],[978,37,988,31],[978,38,988,32],[978,39,988,33],[979,12,989,6],[981,12,991,6],[982,12,992,6],[983,12,993,6],[985,12,995,6,"EventLogger"],[985,36,995,17],[985,37,995,18,"info"],[985,41,995,22],[985,42,995,23],[985,62,995,43],[985,64,995,45],[985,93,995,74],[985,94,995,75],[986,10,996,4],[986,11,996,5],[986,12,996,6],[986,19,996,13,"error"],[986,24,996,18],[986,26,996,20],[987,12,997,6,"EventLogger"],[987,36,997,17],[987,37,997,18,"error"],[987,42,997,23],[987,43,997,24],[987,63,997,44],[987,65,997,46],[987,94,997,75],[987,96,997,77,"error"],[987,101,997,91],[987,102,997,92],[988,10,998,4],[989,8,999,2],[989,9,999,3],[990,8,999,3],[990,17,978,16,"syncOfflineData"],[990,32,978,31,"syncOfflineData"],[990,33,978,31],[991,10,978,31],[991,17,978,31,"_syncOfflineData"],[991,33,978,31],[991,34,978,31,"apply"],[991,39,978,31],[991,46,978,31,"arguments"],[991,55,978,31],[992,8,978,31],[993,8,978,31],[993,15,978,16,"syncOfflineData"],[993,30,978,31],[994,6,978,31],[995,6,1001,2],[996,0,1002,0],[997,0,1003,0],[998,6,1001,2],[999,4,1001,2],[1000,6,1001,2,"key"],[1000,9,1001,2],[1001,6,1001,2,"value"],[1001,11,1001,2],[1002,8,1001,2],[1002,12,1001,2,"_recheckDatabaseAvailability"],[1002,40,1001,2],[1002,47,1001,2,"_asyncToGenerator2"],[1002,65,1001,2],[1002,66,1001,2,"default"],[1002,73,1001,2],[1002,75,1004,2],[1002,88,1004,60],[1003,10,1005,4],[1003,14,1005,10,"wasAvailable"],[1003,26,1005,22],[1003,29,1005,25],[1003,33,1005,29],[1003,34,1005,30,"databaseAvailable"],[1003,51,1005,47],[1004,10,1007,4],[1004,14,1007,8],[1005,12,1008,6],[1005,18,1008,12],[1005,22,1008,16],[1005,23,1008,17,"checkDatabaseAvailability"],[1005,48,1008,42],[1005,49,1008,43],[1005,50,1008,44],[1007,12,1010,6],[1008,12,1011,6],[1008,16,1011,10],[1008,17,1011,11,"wasAvailable"],[1008,29,1011,23],[1008,33,1011,27],[1008,37,1011,31],[1008,38,1011,32,"databaseAvailable"],[1008,55,1011,49],[1008,57,1011,51],[1009,14,1012,8,"EventLogger"],[1009,38,1012,19],[1009,39,1012,20,"info"],[1009,43,1012,24],[1009,44,1012,25],[1009,64,1012,45],[1009,66,1012,47],[1009,116,1012,97],[1009,117,1012,98],[1010,14,1013,8],[1010,18,1013,12],[1010,19,1013,13,"databaseUnavailableLogged"],[1010,44,1013,38],[1010,47,1013,41],[1010,52,1013,46],[1010,53,1013,47],[1010,54,1013,48],[1011,14,1014,8],[1011,20,1014,14],[1011,24,1014,18],[1011,25,1014,19,"syncOfflineData"],[1011,40,1014,34],[1011,41,1014,35],[1011,42,1014,36],[1012,12,1015,6],[1013,10,1016,4],[1013,11,1016,5],[1013,12,1016,6],[1013,19,1016,13,"error"],[1013,24,1016,18],[1013,26,1016,20],[1014,12,1017,6],[1014,16,1017,10],[1014,17,1017,11,"databaseAvailable"],[1014,34,1017,28],[1014,37,1017,31],[1014,42,1017,36],[1015,12,1018,6,"EventLogger"],[1015,36,1018,17],[1015,37,1018,18,"debug"],[1015,42,1018,23],[1015,43,1018,24],[1015,63,1018,44],[1015,65,1018,46],[1015,95,1018,76],[1015,96,1018,77],[1016,10,1019,4],[1017,8,1020,2],[1017,9,1020,3],[1018,8,1020,3],[1018,17,1004,15,"recheckDatabaseAvailability"],[1018,44,1004,42,"recheckDatabaseAvailability"],[1018,45,1004,42],[1019,10,1004,42],[1019,17,1004,42,"_recheckDatabaseAvailability"],[1019,45,1004,42],[1019,46,1004,42,"apply"],[1019,51,1004,42],[1019,58,1004,42,"arguments"],[1019,67,1004,42],[1020,8,1004,42],[1021,8,1004,42],[1021,15,1004,15,"recheckDatabaseAvailability"],[1021,42,1004,42],[1022,6,1004,42],[1023,6,1022,2],[1024,0,1023,0],[1025,0,1024,0],[1026,6,1022,2],[1027,4,1022,2],[1028,6,1022,2,"key"],[1028,9,1022,2],[1029,6,1022,2,"value"],[1029,11,1022,2],[1029,13,1025,2],[1029,22,1025,10,"shouldTrack"],[1029,33,1025,21,"shouldTrack"],[1029,34,1025,21],[1029,36,1025,33],[1030,8,1026,4],[1030,12,1026,8],[1030,13,1026,9],[1030,17,1026,13],[1030,18,1026,14,"config"],[1030,24,1026,20],[1030,25,1026,21,"enabled"],[1030,32,1026,28],[1030,36,1026,32],[1030,37,1026,33],[1030,41,1026,37],[1030,42,1026,38,"isInitialized"],[1030,55,1026,51],[1030,57,1026,53],[1031,10,1027,6],[1031,17,1027,13],[1031,22,1027,18],[1032,8,1028,4],[1034,8,1030,4],[1035,8,1031,4],[1035,12,1031,8,"__DEV__"],[1035,19,1031,15],[1035,21,1031,17],[1036,10,1032,6],[1036,17,1032,13],[1036,21,1032,17],[1037,8,1033,4],[1039,8,1035,4],[1040,8,1036,4],[1040,15,1036,11,"Math"],[1040,19,1036,15],[1040,20,1036,16,"random"],[1040,26,1036,22],[1040,27,1036,23],[1040,28,1036,24],[1040,31,1036,27],[1040,35,1036,31],[1040,36,1036,32,"config"],[1040,42,1036,38],[1040,43,1036,39,"sampleRate"],[1040,53,1036,49],[1041,6,1037,2],[1043,6,1039,2],[1044,0,1040,0],[1045,0,1041,0],[1046,4,1039,2],[1047,6,1039,2,"key"],[1047,9,1039,2],[1048,6,1039,2,"value"],[1048,11,1039,2],[1048,13,1042,2],[1048,22,1042,10,"calculateStats"],[1048,36,1042,24,"calculateStats"],[1048,37,1042,25,"metrics"],[1048,44,1042,53],[1048,46,1042,60],[1049,8,1043,4],[1049,12,1043,8,"metrics"],[1049,19,1043,15],[1049,20,1043,16,"length"],[1049,26,1043,22],[1049,31,1043,27],[1049,32,1043,28],[1049,34,1043,30],[1050,10,1044,6],[1050,17,1044,13],[1051,12,1044,15,"average"],[1051,19,1044,22],[1051,21,1044,24],[1051,22,1044,25],[1052,12,1044,27,"p50"],[1052,15,1044,30],[1052,17,1044,32],[1052,18,1044,33],[1053,12,1044,35,"p90"],[1053,15,1044,38],[1053,17,1044,40],[1053,18,1044,41],[1054,12,1044,43,"p99"],[1054,15,1044,46],[1054,17,1044,48],[1054,18,1044,49],[1055,12,1044,51,"samples"],[1055,19,1044,58],[1055,21,1044,60],[1056,10,1044,62],[1056,11,1044,63],[1057,8,1045,4],[1058,8,1047,4],[1058,12,1047,10,"values"],[1058,18,1047,16],[1058,21,1047,19,"metrics"],[1058,28,1047,26],[1058,29,1047,27,"map"],[1058,32,1047,30],[1058,33,1047,31],[1058,43,1047,31,"m"],[1058,44,1047,32],[1059,10,1047,32],[1059,17,1047,36,"m"],[1059,18,1047,37],[1059,19,1047,38,"value"],[1059,24,1047,43],[1060,8,1047,43],[1060,10,1047,44],[1060,11,1047,45,"sort"],[1060,15,1047,49],[1060,16,1047,50],[1060,26,1047,51,"a"],[1060,27,1047,52],[1060,29,1047,54,"b"],[1060,30,1047,55],[1061,10,1047,55],[1061,17,1047,60,"a"],[1061,18,1047,61],[1061,21,1047,64,"b"],[1061,22,1047,65],[1062,8,1047,65],[1062,10,1047,66],[1063,8,1048,4],[1063,12,1048,10,"len"],[1063,15,1048,13],[1063,18,1048,16,"values"],[1063,24,1048,22],[1063,25,1048,23,"length"],[1063,31,1048,29],[1064,8,1050,4],[1064,15,1050,11],[1065,10,1051,6,"average"],[1065,17,1051,13],[1065,19,1051,15,"values"],[1065,25,1051,21],[1065,26,1051,22,"reduce"],[1065,32,1051,28],[1065,33,1051,29],[1065,43,1051,30,"a"],[1065,44,1051,31],[1065,46,1051,33,"b"],[1065,47,1051,34],[1066,12,1051,34],[1066,19,1051,39,"a"],[1066,20,1051,40],[1066,23,1051,43,"b"],[1066,24,1051,44],[1067,10,1051,44],[1067,13,1051,46],[1067,14,1051,47],[1067,15,1051,48],[1067,18,1051,51,"len"],[1067,21,1051,54],[1068,10,1052,6,"p50"],[1068,13,1052,9],[1068,15,1052,11,"values"],[1068,21,1052,17],[1068,22,1052,18,"Math"],[1068,26,1052,22],[1068,27,1052,23,"floor"],[1068,32,1052,28],[1068,33,1052,29,"len"],[1068,36,1052,32],[1068,39,1052,35],[1068,42,1052,38],[1068,43,1052,39],[1068,44,1052,40],[1069,10,1053,6,"p90"],[1069,13,1053,9],[1069,15,1053,11,"values"],[1069,21,1053,17],[1069,22,1053,18,"Math"],[1069,26,1053,22],[1069,27,1053,23,"floor"],[1069,32,1053,28],[1069,33,1053,29,"len"],[1069,36,1053,32],[1069,39,1053,35],[1069,42,1053,38],[1069,43,1053,39],[1069,44,1053,40],[1070,10,1054,6,"p99"],[1070,13,1054,9],[1070,15,1054,11,"values"],[1070,21,1054,17],[1070,22,1054,18,"Math"],[1070,26,1054,22],[1070,27,1054,23,"floor"],[1070,32,1054,28],[1070,33,1054,29,"len"],[1070,36,1054,32],[1070,39,1054,35],[1070,43,1054,39],[1070,44,1054,40],[1070,45,1054,41],[1071,10,1055,6,"samples"],[1071,17,1055,13],[1071,19,1055,15,"len"],[1072,8,1056,4],[1072,9,1056,5],[1073,6,1057,2],[1075,6,1059,2],[1076,0,1060,0],[1077,0,1061,0],[1078,4,1059,2],[1079,6,1059,2,"key"],[1079,9,1059,2],[1080,6,1059,2,"value"],[1080,11,1059,2],[1080,13,1062,2],[1080,22,1062,10,"groupScreenRenderStats"],[1080,44,1062,32,"groupScreenRenderStats"],[1080,45,1062,32],[1080,47,1062,78],[1081,8,1063,4],[1081,12,1063,10,"screenMetrics"],[1081,25,1063,23],[1081,28,1063,26],[1081,32,1063,30],[1081,33,1063,31,"metrics"],[1081,40,1063,38],[1081,41,1063,39,"filter"],[1081,47,1063,45],[1081,48,1063,46],[1081,58,1063,46,"m"],[1081,59,1063,47],[1082,10,1063,47],[1082,17,1063,51,"m"],[1082,18,1063,52],[1082,19,1063,53,"type"],[1082,23,1063,57],[1082,28,1063,62],[1082,43,1063,77],[1083,8,1063,77],[1083,10,1063,78],[1084,8,1064,4],[1084,12,1064,10,"grouped"],[1084,19,1064,54],[1084,22,1064,57],[1084,23,1064,58],[1084,24,1064,59],[1085,8,1066,4,"screenMetrics"],[1085,21,1066,17],[1085,22,1066,18,"forEach"],[1085,29,1066,25],[1085,30,1066,26],[1085,40,1066,26,"metric"],[1085,46,1066,32],[1085,48,1066,36],[1086,10,1066,36],[1086,14,1066,36,"_metric$context"],[1086,29,1066,36],[1087,10,1067,6],[1087,14,1067,12,"screenName"],[1087,24,1067,22],[1087,27,1067,25],[1087,29,1067,25,"_metric$context"],[1087,44,1067,25],[1087,47,1067,25,"metric"],[1087,53,1067,31],[1087,54,1067,32,"context"],[1087,61,1067,39],[1087,82,1067,25,"_metric$context"],[1087,97,1067,25],[1087,98,1067,41,"screen_name"],[1087,109,1067,52],[1087,114,1067,56],[1087,123,1067,65],[1088,10,1068,6],[1088,14,1068,10],[1088,15,1068,11,"grouped"],[1088,22,1068,18],[1088,23,1068,19,"screenName"],[1088,33,1068,29],[1088,34,1068,30],[1088,36,1068,32],[1089,12,1069,8,"grouped"],[1089,19,1069,15],[1089,20,1069,16,"screenName"],[1089,30,1069,26],[1089,31,1069,27],[1089,34,1069,30],[1089,36,1069,32],[1090,10,1070,6],[1091,10,1071,6,"grouped"],[1091,17,1071,13],[1091,18,1071,14,"screenName"],[1091,28,1071,24],[1091,29,1071,25],[1091,30,1071,26,"push"],[1091,34,1071,30],[1091,35,1071,31,"metric"],[1091,41,1071,37],[1091,42,1071,38],[1092,8,1072,4],[1092,9,1072,5],[1092,10,1072,6],[1093,8,1074,4],[1093,12,1074,10,"result"],[1093,18,1074,59],[1093,21,1074,62],[1093,22,1074,63],[1093,23,1074,64],[1094,8,1075,4,"Object"],[1094,14,1075,10],[1094,15,1075,11,"entries"],[1094,22,1075,18],[1094,23,1075,19,"grouped"],[1094,30,1075,26],[1094,31,1075,27],[1094,32,1075,28,"forEach"],[1094,39,1075,35],[1094,40,1075,36],[1094,50,1075,36,"_ref2"],[1094,55,1075,36],[1094,57,1075,63],[1095,10,1075,63],[1095,14,1075,63,"_ref3"],[1095,19,1075,63],[1095,26,1075,63,"_slicedToArray2"],[1095,41,1075,63],[1095,42,1075,63,"default"],[1095,49,1075,63],[1095,51,1075,63,"_ref2"],[1095,56,1075,63],[1096,12,1075,38,"screenName"],[1096,22,1075,48],[1096,25,1075,48,"_ref3"],[1096,30,1075,48],[1097,12,1075,50,"metrics"],[1097,19,1075,57],[1097,22,1075,57,"_ref3"],[1097,27,1075,57],[1098,10,1076,6],[1098,14,1076,12,"values"],[1098,20,1076,18],[1098,23,1076,21,"metrics"],[1098,30,1076,28],[1098,31,1076,29,"map"],[1098,34,1076,32],[1098,35,1076,33],[1098,45,1076,33,"m"],[1098,46,1076,34],[1099,12,1076,34],[1099,19,1076,38,"m"],[1099,20,1076,39],[1099,21,1076,40,"value"],[1099,26,1076,45],[1100,10,1076,45],[1100,12,1076,46],[1101,10,1077,6],[1101,14,1077,12,"sortedValues"],[1101,26,1077,24],[1101,29,1077,27,"values"],[1101,35,1077,33],[1101,36,1077,34,"sort"],[1101,40,1077,38],[1101,41,1077,39],[1101,51,1077,40,"a"],[1101,52,1077,41],[1101,54,1077,43,"b"],[1101,55,1077,44],[1102,12,1077,44],[1102,19,1077,49,"a"],[1102,20,1077,50],[1102,23,1077,53,"b"],[1102,24,1077,54],[1103,10,1077,54],[1103,12,1077,55],[1104,10,1079,6,"result"],[1104,16,1079,12],[1104,17,1079,13,"screenName"],[1104,27,1079,23],[1104,28,1079,24],[1104,31,1079,27],[1105,12,1080,8,"average"],[1105,19,1080,15],[1105,21,1080,17,"values"],[1105,27,1080,23],[1105,28,1080,24,"reduce"],[1105,34,1080,30],[1105,35,1080,31],[1105,45,1080,32,"a"],[1105,46,1080,33],[1105,48,1080,35,"b"],[1105,49,1080,36],[1106,14,1080,36],[1106,21,1080,41,"a"],[1106,22,1080,42],[1106,25,1080,45,"b"],[1106,26,1080,46],[1107,12,1080,46],[1107,15,1080,48],[1107,16,1080,49],[1107,17,1080,50],[1107,20,1080,53,"values"],[1107,26,1080,59],[1107,27,1080,60,"length"],[1107,33,1080,66],[1108,12,1081,8,"p90"],[1108,15,1081,11],[1108,17,1081,13,"sortedValues"],[1108,29,1081,25],[1108,30,1081,26,"Math"],[1108,34,1081,30],[1108,35,1081,31,"floor"],[1108,40,1081,36],[1108,41,1081,37,"sortedValues"],[1108,53,1081,49],[1108,54,1081,50,"length"],[1108,60,1081,56],[1108,63,1081,59],[1108,66,1081,62],[1108,67,1081,63],[1108,68,1081,64],[1109,12,1082,8,"samples"],[1109,19,1082,15],[1109,21,1082,17,"values"],[1109,27,1082,23],[1109,28,1082,24,"length"],[1110,10,1083,6],[1110,11,1083,7],[1111,8,1084,4],[1111,9,1084,5],[1111,10,1084,6],[1112,8,1086,4],[1112,15,1086,11,"result"],[1112,21,1086,17],[1113,6,1087,2],[1115,6,1089,2],[1116,0,1090,0],[1117,0,1091,0],[1118,4,1089,2],[1119,6,1089,2,"key"],[1119,9,1089,2],[1120,6,1089,2,"value"],[1120,11,1089,2],[1120,13,1092,2],[1120,22,1092,10,"groupApiPerformanceStats"],[1120,46,1092,34,"groupApiPerformanceStats"],[1120,47,1092,34],[1120,49,1092,76],[1121,8,1093,4],[1121,12,1093,10,"apiMetrics"],[1121,22,1093,20],[1121,25,1093,23],[1121,29,1093,27],[1121,30,1093,28,"metrics"],[1121,37,1093,35],[1121,38,1093,36,"filter"],[1121,44,1093,42],[1121,45,1093,43],[1121,55,1093,43,"m"],[1121,56,1093,44],[1122,10,1093,44],[1122,17,1093,48,"m"],[1122,18,1093,49],[1122,19,1093,50,"type"],[1122,23,1093,54],[1122,28,1093,59],[1122,38,1093,69],[1123,8,1093,69],[1123,10,1093,70],[1124,8,1094,4],[1124,12,1094,10,"grouped"],[1124,19,1094,54],[1124,22,1094,57],[1124,23,1094,58],[1124,24,1094,59],[1125,8,1096,4,"apiMetrics"],[1125,18,1096,14],[1125,19,1096,15,"forEach"],[1125,26,1096,22],[1125,27,1096,23],[1125,37,1096,23,"metric"],[1125,43,1096,29],[1125,45,1096,33],[1126,10,1096,33],[1126,14,1096,33,"_metric$context2"],[1126,30,1096,33],[1127,10,1097,6],[1127,14,1097,12,"endpoint"],[1127,22,1097,20],[1127,25,1097,23],[1127,27,1097,23,"_metric$context2"],[1127,43,1097,23],[1127,46,1097,23,"metric"],[1127,52,1097,29],[1127,53,1097,30,"context"],[1127,60,1097,37],[1127,81,1097,23,"_metric$context2"],[1127,97,1097,23],[1127,98,1097,39,"api_endpoint"],[1127,110,1097,51],[1127,115,1097,55],[1127,124,1097,64],[1128,10,1098,6],[1128,14,1098,10],[1128,15,1098,11,"grouped"],[1128,22,1098,18],[1128,23,1098,19,"endpoint"],[1128,31,1098,27],[1128,32,1098,28],[1128,34,1098,30],[1129,12,1099,8,"grouped"],[1129,19,1099,15],[1129,20,1099,16,"endpoint"],[1129,28,1099,24],[1129,29,1099,25],[1129,32,1099,28],[1129,34,1099,30],[1130,10,1100,6],[1131,10,1101,6,"grouped"],[1131,17,1101,13],[1131,18,1101,14,"endpoint"],[1131,26,1101,22],[1131,27,1101,23],[1131,28,1101,24,"push"],[1131,32,1101,28],[1131,33,1101,29,"metric"],[1131,39,1101,35],[1131,40,1101,36],[1132,8,1102,4],[1132,9,1102,5],[1132,10,1102,6],[1133,8,1104,4],[1133,12,1104,10,"result"],[1133,18,1104,55],[1133,21,1104,58],[1133,22,1104,59],[1133,23,1104,60],[1134,8,1105,4,"Object"],[1134,14,1105,10],[1134,15,1105,11,"entries"],[1134,22,1105,18],[1134,23,1105,19,"grouped"],[1134,30,1105,26],[1134,31,1105,27],[1134,32,1105,28,"forEach"],[1134,39,1105,35],[1134,40,1105,36],[1134,50,1105,36,"_ref4"],[1134,55,1105,36],[1134,57,1105,61],[1135,10,1105,61],[1135,14,1105,61,"_ref5"],[1135,19,1105,61],[1135,26,1105,61,"_slicedToArray2"],[1135,41,1105,61],[1135,42,1105,61,"default"],[1135,49,1105,61],[1135,51,1105,61,"_ref4"],[1135,56,1105,61],[1136,12,1105,38,"endpoint"],[1136,20,1105,46],[1136,23,1105,46,"_ref5"],[1136,28,1105,46],[1137,12,1105,48,"metrics"],[1137,19,1105,55],[1137,22,1105,55,"_ref5"],[1137,27,1105,55],[1138,10,1106,6],[1138,14,1106,12,"responseTimes"],[1138,27,1106,25],[1138,30,1106,28,"metrics"],[1138,37,1106,35],[1138,38,1106,36,"map"],[1138,41,1106,39],[1138,42,1106,40],[1138,52,1106,40,"m"],[1138,53,1106,41],[1139,12,1106,41],[1139,19,1106,45,"m"],[1139,20,1106,46],[1139,21,1106,47,"value"],[1139,26,1106,52],[1140,10,1106,52],[1140,12,1106,53],[1141,10,1107,6],[1141,14,1107,12,"successfulRequests"],[1141,32,1107,30],[1141,35,1107,33,"metrics"],[1141,42,1107,40],[1141,43,1107,41,"filter"],[1141,49,1107,47],[1141,50,1107,48],[1141,60,1107,48,"m"],[1141,61,1107,49],[1142,12,1107,49],[1142,16,1107,49,"_m$context"],[1142,26,1107,49],[1143,12,1107,49],[1143,19,1107,53],[1143,21,1107,53,"_m$context"],[1143,31,1107,53],[1143,34,1107,53,"m"],[1143,35,1107,54],[1143,36,1107,55,"context"],[1143,43,1107,62],[1143,64,1107,53,"_m$context"],[1143,74,1107,53],[1143,75,1107,64,"success"],[1143,82,1107,71],[1143,88,1107,76],[1143,92,1107,80],[1144,10,1107,80],[1144,12,1107,81],[1145,10,1108,6],[1145,14,1108,12,"errorRequests"],[1145,27,1108,25],[1145,30,1108,28,"metrics"],[1145,37,1108,35],[1145,38,1108,36,"filter"],[1145,44,1108,42],[1145,45,1108,43],[1145,55,1108,43,"m"],[1145,56,1108,44],[1146,12,1108,44],[1146,16,1108,44,"_m$context2"],[1146,27,1108,44],[1147,12,1108,44],[1147,19,1108,48],[1147,21,1108,48,"_m$context2"],[1147,32,1108,48],[1147,35,1108,48,"m"],[1147,36,1108,49],[1147,37,1108,50,"context"],[1147,44,1108,57],[1147,65,1108,48,"_m$context2"],[1147,76,1108,48],[1147,77,1108,59,"success"],[1147,84,1108,66],[1147,90,1108,71],[1147,95,1108,76],[1148,10,1108,76],[1148,12,1108,77],[1149,10,1110,6,"result"],[1149,16,1110,12],[1149,17,1110,13,"endpoint"],[1149,25,1110,21],[1149,26,1110,22],[1149,29,1110,25],[1150,12,1111,8,"average_response_time"],[1150,33,1111,29],[1150,35,1111,31,"responseTimes"],[1150,48,1111,44],[1150,49,1111,45,"reduce"],[1150,55,1111,51],[1150,56,1111,52],[1150,66,1111,53,"a"],[1150,67,1111,54],[1150,69,1111,56,"b"],[1150,70,1111,57],[1151,14,1111,57],[1151,21,1111,62,"a"],[1151,22,1111,63],[1151,25,1111,66,"b"],[1151,26,1111,67],[1152,12,1111,67],[1152,15,1111,69],[1152,16,1111,70],[1152,17,1111,71],[1152,20,1111,74,"responseTimes"],[1152,33,1111,87],[1152,34,1111,88,"length"],[1152,40,1111,94],[1153,12,1112,8,"success_rate"],[1153,24,1112,20],[1153,26,1112,23,"successfulRequests"],[1153,44,1112,41],[1153,45,1112,42,"length"],[1153,51,1112,48],[1153,54,1112,51,"metrics"],[1153,61,1112,58],[1153,62,1112,59,"length"],[1153,68,1112,65],[1153,71,1112,69],[1153,74,1112,72],[1154,12,1113,8,"error_rate"],[1154,22,1113,18],[1154,24,1113,21,"errorRequests"],[1154,37,1113,34],[1154,38,1113,35,"length"],[1154,44,1113,41],[1154,47,1113,44,"metrics"],[1154,54,1113,51],[1154,55,1113,52,"length"],[1154,61,1113,58],[1154,64,1113,62],[1154,67,1113,65],[1155,12,1114,8,"total_requests"],[1155,26,1114,22],[1155,28,1114,24,"metrics"],[1155,35,1114,31],[1155,36,1114,32,"length"],[1156,10,1115,6],[1156,11,1115,7],[1157,8,1116,4],[1157,9,1116,5],[1157,10,1116,6],[1158,8,1118,4],[1158,15,1118,11,"result"],[1158,21,1118,17],[1159,6,1119,2],[1161,6,1121,2],[1162,0,1122,0],[1163,0,1123,0],[1164,4,1121,2],[1165,6,1121,2,"key"],[1165,9,1121,2],[1166,6,1121,2,"value"],[1166,11,1121,2],[1166,13,1124,2],[1166,22,1124,10,"calculateMemoryStats"],[1166,42,1124,30,"calculateMemoryStats"],[1166,43,1124,30],[1166,45,1124,69],[1167,8,1125,4],[1167,12,1125,10,"memoryMetrics"],[1167,25,1125,23],[1167,28,1125,26],[1167,32,1125,30],[1167,33,1125,31,"metrics"],[1167,40,1125,38],[1167,41,1125,39,"filter"],[1167,47,1125,45],[1167,48,1125,46],[1167,58,1125,46,"m"],[1167,59,1125,47],[1168,10,1125,47],[1168,17,1125,51,"m"],[1168,18,1125,52],[1168,19,1125,53,"type"],[1168,23,1125,57],[1168,28,1125,62],[1168,42,1125,76],[1169,8,1125,76],[1169,10,1125,77],[1170,8,1127,4],[1170,12,1127,8,"memoryMetrics"],[1170,25,1127,21],[1170,26,1127,22,"length"],[1170,32,1127,28],[1170,37,1127,33],[1170,38,1127,34],[1170,40,1127,36],[1171,10,1128,6],[1171,17,1128,13],[1172,12,1128,15,"average"],[1172,19,1128,22],[1172,21,1128,24],[1172,22,1128,25],[1173,12,1128,27,"peak"],[1173,16,1128,31],[1173,18,1128,33],[1173,19,1128,34],[1174,12,1128,36,"warnings"],[1174,20,1128,44],[1174,22,1128,46],[1175,10,1128,48],[1175,11,1128,49],[1176,8,1129,4],[1177,8,1131,4],[1177,12,1131,10,"values"],[1177,18,1131,16],[1177,21,1131,19,"memoryMetrics"],[1177,34,1131,32],[1177,35,1131,33,"map"],[1177,38,1131,36],[1177,39,1131,37],[1177,49,1131,37,"m"],[1177,50,1131,38],[1178,10,1131,38],[1178,17,1131,42,"m"],[1178,18,1131,43],[1178,19,1131,44,"value"],[1178,24,1131,49],[1179,8,1131,49],[1179,10,1131,50],[1180,8,1132,4],[1180,12,1132,10,"warnings"],[1180,20,1132,18],[1180,23,1132,21,"memoryMetrics"],[1180,36,1132,34],[1180,37,1132,35,"filter"],[1180,43,1132,41],[1180,44,1132,42],[1180,54,1132,42,"m"],[1180,55,1132,43],[1181,10,1132,43],[1181,14,1132,43,"_m$context3"],[1181,25,1132,43],[1182,10,1132,43],[1182,17,1133,6],[1182,19,1133,6,"_m$context3"],[1182,30,1133,6],[1182,33,1133,6,"m"],[1182,34,1133,7],[1182,35,1133,8,"context"],[1182,42,1133,15],[1182,63,1133,6,"_m$context3"],[1182,74,1133,6],[1182,75,1133,17,"memory_pressure"],[1182,90,1133,32],[1182,96,1133,37],[1182,100,1133,41],[1183,8,1133,41],[1183,9,1134,4],[1183,10,1134,5],[1183,11,1134,6,"length"],[1183,17,1134,12],[1184,8,1136,4],[1184,15,1136,11],[1185,10,1137,6,"average"],[1185,17,1137,13],[1185,19,1137,15,"values"],[1185,25,1137,21],[1185,26,1137,22,"reduce"],[1185,32,1137,28],[1185,33,1137,29],[1185,43,1137,30,"a"],[1185,44,1137,31],[1185,46,1137,33,"b"],[1185,47,1137,34],[1186,12,1137,34],[1186,19,1137,39,"a"],[1186,20,1137,40],[1186,23,1137,43,"b"],[1186,24,1137,44],[1187,10,1137,44],[1187,13,1137,46],[1187,14,1137,47],[1187,15,1137,48],[1187,18,1137,51,"values"],[1187,24,1137,57],[1187,25,1137,58,"length"],[1187,31,1137,64],[1188,10,1138,6,"peak"],[1188,14,1138,10],[1188,16,1138,12,"Math"],[1188,20,1138,16],[1188,21,1138,17,"max"],[1188,24,1138,20],[1188,25,1138,20,"apply"],[1188,30,1138,20],[1188,31,1138,12,"Math"],[1188,35,1138,16],[1188,41,1138,16,"_toConsumableArray2"],[1188,60,1138,16],[1188,61,1138,16,"default"],[1188,68,1138,16],[1188,70,1138,24,"values"],[1188,76,1138,30],[1188,78,1138,31],[1189,10,1139,6,"warnings"],[1189,18,1139,14],[1189,20,1139,6,"warnings"],[1190,8,1140,4],[1190,9,1140,5],[1191,6,1141,2],[1193,6,1143,2],[1194,0,1144,0],[1195,0,1145,0],[1196,4,1143,2],[1197,6,1143,2,"key"],[1197,9,1143,2],[1198,6,1143,2,"value"],[1198,11,1143,2],[1198,13,1146,2],[1198,22,1146,10,"calculateBatteryStats"],[1198,43,1146,31,"calculateBatteryStats"],[1198,44,1146,31],[1198,46,1146,72],[1199,8,1147,4],[1199,12,1147,10,"batteryMetrics"],[1199,26,1147,24],[1199,29,1147,27],[1199,33,1147,31],[1199,34,1147,32,"metrics"],[1199,41,1147,39],[1199,42,1147,40,"filter"],[1199,48,1147,46],[1199,49,1147,47],[1199,59,1147,47,"m"],[1199,60,1147,48],[1200,10,1147,48],[1200,17,1147,52,"m"],[1200,18,1147,53],[1200,19,1147,54,"type"],[1200,23,1147,58],[1200,28,1147,63],[1200,37,1147,72],[1201,8,1147,72],[1201,10,1147,73],[1202,8,1149,4],[1202,15,1149,11],[1203,10,1150,6,"average_drain"],[1203,23,1150,19],[1203,25,1150,21],[1203,26,1150,22],[1204,10,1150,24],[1205,10,1151,6,"high_usage_events"],[1205,27,1151,23],[1205,29,1151,25],[1205,30,1151,26],[1205,31,1151,28],[1206,8,1152,4],[1206,9,1152,5],[1207,6,1153,2],[1209,6,1155,2],[1210,0,1156,0],[1211,0,1157,0],[1212,4,1155,2],[1213,6,1155,2,"key"],[1213,9,1155,2],[1214,6,1155,2,"value"],[1214,11,1155,2],[1214,13,1158,2],[1214,22,1158,10,"calculateFrameRateStats"],[1214,45,1158,33,"calculateFrameRateStats"],[1214,46,1158,33],[1214,48,1158,70],[1215,8,1159,4],[1216,8,1160,4],[1216,15,1160,11],[1217,10,1161,6,"average_fps"],[1217,21,1161,17],[1217,23,1161,19],[1217,25,1161,21],[1218,10,1161,23],[1219,10,1162,6,"dropped_frames"],[1219,24,1162,20],[1219,26,1162,22],[1220,8,1163,4],[1220,9,1163,5],[1221,6,1164,2],[1223,6,1166,2],[1224,0,1167,0],[1225,0,1168,0],[1226,4,1166,2],[1227,6,1166,2,"key"],[1227,9,1166,2],[1228,6,1166,2,"value"],[1228,11,1166,2],[1228,13,1169,2],[1228,22,1169,10,"generateMetricId"],[1228,38,1169,26,"generateMetricId"],[1228,39,1169,26],[1228,41,1169,37],[1229,8,1170,4],[1229,15,1170,11],[1229,30,1170,26,"Date"],[1229,34,1170,30],[1229,35,1170,31,"now"],[1229,38,1170,34],[1229,39,1170,35],[1229,40,1170,36],[1229,44,1170,40,"Math"],[1229,48,1170,44],[1229,49,1170,45,"random"],[1229,55,1170,51],[1229,56,1170,52],[1229,57,1170,53],[1229,58,1170,54,"toString"],[1229,66,1170,62],[1229,67,1170,63],[1229,69,1170,65],[1229,70,1170,66],[1229,71,1170,67,"substr"],[1229,77,1170,73],[1229,78,1170,74],[1229,79,1170,75],[1229,81,1170,77],[1229,82,1170,78],[1229,83,1170,79],[1229,85,1170,81],[1230,6,1171,2],[1232,6,1173,2],[1233,0,1174,0],[1234,0,1175,0],[1235,4,1173,2],[1236,6,1173,2,"key"],[1236,9,1173,2],[1237,6,1173,2,"value"],[1237,11,1173,2],[1237,13,1176,2],[1237,22,1176,10,"generateAlertId"],[1237,37,1176,25,"generateAlertId"],[1237,38,1176,25],[1237,40,1176,36],[1238,8,1177,4],[1238,15,1177,11],[1238,29,1177,25,"Date"],[1238,33,1177,29],[1238,34,1177,30,"now"],[1238,37,1177,33],[1238,38,1177,34],[1238,39,1177,35],[1238,43,1177,39,"Math"],[1238,47,1177,43],[1238,48,1177,44,"random"],[1238,54,1177,50],[1238,55,1177,51],[1238,56,1177,52],[1238,57,1177,53,"toString"],[1238,65,1177,61],[1238,66,1177,62],[1238,68,1177,64],[1238,69,1177,65],[1238,70,1177,66,"substr"],[1238,76,1177,72],[1238,77,1177,73],[1238,78,1177,74],[1238,80,1177,76],[1238,81,1177,77],[1238,82,1177,78],[1238,84,1177,80],[1239,6,1178,2],[1241,6,1180,2],[1242,0,1181,0],[1243,0,1182,0],[1244,4,1180,2],[1245,6,1180,2,"key"],[1245,9,1180,2],[1246,6,1180,2,"value"],[1246,11,1180,2],[1246,13,1183,2],[1246,22,1183,10,"generateSessionId"],[1246,39,1183,27,"generateSessionId"],[1246,40,1183,27],[1246,42,1183,38],[1247,8,1184,4],[1247,15,1184,11],[1247,31,1184,27,"Date"],[1247,35,1184,31],[1247,36,1184,32,"now"],[1247,39,1184,35],[1247,40,1184,36],[1247,41,1184,37],[1247,45,1184,41,"Math"],[1247,49,1184,45],[1247,50,1184,46,"random"],[1247,56,1184,52],[1247,57,1184,53],[1247,58,1184,54],[1247,59,1184,55,"toString"],[1247,67,1184,63],[1247,68,1184,64],[1247,70,1184,66],[1247,71,1184,67],[1247,72,1184,68,"substr"],[1247,78,1184,74],[1247,79,1184,75],[1247,80,1184,76],[1247,82,1184,78],[1247,83,1184,79],[1247,84,1184,80],[1247,86,1184,82],[1248,6,1185,2],[1250,6,1187,2],[1251,0,1188,0],[1252,0,1189,0],[1253,4,1187,2],[1254,6,1187,2,"key"],[1254,9,1187,2],[1255,6,1187,2,"value"],[1255,11,1187,2],[1256,8,1187,2],[1256,12,1187,2,"_shutdown"],[1256,21,1187,2],[1256,28,1187,2,"_asyncToGenerator2"],[1256,46,1187,2],[1256,47,1187,2,"default"],[1256,54,1187,2],[1256,56,1190,2],[1256,69,1190,41],[1257,10,1191,4],[1257,14,1191,8],[1257,18,1191,12],[1257,19,1191,13,"memoryCheckInterval"],[1257,38,1191,32],[1257,40,1191,34],[1258,12,1192,6,"clearInterval"],[1258,25,1192,19],[1258,26,1192,20],[1258,30,1192,24],[1258,31,1192,25,"memoryCheckInterval"],[1258,50,1192,44],[1258,51,1192,45],[1259,10,1193,4],[1261,10,1195,4],[1262,10,1196,4],[1262,14,1196,8],[1262,18,1196,12],[1262,19,1196,13,"metricQueue"],[1262,30,1196,24],[1262,31,1196,25,"length"],[1262,37,1196,31],[1262,40,1196,34],[1262,41,1196,35],[1262,43,1196,37],[1263,12,1197,6],[1263,18,1197,12],[1263,22,1197,16],[1263,23,1197,17,"flushMetrics"],[1263,35,1197,29],[1263,36,1197,30],[1263,37,1197,31],[1264,10,1198,4],[1265,10,1200,4],[1265,14,1200,8],[1265,15,1200,9,"isInitialized"],[1265,28,1200,22],[1265,31,1200,25],[1265,36,1200,30],[1266,10,1201,4,"EventLogger"],[1266,34,1201,15],[1266,35,1201,16,"info"],[1266,39,1201,20],[1266,40,1201,21],[1266,60,1201,41],[1266,62,1201,43],[1266,93,1201,74],[1266,94,1201,75],[1267,8,1202,2],[1267,9,1202,3],[1268,8,1202,3],[1268,17,1190,15,"shutdown"],[1268,25,1190,23,"shutdown"],[1268,26,1190,23],[1269,10,1190,23],[1269,17,1190,23,"_shutdown"],[1269,26,1190,23],[1269,27,1190,23,"apply"],[1269,32,1190,23],[1269,39,1190,23,"arguments"],[1269,48,1190,23],[1270,8,1190,23],[1271,8,1190,23],[1271,15,1190,15,"shutdown"],[1271,23,1190,23],[1272,6,1190,23],[1273,4,1190,23],[1274,2,1190,23],[1274,7,1205,0],[1275,2,122,45],[1276,2,124,2],[1277,2,108,6,"PerformanceMonitorService"],[1277,27,108,31],[1277,28,125,26,"OFFLINE_METRICS_KEY"],[1277,47,125,45],[1277,50,125,48],[1277,79,125,77],[1278,2,108,6,"PerformanceMonitorService"],[1278,27,108,31],[1278,28,126,26,"OFFLINE_ALERTS_KEY"],[1278,46,126,44],[1278,49,126,47],[1278,77,126,75],[1279,2,1206,7],[1279,6,1206,13,"PerformanceMonitor"],[1279,24,1206,31],[1279,27,1206,31,"exports"],[1279,34,1206,31],[1279,35,1206,31,"PerformanceMonitor"],[1279,53,1206,31],[1279,56,1206,34],[1279,60,1206,38,"PerformanceMonitorService"],[1279,85,1206,63],[1279,86,1206,64],[1279,87,1206,65],[1281,2,1208,0],[1282,2,1209,7],[1282,6,1209,13,"startScreenRender"],[1282,23,1209,30],[1282,26,1209,30,"exports"],[1282,33,1209,30],[1282,34,1209,30,"startScreenRender"],[1282,51,1209,30],[1282,54,1209,33],[1282,63,1209,13,"startScreenRender"],[1282,80,1209,30,"startScreenRender"],[1282,81,1209,34,"screenName"],[1282,91,1209,52],[1282,93,1209,57],[1283,4,1210,2,"PerformanceMonitor"],[1283,22,1210,20],[1283,23,1210,21,"startScreenRender"],[1283,40,1210,38],[1283,41,1210,39,"screenName"],[1283,51,1210,49],[1283,52,1210,50],[1284,2,1211,0],[1284,3,1211,1],[1285,2,1213,7],[1285,6,1213,13,"endScreenRender"],[1285,21,1213,28],[1285,24,1213,28,"exports"],[1285,31,1213,28],[1285,32,1213,28,"endScreenRender"],[1285,47,1213,28],[1285,50,1213,31],[1285,59,1213,13,"endScreenRender"],[1285,74,1213,28,"endScreenRender"],[1285,75,1213,32,"screenName"],[1285,85,1213,50],[1285,87,1213,52,"context"],[1285,94,1213,81],[1285,96,1213,86],[1286,4,1214,2,"PerformanceMonitor"],[1286,22,1214,20],[1286,23,1214,21,"endScreenRender"],[1286,38,1214,36],[1286,39,1214,37,"screenName"],[1286,49,1214,47],[1286,51,1214,49,"context"],[1286,58,1214,56],[1286,59,1214,57],[1287,2,1215,0],[1287,3,1215,1],[1288,2,1217,7],[1288,6,1217,13,"startApiCall"],[1288,18,1217,25],[1288,21,1217,25,"exports"],[1288,28,1217,25],[1288,29,1217,25,"startApiCall"],[1288,41,1217,25],[1288,44,1217,28],[1288,53,1217,13,"startApiCall"],[1288,65,1217,25,"startApiCall"],[1288,66,1217,29,"requestId"],[1288,75,1217,46],[1288,77,1217,48,"endpoint"],[1288,85,1217,64],[1288,87,1217,66,"method"],[1288,93,1217,80],[1288,95,1217,85],[1289,4,1218,2,"PerformanceMonitor"],[1289,22,1218,20],[1289,23,1218,21,"startApiCall"],[1289,35,1218,33],[1289,36,1218,34,"requestId"],[1289,45,1218,43],[1289,47,1218,45,"endpoint"],[1289,55,1218,53],[1289,57,1218,55,"method"],[1289,63,1218,61],[1289,64,1218,62],[1290,2,1219,0],[1290,3,1219,1],[1291,2,1221,7],[1291,6,1221,13,"endApiCall"],[1291,16,1221,23],[1291,19,1221,23,"exports"],[1291,26,1221,23],[1291,27,1221,23,"endApiCall"],[1291,37,1221,23],[1291,40,1221,26],[1291,49,1221,13,"endApiCall"],[1291,59,1221,23,"endApiCall"],[1291,60,1222,2,"requestId"],[1291,69,1222,19],[1291,71,1223,2,"endpoint"],[1291,79,1223,18],[1291,81,1224,2,"method"],[1291,87,1224,16],[1291,89,1225,2,"statusCode"],[1291,99,1225,20],[1291,101,1226,2,"error"],[1291,106,1226,15],[1291,108,1227,5],[1292,4,1228,2,"PerformanceMonitor"],[1292,22,1228,20],[1292,23,1228,21,"endApiCall"],[1292,33,1228,31],[1292,34,1228,32,"requestId"],[1292,43,1228,41],[1292,45,1228,43,"endpoint"],[1292,53,1228,51],[1292,55,1228,53,"method"],[1292,61,1228,59],[1292,63,1228,61,"statusCode"],[1292,73,1228,71],[1292,75,1228,73,"error"],[1292,80,1228,78],[1292,81,1228,79],[1293,2,1229,0],[1293,3,1229,1],[1294,2,1231,7],[1294,6,1231,13,"trackCustomMetric"],[1294,23,1231,30],[1294,26,1231,30,"exports"],[1294,33,1231,30],[1294,34,1231,30,"trackCustomMetric"],[1294,51,1231,30],[1294,54,1231,33],[1294,63,1231,13,"trackCustomMetric"],[1294,80,1231,30,"trackCustomMetric"],[1294,81,1232,2,"name"],[1294,85,1232,14],[1294,87,1233,2,"value"],[1294,92,1233,15],[1294,94,1234,2,"unit"],[1294,98,1234,33],[1294,100,1235,2,"context"],[1294,107,1235,31],[1294,109,1236,5],[1295,4,1237,2,"PerformanceMonitor"],[1295,22,1237,20],[1295,23,1237,21,"trackCustomMetric"],[1295,40,1237,38],[1295,41,1237,39,"name"],[1295,45,1237,43],[1295,47,1237,45,"value"],[1295,52,1237,50],[1295,54,1237,52,"unit"],[1295,58,1237,56],[1295,60,1237,58,"context"],[1295,67,1237,65],[1295,68,1237,66],[1296,2,1238,0],[1296,3,1238,1],[1298,2,1240,0],[1299,0,1240,0],[1299,3]],"functionMap":{"names":["<global>","PerformanceMonitorService","PerformanceMonitorService#constructor","PerformanceMonitorService#initialize","Promise.resolve.then$argument_0","checkDatabaseAvailability._catch$argument_0","loadOfflineData._catch$argument_0","PerformanceMonitorService#checkDatabaseAvailability","PerformanceMonitorService#trackAppLaunchTime","InteractionManager.runAfterInteractions$argument_0","PerformanceMonitorService#startScreenRender","PerformanceMonitorService#endScreenRender","PerformanceMonitorService#startApiCall","PerformanceMonitorService#endApiCall","PerformanceMonitorService#trackCustomMetric","PerformanceMonitorService#trackMemoryUsage","PerformanceMonitorService#trackBatteryUsage","PerformanceMonitorService#getPerformanceSummary","metrics.filter$argument_0","PerformanceMonitorService#getRecentAlerts","alerts.sort$argument_0","PerformanceMonitorService#clearData","PerformanceMonitorService#exportData","PerformanceMonitorService#trackMetric","PerformanceMonitorService#createAlert","storeOfflineAlerts._catch$argument_0","PerformanceMonitorService#setupMemoryMonitoring","setInterval$argument_0","PerformanceMonitorService#setupFrameRateMonitoring","PerformanceMonitorService#setupPeriodicFlush","setTimeout$argument_0","flushMetrics._catch$argument_0","PerformanceMonitorService#flush","PerformanceMonitorService#flushMetrics","PerformanceMonitorService#sendMetrics","metrics.map$argument_0","results.forEach$argument_0","errors.map$argument_0","PerformanceMonitorService#loadOfflineData","syncOfflineData._catch$argument_0","PerformanceMonitorService#clearOversizedOfflineData","PerformanceMonitorService#storeOfflineMetrics","PerformanceMonitorService#storeOfflineAlerts","PerformanceMonitorService#syncOfflineData","PerformanceMonitorService#recheckDatabaseAvailability","PerformanceMonitorService#shouldTrack","PerformanceMonitorService#calculateStats","metrics.map.sort$argument_0","values.reduce$argument_0","PerformanceMonitorService#groupScreenRenderStats","screenMetrics.forEach$argument_0","Object.entries.forEach$argument_0","values.sort$argument_0","PerformanceMonitorService#groupApiPerformanceStats","apiMetrics.forEach$argument_0","responseTimes.reduce$argument_0","PerformanceMonitorService#calculateMemoryStats","memoryMetrics.map$argument_0","memoryMetrics.filter$argument_0","PerformanceMonitorService#calculateBatteryStats","PerformanceMonitorService#calculateFrameRateStats","PerformanceMonitorService#generateMetricId","PerformanceMonitorService#generateAlertId","PerformanceMonitorService#generateSessionId","PerformanceMonitorService#shutdown","startScreenRender","endScreenRender","startApiCall","endApiCall","trackCustomMetric"],"mappings":"AAA;AC2G;ECoB;GD0B;EEK;mCCS;ODa;6CEG;OFM;mCGG;OHE;+BCI,+BD;GFU;EMK;GN8E;EOK;4CCC;KD0B;GPC;ESK;GTO;EUK;GVoC;EWK;GXO;EYK;GZ6C;EaK;GbiB;EcK;GduC;EeK;GfsB;EgBK;+DCE,iCD;GhBS;EkBK;YCE,2ED;GlBE;EoBK;GpBI;EqBK;GrBK;EsBK;GtBuB;EuBK;6CCgB;ODE;GvBS;EyBK;2CCC;KDE;GzBC;E2BK;G3BI;E4BK;eCE;kBHC;oCIG;WJE;OGE;KDC;G5BC;E+BK;G/BM;EgCK;GhC+C;EiCK;yDCU;KDiC;oBEG;KFI;iHGI,cH;2BGI,2DH;GjCI;EqCK;kBpBgB,4BoB;uCCmC;WDE;GrCgB;EuCK;GvCU;EwCK;GxCoC;EyCK;GzCoC;E0CK;G1CqB;E2CK;G3CgB;E4CK;G5CY;E6CK;+BXK,YW,OC,eD;6BEI,eF;G7CM;EgDK;8C/BC,+B+B;0BCG;KDM;oCEG;iChBC,YgB;uCCC,eD;+BHG,eG;KFI;GhDG;EoDK;2CnCC,0BmC;uBCG;KDM;oCFG;wChBC,YgB;gDjCC,gCiC;2CjCC,iCiC;oDIG,eJ;KEK;GpDG;EuDK;8CtCC,8BsC;qCCM,YD;0CEC;yCFC;6BRI,eQ;GvDI;E0DK;+CzCC,yByC;G1DM;E2DK;G3DM;E4DK;G5DE;E6DK;G7DE;E8DK;G9DE;E+DK;G/DY;CDC;iCiEM;CjEE;+BkEE;ClEE;4BmEE;CnEE;0BoEE;CpEQ;iCqEE;CrEO"}},"type":"js/module"}]}