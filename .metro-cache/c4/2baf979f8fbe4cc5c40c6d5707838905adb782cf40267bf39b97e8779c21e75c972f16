{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Helpers to convert the change Payload into native JS types.\n   */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.httpEndpointURL = exports.toTimestampString = exports.toArray = exports.toJson = exports.toNumber = exports.toBoolean = exports.convertCell = exports.convertColumn = exports.convertChangeData = exports.PostgresTypes = void 0;\n  // Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n  // 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n  var PostgresTypes;\n  (function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n  })(PostgresTypes || (exports.PostgresTypes = PostgresTypes = {}));\n  /**\n   * Takes an array of columns and an object of string values then converts each string value\n   * to its mapped type.\n   *\n   * @param {{name: String, type: String}[]} columns\n   * @param {Object} record\n   * @param {Object} options The map of various options that can be applied to the mapper\n   * @param {Array} options.skipTypes The array of types that should not be converted\n   *\n   * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n   * //=>{ first_name: 'Paul', age: 33 }\n   */\n  var convertChangeData = function convertChangeData(columns, record) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _a;\n    var skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce(function (acc, rec_key) {\n      acc[rec_key] = (0, exports.convertColumn)(rec_key, columns, record, skipTypes);\n      return acc;\n    }, {});\n  };\n  exports.convertChangeData = convertChangeData;\n  /**\n   * Converts the value of an individual column.\n   *\n   * @param {String} columnName The column that you want to convert\n   * @param {{name: String, type: String}[]} columns All of the columns\n   * @param {Object} record The map of string values\n   * @param {Array} skipTypes An array of types that should not be converted\n   * @return {object} Useless information\n   *\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n   * //=> 33\n   * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n   * //=> \"33\"\n   */\n  var convertColumn = function convertColumn(columnName, columns, record, skipTypes) {\n    var column = columns.find(function (x) {\n      return x.name === columnName;\n    });\n    var colType = column === null || column === void 0 ? void 0 : column.type;\n    var value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n      return (0, exports.convertCell)(colType, value);\n    }\n    return noop(value);\n  };\n  exports.convertColumn = convertColumn;\n  /**\n   * If the value of the cell is `null`, returns null.\n   * Otherwise converts the string value to the correct type.\n   * @param {String} type A postgres column type\n   * @param {String} value The cell value\n   *\n   * @example convertCell('bool', 't')\n   * //=> true\n   * @example convertCell('int8', '10')\n   * //=> 10\n   * @example convertCell('_int4', '{1,2,3,4}')\n   * //=> [1,2,3,4]\n   */\n  var convertCell = function convertCell(type, value) {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n      var dataType = type.slice(1, type.length);\n      return (0, exports.toArray)(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n      case PostgresTypes.bool:\n        return (0, exports.toBoolean)(value);\n      case PostgresTypes.float4:\n      case PostgresTypes.float8:\n      case PostgresTypes.int2:\n      case PostgresTypes.int4:\n      case PostgresTypes.int8:\n      case PostgresTypes.numeric:\n      case PostgresTypes.oid:\n        return (0, exports.toNumber)(value);\n      case PostgresTypes.json:\n      case PostgresTypes.jsonb:\n        return (0, exports.toJson)(value);\n      case PostgresTypes.timestamp:\n        return (0, exports.toTimestampString)(value);\n      // Format to be consistent with PostgREST\n      case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n      case PostgresTypes.date: // To allow users to cast it based on Timezone\n      case PostgresTypes.daterange:\n      case PostgresTypes.int4range:\n      case PostgresTypes.int8range:\n      case PostgresTypes.money:\n      case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n      case PostgresTypes.text:\n      case PostgresTypes.time: // To allow users to cast it based on Timezone\n      case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n      case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n      case PostgresTypes.tsrange:\n      case PostgresTypes.tstzrange:\n        return noop(value);\n      default:\n        // Return the value for remaining types\n        return noop(value);\n    }\n  };\n  exports.convertCell = convertCell;\n  var noop = function noop(value) {\n    return value;\n  };\n  var toBoolean = function toBoolean(value) {\n    switch (value) {\n      case 't':\n        return true;\n      case 'f':\n        return false;\n      default:\n        return value;\n    }\n  };\n  exports.toBoolean = toBoolean;\n  var toNumber = function toNumber(value) {\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      if (!Number.isNaN(parsedValue)) {\n        return parsedValue;\n      }\n    }\n    return value;\n  };\n  exports.toNumber = toNumber;\n  var toJson = function toJson(value) {\n    if (typeof value === 'string') {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        console.log(`JSON parse error: ${error}`);\n        return value;\n      }\n    }\n    return value;\n  };\n  exports.toJson = toJson;\n  /**\n   * Converts a Postgres Array into a native JS array\n   *\n   * @example toArray('{}', 'int4')\n   * //=> []\n   * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n   * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n   * @example toArray([1,2,3,4], 'int4')\n   * //=> [1,2,3,4]\n   */\n  var toArray = function toArray(value, type) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    var lastIdx = value.length - 1;\n    var closeBrace = value[lastIdx];\n    var openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n      var arr;\n      var valTrim = value.slice(1, lastIdx);\n      // TODO: find a better solution to separate Postgres array data\n      try {\n        arr = JSON.parse('[' + valTrim + ']');\n      } catch (_) {\n        // WARNING: splitting on comma does not cover all edge cases\n        arr = valTrim ? valTrim.split(',') : [];\n      }\n      return arr.map(function (val) {\n        return (0, exports.convertCell)(type, val);\n      });\n    }\n    return value;\n  };\n  exports.toArray = toArray;\n  /**\n   * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n   * See https://github.com/supabase/supabase/issues/18\n   *\n   * @example toTimestampString('2019-09-10 00:00:00')\n   * //=> '2019-09-10T00:00:00'\n   */\n  var toTimestampString = function toTimestampString(value) {\n    if (typeof value === 'string') {\n      return value.replace(' ', 'T');\n    }\n    return value;\n  };\n  exports.toTimestampString = toTimestampString;\n  var httpEndpointURL = function httpEndpointURL(socketUrl) {\n    var url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '');\n  };\n  exports.httpEndpointURL = httpEndpointURL;\n});","lineCount":237,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[5,0,3,0],[6,0,4,0],[7,2,5,0,"Object"],[7,8,5,6],[7,9,5,7,"defineProperty"],[7,23,5,21],[7,24,5,22,"exports"],[7,31,5,29],[7,33,5,31],[7,45,5,43],[7,47,5,45],[8,4,5,47,"value"],[8,9,5,52],[8,11,5,54],[9,2,5,59],[9,3,5,60],[9,4,5,61],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"httpEndpointURL"],[10,25,6,23],[10,28,6,26,"exports"],[10,35,6,33],[10,36,6,34,"toTimestampString"],[10,53,6,51],[10,56,6,54,"exports"],[10,63,6,61],[10,64,6,62,"toArray"],[10,71,6,69],[10,74,6,72,"exports"],[10,81,6,79],[10,82,6,80,"toJson"],[10,88,6,86],[10,91,6,89,"exports"],[10,98,6,96],[10,99,6,97,"toNumber"],[10,107,6,105],[10,110,6,108,"exports"],[10,117,6,115],[10,118,6,116,"toBoolean"],[10,127,6,125],[10,130,6,128,"exports"],[10,137,6,135],[10,138,6,136,"convertCell"],[10,149,6,147],[10,152,6,150,"exports"],[10,159,6,157],[10,160,6,158,"convertColumn"],[10,173,6,171],[10,176,6,174,"exports"],[10,183,6,181],[10,184,6,182,"convertChangeData"],[10,201,6,199],[10,204,6,202,"exports"],[10,211,6,209],[10,212,6,210,"PostgresTypes"],[10,225,6,223],[10,228,6,226],[10,233,6,231],[10,234,6,232],[11,2,7,0],[12,2,8,0],[13,2,9,0],[13,6,9,4,"PostgresTypes"],[13,19,9,17],[14,2,10,0],[14,3,10,1],[14,13,10,11,"PostgresTypes"],[14,26,10,24],[14,28,10,26],[15,4,11,4,"PostgresTypes"],[15,17,11,17],[15,18,11,18],[15,27,11,27],[15,28,11,28],[15,31,11,31],[15,40,11,40],[16,4,12,4,"PostgresTypes"],[16,17,12,17],[16,18,12,18],[16,24,12,24],[16,25,12,25],[16,28,12,28],[16,34,12,34],[17,4,13,4,"PostgresTypes"],[17,17,13,17],[17,18,13,18],[17,24,13,24],[17,25,13,25],[17,28,13,28],[17,34,13,34],[18,4,14,4,"PostgresTypes"],[18,17,14,17],[18,18,14,18],[18,29,14,29],[18,30,14,30],[18,33,14,33],[18,44,14,44],[19,4,15,4,"PostgresTypes"],[19,17,15,17],[19,18,15,18],[19,26,15,26],[19,27,15,27],[19,30,15,30],[19,38,15,38],[20,4,16,4,"PostgresTypes"],[20,17,16,17],[20,18,16,18],[20,26,16,26],[20,27,16,27],[20,30,16,30],[20,38,16,38],[21,4,17,4,"PostgresTypes"],[21,17,17,17],[21,18,17,18],[21,24,17,24],[21,25,17,25],[21,28,17,28],[21,34,17,34],[22,4,18,4,"PostgresTypes"],[22,17,18,17],[22,18,18,18],[22,24,18,24],[22,25,18,25],[22,28,18,28],[22,34,18,34],[23,4,19,4,"PostgresTypes"],[23,17,19,17],[23,18,19,18],[23,29,19,29],[23,30,19,30],[23,33,19,33],[23,44,19,44],[24,4,20,4,"PostgresTypes"],[24,17,20,17],[24,18,20,18],[24,24,20,24],[24,25,20,25],[24,28,20,28],[24,34,20,34],[25,4,21,4,"PostgresTypes"],[25,17,21,17],[25,18,21,18],[25,29,21,29],[25,30,21,30],[25,33,21,33],[25,44,21,44],[26,4,22,4,"PostgresTypes"],[26,17,22,17],[26,18,22,18],[26,24,22,24],[26,25,22,25],[26,28,22,28],[26,34,22,34],[27,4,23,4,"PostgresTypes"],[27,17,23,17],[27,18,23,18],[27,25,23,25],[27,26,23,26],[27,29,23,29],[27,36,23,36],[28,4,24,4,"PostgresTypes"],[28,17,24,17],[28,18,24,18],[28,25,24,25],[28,26,24,26],[28,29,24,29],[28,36,24,36],[29,4,25,4,"PostgresTypes"],[29,17,25,17],[29,18,25,18],[29,27,25,27],[29,28,25,28],[29,31,25,31],[29,40,25,40],[30,4,26,4,"PostgresTypes"],[30,17,26,17],[30,18,26,18],[30,23,26,23],[30,24,26,24],[30,27,26,27],[30,32,26,32],[31,4,27,4,"PostgresTypes"],[31,17,27,17],[31,18,27,18],[31,27,27,27],[31,28,27,28],[31,31,27,31],[31,40,27,40],[32,4,28,4,"PostgresTypes"],[32,17,28,17],[32,18,28,18],[32,24,28,24],[32,25,28,25],[32,28,28,28],[32,34,28,34],[33,4,29,4,"PostgresTypes"],[33,17,29,17],[33,18,29,18],[33,24,29,24],[33,25,29,25],[33,28,29,28],[33,34,29,34],[34,4,30,4,"PostgresTypes"],[34,17,30,17],[34,18,30,18],[34,29,30,29],[34,30,30,30],[34,33,30,33],[34,44,30,44],[35,4,31,4,"PostgresTypes"],[35,17,31,17],[35,18,31,18],[35,31,31,31],[35,32,31,32],[35,35,31,35],[35,48,31,48],[36,4,32,4,"PostgresTypes"],[36,17,32,17],[36,18,32,18],[36,26,32,26],[36,27,32,27],[36,30,32,30],[36,38,32,38],[37,4,33,4,"PostgresTypes"],[37,17,33,17],[37,18,33,18],[37,27,33,27],[37,28,33,28],[37,31,33,31],[37,40,33,40],[38,4,34,4,"PostgresTypes"],[38,17,34,17],[38,18,34,18],[38,29,34,29],[38,30,34,30],[38,33,34,33],[38,44,34,44],[39,2,35,0],[39,3,35,1],[39,5,35,3,"PostgresTypes"],[39,18,35,16],[39,23,35,21,"exports"],[39,30,35,28],[39,31,35,29,"PostgresTypes"],[39,44,35,42],[39,47,35,45,"PostgresTypes"],[39,60,35,58],[39,63,35,61],[39,64,35,62],[39,65,35,63],[39,66,35,64],[39,67,35,65],[40,2,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,2,48,0],[52,6,48,6,"convertChangeData"],[52,23,48,23],[52,26,48,26],[52,35,48,6,"convertChangeData"],[52,52,48,23,"convertChangeData"],[52,53,48,27,"columns"],[52,60,48,34],[52,62,48,36,"record"],[52,68,48,42],[52,70,48,61],[53,4,48,61],[53,8,48,44,"options"],[53,15,48,51],[53,18,48,51,"arguments"],[53,27,48,51],[53,28,48,51,"length"],[53,34,48,51],[53,42,48,51,"arguments"],[53,51,48,51],[53,59,48,51,"undefined"],[53,68,48,51],[53,71,48,51,"arguments"],[53,80,48,51],[53,86,48,54],[53,87,48,55],[53,88,48,56],[54,4,49,4],[54,8,49,8,"_a"],[54,10,49,10],[55,4,50,4],[55,8,50,10,"skipTypes"],[55,17,50,19],[55,20,50,22],[55,21,50,23,"_a"],[55,23,50,25],[55,26,50,28,"options"],[55,33,50,35],[55,34,50,36,"skipTypes"],[55,43,50,45],[55,49,50,51],[55,53,50,55],[55,57,50,59,"_a"],[55,59,50,61],[55,64,50,66],[55,69,50,71],[55,70,50,72],[55,73,50,75,"_a"],[55,75,50,77],[55,78,50,80],[55,80,50,82],[56,4,51,4],[56,11,51,11,"Object"],[56,17,51,17],[56,18,51,18,"keys"],[56,22,51,22],[56,23,51,23,"record"],[56,29,51,29],[56,30,51,30],[56,31,51,31,"reduce"],[56,37,51,37],[56,38,51,38],[56,48,51,39,"acc"],[56,51,51,42],[56,53,51,44,"rec_key"],[56,60,51,51],[56,62,51,56],[57,6,52,8,"acc"],[57,9,52,11],[57,10,52,12,"rec_key"],[57,17,52,19],[57,18,52,20],[57,21,52,23],[57,22,52,24],[57,23,52,25],[57,25,52,27,"exports"],[57,32,52,34],[57,33,52,35,"convertColumn"],[57,46,52,48],[57,48,52,50,"rec_key"],[57,55,52,57],[57,57,52,59,"columns"],[57,64,52,66],[57,66,52,68,"record"],[57,72,52,74],[57,74,52,76,"skipTypes"],[57,83,52,85],[57,84,52,86],[58,6,53,8],[58,13,53,15,"acc"],[58,16,53,18],[59,4,54,4],[59,5,54,5],[59,7,54,7],[59,8,54,8],[59,9,54,9],[59,10,54,10],[60,2,55,0],[60,3,55,1],[61,2,56,0,"exports"],[61,9,56,7],[61,10,56,8,"convertChangeData"],[61,27,56,25],[61,30,56,28,"convertChangeData"],[61,47,56,45],[62,2,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,0,61,0],[67,0,62,0],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,0,67,0],[73,0,68,0],[74,0,69,0],[75,0,70,0],[76,2,71,0],[76,6,71,6,"convertColumn"],[76,19,71,19],[76,22,71,22],[76,31,71,6,"convertColumn"],[76,44,71,19,"convertColumn"],[76,45,71,23,"columnName"],[76,55,71,33],[76,57,71,35,"columns"],[76,64,71,42],[76,66,71,44,"record"],[76,72,71,50],[76,74,71,52,"skipTypes"],[76,83,71,61],[76,85,71,66],[77,4,72,4],[77,8,72,10,"column"],[77,14,72,16],[77,17,72,19,"columns"],[77,24,72,26],[77,25,72,27,"find"],[77,29,72,31],[77,30,72,32],[77,40,72,33,"x"],[77,41,72,34],[78,6,72,34],[78,13,72,39,"x"],[78,14,72,40],[78,15,72,41,"name"],[78,19,72,45],[78,24,72,50,"columnName"],[78,34,72,60],[79,4,72,60],[79,6,72,61],[80,4,73,4],[80,8,73,10,"colType"],[80,15,73,17],[80,18,73,20,"column"],[80,24,73,26],[80,29,73,31],[80,33,73,35],[80,37,73,39,"column"],[80,43,73,45],[80,48,73,50],[80,53,73,55],[80,54,73,56],[80,57,73,59],[80,62,73,64],[80,63,73,65],[80,66,73,68,"column"],[80,72,73,74],[80,73,73,75,"type"],[80,77,73,79],[81,4,74,4],[81,8,74,10,"value"],[81,13,74,15],[81,16,74,18,"record"],[81,22,74,24],[81,23,74,25,"columnName"],[81,33,74,35],[81,34,74,36],[82,4,75,4],[82,8,75,8,"colType"],[82,15,75,15],[82,19,75,19],[82,20,75,20,"skipTypes"],[82,29,75,29],[82,30,75,30,"includes"],[82,38,75,38],[82,39,75,39,"colType"],[82,46,75,46],[82,47,75,47],[82,49,75,49],[83,6,76,8],[83,13,76,15],[83,14,76,16],[83,15,76,17],[83,17,76,19,"exports"],[83,24,76,26],[83,25,76,27,"convertCell"],[83,36,76,38],[83,38,76,40,"colType"],[83,45,76,47],[83,47,76,49,"value"],[83,52,76,54],[83,53,76,55],[84,4,77,4],[85,4,78,4],[85,11,78,11,"noop"],[85,15,78,15],[85,16,78,16,"value"],[85,21,78,21],[85,22,78,22],[86,2,79,0],[86,3,79,1],[87,2,80,0,"exports"],[87,9,80,7],[87,10,80,8,"convertColumn"],[87,23,80,21],[87,26,80,24,"convertColumn"],[87,39,80,37],[88,2,81,0],[89,0,82,0],[90,0,83,0],[91,0,84,0],[92,0,85,0],[93,0,86,0],[94,0,87,0],[95,0,88,0],[96,0,89,0],[97,0,90,0],[98,0,91,0],[99,0,92,0],[100,0,93,0],[101,2,94,0],[101,6,94,6,"convertCell"],[101,17,94,17],[101,20,94,20],[101,29,94,6,"convertCell"],[101,40,94,17,"convertCell"],[101,41,94,21,"type"],[101,45,94,25],[101,47,94,27,"value"],[101,52,94,32],[101,54,94,37],[102,4,95,4],[103,4,96,4],[103,8,96,8,"type"],[103,12,96,12],[103,13,96,13,"charAt"],[103,19,96,19],[103,20,96,20],[103,21,96,21],[103,22,96,22],[103,27,96,27],[103,30,96,30],[103,32,96,32],[104,6,97,8],[104,10,97,14,"dataType"],[104,18,97,22],[104,21,97,25,"type"],[104,25,97,29],[104,26,97,30,"slice"],[104,31,97,35],[104,32,97,36],[104,33,97,37],[104,35,97,39,"type"],[104,39,97,43],[104,40,97,44,"length"],[104,46,97,50],[104,47,97,51],[105,6,98,8],[105,13,98,15],[105,14,98,16],[105,15,98,17],[105,17,98,19,"exports"],[105,24,98,26],[105,25,98,27,"toArray"],[105,32,98,34],[105,34,98,36,"value"],[105,39,98,41],[105,41,98,43,"dataType"],[105,49,98,51],[105,50,98,52],[106,4,99,4],[107,4,100,4],[108,4,101,4],[108,12,101,12,"type"],[108,16,101,16],[109,6,102,8],[109,11,102,13,"PostgresTypes"],[109,24,102,26],[109,25,102,27,"bool"],[109,29,102,31],[110,8,103,12],[110,15,103,19],[110,16,103,20],[110,17,103,21],[110,19,103,23,"exports"],[110,26,103,30],[110,27,103,31,"toBoolean"],[110,36,103,40],[110,38,103,42,"value"],[110,43,103,47],[110,44,103,48],[111,6,104,8],[111,11,104,13,"PostgresTypes"],[111,24,104,26],[111,25,104,27,"float4"],[111,31,104,33],[112,6,105,8],[112,11,105,13,"PostgresTypes"],[112,24,105,26],[112,25,105,27,"float8"],[112,31,105,33],[113,6,106,8],[113,11,106,13,"PostgresTypes"],[113,24,106,26],[113,25,106,27,"int2"],[113,29,106,31],[114,6,107,8],[114,11,107,13,"PostgresTypes"],[114,24,107,26],[114,25,107,27,"int4"],[114,29,107,31],[115,6,108,8],[115,11,108,13,"PostgresTypes"],[115,24,108,26],[115,25,108,27,"int8"],[115,29,108,31],[116,6,109,8],[116,11,109,13,"PostgresTypes"],[116,24,109,26],[116,25,109,27,"numeric"],[116,32,109,34],[117,6,110,8],[117,11,110,13,"PostgresTypes"],[117,24,110,26],[117,25,110,27,"oid"],[117,28,110,30],[118,8,111,12],[118,15,111,19],[118,16,111,20],[118,17,111,21],[118,19,111,23,"exports"],[118,26,111,30],[118,27,111,31,"toNumber"],[118,35,111,39],[118,37,111,41,"value"],[118,42,111,46],[118,43,111,47],[119,6,112,8],[119,11,112,13,"PostgresTypes"],[119,24,112,26],[119,25,112,27,"json"],[119,29,112,31],[120,6,113,8],[120,11,113,13,"PostgresTypes"],[120,24,113,26],[120,25,113,27,"jsonb"],[120,30,113,32],[121,8,114,12],[121,15,114,19],[121,16,114,20],[121,17,114,21],[121,19,114,23,"exports"],[121,26,114,30],[121,27,114,31,"toJson"],[121,33,114,37],[121,35,114,39,"value"],[121,40,114,44],[121,41,114,45],[122,6,115,8],[122,11,115,13,"PostgresTypes"],[122,24,115,26],[122,25,115,27,"timestamp"],[122,34,115,36],[123,8,116,12],[123,15,116,19],[123,16,116,20],[123,17,116,21],[123,19,116,23,"exports"],[123,26,116,30],[123,27,116,31,"toTimestampString"],[123,44,116,48],[123,46,116,50,"value"],[123,51,116,55],[123,52,116,56],[124,6,116,58],[125,6,117,8],[125,11,117,13,"PostgresTypes"],[125,24,117,26],[125,25,117,27,"abstime"],[125,32,117,34],[125,33,117,35],[125,34,117,36],[126,6,118,8],[126,11,118,13,"PostgresTypes"],[126,24,118,26],[126,25,118,27,"date"],[126,29,118,31],[126,30,118,32],[126,31,118,33],[127,6,119,8],[127,11,119,13,"PostgresTypes"],[127,24,119,26],[127,25,119,27,"daterange"],[127,34,119,36],[128,6,120,8],[128,11,120,13,"PostgresTypes"],[128,24,120,26],[128,25,120,27,"int4range"],[128,34,120,36],[129,6,121,8],[129,11,121,13,"PostgresTypes"],[129,24,121,26],[129,25,121,27,"int8range"],[129,34,121,36],[130,6,122,8],[130,11,122,13,"PostgresTypes"],[130,24,122,26],[130,25,122,27,"money"],[130,30,122,32],[131,6,123,8],[131,11,123,13,"PostgresTypes"],[131,24,123,26],[131,25,123,27,"reltime"],[131,32,123,34],[131,33,123,35],[131,34,123,36],[132,6,124,8],[132,11,124,13,"PostgresTypes"],[132,24,124,26],[132,25,124,27,"text"],[132,29,124,31],[133,6,125,8],[133,11,125,13,"PostgresTypes"],[133,24,125,26],[133,25,125,27,"time"],[133,29,125,31],[133,30,125,32],[133,31,125,33],[134,6,126,8],[134,11,126,13,"PostgresTypes"],[134,24,126,26],[134,25,126,27,"timestamptz"],[134,36,126,38],[134,37,126,39],[134,38,126,40],[135,6,127,8],[135,11,127,13,"PostgresTypes"],[135,24,127,26],[135,25,127,27,"timetz"],[135,31,127,33],[135,32,127,34],[135,33,127,35],[136,6,128,8],[136,11,128,13,"PostgresTypes"],[136,24,128,26],[136,25,128,27,"tsrange"],[136,32,128,34],[137,6,129,8],[137,11,129,13,"PostgresTypes"],[137,24,129,26],[137,25,129,27,"tstzrange"],[137,34,129,36],[138,8,130,12],[138,15,130,19,"noop"],[138,19,130,23],[138,20,130,24,"value"],[138,25,130,29],[138,26,130,30],[139,6,131,8],[140,8,132,12],[141,8,133,12],[141,15,133,19,"noop"],[141,19,133,23],[141,20,133,24,"value"],[141,25,133,29],[141,26,133,30],[142,4,134,4],[143,2,135,0],[143,3,135,1],[144,2,136,0,"exports"],[144,9,136,7],[144,10,136,8,"convertCell"],[144,21,136,19],[144,24,136,22,"convertCell"],[144,35,136,33],[145,2,137,0],[145,6,137,6,"noop"],[145,10,137,10],[145,13,137,13],[145,22,137,6,"noop"],[145,26,137,10,"noop"],[145,27,137,14,"value"],[145,32,137,19],[145,34,137,24],[146,4,138,4],[146,11,138,11,"value"],[146,16,138,16],[147,2,139,0],[147,3,139,1],[148,2,140,0],[148,6,140,6,"toBoolean"],[148,15,140,15],[148,18,140,18],[148,27,140,6,"toBoolean"],[148,36,140,15,"toBoolean"],[148,37,140,19,"value"],[148,42,140,24],[148,44,140,29],[149,4,141,4],[149,12,141,12,"value"],[149,17,141,17],[150,6,142,8],[150,11,142,13],[150,14,142,16],[151,8,143,12],[151,15,143,19],[151,19,143,23],[152,6,144,8],[152,11,144,13],[152,14,144,16],[153,8,145,12],[153,15,145,19],[153,20,145,24],[154,6,146,8],[155,8,147,12],[155,15,147,19,"value"],[155,20,147,24],[156,4,148,4],[157,2,149,0],[157,3,149,1],[158,2,150,0,"exports"],[158,9,150,7],[158,10,150,8,"toBoolean"],[158,19,150,17],[158,22,150,20,"toBoolean"],[158,31,150,29],[159,2,151,0],[159,6,151,6,"toNumber"],[159,14,151,14],[159,17,151,17],[159,26,151,6,"toNumber"],[159,34,151,14,"toNumber"],[159,35,151,18,"value"],[159,40,151,23],[159,42,151,28],[160,4,152,4],[160,8,152,8],[160,15,152,15,"value"],[160,20,152,20],[160,25,152,25],[160,33,152,33],[160,35,152,35],[161,6,153,8],[161,10,153,14,"parsedValue"],[161,21,153,25],[161,24,153,28,"parseFloat"],[161,34,153,38],[161,35,153,39,"value"],[161,40,153,44],[161,41,153,45],[162,6,154,8],[162,10,154,12],[162,11,154,13,"Number"],[162,17,154,19],[162,18,154,20,"isNaN"],[162,23,154,25],[162,24,154,26,"parsedValue"],[162,35,154,37],[162,36,154,38],[162,38,154,40],[163,8,155,12],[163,15,155,19,"parsedValue"],[163,26,155,30],[164,6,156,8],[165,4,157,4],[166,4,158,4],[166,11,158,11,"value"],[166,16,158,16],[167,2,159,0],[167,3,159,1],[168,2,160,0,"exports"],[168,9,160,7],[168,10,160,8,"toNumber"],[168,18,160,16],[168,21,160,19,"toNumber"],[168,29,160,27],[169,2,161,0],[169,6,161,6,"toJson"],[169,12,161,12],[169,15,161,15],[169,24,161,6,"toJson"],[169,30,161,12,"toJson"],[169,31,161,16,"value"],[169,36,161,21],[169,38,161,26],[170,4,162,4],[170,8,162,8],[170,15,162,15,"value"],[170,20,162,20],[170,25,162,25],[170,33,162,33],[170,35,162,35],[171,6,163,8],[171,10,163,12],[172,8,164,12],[172,15,164,19,"JSON"],[172,19,164,23],[172,20,164,24,"parse"],[172,25,164,29],[172,26,164,30,"value"],[172,31,164,35],[172,32,164,36],[173,6,165,8],[173,7,165,9],[173,8,166,8],[173,15,166,15,"error"],[173,20,166,20],[173,22,166,22],[174,8,167,12,"console"],[174,15,167,19],[174,16,167,20,"log"],[174,19,167,23],[174,20,167,24],[174,41,167,45,"error"],[174,46,167,50],[174,48,167,52],[174,49,167,53],[175,8,168,12],[175,15,168,19,"value"],[175,20,168,24],[176,6,169,8],[177,4,170,4],[178,4,171,4],[178,11,171,11,"value"],[178,16,171,16],[179,2,172,0],[179,3,172,1],[180,2,173,0,"exports"],[180,9,173,7],[180,10,173,8,"toJson"],[180,16,173,14],[180,19,173,17,"toJson"],[180,25,173,23],[181,2,174,0],[182,0,175,0],[183,0,176,0],[184,0,177,0],[185,0,178,0],[186,0,179,0],[187,0,180,0],[188,0,181,0],[189,0,182,0],[190,0,183,0],[191,2,184,0],[191,6,184,6,"toArray"],[191,13,184,13],[191,16,184,16],[191,25,184,6,"toArray"],[191,32,184,13,"toArray"],[191,33,184,17,"value"],[191,38,184,22],[191,40,184,24,"type"],[191,44,184,28],[191,46,184,33],[192,4,185,4],[192,8,185,8],[192,15,185,15,"value"],[192,20,185,20],[192,25,185,25],[192,33,185,33],[192,35,185,35],[193,6,186,8],[193,13,186,15,"value"],[193,18,186,20],[194,4,187,4],[195,4,188,4],[195,8,188,10,"lastIdx"],[195,15,188,17],[195,18,188,20,"value"],[195,23,188,25],[195,24,188,26,"length"],[195,30,188,32],[195,33,188,35],[195,34,188,36],[196,4,189,4],[196,8,189,10,"closeBrace"],[196,18,189,20],[196,21,189,23,"value"],[196,26,189,28],[196,27,189,29,"lastIdx"],[196,34,189,36],[196,35,189,37],[197,4,190,4],[197,8,190,10,"openBrace"],[197,17,190,19],[197,20,190,22,"value"],[197,25,190,27],[197,26,190,28],[197,27,190,29],[197,28,190,30],[198,4,191,4],[199,4,192,4],[199,8,192,8,"openBrace"],[199,17,192,17],[199,22,192,22],[199,25,192,25],[199,29,192,29,"closeBrace"],[199,39,192,39],[199,44,192,44],[199,47,192,47],[199,49,192,49],[200,6,193,8],[200,10,193,12,"arr"],[200,13,193,15],[201,6,194,8],[201,10,194,14,"valTrim"],[201,17,194,21],[201,20,194,24,"value"],[201,25,194,29],[201,26,194,30,"slice"],[201,31,194,35],[201,32,194,36],[201,33,194,37],[201,35,194,39,"lastIdx"],[201,42,194,46],[201,43,194,47],[202,6,195,8],[203,6,196,8],[203,10,196,12],[204,8,197,12,"arr"],[204,11,197,15],[204,14,197,18,"JSON"],[204,18,197,22],[204,19,197,23,"parse"],[204,24,197,28],[204,25,197,29],[204,28,197,32],[204,31,197,35,"valTrim"],[204,38,197,42],[204,41,197,45],[204,44,197,48],[204,45,197,49],[205,6,198,8],[205,7,198,9],[205,8,199,8],[205,15,199,15,"_"],[205,16,199,16],[205,18,199,18],[206,8,200,12],[207,8,201,12,"arr"],[207,11,201,15],[207,14,201,18,"valTrim"],[207,21,201,25],[207,24,201,28,"valTrim"],[207,31,201,35],[207,32,201,36,"split"],[207,37,201,41],[207,38,201,42],[207,41,201,45],[207,42,201,46],[207,45,201,49],[207,47,201,51],[208,6,202,8],[209,6,203,8],[209,13,203,15,"arr"],[209,16,203,18],[209,17,203,19,"map"],[209,20,203,22],[209,21,203,23],[209,31,203,24,"val"],[209,34,203,27],[210,8,203,27],[210,15,203,32],[210,16,203,33],[210,17,203,34],[210,19,203,36,"exports"],[210,26,203,43],[210,27,203,44,"convertCell"],[210,38,203,55],[210,40,203,57,"type"],[210,44,203,61],[210,46,203,63,"val"],[210,49,203,66],[210,50,203,67],[211,6,203,67],[211,8,203,68],[212,4,204,4],[213,4,205,4],[213,11,205,11,"value"],[213,16,205,16],[214,2,206,0],[214,3,206,1],[215,2,207,0,"exports"],[215,9,207,7],[215,10,207,8,"toArray"],[215,17,207,15],[215,20,207,18,"toArray"],[215,27,207,25],[216,2,208,0],[217,0,209,0],[218,0,210,0],[219,0,211,0],[220,0,212,0],[221,0,213,0],[222,0,214,0],[223,2,215,0],[223,6,215,6,"toTimestampString"],[223,23,215,23],[223,26,215,26],[223,35,215,6,"toTimestampString"],[223,52,215,23,"toTimestampString"],[223,53,215,27,"value"],[223,58,215,32],[223,60,215,37],[224,4,216,4],[224,8,216,8],[224,15,216,15,"value"],[224,20,216,20],[224,25,216,25],[224,33,216,33],[224,35,216,35],[225,6,217,8],[225,13,217,15,"value"],[225,18,217,20],[225,19,217,21,"replace"],[225,26,217,28],[225,27,217,29],[225,30,217,32],[225,32,217,34],[225,35,217,37],[225,36,217,38],[226,4,218,4],[227,4,219,4],[227,11,219,11,"value"],[227,16,219,16],[228,2,220,0],[228,3,220,1],[229,2,221,0,"exports"],[229,9,221,7],[229,10,221,8,"toTimestampString"],[229,27,221,25],[229,30,221,28,"toTimestampString"],[229,47,221,45],[230,2,222,0],[230,6,222,6,"httpEndpointURL"],[230,21,222,21],[230,24,222,24],[230,33,222,6,"httpEndpointURL"],[230,48,222,21,"httpEndpointURL"],[230,49,222,25,"socketUrl"],[230,58,222,34],[230,60,222,39],[231,4,223,4],[231,8,223,8,"url"],[231,11,223,11],[231,14,223,14,"socketUrl"],[231,23,223,23],[232,4,224,4,"url"],[232,7,224,7],[232,10,224,10,"url"],[232,13,224,13],[232,14,224,14,"replace"],[232,21,224,21],[232,22,224,22],[232,28,224,28],[232,30,224,30],[232,36,224,36],[232,37,224,37],[233,4,225,4,"url"],[233,7,225,7],[233,10,225,10,"url"],[233,13,225,13],[233,14,225,14,"replace"],[233,21,225,21],[233,22,225,22],[233,71,225,71],[233,73,225,73],[233,75,225,75],[233,76,225,76],[234,4,226,4],[234,11,226,11,"url"],[234,14,226,14],[234,15,226,15,"replace"],[234,22,226,22],[234,23,226,23],[234,29,226,29],[234,31,226,31],[234,33,226,33],[234,34,226,34],[235,2,227,0],[235,3,227,1],[236,2,228,0,"exports"],[236,9,228,7],[236,10,228,8,"httpEndpointURL"],[236,25,228,23],[236,28,228,26,"httpEndpointURL"],[236,43,228,41],[237,0,228,42],[237,3]],"functionMap":{"names":["<global>","<anonymous>","convertChangeData","Object.keys.reduce$argument_0","convertColumn","columns.find$argument_0","convertCell","noop","toBoolean","toNumber","toJson","toArray","arr.map$argument_0","toTimestampString","httpEndpointURL"],"mappings":"AAA;CCS;CDyB;0BEa;sCCG;KDG;CFC;sBIgB;gCCC,4BD;CJO;oBMe;CNyC;aOE;CPE;kBQC;CRS;iBSE;CTQ;eUE;CVW;gBWY;uBCmB,4CD;CXG;0BaS;CbK;wBcE;CdK"}},"type":"js/module"}]}