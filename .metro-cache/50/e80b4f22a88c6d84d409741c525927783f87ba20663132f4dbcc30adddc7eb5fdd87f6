{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"./generated/encode-html.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"AbyChXI0bUIec9vrJ3VJKE7QZUU=","exportNames":["*"]}},{"name":"./escape.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":56,"index":107}}],"key":"UH58AP7bAaTVvEXDEcnZ5I6tNHw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.encodeHTML = encodeHTML;\n  exports.encodeNonAsciiHTML = encodeNonAsciiHTML;\n  var _encodeHtml = _interopRequireDefault(require(_dependencyMap[1], \"./generated/encode-html.js\"));\n  var _escape = require(_dependencyMap[2], \"./escape.js\");\n  var htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n  /**\n   * Encodes all characters in the input using HTML entities. This includes\n   * characters that are valid ASCII characters in HTML documents, such as `#`.\n   *\n   * To get a more compact output, consider using the `encodeNonAsciiHTML`\n   * function, which will only encode characters that are not valid in HTML\n   * documents, as well as non-ASCII characters.\n   *\n   * If a character has no equivalent entity, a numeric hexadecimal reference\n   * (eg. `&#xfc;`) will be used.\n   */\n  function encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n  }\n  /**\n   * Encodes all non-ASCII characters, as well as characters not valid in HTML\n   * documents using HTML entities. This function will not encode characters that\n   * are valid in HTML documents, such as `#`.\n   *\n   * If a character has no equivalent entity, a numeric hexadecimal reference\n   * (eg. `&#xfc;`) will be used.\n   */\n  function encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(_escape.xmlReplacer, data);\n  }\n  function encodeHTMLTrieRe(regExp, str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = regExp.exec(str)) !== null) {\n      var i = match.index;\n      ret += str.substring(lastIdx, i);\n      var char = str.charCodeAt(i);\n      var next = _encodeHtml.default.get(char);\n      if (typeof next === \"object\") {\n        // We are in a branch. Try to match the next char.\n        if (i + 1 < str.length) {\n          var nextChar = str.charCodeAt(i + 1);\n          var value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n          if (value !== undefined) {\n            ret += value;\n            lastIdx = regExp.lastIndex += 1;\n            continue;\n          }\n        }\n        next = next.v;\n      }\n      // We might have a tree node without a value; skip and use a numeric entity.\n      if (next !== undefined) {\n        ret += next;\n        lastIdx = i + 1;\n      } else {\n        var cp = (0, _escape.getCodePoint)(str, i);\n        ret += `&#x${cp.toString(16)};`;\n        // Increase by 1 if we have a surrogate pair\n        lastIdx = regExp.lastIndex += Number(cp !== char);\n      }\n    }\n    return ret + str.substr(lastIdx);\n  }\n});","lineCount":71,"map":[[8,2,1,0],[8,6,1,0,"_encodeHtml"],[8,17,1,0],[8,20,1,0,"_interopRequireDefault"],[8,42,1,0],[8,43,1,0,"require"],[8,50,1,0],[8,51,1,0,"_dependencyMap"],[8,65,1,0],[9,2,2,0],[9,6,2,0,"_escape"],[9,13,2,0],[9,16,2,0,"require"],[9,23,2,0],[9,24,2,0,"_dependencyMap"],[9,38,2,0],[10,2,3,0],[10,6,3,6,"htmlReplacer"],[10,18,3,18],[10,21,3,21],[10,58,3,58],[11,2,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,2,15,7],[22,11,15,16,"encodeHTML"],[22,21,15,26,"encodeHTML"],[22,22,15,27,"data"],[22,26,15,31],[22,28,15,33],[23,4,16,4],[23,11,16,11,"encodeHTMLTrieRe"],[23,27,16,27],[23,28,16,28,"htmlReplacer"],[23,40,16,40],[23,42,16,42,"data"],[23,46,16,46],[23,47,16,47],[24,2,17,0],[25,2,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,2,26,7],[33,11,26,16,"encodeNonAsciiHTML"],[33,29,26,34,"encodeNonAsciiHTML"],[33,30,26,35,"data"],[33,34,26,39],[33,36,26,41],[34,4,27,4],[34,11,27,11,"encodeHTMLTrieRe"],[34,27,27,27],[34,28,27,28,"xmlReplacer"],[34,47,27,39],[34,49,27,41,"data"],[34,53,27,45],[34,54,27,46],[35,2,28,0],[36,2,29,0],[36,11,29,9,"encodeHTMLTrieRe"],[36,27,29,25,"encodeHTMLTrieRe"],[36,28,29,26,"regExp"],[36,34,29,32],[36,36,29,34,"str"],[36,39,29,37],[36,41,29,39],[37,4,30,4],[37,8,30,8,"ret"],[37,11,30,11],[37,14,30,14],[37,16,30,16],[38,4,31,4],[38,8,31,8,"lastIdx"],[38,15,31,15],[38,18,31,18],[38,19,31,19],[39,4,32,4],[39,8,32,8,"match"],[39,13,32,13],[40,4,33,4],[40,11,33,11],[40,12,33,12,"match"],[40,17,33,17],[40,20,33,20,"regExp"],[40,26,33,26],[40,27,33,27,"exec"],[40,31,33,31],[40,32,33,32,"str"],[40,35,33,35],[40,36,33,36],[40,42,33,42],[40,46,33,46],[40,48,33,48],[41,6,34,8],[41,10,34,14,"i"],[41,11,34,15],[41,14,34,18,"match"],[41,19,34,23],[41,20,34,24,"index"],[41,25,34,29],[42,6,35,8,"ret"],[42,9,35,11],[42,13,35,15,"str"],[42,16,35,18],[42,17,35,19,"substring"],[42,26,35,28],[42,27,35,29,"lastIdx"],[42,34,35,36],[42,36,35,38,"i"],[42,37,35,39],[42,38,35,40],[43,6,36,8],[43,10,36,14,"char"],[43,14,36,18],[43,17,36,21,"str"],[43,20,36,24],[43,21,36,25,"charCodeAt"],[43,31,36,35],[43,32,36,36,"i"],[43,33,36,37],[43,34,36,38],[44,6,37,8],[44,10,37,12,"next"],[44,14,37,16],[44,17,37,19,"htmlTrie"],[44,36,37,27],[44,37,37,28,"get"],[44,40,37,31],[44,41,37,32,"char"],[44,45,37,36],[44,46,37,37],[45,6,38,8],[45,10,38,12],[45,17,38,19,"next"],[45,21,38,23],[45,26,38,28],[45,34,38,36],[45,36,38,38],[46,8,39,12],[47,8,40,12],[47,12,40,16,"i"],[47,13,40,17],[47,16,40,20],[47,17,40,21],[47,20,40,24,"str"],[47,23,40,27],[47,24,40,28,"length"],[47,30,40,34],[47,32,40,36],[48,10,41,16],[48,14,41,22,"nextChar"],[48,22,41,30],[48,25,41,33,"str"],[48,28,41,36],[48,29,41,37,"charCodeAt"],[48,39,41,47],[48,40,41,48,"i"],[48,41,41,49],[48,44,41,52],[48,45,41,53],[48,46,41,54],[49,10,42,16],[49,14,42,22,"value"],[49,19,42,27],[49,22,42,30],[49,29,42,37,"next"],[49,33,42,41],[49,34,42,42,"n"],[49,35,42,43],[49,40,42,48],[49,48,42,56],[49,51,43,22,"next"],[49,55,43,26],[49,56,43,27,"n"],[49,57,43,28],[49,62,43,33,"nextChar"],[49,70,43,41],[49,73,44,26,"next"],[49,77,44,30],[49,78,44,31,"o"],[49,79,44,32],[49,82,45,26,"undefined"],[49,91,45,35],[49,94,46,22,"next"],[49,98,46,26],[49,99,46,27,"n"],[49,100,46,28],[49,101,46,29,"get"],[49,104,46,32],[49,105,46,33,"nextChar"],[49,113,46,41],[49,114,46,42],[50,10,47,16],[50,14,47,20,"value"],[50,19,47,25],[50,24,47,30,"undefined"],[50,33,47,39],[50,35,47,41],[51,12,48,20,"ret"],[51,15,48,23],[51,19,48,27,"value"],[51,24,48,32],[52,12,49,20,"lastIdx"],[52,19,49,27],[52,22,49,30,"regExp"],[52,28,49,36],[52,29,49,37,"lastIndex"],[52,38,49,46],[52,42,49,50],[52,43,49,51],[53,12,50,20],[54,10,51,16],[55,8,52,12],[56,8,53,12,"next"],[56,12,53,16],[56,15,53,19,"next"],[56,19,53,23],[56,20,53,24,"v"],[56,21,53,25],[57,6,54,8],[58,6,55,8],[59,6,56,8],[59,10,56,12,"next"],[59,14,56,16],[59,19,56,21,"undefined"],[59,28,56,30],[59,30,56,32],[60,8,57,12,"ret"],[60,11,57,15],[60,15,57,19,"next"],[60,19,57,23],[61,8,58,12,"lastIdx"],[61,15,58,19],[61,18,58,22,"i"],[61,19,58,23],[61,22,58,26],[61,23,58,27],[62,6,59,8],[62,7,59,9],[62,13,60,13],[63,8,61,12],[63,12,61,18,"cp"],[63,14,61,20],[63,17,61,23],[63,21,61,23,"getCodePoint"],[63,41,61,35],[63,43,61,36,"str"],[63,46,61,39],[63,48,61,41,"i"],[63,49,61,42],[63,50,61,43],[64,8,62,12,"ret"],[64,11,62,15],[64,15,62,19],[64,21,62,25,"cp"],[64,23,62,27],[64,24,62,28,"toString"],[64,32,62,36],[64,33,62,37],[64,35,62,39],[64,36,62,40],[64,39,62,43],[65,8,63,12],[66,8,64,12,"lastIdx"],[66,15,64,19],[66,18,64,22,"regExp"],[66,24,64,28],[66,25,64,29,"lastIndex"],[66,34,64,38],[66,38,64,42,"Number"],[66,44,64,48],[66,45,64,49,"cp"],[66,47,64,51],[66,52,64,56,"char"],[66,56,64,60],[66,57,64,61],[67,6,65,8],[68,4,66,4],[69,4,67,4],[69,11,67,11,"ret"],[69,14,67,14],[69,17,67,17,"str"],[69,20,67,20],[69,21,67,21,"substr"],[69,27,67,27],[69,28,67,28,"lastIdx"],[69,35,67,35],[69,36,67,36],[70,2,68,0],[71,0,68,1],[71,3]],"functionMap":{"names":["<global>","encodeHTML","encodeNonAsciiHTML","encodeHTMLTrieRe"],"mappings":"AAA;OCc;CDE;OES;CFE;AGC;CHuC"}},"type":"js/module"}]}