{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@reduxjs/toolkit/query/react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":190},"end":{"line":8,"column":57,"index":247}}],"key":"H8aYsQNJt9rS0BKlqltpEbUG6zo=","exportNames":["*"]}},{"name":"../../services/supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":248},"end":{"line":9,"column":58,"index":306}}],"key":"a99TehitYkPR4mct+ady0jxcI4I=","exportNames":["*"]}},{"name":"./baseApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":385},"end":{"line":11,"column":88,"index":473}}],"key":"Wui0qMW8IIbr/oMETWG4Kn9SQn8=","exportNames":["*"]}},{"name":"./networkAwareApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":474},"end":{"line":12,"column":67,"index":541}}],"key":"yZiskhRl151rW3KlB6s0s+CxO0c=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":542},"end":{"line":13,"column":54,"index":596}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useUpdateAutomationMutation = exports.useUnlikeAutomationMutation = exports.useTrackAutomationDownloadMutation = exports.useLikeAutomationMutation = exports.useGetUserStatsQuery = exports.useGetTrendingAutomationsQuery = exports.useGetRecentExecutionsQuery = exports.useGetPublicAutomationsQuery = exports.useGetMyAutomationsQuery = exports.useGetExecutionHistoryQuery = exports.useGetAutomationQuery = exports.useGetAutomationExecutionsQuery = exports.useDeleteAutomationMutation = exports.useCreateAutomationMutation = exports.useCloneAutomationMutation = exports.useClearHistoryMutation = exports.automationApi = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _react = require(_dependencyMap[3], \"@reduxjs/toolkit/query/react\");\n  var _client = require(_dependencyMap[4], \"../../services/supabase/client\");\n  var _baseApi = require(_dependencyMap[5], \"./baseApi\");\n  var _networkAwareApi = require(_dependencyMap[6], \"./networkAwareApi\");\n  var _EventLogger = require(_dependencyMap[7], \"../../utils/EventLogger\");\n  /**\n   * Automation API - Unified and Optimized\n   * \n   * This module provides consistent API endpoints for automation management\n   * with proper error handling, caching, and authentication.\n   */\n\n  /**\n   * Enhanced automation API with unified configuration\n   */\n  var automationApi = exports.automationApi = (0, _react.createApi)(Object.assign({\n    reducerPath: 'automationApi'\n  }, _baseApi.baseApiConfig, {\n    tagTypes: ['Automation', 'User', 'Execution'],\n    endpoints: function endpoints(builder) {\n      return {\n        // ===== AUTOMATION MANAGEMENT =====\n\n        /**\n         * Get user's automations with proper error handling\n         */\n        getMyAutomations: builder.query({\n          queryFn: function () {\n            var _queryFn = (0, _asyncToGenerator2.default)(function* (_, _ref) {\n              var signal = _ref.signal;\n              try {\n                var _yield$supabase$auth$ = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$.data.user;\n                if (!user) {\n                  return {\n                    data: []\n                  };\n                }\n                var _yield$supabase$from$ = yield _client.supabase.from('automations').select('*').eq('created_by', user.id).order('created_at', {\n                    ascending: false\n                  }).abortSignal(signal),\n                  data = _yield$supabase$from$.data,\n                  error = _yield$supabase$from$.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error fetching user automations:', error);\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: error.message || 'Failed to fetch automations',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data || []\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch user automations:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch automations'\n                  }\n                };\n              }\n            });\n            function queryFn(_x, _x2) {\n              return _queryFn.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: function providesTags(result) {\n            return result ? [].concat((0, _toConsumableArray2.default)(result.map(function (_ref2) {\n              var id = _ref2.id;\n              return {\n                type: 'Automation',\n                id: id\n              };\n            })), [{\n              type: 'Automation',\n              id: 'LIST'\n            }]) : [{\n              type: 'Automation',\n              id: 'LIST'\n            }];\n          }\n        }),\n        /**\n         * Get single automation by ID\n         */\n        getAutomation: builder.query({\n          queryFn: function () {\n            var _queryFn2 = (0, _asyncToGenerator2.default)(function* (id, _ref3) {\n              var signal = _ref3.signal;\n              try {\n                // Validate ID parameter before making request\n                if (!id || typeof id !== 'string') {\n                  _EventLogger.EventLogger.error('API', 'Invalid automation ID provided:', id);\n                  return {\n                    error: {\n                      status: 'INVALID_REQUEST',\n                      message: 'Invalid automation ID provided',\n                      code: 'INVALID_PARAMS'\n                    }\n                  };\n                }\n\n                // Check for string literals that shouldn't be passed as UUIDs\n                if (id === 'undefined' || id === 'null' || id === '') {\n                  _EventLogger.EventLogger.error('API', 'Invalid automation ID value:', id);\n                  return {\n                    error: {\n                      status: 'INVALID_REQUEST',\n                      message: `Invalid automation ID: \"${id}\"`,\n                      code: 'INVALID_UUID'\n                    }\n                  };\n                }\n\n                // Validate UUID format (optional but recommended for better error handling)\n                var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n                if (!uuidRegex.test(id)) {\n                  _EventLogger.EventLogger.error('API', 'Invalid UUID format:', id);\n                  return {\n                    error: {\n                      status: 'INVALID_REQUEST',\n                      message: `Invalid UUID format: ${id}`,\n                      code: 'INVALID_UUID_FORMAT'\n                    }\n                  };\n                }\n                var _yield$supabase$from$2 = yield _client.supabase.from('automations').select('*').eq('id', id).single().abortSignal(signal),\n                  data = _yield$supabase$from$2.data,\n                  error = _yield$supabase$from$2.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error fetching automation:', error);\n                  return {\n                    error: {\n                      status: error.code === 'PGRST116' ? 'NOT_FOUND' : 'FETCH_ERROR',\n                      message: error.code === 'PGRST116' ? 'Automation not found' : error.message,\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch automation:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch automation'\n                  }\n                };\n              }\n            });\n            function queryFn(_x3, _x4) {\n              return _queryFn2.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: function providesTags(result, error, id) {\n            return [{\n              type: 'Automation',\n              id: id\n            }];\n          }\n        }),\n        /**\n         * Get public automations for gallery\n         */\n        getPublicAutomations: builder.query({\n          queryFn: function () {\n            var _queryFn3 = (0, _asyncToGenerator2.default)(function* (_ref4, _ref5) {\n              var _ref4$limit = _ref4.limit,\n                limit = _ref4$limit === void 0 ? 50 : _ref4$limit;\n              var signal = _ref5.signal;\n              try {\n                // Use network-aware wrapper to prevent calls when offline\n                var data = yield (0, _networkAwareApi.networkAwareQuery)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n                  var _yield$supabase$from$3 = yield _client.supabase.from('automations').select('*').eq('is_public', true).order('created_at', {\n                      ascending: false\n                    }).limit(limit).abortSignal(signal),\n                    data = _yield$supabase$from$3.data,\n                    error = _yield$supabase$from$3.error;\n                  if (error) {\n                    (0, _networkAwareApi.logApiError)(error, 'getPublicAutomations');\n                    throw error;\n                  }\n                  return data || [];\n                }), {\n                  offlineData: [] // Return empty array when offline\n                });\n                return {\n                  data: data\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n\n                // Check if it's an offline error\n                if (error.status === 'OFFLINE' || error.code === 'NETWORK_OFFLINE') {\n                  return {\n                    data: []\n                  }; // Return empty data instead of error for offline\n                }\n                (0, _networkAwareApi.logApiError)(error, 'getPublicAutomations');\n                return {\n                  error: {\n                    status: error.status || 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch public automations',\n                    code: error.code\n                  }\n                };\n              }\n            });\n            function queryFn(_x5, _x6) {\n              return _queryFn3.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: [{\n            type: 'Automation',\n            id: 'PUBLIC'\n          }]\n        }),\n        /**\n         * Create new automation\n         */\n        createAutomation: builder.mutation({\n          queryFn: function () {\n            var _queryFn4 = (0, _asyncToGenerator2.default)(function* (automation) {\n              try {\n                var _yield$supabase$auth$2 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$2.data.user;\n                if (!user) {\n                  return {\n                    error: {\n                      status: 'UNAUTHORIZED',\n                      message: 'Not authenticated'\n                    }\n                  };\n                }\n                var automationToInsert = {\n                  title: automation.title || 'Untitled Automation',\n                  description: automation.description || 'Created with builder',\n                  steps: automation.steps || [],\n                  created_by: user.id,\n                  category: automation.category || 'Productivity',\n                  is_public: automation.is_public || false,\n                  tags: automation.tags || ['custom']\n                };\n                var _yield$supabase$from$4 = yield _client.supabase.from('automations').insert(automationToInsert).select().single(),\n                  data = _yield$supabase$from$4.data,\n                  error = _yield$supabase$from$4.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error creating automation:', error);\n                  return {\n                    error: {\n                      status: 'CREATE_ERROR',\n                      message: error.message || 'Failed to create automation',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to create automation:', error);\n                return {\n                  error: {\n                    status: 'CREATE_ERROR',\n                    message: error.message || 'Failed to create automation'\n                  }\n                };\n              }\n            });\n            function queryFn(_x7) {\n              return _queryFn4.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: [{\n            type: 'Automation',\n            id: 'LIST'\n          }, {\n            type: 'User',\n            id: 'STATS'\n          }]\n        }),\n        /**\n         * Update automation\n         */\n        updateAutomation: builder.mutation({\n          queryFn: function () {\n            var _queryFn5 = (0, _asyncToGenerator2.default)(function* (_ref7) {\n              var id = _ref7.id,\n                updates = _ref7.updates;\n              try {\n                // Validate ID parameter\n                if (!id || id === 'undefined' || id === 'null') {\n                  _EventLogger.EventLogger.error('API', 'Invalid automation ID for update:', id);\n                  return {\n                    error: {\n                      status: 'INVALID_REQUEST',\n                      message: 'Invalid automation ID provided for update',\n                      code: 'INVALID_PARAMS'\n                    }\n                  };\n                }\n                var _yield$supabase$from$5 = yield _client.supabase.from('automations').update(updates).eq('id', id).select().single(),\n                  data = _yield$supabase$from$5.data,\n                  error = _yield$supabase$from$5.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error updating automation:', error);\n                  return {\n                    error: {\n                      status: 'UPDATE_ERROR',\n                      message: error.message || 'Failed to update automation',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to update automation:', error);\n                return {\n                  error: {\n                    status: 'UPDATE_ERROR',\n                    message: error.message || 'Failed to update automation'\n                  }\n                };\n              }\n            });\n            function queryFn(_x8) {\n              return _queryFn5.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: function invalidatesTags(result, error, _ref8) {\n            var id = _ref8.id;\n            return [{\n              type: 'Automation',\n              id: id\n            }, {\n              type: 'Automation',\n              id: 'LIST'\n            }, {\n              type: 'Automation',\n              id: 'PUBLIC'\n            }];\n          }\n        }),\n        /**\n         * Delete automation\n         */\n        deleteAutomation: builder.mutation({\n          queryFn: function () {\n            var _queryFn6 = (0, _asyncToGenerator2.default)(function* (id) {\n              try {\n                // Validate ID parameter\n                if (!id || id === 'undefined' || id === 'null') {\n                  _EventLogger.EventLogger.error('API', 'Invalid automation ID for deletion:', id);\n                  return {\n                    error: {\n                      status: 'INVALID_REQUEST',\n                      message: 'Invalid automation ID provided for deletion',\n                      code: 'INVALID_PARAMS'\n                    }\n                  };\n                }\n                var _yield$supabase$from$6 = yield _client.supabase.from('automations').delete().eq('id', id),\n                  error = _yield$supabase$from$6.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error deleting automation:', error);\n                  return {\n                    error: {\n                      status: 'DELETE_ERROR',\n                      message: error.message || 'Failed to delete automation',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: null\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to delete automation:', error);\n                return {\n                  error: {\n                    status: 'DELETE_ERROR',\n                    message: error.message || 'Failed to delete automation'\n                  }\n                };\n              }\n            });\n            function queryFn(_x9) {\n              return _queryFn6.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: function invalidatesTags(result, error, id) {\n            return [{\n              type: 'Automation',\n              id: id\n            }, {\n              type: 'Automation',\n              id: 'LIST'\n            }, {\n              type: 'User',\n              id: 'STATS'\n            }];\n          }\n        }),\n        /**\n         * Clone automation\n         */\n        cloneAutomation: builder.mutation({\n          queryFn: function () {\n            var _queryFn7 = (0, _asyncToGenerator2.default)(function* (automationId) {\n              try {\n                // Validate automationId parameter\n                if (!automationId || automationId === 'undefined' || automationId === 'null') {\n                  _EventLogger.EventLogger.error('API', 'Invalid automation ID for cloning:', automationId);\n                  return {\n                    error: {\n                      status: 'INVALID_REQUEST',\n                      message: 'Invalid automation ID provided for cloning',\n                      code: 'INVALID_PARAMS'\n                    }\n                  };\n                }\n                var _yield$supabase$auth$3 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$3.data.user;\n                if (!user) {\n                  return {\n                    error: {\n                      status: 'UNAUTHORIZED',\n                      message: 'Not authenticated'\n                    }\n                  };\n                }\n\n                // Get the automation to clone\n                var _yield$supabase$from$7 = yield _client.supabase.from('automations').select('*').eq('id', automationId).single(),\n                  originalAutomation = _yield$supabase$from$7.data,\n                  fetchError = _yield$supabase$from$7.error;\n                if (fetchError) {\n                  return {\n                    error: {\n                      status: fetchError.code === 'PGRST116' ? 'NOT_FOUND' : 'FETCH_ERROR',\n                      message: fetchError.code === 'PGRST116' ? 'Automation not found' : fetchError.message,\n                      code: fetchError.code\n                    }\n                  };\n                }\n\n                // Create a new automation with the same data\n                var _yield$supabase$from$8 = yield _client.supabase.from('automations').insert(Object.assign({}, originalAutomation, {\n                    id: undefined,\n                    title: `${originalAutomation.title} (Copy)`,\n                    created_by: user.id,\n                    created_at: undefined,\n                    updated_at: undefined,\n                    is_public: false,\n                    execution_count: 0,\n                    average_rating: null,\n                    rating_count: 0\n                  })).select().single(),\n                  data = _yield$supabase$from$8.data,\n                  error = _yield$supabase$from$8.error;\n                if (error) {\n                  return {\n                    error: {\n                      status: 'CREATE_ERROR',\n                      message: error.message || 'Failed to clone automation',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to clone automation:', error);\n                return {\n                  error: {\n                    status: 'CREATE_ERROR',\n                    message: error.message || 'Failed to clone automation'\n                  }\n                };\n              }\n            });\n            function queryFn(_x0) {\n              return _queryFn7.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: [{\n            type: 'Automation',\n            id: 'LIST'\n          }, {\n            type: 'User',\n            id: 'STATS'\n          }]\n        }),\n        // ===== USER STATISTICS =====\n\n        /**\n         * Get user statistics with fallback handling\n         */\n        getUserStats: builder.query({\n          queryFn: function () {\n            var _queryFn8 = (0, _asyncToGenerator2.default)(function* (_, _ref9) {\n              var signal = _ref9.signal;\n              try {\n                var _yield$supabase$auth$4 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$4.data.user;\n                if (!user) {\n                  return {\n                    data: {\n                      total_automations: 0,\n                      total_runs: 0,\n                      successful_runs: 0,\n                      failed_runs: 0,\n                      total_time_saved: 0\n                    }\n                  };\n                }\n\n                // Skip RPC function to avoid download_count error, use fallback directly\n                var _yield$supabase$from$9 = yield _client.supabase.from('automations').select('id').eq('created_by', user.id).abortSignal(signal),\n                  automations = _yield$supabase$from$9.data,\n                  countError = _yield$supabase$from$9.error;\n                if (countError) {\n                  _EventLogger.EventLogger.error('API', 'Failed to fetch automation count:', countError);\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: countError.message || 'Failed to fetch user statistics',\n                      code: countError.code\n                    }\n                  };\n                }\n                return {\n                  data: {\n                    total_automations: (automations == null ? void 0 : automations.length) || 0,\n                    total_runs: 0,\n                    successful_runs: 0,\n                    failed_runs: 0,\n                    total_time_saved: 0\n                  }\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch user stats:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch user statistics'\n                  }\n                };\n              }\n            });\n            function queryFn(_x1, _x10) {\n              return _queryFn8.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: [{\n            type: 'User',\n            id: 'STATS'\n          }]\n        }),\n        // ===== EXECUTION MANAGEMENT =====\n\n        /**\n         * Get recent executions\n         */\n        getRecentExecutions: builder.query({\n          queryFn: function () {\n            var _queryFn9 = (0, _asyncToGenerator2.default)(function* (_ref0, _ref1) {\n              var _ref0$limit = _ref0.limit,\n                limit = _ref0$limit === void 0 ? 10 : _ref0$limit;\n              var signal = _ref1.signal;\n              try {\n                var _yield$supabase$auth$5 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$5.data.user;\n                if (!user) {\n                  return {\n                    data: []\n                  };\n                }\n                var _yield$supabase$from$0 = yield _client.supabase.from('automation_executions').select('*').eq('user_id', user.id).order('created_at', {\n                    ascending: false\n                  }).limit(limit).abortSignal(signal),\n                  data = _yield$supabase$from$0.data,\n                  error = _yield$supabase$from$0.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error fetching recent executions:', error);\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: error.message || 'Failed to fetch recent executions',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data || []\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch recent executions:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch recent executions'\n                  }\n                };\n              }\n            });\n            function queryFn(_x11, _x12) {\n              return _queryFn9.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: [{\n            type: 'Execution',\n            id: 'RECENT'\n          }]\n        }),\n        /**\n         * Get automation executions\n         */\n        getAutomationExecutions: builder.query({\n          queryFn: function () {\n            var _queryFn0 = (0, _asyncToGenerator2.default)(function* (automationId, _ref10) {\n              var signal = _ref10.signal;\n              try {\n                // Validate automationId parameter\n                if (!automationId || automationId === 'undefined' || automationId === 'null') {\n                  _EventLogger.EventLogger.error('API', 'Invalid automation ID for executions:', automationId);\n                  return {\n                    error: {\n                      status: 'INVALID_REQUEST',\n                      message: 'Invalid automation ID provided for executions',\n                      code: 'INVALID_PARAMS'\n                    }\n                  };\n                }\n                var _yield$supabase$from$1 = yield _client.supabase.from('automation_executions').select('*').eq('automation_id', automationId).order('created_at', {\n                    ascending: false\n                  }).abortSignal(signal),\n                  data = _yield$supabase$from$1.data,\n                  error = _yield$supabase$from$1.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error fetching automation executions:', error);\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: error.message || 'Failed to fetch automation executions',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data || []\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch automation executions:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch automation executions'\n                  }\n                };\n              }\n            });\n            function queryFn(_x13, _x14) {\n              return _queryFn0.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: function providesTags(result, error, automationId) {\n            return [{\n              type: 'Execution',\n              id: automationId\n            }];\n          }\n        }),\n        /**\n         * Get execution history with enhanced data\n         */\n        getExecutionHistory: builder.query({\n          queryFn: function () {\n            var _queryFn1 = (0, _asyncToGenerator2.default)(function* (_ref11, _ref12) {\n              var _ref11$limit = _ref11.limit,\n                limit = _ref11$limit === void 0 ? 50 : _ref11$limit;\n              var signal = _ref12.signal;\n              try {\n                var _yield$supabase$auth$6 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$6.data.user;\n                if (!user) {\n                  return {\n                    data: []\n                  };\n                }\n                var _yield$supabase$from$10 = yield _client.supabase.from('automation_executions').select(`\n              *,\n              automation:automations(id, name, title)\n            `).eq('user_id', user.id).order('created_at', {\n                    ascending: false\n                  }).limit(limit).abortSignal(signal),\n                  data = _yield$supabase$from$10.data,\n                  error = _yield$supabase$from$10.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error fetching execution history:', error);\n                  return {\n                    error: {\n                      status: 'FETCH_ERROR',\n                      message: error.message || 'Failed to fetch execution history',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: data || []\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n                _EventLogger.EventLogger.error('API', 'Failed to fetch execution history:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch execution history'\n                  }\n                };\n              }\n            });\n            function queryFn(_x15, _x16) {\n              return _queryFn1.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: [{\n            type: 'Execution',\n            id: 'HISTORY'\n          }]\n        }),\n        /**\n         * Clear execution history\n         */\n        clearHistory: builder.mutation({\n          queryFn: function () {\n            var _queryFn10 = (0, _asyncToGenerator2.default)(function* () {\n              try {\n                var _yield$supabase$auth$7 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$7.data.user;\n                if (!user) {\n                  return {\n                    error: {\n                      status: 'UNAUTHORIZED',\n                      message: 'Not authenticated'\n                    }\n                  };\n                }\n                var _yield$supabase$from$11 = yield _client.supabase.from('automation_executions').delete().eq('user_id', user.id),\n                  error = _yield$supabase$from$11.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error clearing history:', error);\n                  return {\n                    error: {\n                      status: 'DELETE_ERROR',\n                      message: error.message || 'Failed to clear history',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: null\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to clear history:', error);\n                return {\n                  error: {\n                    status: 'DELETE_ERROR',\n                    message: error.message || 'Failed to clear history'\n                  }\n                };\n              }\n            });\n            function queryFn() {\n              return _queryFn10.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: [{\n            type: 'Execution',\n            id: 'RECENT'\n          }, {\n            type: 'Execution',\n            id: 'HISTORY'\n          }, {\n            type: 'User',\n            id: 'STATS'\n          }]\n        }),\n        // ===== TRENDING AND ENGAGEMENT =====\n\n        /**\n         * Get trending automations with fallback\n         */\n        getTrendingAutomations: builder.query({\n          queryFn: function () {\n            var _queryFn11 = (0, _asyncToGenerator2.default)(function* (_ref13, _ref14) {\n              var _ref13$limit = _ref13.limit,\n                limit = _ref13$limit === void 0 ? 10 : _ref13$limit,\n                _ref13$timeWindow = _ref13.timeWindow,\n                timeWindow = _ref13$timeWindow === void 0 ? '7 days' : _ref13$timeWindow;\n              var signal = _ref14.signal;\n              try {\n                // Use network-aware wrapper to prevent calls when offline\n                var data = yield (0, _networkAwareApi.networkAwareQuery)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n                  // Skip RPC function and use direct query to avoid download_count error\n                  var _yield$supabase$from$12 = yield _client.supabase.from('automations').select('*').eq('is_public', true).order('created_at', {\n                      ascending: false\n                    }).limit(limit).abortSignal(signal),\n                    fallbackData = _yield$supabase$from$12.data,\n                    fallbackError = _yield$supabase$from$12.error;\n                  if (fallbackError) {\n                    (0, _networkAwareApi.logApiError)(fallbackError, 'getTrendingAutomations');\n                    throw fallbackError;\n                  }\n                  return fallbackData || [];\n                }), {\n                  offlineData: [] // Return empty array when offline\n                });\n                return {\n                  data: data\n                };\n              } catch (error) {\n                if (error.name === 'AbortError') {\n                  return {\n                    error: {\n                      status: 'CANCELLED',\n                      message: 'Request cancelled'\n                    }\n                  };\n                }\n\n                // Check if it's an offline error\n                if (error.status === 'OFFLINE' || error.code === 'NETWORK_OFFLINE') {\n                  return {\n                    data: []\n                  }; // Return empty data instead of error for offline\n                }\n                (0, _networkAwareApi.logApiError)(error, 'getTrendingAutomations');\n                return {\n                  error: {\n                    status: error.status || 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch trending automations',\n                    code: error.code\n                  }\n                };\n              }\n            });\n            function queryFn(_x17, _x18) {\n              return _queryFn11.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          providesTags: [{\n            type: 'Automation',\n            id: 'TRENDING'\n          }]\n        }),\n        // ===== ENGAGEMENT ACTIONS =====\n\n        /**\n         * Like automation\n         */\n        likeAutomation: builder.mutation({\n          queryFn: function () {\n            var _queryFn12 = (0, _asyncToGenerator2.default)(function* (automationId) {\n              try {\n                var _yield$supabase$auth$8 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$8.data.user;\n                if (!user) {\n                  return {\n                    error: {\n                      status: 'UNAUTHORIZED',\n                      message: 'Not authenticated'\n                    }\n                  };\n                }\n                var _yield$supabase$from$13 = yield _client.supabase.from('automation_likes').insert({\n                    automation_id: automationId,\n                    user_id: user.id\n                  }),\n                  error = _yield$supabase$from$13.error;\n                if (error && !error.message.includes('duplicate')) {\n                  _EventLogger.EventLogger.error('API', 'Error liking automation:', error);\n                  return {\n                    error: {\n                      status: 'ACTION_ERROR',\n                      message: error.message || 'Failed to like automation',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: null\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to like automation:', error);\n                return {\n                  error: {\n                    status: 'ACTION_ERROR',\n                    message: error.message || 'Failed to like automation'\n                  }\n                };\n              }\n            });\n            function queryFn(_x19) {\n              return _queryFn12.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: function invalidatesTags(result, error, automationId) {\n            return [{\n              type: 'Automation',\n              id: automationId\n            }, {\n              type: 'Automation',\n              id: 'LIST'\n            }, {\n              type: 'Automation',\n              id: 'PUBLIC'\n            }];\n          }\n        }),\n        /**\n         * Unlike automation\n         */\n        unlikeAutomation: builder.mutation({\n          queryFn: function () {\n            var _queryFn13 = (0, _asyncToGenerator2.default)(function* (automationId) {\n              try {\n                var _yield$supabase$auth$9 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$9.data.user;\n                if (!user) {\n                  return {\n                    error: {\n                      status: 'UNAUTHORIZED',\n                      message: 'Not authenticated'\n                    }\n                  };\n                }\n                var _yield$supabase$from$14 = yield _client.supabase.from('automation_likes').delete().match({\n                    automation_id: automationId,\n                    user_id: user.id\n                  }),\n                  error = _yield$supabase$from$14.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('API', 'Error unliking automation:', error);\n                  return {\n                    error: {\n                      status: 'ACTION_ERROR',\n                      message: error.message || 'Failed to unlike automation',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: null\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to unlike automation:', error);\n                return {\n                  error: {\n                    status: 'ACTION_ERROR',\n                    message: error.message || 'Failed to unlike automation'\n                  }\n                };\n              }\n            });\n            function queryFn(_x20) {\n              return _queryFn13.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: function invalidatesTags(result, error, automationId) {\n            return [{\n              type: 'Automation',\n              id: automationId\n            }, {\n              type: 'Automation',\n              id: 'LIST'\n            }, {\n              type: 'Automation',\n              id: 'PUBLIC'\n            }];\n          }\n        }),\n        /**\n         * Track automation download/clone\n         */\n        trackAutomationDownload: builder.mutation({\n          queryFn: function () {\n            var _queryFn14 = (0, _asyncToGenerator2.default)(function* (automationId) {\n              try {\n                var _yield$supabase$auth$0 = yield _client.supabase.auth.getUser(),\n                  user = _yield$supabase$auth$0.data.user;\n                if (!user) {\n                  return {\n                    error: {\n                      status: 'UNAUTHORIZED',\n                      message: 'Not authenticated'\n                    }\n                  };\n                }\n\n                // Insert a download/clone tracking record\n                var _yield$supabase$from$15 = yield _client.supabase.from('automation_downloads').insert({\n                    automation_id: automationId,\n                    user_id: user.id,\n                    download_type: 'clone'\n                  }),\n                  error = _yield$supabase$from$15.error;\n                if (error && !error.message.includes('duplicate')) {\n                  _EventLogger.EventLogger.error('API', 'Error tracking download:', error);\n                  return {\n                    error: {\n                      status: 'ACTION_ERROR',\n                      message: error.message || 'Failed to track download',\n                      code: error.code\n                    }\n                  };\n                }\n                return {\n                  data: null\n                };\n              } catch (error) {\n                _EventLogger.EventLogger.error('API', 'Failed to track download:', error);\n                return {\n                  error: {\n                    status: 'ACTION_ERROR',\n                    message: error.message || 'Failed to track download'\n                  }\n                };\n              }\n            });\n            function queryFn(_x21) {\n              return _queryFn14.apply(this, arguments);\n            }\n            return queryFn;\n          }(),\n          invalidatesTags: function invalidatesTags(result, error, automationId) {\n            return [{\n              type: 'Automation',\n              id: automationId\n            }, {\n              type: 'Automation',\n              id: 'LIST'\n            }, {\n              type: 'Automation',\n              id: 'PUBLIC'\n            }];\n          }\n        })\n      };\n    }\n  }));\n\n  // Export hooks\n  var useGetMyAutomationsQuery = exports.useGetMyAutomationsQuery = automationApi.useGetMyAutomationsQuery,\n    useGetAutomationQuery = exports.useGetAutomationQuery = automationApi.useGetAutomationQuery,\n    useGetPublicAutomationsQuery = exports.useGetPublicAutomationsQuery = automationApi.useGetPublicAutomationsQuery,\n    useCreateAutomationMutation = exports.useCreateAutomationMutation = automationApi.useCreateAutomationMutation,\n    useUpdateAutomationMutation = exports.useUpdateAutomationMutation = automationApi.useUpdateAutomationMutation,\n    useDeleteAutomationMutation = exports.useDeleteAutomationMutation = automationApi.useDeleteAutomationMutation,\n    useCloneAutomationMutation = exports.useCloneAutomationMutation = automationApi.useCloneAutomationMutation,\n    useGetUserStatsQuery = exports.useGetUserStatsQuery = automationApi.useGetUserStatsQuery,\n    useGetRecentExecutionsQuery = exports.useGetRecentExecutionsQuery = automationApi.useGetRecentExecutionsQuery,\n    useGetAutomationExecutionsQuery = exports.useGetAutomationExecutionsQuery = automationApi.useGetAutomationExecutionsQuery,\n    useGetExecutionHistoryQuery = exports.useGetExecutionHistoryQuery = automationApi.useGetExecutionHistoryQuery,\n    useClearHistoryMutation = exports.useClearHistoryMutation = automationApi.useClearHistoryMutation,\n    useGetTrendingAutomationsQuery = exports.useGetTrendingAutomationsQuery = automationApi.useGetTrendingAutomationsQuery,\n    useLikeAutomationMutation = exports.useLikeAutomationMutation = automationApi.useLikeAutomationMutation,\n    useUnlikeAutomationMutation = exports.useUnlikeAutomationMutation = automationApi.useUnlikeAutomationMutation,\n    useTrackAutomationDownloadMutation = exports.useTrackAutomationDownloadMutation = automationApi.useTrackAutomationDownloadMutation;\n});","lineCount":1156,"map":[[9,2,8,0],[9,6,8,0,"_react"],[9,12,8,0],[9,15,8,0,"require"],[9,22,8,0],[9,23,8,0,"_dependencyMap"],[9,37,8,0],[10,2,9,0],[10,6,9,0,"_client"],[10,13,9,0],[10,16,9,0,"require"],[10,23,9,0],[10,24,9,0,"_dependencyMap"],[10,38,9,0],[11,2,11,0],[11,6,11,0,"_baseApi"],[11,14,11,0],[11,17,11,0,"require"],[11,24,11,0],[11,25,11,0,"_dependencyMap"],[11,39,11,0],[12,2,12,0],[12,6,12,0,"_networkAwareApi"],[12,22,12,0],[12,25,12,0,"require"],[12,32,12,0],[12,33,12,0,"_dependencyMap"],[12,47,12,0],[13,2,13,0],[13,6,13,0,"_EventLogger"],[13,18,13,0],[13,21,13,0,"require"],[13,28,13,0],[13,29,13,0,"_dependencyMap"],[13,43,13,0],[14,2,1,0],[15,0,2,0],[16,0,3,0],[17,0,4,0],[18,0,5,0],[19,0,6,0],[21,2,15,0],[22,0,16,0],[23,0,17,0],[24,2,18,7],[24,6,18,13,"automationApi"],[24,19,18,26],[24,22,18,26,"exports"],[24,29,18,26],[24,30,18,26,"automationApi"],[24,43,18,26],[24,46,18,29],[24,50,18,29,"createApi"],[24,66,18,38],[24,68,18,38,"Object"],[24,74,18,38],[24,75,18,38,"assign"],[24,81,18,38],[25,4,19,2,"reducerPath"],[25,15,19,13],[25,17,19,15],[26,2,19,30],[26,5,20,5,"baseApiConfig"],[26,27,20,18],[27,4,21,2,"tagTypes"],[27,12,21,10],[27,14,21,12],[27,15,21,13],[27,27,21,25],[27,29,21,27],[27,35,21,33],[27,37,21,35],[27,48,21,46],[27,49,21,47],[28,4,22,2,"endpoints"],[28,13,22,11],[28,15,22,13],[28,24,22,2,"endpoints"],[28,33,22,11,"endpoints"],[28,34,22,14,"builder"],[28,41,22,21],[29,6,22,21],[29,13,22,27],[30,8,23,4],[32,8,25,4],[33,0,26,0],[34,0,27,0],[35,8,28,4,"getMyAutomations"],[35,24,28,20],[35,26,28,22,"builder"],[35,33,28,29],[35,34,28,30,"query"],[35,39,28,35],[35,40,28,60],[36,10,29,6,"queryFn"],[36,17,29,13],[37,12,29,13],[37,16,29,13,"_queryFn"],[37,24,29,13],[37,31,29,13,"_asyncToGenerator2"],[37,49,29,13],[37,50,29,13,"default"],[37,57,29,13],[37,59,29,15],[37,70,29,22,"_"],[37,71,29,23],[37,73,29,23,"_ref"],[37,77,29,23],[37,79,29,40],[38,14,29,40],[38,18,29,27,"signal"],[38,24,29,33],[38,27,29,33,"_ref"],[38,31,29,33],[38,32,29,27,"signal"],[38,38,29,33],[39,14,30,8],[39,18,30,12],[40,16,31,10],[40,20,31,10,"_yield$supabase$auth$"],[40,41,31,10],[40,50,31,43,"supabase"],[40,66,31,51],[40,67,31,52,"auth"],[40,71,31,56],[40,72,31,57,"getUser"],[40,79,31,64],[40,80,31,65],[40,81,31,66],[41,18,31,26,"user"],[41,22,31,30],[41,25,31,30,"_yield$supabase$auth$"],[41,46,31,30],[41,47,31,18,"data"],[41,51,31,22],[41,52,31,26,"user"],[41,56,31,30],[42,16,33,10],[42,20,33,14],[42,21,33,15,"user"],[42,25,33,19],[42,27,33,21],[43,18,34,12],[43,25,34,19],[44,20,34,21,"data"],[44,24,34,25],[44,26,34,27],[45,18,34,30],[45,19,34,31],[46,16,35,10],[47,16,37,10],[47,20,37,10,"_yield$supabase$from$"],[47,41,37,10],[47,50,37,40,"supabase"],[47,66,37,48],[47,67,38,13,"from"],[47,71,38,17],[47,72,38,18],[47,85,38,31],[47,86,38,32],[47,87,39,13,"select"],[47,93,39,19],[47,94,39,20],[47,97,39,23],[47,98,39,24],[47,99,40,13,"eq"],[47,101,40,15],[47,102,40,16],[47,114,40,28],[47,116,40,30,"user"],[47,120,40,34],[47,121,40,35,"id"],[47,123,40,37],[47,124,40,38],[47,125,41,13,"order"],[47,130,41,18],[47,131,41,19],[47,143,41,31],[47,145,41,33],[48,20,41,35,"ascending"],[48,29,41,44],[48,31,41,46],[49,18,41,52],[49,19,41,53],[49,20,41,54],[49,21,42,13,"abortSignal"],[49,32,42,24],[49,33,42,25,"signal"],[49,39,42,31],[49,40,42,32],[50,18,37,18,"data"],[50,22,37,22],[50,25,37,22,"_yield$supabase$from$"],[50,46,37,22],[50,47,37,18,"data"],[50,51,37,22],[51,18,37,24,"error"],[51,23,37,29],[51,26,37,29,"_yield$supabase$from$"],[51,47,37,29],[51,48,37,24,"error"],[51,53,37,29],[52,16,44,10],[52,20,44,14,"error"],[52,25,44,19],[52,27,44,21],[53,18,45,12,"EventLogger"],[53,42,45,23],[53,43,45,24,"error"],[53,48,45,29],[53,49,45,30],[53,54,45,35],[53,56,45,37],[53,90,45,71],[53,92,45,73,"error"],[53,97,45,87],[53,98,45,88],[54,18,46,12],[54,25,46,19],[55,20,47,14,"error"],[55,25,47,19],[55,27,47,21],[56,22,48,16,"status"],[56,28,48,22],[56,30,48,24],[56,43,48,37],[57,22,49,16,"message"],[57,29,49,23],[57,31,49,25,"error"],[57,36,49,30],[57,37,49,31,"message"],[57,44,49,38],[57,48,49,42],[57,77,49,71],[58,22,50,16,"code"],[58,26,50,20],[58,28,50,22,"error"],[58,33,50,27],[58,34,50,28,"code"],[59,20,51,14],[60,18,52,12],[60,19,52,13],[61,16,53,10],[62,16,55,10],[62,23,55,17],[63,18,55,19,"data"],[63,22,55,23],[63,24,55,25,"data"],[63,28,55,29],[63,32,55,33],[64,16,55,36],[64,17,55,37],[65,14,56,8],[65,15,56,9],[65,16,56,10],[65,23,56,17,"error"],[65,28,56,27],[65,30,56,29],[66,16,57,10],[66,20,57,14,"error"],[66,25,57,19],[66,26,57,20,"name"],[66,30,57,24],[66,35,57,29],[66,47,57,41],[66,49,57,43],[67,18,58,12],[67,25,58,19],[68,20,58,21,"error"],[68,25,58,26],[68,27,58,28],[69,22,58,30,"status"],[69,28,58,36],[69,30,58,38],[69,41,58,49],[70,22,58,51,"message"],[70,29,58,58],[70,31,58,60],[71,20,58,80],[72,18,58,82],[72,19,58,83],[73,16,59,10],[74,16,61,10,"EventLogger"],[74,40,61,21],[74,41,61,22,"error"],[74,46,61,27],[74,47,61,28],[74,52,61,33],[74,54,61,35],[74,89,61,70],[74,91,61,72,"error"],[74,96,61,86],[74,97,61,87],[75,16,62,10],[75,23,62,17],[76,18,63,12,"error"],[76,23,63,17],[76,25,63,19],[77,20,64,14,"status"],[77,26,64,20],[77,28,64,22],[77,41,64,35],[78,20,65,14,"message"],[78,27,65,21],[78,29,65,23,"error"],[78,34,65,28],[78,35,65,29,"message"],[78,42,65,36],[78,46,65,40],[79,18,66,12],[80,16,67,10],[80,17,67,11],[81,14,68,8],[82,12,69,6],[82,13,69,7],[83,12,69,7],[83,21,29,6,"queryFn"],[83,28,29,13,"queryFn"],[83,29,29,13,"_x"],[83,31,29,13],[83,33,29,13,"_x2"],[83,36,29,13],[84,14,29,13],[84,21,29,13,"_queryFn"],[84,29,29,13],[84,30,29,13,"apply"],[84,35,29,13],[84,42,29,13,"arguments"],[84,51,29,13],[85,12,29,13],[86,12,29,13],[86,19,29,6,"queryFn"],[86,26,29,13],[87,10,29,13],[87,13,69,7],[88,10,70,6,"providesTags"],[88,22,70,18],[88,24,70,20],[88,33,70,6,"providesTags"],[88,45,70,18,"providesTags"],[88,46,70,21,"result"],[88,52,70,27],[89,12,70,27],[89,19,71,8,"result"],[89,25,71,14],[89,31,71,14,"concat"],[89,37,71,14],[89,42,71,14,"_toConsumableArray2"],[89,61,71,14],[89,62,71,14,"default"],[89,69,71,14],[89,71,72,16,"result"],[89,77,72,22],[89,78,72,23,"map"],[89,81,72,26],[89,82,72,27],[89,92,72,27,"_ref2"],[89,97,72,27],[90,14,72,27],[90,18,72,30,"id"],[90,20,72,32],[90,23,72,32,"_ref2"],[90,28,72,32],[90,29,72,30,"id"],[90,31,72,32],[91,14,72,32],[91,21,72,40],[92,16,72,42,"type"],[92,20,72,46],[92,22,72,48],[92,34,72,69],[93,16,72,71,"id"],[93,18,72,73],[93,20,72,71,"id"],[94,14,72,74],[94,15,72,75],[95,12,72,75],[95,13,72,76],[95,14,72,77],[95,18,72,79],[96,14,72,81,"type"],[96,18,72,85],[96,20,72,87],[96,32,72,99],[97,14,72,101,"id"],[97,16,72,103],[97,18,72,105],[98,12,72,112],[98,13,72,113],[98,18,73,12],[98,19,73,13],[99,14,73,15,"type"],[99,18,73,19],[99,20,73,21],[99,32,73,33],[100,14,73,35,"id"],[100,16,73,37],[100,18,73,39],[101,12,73,46],[101,13,73,47],[101,14,73,48],[102,10,73,48],[103,8,74,4],[103,9,74,5],[103,10,74,6],[104,8,76,4],[105,0,77,0],[106,0,78,0],[107,8,79,4,"getAutomation"],[107,21,79,17],[107,23,79,19,"builder"],[107,30,79,26],[107,31,79,27,"query"],[107,36,79,32],[107,37,79,57],[108,10,80,6,"queryFn"],[108,17,80,13],[109,12,80,13],[109,16,80,13,"_queryFn2"],[109,25,80,13],[109,32,80,13,"_asyncToGenerator2"],[109,50,80,13],[109,51,80,13,"default"],[109,58,80,13],[109,60,80,15],[109,71,80,22,"id"],[109,73,80,24],[109,75,80,24,"_ref3"],[109,80,80,24],[109,82,80,41],[110,14,80,41],[110,18,80,28,"signal"],[110,24,80,34],[110,27,80,34,"_ref3"],[110,32,80,34],[110,33,80,28,"signal"],[110,39,80,34],[111,14,81,8],[111,18,81,12],[112,16,82,10],[113,16,83,10],[113,20,83,14],[113,21,83,15,"id"],[113,23,83,17],[113,27,83,21],[113,34,83,28,"id"],[113,36,83,30],[113,41,83,35],[113,49,83,43],[113,51,83,45],[114,18,84,12,"EventLogger"],[114,42,84,23],[114,43,84,24,"error"],[114,48,84,29],[114,49,84,30],[114,54,84,35],[114,56,84,37],[114,89,84,70],[114,91,84,72,"id"],[114,93,84,83],[114,94,84,84],[115,18,85,12],[115,25,85,19],[116,20,86,14,"error"],[116,25,86,19],[116,27,86,21],[117,22,87,16,"status"],[117,28,87,22],[117,30,87,24],[117,47,87,41],[118,22,88,16,"message"],[118,29,88,23],[118,31,88,25],[118,63,88,57],[119,22,89,16,"code"],[119,26,89,20],[119,28,89,22],[120,20,90,14],[121,18,91,12],[121,19,91,13],[122,16,92,10],[124,16,94,10],[125,16,95,10],[125,20,95,14,"id"],[125,22,95,16],[125,27,95,21],[125,38,95,32],[125,42,95,36,"id"],[125,44,95,38],[125,49,95,43],[125,55,95,49],[125,59,95,53,"id"],[125,61,95,55],[125,66,95,60],[125,68,95,62],[125,70,95,64],[126,18,96,12,"EventLogger"],[126,42,96,23],[126,43,96,24,"error"],[126,48,96,29],[126,49,96,30],[126,54,96,35],[126,56,96,37],[126,86,96,67],[126,88,96,69,"id"],[126,90,96,80],[126,91,96,81],[127,18,97,12],[127,25,97,19],[128,20,98,14,"error"],[128,25,98,19],[128,27,98,21],[129,22,99,16,"status"],[129,28,99,22],[129,30,99,24],[129,47,99,41],[130,22,100,16,"message"],[130,29,100,23],[130,31,100,25],[130,58,100,52,"id"],[130,60,100,54],[130,63,100,57],[131,22,101,16,"code"],[131,26,101,20],[131,28,101,22],[132,20,102,14],[133,18,103,12],[133,19,103,13],[134,16,104,10],[136,16,106,10],[137,16,107,10],[137,20,107,16,"uuidRegex"],[137,29,107,25],[137,32,107,28],[137,97,107,93],[138,16,108,10],[138,20,108,14],[138,21,108,15,"uuidRegex"],[138,30,108,24],[138,31,108,25,"test"],[138,35,108,29],[138,36,108,30,"id"],[138,38,108,32],[138,39,108,33],[138,41,108,35],[139,18,109,12,"EventLogger"],[139,42,109,23],[139,43,109,24,"error"],[139,48,109,29],[139,49,109,30],[139,54,109,35],[139,56,109,37],[139,78,109,59],[139,80,109,61,"id"],[139,82,109,72],[139,83,109,73],[140,18,110,12],[140,25,110,19],[141,20,111,14,"error"],[141,25,111,19],[141,27,111,21],[142,22,112,16,"status"],[142,28,112,22],[142,30,112,24],[142,47,112,41],[143,22,113,16,"message"],[143,29,113,23],[143,31,113,25],[143,55,113,49,"id"],[143,57,113,51],[143,59,113,53],[144,22,114,16,"code"],[144,26,114,20],[144,28,114,22],[145,20,115,14],[146,18,116,12],[146,19,116,13],[147,16,117,10],[148,16,119,10],[148,20,119,10,"_yield$supabase$from$2"],[148,42,119,10],[148,51,119,40,"supabase"],[148,67,119,48],[148,68,120,13,"from"],[148,72,120,17],[148,73,120,18],[148,86,120,31],[148,87,120,32],[148,88,121,13,"select"],[148,94,121,19],[148,95,121,20],[148,98,121,23],[148,99,121,24],[148,100,122,13,"eq"],[148,102,122,15],[148,103,122,16],[148,107,122,20],[148,109,122,22,"id"],[148,111,122,24],[148,112,122,25],[148,113,123,13,"single"],[148,119,123,19],[148,120,123,20],[148,121,123,21],[148,122,124,13,"abortSignal"],[148,133,124,24],[148,134,124,25,"signal"],[148,140,124,31],[148,141,124,32],[149,18,119,18,"data"],[149,22,119,22],[149,25,119,22,"_yield$supabase$from$2"],[149,47,119,22],[149,48,119,18,"data"],[149,52,119,22],[150,18,119,24,"error"],[150,23,119,29],[150,26,119,29,"_yield$supabase$from$2"],[150,48,119,29],[150,49,119,24,"error"],[150,54,119,29],[151,16,126,10],[151,20,126,14,"error"],[151,25,126,19],[151,27,126,21],[152,18,127,12,"EventLogger"],[152,42,127,23],[152,43,127,24,"error"],[152,48,127,29],[152,49,127,30],[152,54,127,35],[152,56,127,37],[152,84,127,65],[152,86,127,67,"error"],[152,91,127,81],[152,92,127,82],[153,18,128,12],[153,25,128,19],[154,20,129,14,"error"],[154,25,129,19],[154,27,129,21],[155,22,130,16,"status"],[155,28,130,22],[155,30,130,24,"error"],[155,35,130,29],[155,36,130,30,"code"],[155,40,130,34],[155,45,130,39],[155,55,130,49],[155,58,130,52],[155,69,130,63],[155,72,130,66],[155,85,130,79],[156,22,131,16,"message"],[156,29,131,23],[156,31,131,25,"error"],[156,36,131,30],[156,37,131,31,"code"],[156,41,131,35],[156,46,131,40],[156,56,131,50],[156,59,131,53],[156,81,131,75],[156,84,131,78,"error"],[156,89,131,83],[156,90,131,84,"message"],[156,97,131,91],[157,22,132,16,"code"],[157,26,132,20],[157,28,132,22,"error"],[157,33,132,27],[157,34,132,28,"code"],[158,20,133,14],[159,18,134,12],[159,19,134,13],[160,16,135,10],[161,16,137,10],[161,23,137,17],[162,18,137,19,"data"],[162,22,137,23],[162,24,137,19,"data"],[163,16,137,24],[163,17,137,25],[164,14,138,8],[164,15,138,9],[164,16,138,10],[164,23,138,17,"error"],[164,28,138,27],[164,30,138,29],[165,16,139,10],[165,20,139,14,"error"],[165,25,139,19],[165,26,139,20,"name"],[165,30,139,24],[165,35,139,29],[165,47,139,41],[165,49,139,43],[166,18,140,12],[166,25,140,19],[167,20,140,21,"error"],[167,25,140,26],[167,27,140,28],[168,22,140,30,"status"],[168,28,140,36],[168,30,140,38],[168,41,140,49],[169,22,140,51,"message"],[169,29,140,58],[169,31,140,60],[170,20,140,80],[171,18,140,82],[171,19,140,83],[172,16,141,10],[173,16,143,10,"EventLogger"],[173,40,143,21],[173,41,143,22,"error"],[173,46,143,27],[173,47,143,28],[173,52,143,33],[173,54,143,35],[173,83,143,64],[173,85,143,66,"error"],[173,90,143,80],[173,91,143,81],[174,16,144,10],[174,23,144,17],[175,18,145,12,"error"],[175,23,145,17],[175,25,145,19],[176,20,146,14,"status"],[176,26,146,20],[176,28,146,22],[176,41,146,35],[177,20,147,14,"message"],[177,27,147,21],[177,29,147,23,"error"],[177,34,147,28],[177,35,147,29,"message"],[177,42,147,36],[177,46,147,40],[178,18,148,12],[179,16,149,10],[179,17,149,11],[180,14,150,8],[181,12,151,6],[181,13,151,7],[182,12,151,7],[182,21,80,6,"queryFn"],[182,28,80,13,"queryFn"],[182,29,80,13,"_x3"],[182,32,80,13],[182,34,80,13,"_x4"],[182,37,80,13],[183,14,80,13],[183,21,80,13,"_queryFn2"],[183,30,80,13],[183,31,80,13,"apply"],[183,36,80,13],[183,43,80,13,"arguments"],[183,52,80,13],[184,12,80,13],[185,12,80,13],[185,19,80,6,"queryFn"],[185,26,80,13],[186,10,80,13],[186,13,151,7],[187,10,152,6,"providesTags"],[187,22,152,18],[187,24,152,20],[187,33,152,6,"providesTags"],[187,45,152,18,"providesTags"],[187,46,152,21,"result"],[187,52,152,27],[187,54,152,29,"error"],[187,59,152,34],[187,61,152,36,"id"],[187,63,152,38],[188,12,152,38],[188,19,152,43],[188,20,152,44],[189,14,152,46,"type"],[189,18,152,50],[189,20,152,52],[189,32,152,64],[190,14,152,66,"id"],[190,16,152,68],[190,18,152,66,"id"],[191,12,152,69],[191,13,152,70],[191,14,152,71],[192,10,152,71],[193,8,153,4],[193,9,153,5],[193,10,153,6],[194,8,155,4],[195,0,156,0],[196,0,157,0],[197,8,158,4,"getPublicAutomations"],[197,28,158,24],[197,30,158,26,"builder"],[197,37,158,33],[197,38,158,34,"query"],[197,43,158,39],[197,44,158,78],[198,10,159,6,"queryFn"],[198,17,159,13],[199,12,159,13],[199,16,159,13,"_queryFn3"],[199,25,159,13],[199,32,159,13,"_asyncToGenerator2"],[199,50,159,13],[199,51,159,13,"default"],[199,58,159,13],[199,60,159,15],[199,71,159,15,"_ref4"],[199,76,159,15],[199,78,159,15,"_ref5"],[199,83,159,15],[199,85,159,53],[200,14,159,53],[200,18,159,53,"_ref4$limit"],[200,29,159,53],[200,32,159,53,"_ref4"],[200,37,159,53],[200,38,159,24,"limit"],[200,43,159,29],[201,16,159,24,"limit"],[201,21,159,29],[201,24,159,29,"_ref4$limit"],[201,35,159,29],[201,49,159,32],[201,51,159,34],[201,54,159,34,"_ref4$limit"],[201,65,159,34],[202,14,159,34],[202,18,159,40,"signal"],[202,24,159,46],[202,27,159,46,"_ref5"],[202,32,159,46],[202,33,159,40,"signal"],[202,39,159,46],[203,14,160,8],[203,18,160,12],[204,16,161,10],[205,16,162,10],[205,20,162,16,"data"],[205,24,162,20],[205,33,162,29],[205,37,162,29,"networkAwareQuery"],[205,71,162,46],[205,90,162,46,"_asyncToGenerator2"],[205,108,162,46],[205,109,162,46,"default"],[205,116,162,46],[205,118,163,12],[205,131,163,24],[206,18,164,14],[206,22,164,14,"_yield$supabase$from$3"],[206,44,164,14],[206,53,164,44,"supabase"],[206,69,164,52],[206,70,165,17,"from"],[206,74,165,21],[206,75,165,22],[206,88,165,35],[206,89,165,36],[206,90,166,17,"select"],[206,96,166,23],[206,97,166,24],[206,100,166,27],[206,101,166,28],[206,102,167,17,"eq"],[206,104,167,19],[206,105,167,20],[206,116,167,31],[206,118,167,33],[206,122,167,37],[206,123,167,38],[206,124,168,17,"order"],[206,129,168,22],[206,130,168,23],[206,142,168,35],[206,144,168,37],[207,22,168,39,"ascending"],[207,31,168,48],[207,33,168,50],[208,20,168,56],[208,21,168,57],[208,22,168,58],[208,23,169,17,"limit"],[208,28,169,22],[208,29,169,23,"limit"],[208,34,169,28],[208,35,169,29],[208,36,170,17,"abortSignal"],[208,47,170,28],[208,48,170,29,"signal"],[208,54,170,35],[208,55,170,36],[209,20,164,22,"data"],[209,24,164,26],[209,27,164,26,"_yield$supabase$from$3"],[209,49,164,26],[209,50,164,22,"data"],[209,54,164,26],[210,20,164,28,"error"],[210,25,164,33],[210,28,164,33,"_yield$supabase$from$3"],[210,50,164,33],[210,51,164,28,"error"],[210,56,164,33],[211,18,172,14],[211,22,172,18,"error"],[211,27,172,23],[211,29,172,25],[212,20,173,16],[212,24,173,16,"logApiError"],[212,52,173,27],[212,54,173,28,"error"],[212,59,173,33],[212,61,173,35],[212,83,173,57],[212,84,173,58],[213,20,174,16],[213,26,174,22,"error"],[213,31,174,27],[214,18,175,14],[215,18,177,14],[215,25,177,21,"data"],[215,29,177,25],[215,33,177,29],[215,35,177,31],[216,16,178,12],[216,17,178,13],[216,20,179,12],[217,18,180,14,"offlineData"],[217,29,180,25],[217,31,180,27],[217,33,180,29],[217,34,180,31],[218,16,181,12],[218,17,182,10],[218,18,182,11],[219,16,184,10],[219,23,184,17],[220,18,184,19,"data"],[220,22,184,23],[220,24,184,19,"data"],[221,16,184,24],[221,17,184,25],[222,14,185,8],[222,15,185,9],[222,16,185,10],[222,23,185,17,"error"],[222,28,185,27],[222,30,185,29],[223,16,186,10],[223,20,186,14,"error"],[223,25,186,19],[223,26,186,20,"name"],[223,30,186,24],[223,35,186,29],[223,47,186,41],[223,49,186,43],[224,18,187,12],[224,25,187,19],[225,20,187,21,"error"],[225,25,187,26],[225,27,187,28],[226,22,187,30,"status"],[226,28,187,36],[226,30,187,38],[226,41,187,49],[227,22,187,51,"message"],[227,29,187,58],[227,31,187,60],[228,20,187,80],[229,18,187,82],[229,19,187,83],[230,16,188,10],[232,16,190,10],[233,16,191,10],[233,20,191,14,"error"],[233,25,191,19],[233,26,191,20,"status"],[233,32,191,26],[233,37,191,31],[233,46,191,40],[233,50,191,44,"error"],[233,55,191,49],[233,56,191,50,"code"],[233,60,191,54],[233,65,191,59],[233,82,191,76],[233,84,191,78],[234,18,192,12],[234,25,192,19],[235,20,192,21,"data"],[235,24,192,25],[235,26,192,27],[236,18,192,30],[236,19,192,31],[236,20,192,32],[236,21,192,33],[237,16,193,10],[238,16,195,10],[238,20,195,10,"logApiError"],[238,48,195,21],[238,50,195,22,"error"],[238,55,195,27],[238,57,195,29],[238,79,195,51],[238,80,195,52],[239,16,196,10],[239,23,196,17],[240,18,197,12,"error"],[240,23,197,17],[240,25,197,19],[241,20,198,14,"status"],[241,26,198,20],[241,28,198,22,"error"],[241,33,198,27],[241,34,198,28,"status"],[241,40,198,34],[241,44,198,38],[241,57,198,51],[242,20,199,14,"message"],[242,27,199,21],[242,29,199,23,"error"],[242,34,199,28],[242,35,199,29,"message"],[242,42,199,36],[242,46,199,40],[242,82,199,76],[243,20,200,14,"code"],[243,24,200,18],[243,26,200,20,"error"],[243,31,200,25],[243,32,200,26,"code"],[244,18,201,12],[245,16,202,10],[245,17,202,11],[246,14,203,8],[247,12,204,6],[247,13,204,7],[248,12,204,7],[248,21,159,6,"queryFn"],[248,28,159,13,"queryFn"],[248,29,159,13,"_x5"],[248,32,159,13],[248,34,159,13,"_x6"],[248,37,159,13],[249,14,159,13],[249,21,159,13,"_queryFn3"],[249,30,159,13],[249,31,159,13,"apply"],[249,36,159,13],[249,43,159,13,"arguments"],[249,52,159,13],[250,12,159,13],[251,12,159,13],[251,19,159,6,"queryFn"],[251,26,159,13],[252,10,159,13],[252,13,204,7],[253,10,205,6,"providesTags"],[253,22,205,18],[253,24,205,20],[253,25,205,21],[254,12,205,23,"type"],[254,16,205,27],[254,18,205,29],[254,30,205,41],[255,12,205,43,"id"],[255,14,205,45],[255,16,205,47],[256,10,205,56],[256,11,205,57],[257,8,206,4],[257,9,206,5],[257,10,206,6],[258,8,208,4],[259,0,209,0],[260,0,210,0],[261,8,211,4,"createAutomation"],[261,24,211,20],[261,26,211,22,"builder"],[261,33,211,29],[261,34,211,30,"mutation"],[261,42,211,38],[261,43,211,80],[262,10,212,6,"queryFn"],[262,17,212,13],[263,12,212,13],[263,16,212,13,"_queryFn4"],[263,25,212,13],[263,32,212,13,"_asyncToGenerator2"],[263,50,212,13],[263,51,212,13,"default"],[263,58,212,13],[263,60,212,15],[263,71,212,22,"automation"],[263,81,212,32],[263,83,212,37],[264,14,213,8],[264,18,213,12],[265,16,214,10],[265,20,214,10,"_yield$supabase$auth$2"],[265,42,214,10],[265,51,214,43,"supabase"],[265,67,214,51],[265,68,214,52,"auth"],[265,72,214,56],[265,73,214,57,"getUser"],[265,80,214,64],[265,81,214,65],[265,82,214,66],[266,18,214,26,"user"],[266,22,214,30],[266,25,214,30,"_yield$supabase$auth$2"],[266,47,214,30],[266,48,214,18,"data"],[266,52,214,22],[266,53,214,26,"user"],[266,57,214,30],[267,16,216,10],[267,20,216,14],[267,21,216,15,"user"],[267,25,216,19],[267,27,216,21],[268,18,217,12],[268,25,217,19],[269,20,218,14,"error"],[269,25,218,19],[269,27,218,21],[270,22,219,16,"status"],[270,28,219,22],[270,30,219,24],[270,44,219,38],[271,22,220,16,"message"],[271,29,220,23],[271,31,220,25],[272,20,221,14],[273,18,222,12],[273,19,222,13],[274,16,223,10],[275,16,225,10],[275,20,225,16,"automationToInsert"],[275,38,225,34],[275,41,225,37],[276,18,226,12,"title"],[276,23,226,17],[276,25,226,19,"automation"],[276,35,226,29],[276,36,226,30,"title"],[276,41,226,35],[276,45,226,39],[276,66,226,60],[277,18,227,12,"description"],[277,29,227,23],[277,31,227,25,"automation"],[277,41,227,35],[277,42,227,36,"description"],[277,53,227,47],[277,57,227,51],[277,79,227,73],[278,18,228,12,"steps"],[278,23,228,17],[278,25,228,19,"automation"],[278,35,228,29],[278,36,228,30,"steps"],[278,41,228,35],[278,45,228,39],[278,47,228,41],[279,18,229,12,"created_by"],[279,28,229,22],[279,30,229,24,"user"],[279,34,229,28],[279,35,229,29,"id"],[279,37,229,31],[280,18,230,12,"category"],[280,26,230,20],[280,28,230,22,"automation"],[280,38,230,32],[280,39,230,33,"category"],[280,47,230,41],[280,51,230,45],[280,65,230,59],[281,18,231,12,"is_public"],[281,27,231,21],[281,29,231,23,"automation"],[281,39,231,33],[281,40,231,34,"is_public"],[281,49,231,43],[281,53,231,47],[281,58,231,52],[282,18,232,12,"tags"],[282,22,232,16],[282,24,232,18,"automation"],[282,34,232,28],[282,35,232,29,"tags"],[282,39,232,33],[282,43,232,37],[282,44,232,38],[282,52,232,46],[283,16,233,10],[283,17,233,11],[284,16,235,10],[284,20,235,10,"_yield$supabase$from$4"],[284,42,235,10],[284,51,235,40,"supabase"],[284,67,235,48],[284,68,236,13,"from"],[284,72,236,17],[284,73,236,18],[284,86,236,31],[284,87,236,32],[284,88,237,13,"insert"],[284,94,237,19],[284,95,237,20,"automationToInsert"],[284,113,237,38],[284,114,237,39],[284,115,238,13,"select"],[284,121,238,19],[284,122,238,20],[284,123,238,21],[284,124,239,13,"single"],[284,130,239,19],[284,131,239,20],[284,132,239,21],[285,18,235,18,"data"],[285,22,235,22],[285,25,235,22,"_yield$supabase$from$4"],[285,47,235,22],[285,48,235,18,"data"],[285,52,235,22],[286,18,235,24,"error"],[286,23,235,29],[286,26,235,29,"_yield$supabase$from$4"],[286,48,235,29],[286,49,235,24,"error"],[286,54,235,29],[287,16,241,10],[287,20,241,14,"error"],[287,25,241,19],[287,27,241,21],[288,18,242,12,"EventLogger"],[288,42,242,23],[288,43,242,24,"error"],[288,48,242,29],[288,49,242,30],[288,54,242,35],[288,56,242,37],[288,84,242,65],[288,86,242,67,"error"],[288,91,242,81],[288,92,242,82],[289,18,243,12],[289,25,243,19],[290,20,244,14,"error"],[290,25,244,19],[290,27,244,21],[291,22,245,16,"status"],[291,28,245,22],[291,30,245,24],[291,44,245,38],[292,22,246,16,"message"],[292,29,246,23],[292,31,246,25,"error"],[292,36,246,30],[292,37,246,31,"message"],[292,44,246,38],[292,48,246,42],[292,77,246,71],[293,22,247,16,"code"],[293,26,247,20],[293,28,247,22,"error"],[293,33,247,27],[293,34,247,28,"code"],[294,20,248,14],[295,18,249,12],[295,19,249,13],[296,16,250,10],[297,16,252,10],[297,23,252,17],[298,18,252,19,"data"],[298,22,252,23],[298,24,252,19,"data"],[299,16,252,24],[299,17,252,25],[300,14,253,8],[300,15,253,9],[300,16,253,10],[300,23,253,17,"error"],[300,28,253,27],[300,30,253,29],[301,16,254,10,"EventLogger"],[301,40,254,21],[301,41,254,22,"error"],[301,46,254,27],[301,47,254,28],[301,52,254,33],[301,54,254,35],[301,84,254,65],[301,86,254,67,"error"],[301,91,254,81],[301,92,254,82],[302,16,255,10],[302,23,255,17],[303,18,256,12,"error"],[303,23,256,17],[303,25,256,19],[304,20,257,14,"status"],[304,26,257,20],[304,28,257,22],[304,42,257,36],[305,20,258,14,"message"],[305,27,258,21],[305,29,258,23,"error"],[305,34,258,28],[305,35,258,29,"message"],[305,42,258,36],[305,46,258,40],[306,18,259,12],[307,16,260,10],[307,17,260,11],[308,14,261,8],[309,12,262,6],[309,13,262,7],[310,12,262,7],[310,21,212,6,"queryFn"],[310,28,212,13,"queryFn"],[310,29,212,13,"_x7"],[310,32,212,13],[311,14,212,13],[311,21,212,13,"_queryFn4"],[311,30,212,13],[311,31,212,13,"apply"],[311,36,212,13],[311,43,212,13,"arguments"],[311,52,212,13],[312,12,212,13],[313,12,212,13],[313,19,212,6,"queryFn"],[313,26,212,13],[314,10,212,13],[314,13,262,7],[315,10,263,6,"invalidatesTags"],[315,25,263,21],[315,27,263,23],[315,28,264,8],[316,12,264,10,"type"],[316,16,264,14],[316,18,264,16],[316,30,264,28],[317,12,264,30,"id"],[317,14,264,32],[317,16,264,34],[318,10,264,41],[318,11,264,42],[318,13,265,8],[319,12,265,10,"type"],[319,16,265,14],[319,18,265,16],[319,24,265,22],[320,12,265,24,"id"],[320,14,265,26],[320,16,265,28],[321,10,265,36],[321,11,265,37],[322,8,267,4],[322,9,267,5],[322,10,267,6],[323,8,269,4],[324,0,270,0],[325,0,271,0],[326,8,272,4,"updateAutomation"],[326,24,272,20],[326,26,272,22,"builder"],[326,33,272,29],[326,34,272,30,"mutation"],[326,42,272,38],[326,43,272,105],[327,10,273,6,"queryFn"],[327,17,273,13],[328,12,273,13],[328,16,273,13,"_queryFn5"],[328,25,273,13],[328,32,273,13,"_asyncToGenerator2"],[328,50,273,13],[328,51,273,13,"default"],[328,58,273,13],[328,60,273,15],[328,71,273,15,"_ref7"],[328,76,273,15],[328,78,273,42],[329,14,273,42],[329,18,273,24,"id"],[329,20,273,26],[329,23,273,26,"_ref7"],[329,28,273,26],[329,29,273,24,"id"],[329,31,273,26],[330,16,273,28,"updates"],[330,23,273,35],[330,26,273,35,"_ref7"],[330,31,273,35],[330,32,273,28,"updates"],[330,39,273,35],[331,14,274,8],[331,18,274,12],[332,16,275,10],[333,16,276,10],[333,20,276,14],[333,21,276,15,"id"],[333,23,276,17],[333,27,276,21,"id"],[333,29,276,23],[333,34,276,28],[333,45,276,39],[333,49,276,43,"id"],[333,51,276,45],[333,56,276,50],[333,62,276,56],[333,64,276,58],[334,18,277,12,"EventLogger"],[334,42,277,23],[334,43,277,24,"error"],[334,48,277,29],[334,49,277,30],[334,54,277,35],[334,56,277,37],[334,91,277,72],[334,93,277,74,"id"],[334,95,277,85],[334,96,277,86],[335,18,278,12],[335,25,278,19],[336,20,279,14,"error"],[336,25,279,19],[336,27,279,21],[337,22,280,16,"status"],[337,28,280,22],[337,30,280,24],[337,47,280,41],[338,22,281,16,"message"],[338,29,281,23],[338,31,281,25],[338,74,281,68],[339,22,282,16,"code"],[339,26,282,20],[339,28,282,22],[340,20,283,14],[341,18,284,12],[341,19,284,13],[342,16,285,10],[343,16,287,10],[343,20,287,10,"_yield$supabase$from$5"],[343,42,287,10],[343,51,287,40,"supabase"],[343,67,287,48],[343,68,288,13,"from"],[343,72,288,17],[343,73,288,18],[343,86,288,31],[343,87,288,32],[343,88,289,13,"update"],[343,94,289,19],[343,95,289,20,"updates"],[343,102,289,27],[343,103,289,28],[343,104,290,13,"eq"],[343,106,290,15],[343,107,290,16],[343,111,290,20],[343,113,290,22,"id"],[343,115,290,24],[343,116,290,25],[343,117,291,13,"select"],[343,123,291,19],[343,124,291,20],[343,125,291,21],[343,126,292,13,"single"],[343,132,292,19],[343,133,292,20],[343,134,292,21],[344,18,287,18,"data"],[344,22,287,22],[344,25,287,22,"_yield$supabase$from$5"],[344,47,287,22],[344,48,287,18,"data"],[344,52,287,22],[345,18,287,24,"error"],[345,23,287,29],[345,26,287,29,"_yield$supabase$from$5"],[345,48,287,29],[345,49,287,24,"error"],[345,54,287,29],[346,16,294,10],[346,20,294,14,"error"],[346,25,294,19],[346,27,294,21],[347,18,295,12,"EventLogger"],[347,42,295,23],[347,43,295,24,"error"],[347,48,295,29],[347,49,295,30],[347,54,295,35],[347,56,295,37],[347,84,295,65],[347,86,295,67,"error"],[347,91,295,81],[347,92,295,82],[348,18,296,12],[348,25,296,19],[349,20,297,14,"error"],[349,25,297,19],[349,27,297,21],[350,22,298,16,"status"],[350,28,298,22],[350,30,298,24],[350,44,298,38],[351,22,299,16,"message"],[351,29,299,23],[351,31,299,25,"error"],[351,36,299,30],[351,37,299,31,"message"],[351,44,299,38],[351,48,299,42],[351,77,299,71],[352,22,300,16,"code"],[352,26,300,20],[352,28,300,22,"error"],[352,33,300,27],[352,34,300,28,"code"],[353,20,301,14],[354,18,302,12],[354,19,302,13],[355,16,303,10],[356,16,305,10],[356,23,305,17],[357,18,305,19,"data"],[357,22,305,23],[357,24,305,19,"data"],[358,16,305,24],[358,17,305,25],[359,14,306,8],[359,15,306,9],[359,16,306,10],[359,23,306,17,"error"],[359,28,306,27],[359,30,306,29],[360,16,307,10,"EventLogger"],[360,40,307,21],[360,41,307,22,"error"],[360,46,307,27],[360,47,307,28],[360,52,307,33],[360,54,307,35],[360,84,307,65],[360,86,307,67,"error"],[360,91,307,81],[360,92,307,82],[361,16,308,10],[361,23,308,17],[362,18,309,12,"error"],[362,23,309,17],[362,25,309,19],[363,20,310,14,"status"],[363,26,310,20],[363,28,310,22],[363,42,310,36],[364,20,311,14,"message"],[364,27,311,21],[364,29,311,23,"error"],[364,34,311,28],[364,35,311,29,"message"],[364,42,311,36],[364,46,311,40],[365,18,312,12],[366,16,313,10],[366,17,313,11],[367,14,314,8],[368,12,315,6],[368,13,315,7],[369,12,315,7],[369,21,273,6,"queryFn"],[369,28,273,13,"queryFn"],[369,29,273,13,"_x8"],[369,32,273,13],[370,14,273,13],[370,21,273,13,"_queryFn5"],[370,30,273,13],[370,31,273,13,"apply"],[370,36,273,13],[370,43,273,13,"arguments"],[370,52,273,13],[371,12,273,13],[372,12,273,13],[372,19,273,6,"queryFn"],[372,26,273,13],[373,10,273,13],[373,13,315,7],[374,10,316,6,"invalidatesTags"],[374,25,316,21],[374,27,316,23],[374,36,316,6,"invalidatesTags"],[374,51,316,21,"invalidatesTags"],[374,52,316,24,"result"],[374,58,316,30],[374,60,316,32,"error"],[374,65,316,37],[374,67,316,37,"_ref8"],[374,72,316,37],[375,12,316,37],[375,16,316,41,"id"],[375,18,316,43],[375,21,316,43,"_ref8"],[375,26,316,43],[375,27,316,41,"id"],[375,29,316,43],[376,12,316,43],[376,19,316,50],[376,20,317,8],[377,14,317,10,"type"],[377,18,317,14],[377,20,317,16],[377,32,317,28],[378,14,317,30,"id"],[378,16,317,32],[378,18,317,30,"id"],[379,12,317,33],[379,13,317,34],[379,15,318,8],[380,14,318,10,"type"],[380,18,318,14],[380,20,318,16],[380,32,318,28],[381,14,318,30,"id"],[381,16,318,32],[381,18,318,34],[382,12,318,41],[382,13,318,42],[382,15,319,8],[383,14,319,10,"type"],[383,18,319,14],[383,20,319,16],[383,32,319,28],[384,14,319,30,"id"],[384,16,319,32],[384,18,319,34],[385,12,319,43],[385,13,319,44],[385,14,320,7],[386,10,320,7],[387,8,321,4],[387,9,321,5],[387,10,321,6],[388,8,323,4],[389,0,324,0],[390,0,325,0],[391,8,326,4,"deleteAutomation"],[391,24,326,20],[391,26,326,22,"builder"],[391,33,326,29],[391,34,326,30,"mutation"],[391,42,326,38],[391,43,326,53],[392,10,327,6,"queryFn"],[392,17,327,13],[393,12,327,13],[393,16,327,13,"_queryFn6"],[393,25,327,13],[393,32,327,13,"_asyncToGenerator2"],[393,50,327,13],[393,51,327,13,"default"],[393,58,327,13],[393,60,327,15],[393,71,327,22,"id"],[393,73,327,24],[393,75,327,29],[394,14,328,8],[394,18,328,12],[395,16,329,10],[396,16,330,10],[396,20,330,14],[396,21,330,15,"id"],[396,23,330,17],[396,27,330,21,"id"],[396,29,330,23],[396,34,330,28],[396,45,330,39],[396,49,330,43,"id"],[396,51,330,45],[396,56,330,50],[396,62,330,56],[396,64,330,58],[397,18,331,12,"EventLogger"],[397,42,331,23],[397,43,331,24,"error"],[397,48,331,29],[397,49,331,30],[397,54,331,35],[397,56,331,37],[397,93,331,74],[397,95,331,76,"id"],[397,97,331,87],[397,98,331,88],[398,18,332,12],[398,25,332,19],[399,20,333,14,"error"],[399,25,333,19],[399,27,333,21],[400,22,334,16,"status"],[400,28,334,22],[400,30,334,24],[400,47,334,41],[401,22,335,16,"message"],[401,29,335,23],[401,31,335,25],[401,76,335,70],[402,22,336,16,"code"],[402,26,336,20],[402,28,336,22],[403,20,337,14],[404,18,338,12],[404,19,338,13],[405,16,339,10],[406,16,341,10],[406,20,341,10,"_yield$supabase$from$6"],[406,42,341,10],[406,51,341,34,"supabase"],[406,67,341,42],[406,68,342,13,"from"],[406,72,342,17],[406,73,342,18],[406,86,342,31],[406,87,342,32],[406,88,343,13,"delete"],[406,94,343,19],[406,95,343,20],[406,96,343,21],[406,97,344,13,"eq"],[406,99,344,15],[406,100,344,16],[406,104,344,20],[406,106,344,22,"id"],[406,108,344,24],[406,109,344,25],[407,18,341,18,"error"],[407,23,341,23],[407,26,341,23,"_yield$supabase$from$6"],[407,48,341,23],[407,49,341,18,"error"],[407,54,341,23],[408,16,346,10],[408,20,346,14,"error"],[408,25,346,19],[408,27,346,21],[409,18,347,12,"EventLogger"],[409,42,347,23],[409,43,347,24,"error"],[409,48,347,29],[409,49,347,30],[409,54,347,35],[409,56,347,37],[409,84,347,65],[409,86,347,67,"error"],[409,91,347,81],[409,92,347,82],[410,18,348,12],[410,25,348,19],[411,20,349,14,"error"],[411,25,349,19],[411,27,349,21],[412,22,350,16,"status"],[412,28,350,22],[412,30,350,24],[412,44,350,38],[413,22,351,16,"message"],[413,29,351,23],[413,31,351,25,"error"],[413,36,351,30],[413,37,351,31,"message"],[413,44,351,38],[413,48,351,42],[413,77,351,71],[414,22,352,16,"code"],[414,26,352,20],[414,28,352,22,"error"],[414,33,352,27],[414,34,352,28,"code"],[415,20,353,14],[416,18,354,12],[416,19,354,13],[417,16,355,10],[418,16,357,10],[418,23,357,17],[419,18,357,19,"data"],[419,22,357,23],[419,24,357,25],[420,16,357,30],[420,17,357,31],[421,14,358,8],[421,15,358,9],[421,16,358,10],[421,23,358,17,"error"],[421,28,358,27],[421,30,358,29],[422,16,359,10,"EventLogger"],[422,40,359,21],[422,41,359,22,"error"],[422,46,359,27],[422,47,359,28],[422,52,359,33],[422,54,359,35],[422,84,359,65],[422,86,359,67,"error"],[422,91,359,81],[422,92,359,82],[423,16,360,10],[423,23,360,17],[424,18,361,12,"error"],[424,23,361,17],[424,25,361,19],[425,20,362,14,"status"],[425,26,362,20],[425,28,362,22],[425,42,362,36],[426,20,363,14,"message"],[426,27,363,21],[426,29,363,23,"error"],[426,34,363,28],[426,35,363,29,"message"],[426,42,363,36],[426,46,363,40],[427,18,364,12],[428,16,365,10],[428,17,365,11],[429,14,366,8],[430,12,367,6],[430,13,367,7],[431,12,367,7],[431,21,327,6,"queryFn"],[431,28,327,13,"queryFn"],[431,29,327,13,"_x9"],[431,32,327,13],[432,14,327,13],[432,21,327,13,"_queryFn6"],[432,30,327,13],[432,31,327,13,"apply"],[432,36,327,13],[432,43,327,13,"arguments"],[432,52,327,13],[433,12,327,13],[434,12,327,13],[434,19,327,6,"queryFn"],[434,26,327,13],[435,10,327,13],[435,13,367,7],[436,10,368,6,"invalidatesTags"],[436,25,368,21],[436,27,368,23],[436,36,368,6,"invalidatesTags"],[436,51,368,21,"invalidatesTags"],[436,52,368,24,"result"],[436,58,368,30],[436,60,368,32,"error"],[436,65,368,37],[436,67,368,39,"id"],[436,69,368,41],[437,12,368,41],[437,19,368,46],[437,20,369,8],[438,14,369,10,"type"],[438,18,369,14],[438,20,369,16],[438,32,369,28],[439,14,369,30,"id"],[439,16,369,32],[439,18,369,30,"id"],[440,12,369,33],[440,13,369,34],[440,15,370,8],[441,14,370,10,"type"],[441,18,370,14],[441,20,370,16],[441,32,370,28],[442,14,370,30,"id"],[442,16,370,32],[442,18,370,34],[443,12,370,41],[443,13,370,42],[443,15,371,8],[444,14,371,10,"type"],[444,18,371,14],[444,20,371,16],[444,26,371,22],[445,14,371,24,"id"],[445,16,371,26],[445,18,371,28],[446,12,371,36],[446,13,371,37],[446,14,372,7],[447,10,372,7],[448,8,373,4],[448,9,373,5],[448,10,373,6],[449,8,375,4],[450,0,376,0],[451,0,377,0],[452,8,378,4,"cloneAutomation"],[452,23,378,19],[452,25,378,21,"builder"],[452,32,378,28],[452,33,378,29,"mutation"],[452,41,378,37],[452,42,378,62],[453,10,379,6,"queryFn"],[453,17,379,13],[454,12,379,13],[454,16,379,13,"_queryFn7"],[454,25,379,13],[454,32,379,13,"_asyncToGenerator2"],[454,50,379,13],[454,51,379,13,"default"],[454,58,379,13],[454,60,379,15],[454,71,379,22,"automationId"],[454,83,379,34],[454,85,379,39],[455,14,380,8],[455,18,380,12],[456,16,381,10],[457,16,382,10],[457,20,382,14],[457,21,382,15,"automationId"],[457,33,382,27],[457,37,382,31,"automationId"],[457,49,382,43],[457,54,382,48],[457,65,382,59],[457,69,382,63,"automationId"],[457,81,382,75],[457,86,382,80],[457,92,382,86],[457,94,382,88],[458,18,383,12,"EventLogger"],[458,42,383,23],[458,43,383,24,"error"],[458,48,383,29],[458,49,383,30],[458,54,383,35],[458,56,383,37],[458,92,383,73],[458,94,383,75,"automationId"],[458,106,383,96],[458,107,383,97],[459,18,384,12],[459,25,384,19],[460,20,385,14,"error"],[460,25,385,19],[460,27,385,21],[461,22,386,16,"status"],[461,28,386,22],[461,30,386,24],[461,47,386,41],[462,22,387,16,"message"],[462,29,387,23],[462,31,387,25],[462,75,387,69],[463,22,388,16,"code"],[463,26,388,20],[463,28,388,22],[464,20,389,14],[465,18,390,12],[465,19,390,13],[466,16,391,10],[467,16,393,10],[467,20,393,10,"_yield$supabase$auth$3"],[467,42,393,10],[467,51,393,43,"supabase"],[467,67,393,51],[467,68,393,52,"auth"],[467,72,393,56],[467,73,393,57,"getUser"],[467,80,393,64],[467,81,393,65],[467,82,393,66],[468,18,393,26,"user"],[468,22,393,30],[468,25,393,30,"_yield$supabase$auth$3"],[468,47,393,30],[468,48,393,18,"data"],[468,52,393,22],[468,53,393,26,"user"],[468,57,393,30],[469,16,395,10],[469,20,395,14],[469,21,395,15,"user"],[469,25,395,19],[469,27,395,21],[470,18,396,12],[470,25,396,19],[471,20,397,14,"error"],[471,25,397,19],[471,27,397,21],[472,22,398,16,"status"],[472,28,398,22],[472,30,398,24],[472,44,398,38],[473,22,399,16,"message"],[473,29,399,23],[473,31,399,25],[474,20,400,14],[475,18,401,12],[475,19,401,13],[476,16,402,10],[478,16,404,10],[479,16,405,10],[479,20,405,10,"_yield$supabase$from$7"],[479,42,405,10],[479,51,405,72,"supabase"],[479,67,405,80],[479,68,406,13,"from"],[479,72,406,17],[479,73,406,18],[479,86,406,31],[479,87,406,32],[479,88,407,13,"select"],[479,94,407,19],[479,95,407,20],[479,98,407,23],[479,99,407,24],[479,100,408,13,"eq"],[479,102,408,15],[479,103,408,16],[479,107,408,20],[479,109,408,22,"automationId"],[479,121,408,34],[479,122,408,35],[479,123,409,13,"single"],[479,129,409,19],[479,130,409,20],[479,131,409,21],[480,18,405,24,"originalAutomation"],[480,36,405,42],[480,39,405,42,"_yield$supabase$from$7"],[480,61,405,42],[480,62,405,18,"data"],[480,66,405,22],[481,18,405,51,"fetchError"],[481,28,405,61],[481,31,405,61,"_yield$supabase$from$7"],[481,53,405,61],[481,54,405,44,"error"],[481,59,405,49],[482,16,411,10],[482,20,411,14,"fetchError"],[482,30,411,24],[482,32,411,26],[483,18,412,12],[483,25,412,19],[484,20,413,14,"error"],[484,25,413,19],[484,27,413,21],[485,22,414,16,"status"],[485,28,414,22],[485,30,414,24,"fetchError"],[485,40,414,34],[485,41,414,35,"code"],[485,45,414,39],[485,50,414,44],[485,60,414,54],[485,63,414,57],[485,74,414,68],[485,77,414,71],[485,90,414,84],[486,22,415,16,"message"],[486,29,415,23],[486,31,415,25,"fetchError"],[486,41,415,35],[486,42,415,36,"code"],[486,46,415,40],[486,51,415,45],[486,61,415,55],[486,64,415,58],[486,86,415,80],[486,89,415,83,"fetchError"],[486,99,415,93],[486,100,415,94,"message"],[486,107,415,101],[487,22,416,16,"code"],[487,26,416,20],[487,28,416,22,"fetchError"],[487,38,416,32],[487,39,416,33,"code"],[488,20,417,14],[489,18,418,12],[489,19,418,13],[490,16,419,10],[492,16,421,10],[493,16,422,10],[493,20,422,10,"_yield$supabase$from$8"],[493,42,422,10],[493,51,422,40,"supabase"],[493,67,422,48],[493,68,423,13,"from"],[493,72,423,17],[493,73,423,18],[493,86,423,31],[493,87,423,32],[493,88,424,13,"insert"],[493,94,424,19],[493,95,424,19,"Object"],[493,101,424,19],[493,102,424,19,"assign"],[493,108,424,19],[493,113,425,17,"originalAutomation"],[493,131,425,35],[494,20,426,14,"id"],[494,22,426,16],[494,24,426,18,"undefined"],[494,33,426,27],[495,20,427,14,"title"],[495,25,427,19],[495,27,427,21],[495,30,427,24,"originalAutomation"],[495,48,427,42],[495,49,427,43,"title"],[495,54,427,48],[495,63,427,57],[496,20,428,14,"created_by"],[496,30,428,24],[496,32,428,26,"user"],[496,36,428,30],[496,37,428,31,"id"],[496,39,428,33],[497,20,429,14,"created_at"],[497,30,429,24],[497,32,429,26,"undefined"],[497,41,429,35],[498,20,430,14,"updated_at"],[498,30,430,24],[498,32,430,26,"undefined"],[498,41,430,35],[499,20,431,14,"is_public"],[499,29,431,23],[499,31,431,25],[499,36,431,30],[500,20,432,14,"execution_count"],[500,35,432,29],[500,37,432,31],[500,38,432,32],[501,20,433,14,"average_rating"],[501,34,433,28],[501,36,433,30],[501,40,433,34],[502,20,434,14,"rating_count"],[502,32,434,26],[502,34,434,28],[503,18,434,29],[503,20,435,13],[503,21,435,14],[503,22,436,13,"select"],[503,28,436,19],[503,29,436,20],[503,30,436,21],[503,31,437,13,"single"],[503,37,437,19],[503,38,437,20],[503,39,437,21],[504,18,422,18,"data"],[504,22,422,22],[504,25,422,22,"_yield$supabase$from$8"],[504,47,422,22],[504,48,422,18,"data"],[504,52,422,22],[505,18,422,24,"error"],[505,23,422,29],[505,26,422,29,"_yield$supabase$from$8"],[505,48,422,29],[505,49,422,24,"error"],[505,54,422,29],[506,16,439,10],[506,20,439,14,"error"],[506,25,439,19],[506,27,439,21],[507,18,440,12],[507,25,440,19],[508,20,441,14,"error"],[508,25,441,19],[508,27,441,21],[509,22,442,16,"status"],[509,28,442,22],[509,30,442,24],[509,44,442,38],[510,22,443,16,"message"],[510,29,443,23],[510,31,443,25,"error"],[510,36,443,30],[510,37,443,31,"message"],[510,44,443,38],[510,48,443,42],[510,76,443,70],[511,22,444,16,"code"],[511,26,444,20],[511,28,444,22,"error"],[511,33,444,27],[511,34,444,28,"code"],[512,20,445,14],[513,18,446,12],[513,19,446,13],[514,16,447,10],[515,16,449,10],[515,23,449,17],[516,18,449,19,"data"],[516,22,449,23],[516,24,449,19,"data"],[517,16,449,24],[517,17,449,25],[518,14,450,8],[518,15,450,9],[518,16,450,10],[518,23,450,17,"error"],[518,28,450,27],[518,30,450,29],[519,16,451,10,"EventLogger"],[519,40,451,21],[519,41,451,22,"error"],[519,46,451,27],[519,47,451,28],[519,52,451,33],[519,54,451,35],[519,83,451,64],[519,85,451,66,"error"],[519,90,451,80],[519,91,451,81],[520,16,452,10],[520,23,452,17],[521,18,453,12,"error"],[521,23,453,17],[521,25,453,19],[522,20,454,14,"status"],[522,26,454,20],[522,28,454,22],[522,42,454,36],[523,20,455,14,"message"],[523,27,455,21],[523,29,455,23,"error"],[523,34,455,28],[523,35,455,29,"message"],[523,42,455,36],[523,46,455,40],[524,18,456,12],[525,16,457,10],[525,17,457,11],[526,14,458,8],[527,12,459,6],[527,13,459,7],[528,12,459,7],[528,21,379,6,"queryFn"],[528,28,379,13,"queryFn"],[528,29,379,13,"_x0"],[528,32,379,13],[529,14,379,13],[529,21,379,13,"_queryFn7"],[529,30,379,13],[529,31,379,13,"apply"],[529,36,379,13],[529,43,379,13,"arguments"],[529,52,379,13],[530,12,379,13],[531,12,379,13],[531,19,379,6,"queryFn"],[531,26,379,13],[532,10,379,13],[532,13,459,7],[533,10,460,6,"invalidatesTags"],[533,25,460,21],[533,27,460,23],[533,28,461,8],[534,12,461,10,"type"],[534,16,461,14],[534,18,461,16],[534,30,461,28],[535,12,461,30,"id"],[535,14,461,32],[535,16,461,34],[536,10,461,41],[536,11,461,42],[536,13,462,8],[537,12,462,10,"type"],[537,16,462,14],[537,18,462,16],[537,24,462,22],[538,12,462,24,"id"],[538,14,462,26],[538,16,462,28],[539,10,462,36],[539,11,462,37],[540,8,464,4],[540,9,464,5],[540,10,464,6],[541,8,466,4],[543,8,468,4],[544,0,469,0],[545,0,470,0],[546,8,471,4,"getUserStats"],[546,20,471,16],[546,22,471,18,"builder"],[546,29,471,25],[546,30,471,26,"query"],[546,35,471,31],[546,36,471,49],[547,10,472,6,"queryFn"],[547,17,472,13],[548,12,472,13],[548,16,472,13,"_queryFn8"],[548,25,472,13],[548,32,472,13,"_asyncToGenerator2"],[548,50,472,13],[548,51,472,13,"default"],[548,58,472,13],[548,60,472,15],[548,71,472,22,"_"],[548,72,472,23],[548,74,472,23,"_ref9"],[548,79,472,23],[548,81,472,40],[549,14,472,40],[549,18,472,27,"signal"],[549,24,472,33],[549,27,472,33,"_ref9"],[549,32,472,33],[549,33,472,27,"signal"],[549,39,472,33],[550,14,473,8],[550,18,473,12],[551,16,474,10],[551,20,474,10,"_yield$supabase$auth$4"],[551,42,474,10],[551,51,474,43,"supabase"],[551,67,474,51],[551,68,474,52,"auth"],[551,72,474,56],[551,73,474,57,"getUser"],[551,80,474,64],[551,81,474,65],[551,82,474,66],[552,18,474,26,"user"],[552,22,474,30],[552,25,474,30,"_yield$supabase$auth$4"],[552,47,474,30],[552,48,474,18,"data"],[552,52,474,22],[552,53,474,26,"user"],[552,57,474,30],[553,16,476,10],[553,20,476,14],[553,21,476,15,"user"],[553,25,476,19],[553,27,476,21],[554,18,477,12],[554,25,477,19],[555,20,478,14,"data"],[555,24,478,18],[555,26,478,20],[556,22,479,16,"total_automations"],[556,39,479,33],[556,41,479,35],[556,42,479,36],[557,22,480,16,"total_runs"],[557,32,480,26],[557,34,480,28],[557,35,480,29],[558,22,481,16,"successful_runs"],[558,37,481,31],[558,39,481,33],[558,40,481,34],[559,22,482,16,"failed_runs"],[559,33,482,27],[559,35,482,29],[559,36,482,30],[560,22,483,16,"total_time_saved"],[560,38,483,32],[560,40,483,34],[561,20,484,14],[562,18,485,12],[562,19,485,13],[563,16,486,10],[565,16,488,10],[566,16,489,10],[566,20,489,10,"_yield$supabase$from$9"],[566,42,489,10],[566,51,489,65,"supabase"],[566,67,489,73],[566,68,490,13,"from"],[566,72,490,17],[566,73,490,18],[566,86,490,31],[566,87,490,32],[566,88,491,13,"select"],[566,94,491,19],[566,95,491,20],[566,99,491,24],[566,100,491,25],[566,101,492,13,"eq"],[566,103,492,15],[566,104,492,16],[566,116,492,28],[566,118,492,30,"user"],[566,122,492,34],[566,123,492,35,"id"],[566,125,492,37],[566,126,492,38],[566,127,493,13,"abortSignal"],[566,138,493,24],[566,139,493,25,"signal"],[566,145,493,31],[566,146,493,32],[567,18,489,24,"automations"],[567,29,489,35],[567,32,489,35,"_yield$supabase$from$9"],[567,54,489,35],[567,55,489,18,"data"],[567,59,489,22],[568,18,489,44,"countError"],[568,28,489,54],[568,31,489,54,"_yield$supabase$from$9"],[568,53,489,54],[568,54,489,37,"error"],[568,59,489,42],[569,16,495,10],[569,20,495,14,"countError"],[569,30,495,24],[569,32,495,26],[570,18,496,12,"EventLogger"],[570,42,496,23],[570,43,496,24,"error"],[570,48,496,29],[570,49,496,30],[570,54,496,35],[570,56,496,37],[570,91,496,72],[570,93,496,74,"countError"],[570,103,496,93],[570,104,496,94],[571,18,497,12],[571,25,497,19],[572,20,498,14,"error"],[572,25,498,19],[572,27,498,21],[573,22,499,16,"status"],[573,28,499,22],[573,30,499,24],[573,43,499,37],[574,22,500,16,"message"],[574,29,500,23],[574,31,500,25,"countError"],[574,41,500,35],[574,42,500,36,"message"],[574,49,500,43],[574,53,500,47],[574,86,500,80],[575,22,501,16,"code"],[575,26,501,20],[575,28,501,22,"countError"],[575,38,501,32],[575,39,501,33,"code"],[576,20,502,14],[577,18,503,12],[577,19,503,13],[578,16,504,10],[579,16,506,10],[579,23,506,17],[580,18,507,12,"data"],[580,22,507,16],[580,24,507,18],[581,20,508,14,"total_automations"],[581,37,508,31],[581,39,508,33],[581,40,508,33,"automations"],[581,51,508,44],[581,71,508,33,"automations"],[581,82,508,44],[581,83,508,46,"length"],[581,89,508,52],[581,94,508,56],[581,95,508,57],[582,20,509,14,"total_runs"],[582,30,509,24],[582,32,509,26],[582,33,509,27],[583,20,510,14,"successful_runs"],[583,35,510,29],[583,37,510,31],[583,38,510,32],[584,20,511,14,"failed_runs"],[584,31,511,25],[584,33,511,27],[584,34,511,28],[585,20,512,14,"total_time_saved"],[585,36,512,30],[585,38,512,32],[586,18,513,12],[587,16,514,10],[587,17,514,11],[588,14,515,8],[588,15,515,9],[588,16,515,10],[588,23,515,17,"error"],[588,28,515,27],[588,30,515,29],[589,16,516,10],[589,20,516,14,"error"],[589,25,516,19],[589,26,516,20,"name"],[589,30,516,24],[589,35,516,29],[589,47,516,41],[589,49,516,43],[590,18,517,12],[590,25,517,19],[591,20,517,21,"error"],[591,25,517,26],[591,27,517,28],[592,22,517,30,"status"],[592,28,517,36],[592,30,517,38],[592,41,517,49],[593,22,517,51,"message"],[593,29,517,58],[593,31,517,60],[594,20,517,80],[595,18,517,82],[595,19,517,83],[596,16,518,10],[597,16,520,10,"EventLogger"],[597,40,520,21],[597,41,520,22,"error"],[597,46,520,27],[597,47,520,28],[597,52,520,33],[597,54,520,35],[597,83,520,64],[597,85,520,66,"error"],[597,90,520,80],[597,91,520,81],[598,16,521,10],[598,23,521,17],[599,18,522,12,"error"],[599,23,522,17],[599,25,522,19],[600,20,523,14,"status"],[600,26,523,20],[600,28,523,22],[600,41,523,35],[601,20,524,14,"message"],[601,27,524,21],[601,29,524,23,"error"],[601,34,524,28],[601,35,524,29,"message"],[601,42,524,36],[601,46,524,40],[602,18,525,12],[603,16,526,10],[603,17,526,11],[604,14,527,8],[605,12,528,6],[605,13,528,7],[606,12,528,7],[606,21,472,6,"queryFn"],[606,28,472,13,"queryFn"],[606,29,472,13,"_x1"],[606,32,472,13],[606,34,472,13,"_x10"],[606,38,472,13],[607,14,472,13],[607,21,472,13,"_queryFn8"],[607,30,472,13],[607,31,472,13,"apply"],[607,36,472,13],[607,43,472,13,"arguments"],[607,52,472,13],[608,12,472,13],[609,12,472,13],[609,19,472,6,"queryFn"],[609,26,472,13],[610,10,472,13],[610,13,528,7],[611,10,529,6,"providesTags"],[611,22,529,18],[611,24,529,20],[611,25,529,21],[612,12,529,23,"type"],[612,16,529,27],[612,18,529,29],[612,24,529,35],[613,12,529,37,"id"],[613,14,529,39],[613,16,529,41],[614,10,529,49],[614,11,529,50],[615,8,530,4],[615,9,530,5],[615,10,530,6],[616,8,532,4],[618,8,534,4],[619,0,535,0],[620,0,536,0],[621,8,537,4,"getRecentExecutions"],[621,27,537,23],[621,29,537,25,"builder"],[621,36,537,32],[621,37,537,33,"query"],[621,42,537,38],[621,43,537,82],[622,10,538,6,"queryFn"],[622,17,538,13],[623,12,538,13],[623,16,538,13,"_queryFn9"],[623,25,538,13],[623,32,538,13,"_asyncToGenerator2"],[623,50,538,13],[623,51,538,13,"default"],[623,58,538,13],[623,60,538,15],[623,71,538,15,"_ref0"],[623,76,538,15],[623,78,538,15,"_ref1"],[623,83,538,15],[623,85,538,53],[624,14,538,53],[624,18,538,53,"_ref0$limit"],[624,29,538,53],[624,32,538,53,"_ref0"],[624,37,538,53],[624,38,538,24,"limit"],[624,43,538,29],[625,16,538,24,"limit"],[625,21,538,29],[625,24,538,29,"_ref0$limit"],[625,35,538,29],[625,49,538,32],[625,51,538,34],[625,54,538,34,"_ref0$limit"],[625,65,538,34],[626,14,538,34],[626,18,538,40,"signal"],[626,24,538,46],[626,27,538,46,"_ref1"],[626,32,538,46],[626,33,538,40,"signal"],[626,39,538,46],[627,14,539,8],[627,18,539,12],[628,16,540,10],[628,20,540,10,"_yield$supabase$auth$5"],[628,42,540,10],[628,51,540,43,"supabase"],[628,67,540,51],[628,68,540,52,"auth"],[628,72,540,56],[628,73,540,57,"getUser"],[628,80,540,64],[628,81,540,65],[628,82,540,66],[629,18,540,26,"user"],[629,22,540,30],[629,25,540,30,"_yield$supabase$auth$5"],[629,47,540,30],[629,48,540,18,"data"],[629,52,540,22],[629,53,540,26,"user"],[629,57,540,30],[630,16,542,10],[630,20,542,14],[630,21,542,15,"user"],[630,25,542,19],[630,27,542,21],[631,18,543,12],[631,25,543,19],[632,20,543,21,"data"],[632,24,543,25],[632,26,543,27],[633,18,543,30],[633,19,543,31],[634,16,544,10],[635,16,546,10],[635,20,546,10,"_yield$supabase$from$0"],[635,42,546,10],[635,51,546,40,"supabase"],[635,67,546,48],[635,68,547,13,"from"],[635,72,547,17],[635,73,547,18],[635,96,547,41],[635,97,547,42],[635,98,548,13,"select"],[635,104,548,19],[635,105,548,20],[635,108,548,23],[635,109,548,24],[635,110,549,13,"eq"],[635,112,549,15],[635,113,549,16],[635,122,549,25],[635,124,549,27,"user"],[635,128,549,31],[635,129,549,32,"id"],[635,131,549,34],[635,132,549,35],[635,133,550,13,"order"],[635,138,550,18],[635,139,550,19],[635,151,550,31],[635,153,550,33],[636,20,550,35,"ascending"],[636,29,550,44],[636,31,550,46],[637,18,550,52],[637,19,550,53],[637,20,550,54],[637,21,551,13,"limit"],[637,26,551,18],[637,27,551,19,"limit"],[637,32,551,24],[637,33,551,25],[637,34,552,13,"abortSignal"],[637,45,552,24],[637,46,552,25,"signal"],[637,52,552,31],[637,53,552,32],[638,18,546,18,"data"],[638,22,546,22],[638,25,546,22,"_yield$supabase$from$0"],[638,47,546,22],[638,48,546,18,"data"],[638,52,546,22],[639,18,546,24,"error"],[639,23,546,29],[639,26,546,29,"_yield$supabase$from$0"],[639,48,546,29],[639,49,546,24,"error"],[639,54,546,29],[640,16,554,10],[640,20,554,14,"error"],[640,25,554,19],[640,27,554,21],[641,18,555,12,"EventLogger"],[641,42,555,23],[641,43,555,24,"error"],[641,48,555,29],[641,49,555,30],[641,54,555,35],[641,56,555,37],[641,91,555,72],[641,93,555,74,"error"],[641,98,555,88],[641,99,555,89],[642,18,556,12],[642,25,556,19],[643,20,557,14,"error"],[643,25,557,19],[643,27,557,21],[644,22,558,16,"status"],[644,28,558,22],[644,30,558,24],[644,43,558,37],[645,22,559,16,"message"],[645,29,559,23],[645,31,559,25,"error"],[645,36,559,30],[645,37,559,31,"message"],[645,44,559,38],[645,48,559,42],[645,83,559,77],[646,22,560,16,"code"],[646,26,560,20],[646,28,560,22,"error"],[646,33,560,27],[646,34,560,28,"code"],[647,20,561,14],[648,18,562,12],[648,19,562,13],[649,16,563,10],[650,16,565,10],[650,23,565,17],[651,18,565,19,"data"],[651,22,565,23],[651,24,565,25,"data"],[651,28,565,29],[651,32,565,33],[652,16,565,36],[652,17,565,37],[653,14,566,8],[653,15,566,9],[653,16,566,10],[653,23,566,17,"error"],[653,28,566,27],[653,30,566,29],[654,16,567,10],[654,20,567,14,"error"],[654,25,567,19],[654,26,567,20,"name"],[654,30,567,24],[654,35,567,29],[654,47,567,41],[654,49,567,43],[655,18,568,12],[655,25,568,19],[656,20,568,21,"error"],[656,25,568,26],[656,27,568,28],[657,22,568,30,"status"],[657,28,568,36],[657,30,568,38],[657,41,568,49],[658,22,568,51,"message"],[658,29,568,58],[658,31,568,60],[659,20,568,80],[660,18,568,82],[660,19,568,83],[661,16,569,10],[662,16,571,10,"EventLogger"],[662,40,571,21],[662,41,571,22,"error"],[662,46,571,27],[662,47,571,28],[662,52,571,33],[662,54,571,35],[662,90,571,71],[662,92,571,73,"error"],[662,97,571,87],[662,98,571,88],[663,16,572,10],[663,23,572,17],[664,18,573,12,"error"],[664,23,573,17],[664,25,573,19],[665,20,574,14,"status"],[665,26,574,20],[665,28,574,22],[665,41,574,35],[666,20,575,14,"message"],[666,27,575,21],[666,29,575,23,"error"],[666,34,575,28],[666,35,575,29,"message"],[666,42,575,36],[666,46,575,40],[667,18,576,12],[668,16,577,10],[668,17,577,11],[669,14,578,8],[670,12,579,6],[670,13,579,7],[671,12,579,7],[671,21,538,6,"queryFn"],[671,28,538,13,"queryFn"],[671,29,538,13,"_x11"],[671,33,538,13],[671,35,538,13,"_x12"],[671,39,538,13],[672,14,538,13],[672,21,538,13,"_queryFn9"],[672,30,538,13],[672,31,538,13,"apply"],[672,36,538,13],[672,43,538,13,"arguments"],[672,52,538,13],[673,12,538,13],[674,12,538,13],[674,19,538,6,"queryFn"],[674,26,538,13],[675,10,538,13],[675,13,579,7],[676,10,580,6,"providesTags"],[676,22,580,18],[676,24,580,20],[676,25,580,21],[677,12,580,23,"type"],[677,16,580,27],[677,18,580,29],[677,29,580,40],[678,12,580,42,"id"],[678,14,580,44],[678,16,580,46],[679,10,580,55],[679,11,580,56],[680,8,581,4],[680,9,581,5],[680,10,581,6],[681,8,583,4],[682,0,584,0],[683,0,585,0],[684,8,586,4,"getAutomationExecutions"],[684,31,586,27],[684,33,586,29,"builder"],[684,40,586,36],[684,41,586,37,"query"],[684,46,586,42],[684,47,586,74],[685,10,587,6,"queryFn"],[685,17,587,13],[686,12,587,13],[686,16,587,13,"_queryFn0"],[686,25,587,13],[686,32,587,13,"_asyncToGenerator2"],[686,50,587,13],[686,51,587,13,"default"],[686,58,587,13],[686,60,587,15],[686,71,587,22,"automationId"],[686,83,587,34],[686,85,587,34,"_ref10"],[686,91,587,34],[686,93,587,51],[687,14,587,51],[687,18,587,38,"signal"],[687,24,587,44],[687,27,587,44,"_ref10"],[687,33,587,44],[687,34,587,38,"signal"],[687,40,587,44],[688,14,588,8],[688,18,588,12],[689,16,589,10],[690,16,590,10],[690,20,590,14],[690,21,590,15,"automationId"],[690,33,590,27],[690,37,590,31,"automationId"],[690,49,590,43],[690,54,590,48],[690,65,590,59],[690,69,590,63,"automationId"],[690,81,590,75],[690,86,590,80],[690,92,590,86],[690,94,590,88],[691,18,591,12,"EventLogger"],[691,42,591,23],[691,43,591,24,"error"],[691,48,591,29],[691,49,591,30],[691,54,591,35],[691,56,591,37],[691,95,591,76],[691,97,591,78,"automationId"],[691,109,591,99],[691,110,591,100],[692,18,592,12],[692,25,592,19],[693,20,593,14,"error"],[693,25,593,19],[693,27,593,21],[694,22,594,16,"status"],[694,28,594,22],[694,30,594,24],[694,47,594,41],[695,22,595,16,"message"],[695,29,595,23],[695,31,595,25],[695,78,595,72],[696,22,596,16,"code"],[696,26,596,20],[696,28,596,22],[697,20,597,14],[698,18,598,12],[698,19,598,13],[699,16,599,10],[700,16,601,10],[700,20,601,10,"_yield$supabase$from$1"],[700,42,601,10],[700,51,601,40,"supabase"],[700,67,601,48],[700,68,602,13,"from"],[700,72,602,17],[700,73,602,18],[700,96,602,41],[700,97,602,42],[700,98,603,13,"select"],[700,104,603,19],[700,105,603,20],[700,108,603,23],[700,109,603,24],[700,110,604,13,"eq"],[700,112,604,15],[700,113,604,16],[700,128,604,31],[700,130,604,33,"automationId"],[700,142,604,45],[700,143,604,46],[700,144,605,13,"order"],[700,149,605,18],[700,150,605,19],[700,162,605,31],[700,164,605,33],[701,20,605,35,"ascending"],[701,29,605,44],[701,31,605,46],[702,18,605,52],[702,19,605,53],[702,20,605,54],[702,21,606,13,"abortSignal"],[702,32,606,24],[702,33,606,25,"signal"],[702,39,606,31],[702,40,606,32],[703,18,601,18,"data"],[703,22,601,22],[703,25,601,22,"_yield$supabase$from$1"],[703,47,601,22],[703,48,601,18,"data"],[703,52,601,22],[704,18,601,24,"error"],[704,23,601,29],[704,26,601,29,"_yield$supabase$from$1"],[704,48,601,29],[704,49,601,24,"error"],[704,54,601,29],[705,16,608,10],[705,20,608,14,"error"],[705,25,608,19],[705,27,608,21],[706,18,609,12,"EventLogger"],[706,42,609,23],[706,43,609,24,"error"],[706,48,609,29],[706,49,609,30],[706,54,609,35],[706,56,609,37],[706,95,609,76],[706,97,609,78,"error"],[706,102,609,92],[706,103,609,93],[707,18,610,12],[707,25,610,19],[708,20,611,14,"error"],[708,25,611,19],[708,27,611,21],[709,22,612,16,"status"],[709,28,612,22],[709,30,612,24],[709,43,612,37],[710,22,613,16,"message"],[710,29,613,23],[710,31,613,25,"error"],[710,36,613,30],[710,37,613,31,"message"],[710,44,613,38],[710,48,613,42],[710,87,613,81],[711,22,614,16,"code"],[711,26,614,20],[711,28,614,22,"error"],[711,33,614,27],[711,34,614,28,"code"],[712,20,615,14],[713,18,616,12],[713,19,616,13],[714,16,617,10],[715,16,619,10],[715,23,619,17],[716,18,619,19,"data"],[716,22,619,23],[716,24,619,25,"data"],[716,28,619,29],[716,32,619,33],[717,16,619,36],[717,17,619,37],[718,14,620,8],[718,15,620,9],[718,16,620,10],[718,23,620,17,"error"],[718,28,620,27],[718,30,620,29],[719,16,621,10],[719,20,621,14,"error"],[719,25,621,19],[719,26,621,20,"name"],[719,30,621,24],[719,35,621,29],[719,47,621,41],[719,49,621,43],[720,18,622,12],[720,25,622,19],[721,20,622,21,"error"],[721,25,622,26],[721,27,622,28],[722,22,622,30,"status"],[722,28,622,36],[722,30,622,38],[722,41,622,49],[723,22,622,51,"message"],[723,29,622,58],[723,31,622,60],[724,20,622,80],[725,18,622,82],[725,19,622,83],[726,16,623,10],[727,16,625,10,"EventLogger"],[727,40,625,21],[727,41,625,22,"error"],[727,46,625,27],[727,47,625,28],[727,52,625,33],[727,54,625,35],[727,94,625,75],[727,96,625,77,"error"],[727,101,625,91],[727,102,625,92],[728,16,626,10],[728,23,626,17],[729,18,627,12,"error"],[729,23,627,17],[729,25,627,19],[730,20,628,14,"status"],[730,26,628,20],[730,28,628,22],[730,41,628,35],[731,20,629,14,"message"],[731,27,629,21],[731,29,629,23,"error"],[731,34,629,28],[731,35,629,29,"message"],[731,42,629,36],[731,46,629,40],[732,18,630,12],[733,16,631,10],[733,17,631,11],[734,14,632,8],[735,12,633,6],[735,13,633,7],[736,12,633,7],[736,21,587,6,"queryFn"],[736,28,587,13,"queryFn"],[736,29,587,13,"_x13"],[736,33,587,13],[736,35,587,13,"_x14"],[736,39,587,13],[737,14,587,13],[737,21,587,13,"_queryFn0"],[737,30,587,13],[737,31,587,13,"apply"],[737,36,587,13],[737,43,587,13,"arguments"],[737,52,587,13],[738,12,587,13],[739,12,587,13],[739,19,587,6,"queryFn"],[739,26,587,13],[740,10,587,13],[740,13,633,7],[741,10,634,6,"providesTags"],[741,22,634,18],[741,24,634,20],[741,33,634,6,"providesTags"],[741,45,634,18,"providesTags"],[741,46,634,21,"result"],[741,52,634,27],[741,54,634,29,"error"],[741,59,634,34],[741,61,634,36,"automationId"],[741,73,634,48],[742,12,634,48],[742,19,634,53],[742,20,635,8],[743,14,635,10,"type"],[743,18,635,14],[743,20,635,16],[743,31,635,27],[744,14,635,29,"id"],[744,16,635,31],[744,18,635,33,"automationId"],[745,12,635,46],[745,13,635,47],[745,14,636,7],[746,10,636,7],[747,8,637,4],[747,9,637,5],[747,10,637,6],[748,8,639,4],[749,0,640,0],[750,0,641,0],[751,8,642,4,"getExecutionHistory"],[751,27,642,23],[751,29,642,25,"builder"],[751,36,642,32],[751,37,642,33,"query"],[751,42,642,38],[751,43,642,82],[752,10,643,6,"queryFn"],[752,17,643,13],[753,12,643,13],[753,16,643,13,"_queryFn1"],[753,25,643,13],[753,32,643,13,"_asyncToGenerator2"],[753,50,643,13],[753,51,643,13,"default"],[753,58,643,13],[753,60,643,15],[753,71,643,15,"_ref11"],[753,77,643,15],[753,79,643,15,"_ref12"],[753,85,643,15],[753,87,643,53],[754,14,643,53],[754,18,643,53,"_ref11$limit"],[754,30,643,53],[754,33,643,53,"_ref11"],[754,39,643,53],[754,40,643,24,"limit"],[754,45,643,29],[755,16,643,24,"limit"],[755,21,643,29],[755,24,643,29,"_ref11$limit"],[755,36,643,29],[755,50,643,32],[755,52,643,34],[755,55,643,34,"_ref11$limit"],[755,67,643,34],[756,14,643,34],[756,18,643,40,"signal"],[756,24,643,46],[756,27,643,46,"_ref12"],[756,33,643,46],[756,34,643,40,"signal"],[756,40,643,46],[757,14,644,8],[757,18,644,12],[758,16,645,10],[758,20,645,10,"_yield$supabase$auth$6"],[758,42,645,10],[758,51,645,43,"supabase"],[758,67,645,51],[758,68,645,52,"auth"],[758,72,645,56],[758,73,645,57,"getUser"],[758,80,645,64],[758,81,645,65],[758,82,645,66],[759,18,645,26,"user"],[759,22,645,30],[759,25,645,30,"_yield$supabase$auth$6"],[759,47,645,30],[759,48,645,18,"data"],[759,52,645,22],[759,53,645,26,"user"],[759,57,645,30],[760,16,647,10],[760,20,647,14],[760,21,647,15,"user"],[760,25,647,19],[760,27,647,21],[761,18,648,12],[761,25,648,19],[762,20,648,21,"data"],[762,24,648,25],[762,26,648,27],[763,18,648,30],[763,19,648,31],[764,16,649,10],[765,16,651,10],[765,20,651,10,"_yield$supabase$from$10"],[765,43,651,10],[765,52,651,40,"supabase"],[765,68,651,48],[765,69,652,13,"from"],[765,73,652,17],[765,74,652,18],[765,97,652,41],[765,98,652,42],[765,99,653,13,"select"],[765,105,653,19],[765,106,653,20],[766,0,654,0],[767,0,655,0],[768,0,656,0],[768,13,656,13],[768,14,656,14],[768,15,657,13,"eq"],[768,17,657,15],[768,18,657,16],[768,27,657,25],[768,29,657,27,"user"],[768,33,657,31],[768,34,657,32,"id"],[768,36,657,34],[768,37,657,35],[768,38,658,13,"order"],[768,43,658,18],[768,44,658,19],[768,56,658,31],[768,58,658,33],[769,20,658,35,"ascending"],[769,29,658,44],[769,31,658,46],[770,18,658,52],[770,19,658,53],[770,20,658,54],[770,21,659,13,"limit"],[770,26,659,18],[770,27,659,19,"limit"],[770,32,659,24],[770,33,659,25],[770,34,660,13,"abortSignal"],[770,45,660,24],[770,46,660,25,"signal"],[770,52,660,31],[770,53,660,32],[771,18,651,18,"data"],[771,22,651,22],[771,25,651,22,"_yield$supabase$from$10"],[771,48,651,22],[771,49,651,18,"data"],[771,53,651,22],[772,18,651,24,"error"],[772,23,651,29],[772,26,651,29,"_yield$supabase$from$10"],[772,49,651,29],[772,50,651,24,"error"],[772,55,651,29],[773,16,662,10],[773,20,662,14,"error"],[773,25,662,19],[773,27,662,21],[774,18,663,12,"EventLogger"],[774,42,663,23],[774,43,663,24,"error"],[774,48,663,29],[774,49,663,30],[774,54,663,35],[774,56,663,37],[774,91,663,72],[774,93,663,74,"error"],[774,98,663,88],[774,99,663,89],[775,18,664,12],[775,25,664,19],[776,20,665,14,"error"],[776,25,665,19],[776,27,665,21],[777,22,666,16,"status"],[777,28,666,22],[777,30,666,24],[777,43,666,37],[778,22,667,16,"message"],[778,29,667,23],[778,31,667,25,"error"],[778,36,667,30],[778,37,667,31,"message"],[778,44,667,38],[778,48,667,42],[778,83,667,77],[779,22,668,16,"code"],[779,26,668,20],[779,28,668,22,"error"],[779,33,668,27],[779,34,668,28,"code"],[780,20,669,14],[781,18,670,12],[781,19,670,13],[782,16,671,10],[783,16,673,10],[783,23,673,17],[784,18,673,19,"data"],[784,22,673,23],[784,24,673,25,"data"],[784,28,673,29],[784,32,673,33],[785,16,673,36],[785,17,673,37],[786,14,674,8],[786,15,674,9],[786,16,674,10],[786,23,674,17,"error"],[786,28,674,27],[786,30,674,29],[787,16,675,10],[787,20,675,14,"error"],[787,25,675,19],[787,26,675,20,"name"],[787,30,675,24],[787,35,675,29],[787,47,675,41],[787,49,675,43],[788,18,676,12],[788,25,676,19],[789,20,676,21,"error"],[789,25,676,26],[789,27,676,28],[790,22,676,30,"status"],[790,28,676,36],[790,30,676,38],[790,41,676,49],[791,22,676,51,"message"],[791,29,676,58],[791,31,676,60],[792,20,676,80],[793,18,676,82],[793,19,676,83],[794,16,677,10],[795,16,679,10,"EventLogger"],[795,40,679,21],[795,41,679,22,"error"],[795,46,679,27],[795,47,679,28],[795,52,679,33],[795,54,679,35],[795,90,679,71],[795,92,679,73,"error"],[795,97,679,87],[795,98,679,88],[796,16,680,10],[796,23,680,17],[797,18,681,12,"error"],[797,23,681,17],[797,25,681,19],[798,20,682,14,"status"],[798,26,682,20],[798,28,682,22],[798,41,682,35],[799,20,683,14,"message"],[799,27,683,21],[799,29,683,23,"error"],[799,34,683,28],[799,35,683,29,"message"],[799,42,683,36],[799,46,683,40],[800,18,684,12],[801,16,685,10],[801,17,685,11],[802,14,686,8],[803,12,687,6],[803,13,687,7],[804,12,687,7],[804,21,643,6,"queryFn"],[804,28,643,13,"queryFn"],[804,29,643,13,"_x15"],[804,33,643,13],[804,35,643,13,"_x16"],[804,39,643,13],[805,14,643,13],[805,21,643,13,"_queryFn1"],[805,30,643,13],[805,31,643,13,"apply"],[805,36,643,13],[805,43,643,13,"arguments"],[805,52,643,13],[806,12,643,13],[807,12,643,13],[807,19,643,6,"queryFn"],[807,26,643,13],[808,10,643,13],[808,13,687,7],[809,10,688,6,"providesTags"],[809,22,688,18],[809,24,688,20],[809,25,688,21],[810,12,688,23,"type"],[810,16,688,27],[810,18,688,29],[810,29,688,40],[811,12,688,42,"id"],[811,14,688,44],[811,16,688,46],[812,10,688,56],[812,11,688,57],[813,8,689,4],[813,9,689,5],[813,10,689,6],[814,8,691,4],[815,0,692,0],[816,0,693,0],[817,8,694,4,"clearHistory"],[817,20,694,16],[817,22,694,18,"builder"],[817,29,694,25],[817,30,694,26,"mutation"],[817,38,694,34],[817,39,694,47],[818,10,695,6,"queryFn"],[818,17,695,13],[819,12,695,13],[819,16,695,13,"_queryFn10"],[819,26,695,13],[819,33,695,13,"_asyncToGenerator2"],[819,51,695,13],[819,52,695,13,"default"],[819,59,695,13],[819,61,695,15],[819,74,695,27],[820,14,696,8],[820,18,696,12],[821,16,697,10],[821,20,697,10,"_yield$supabase$auth$7"],[821,42,697,10],[821,51,697,43,"supabase"],[821,67,697,51],[821,68,697,52,"auth"],[821,72,697,56],[821,73,697,57,"getUser"],[821,80,697,64],[821,81,697,65],[821,82,697,66],[822,18,697,26,"user"],[822,22,697,30],[822,25,697,30,"_yield$supabase$auth$7"],[822,47,697,30],[822,48,697,18,"data"],[822,52,697,22],[822,53,697,26,"user"],[822,57,697,30],[823,16,699,10],[823,20,699,14],[823,21,699,15,"user"],[823,25,699,19],[823,27,699,21],[824,18,700,12],[824,25,700,19],[825,20,701,14,"error"],[825,25,701,19],[825,27,701,21],[826,22,702,16,"status"],[826,28,702,22],[826,30,702,24],[826,44,702,38],[827,22,703,16,"message"],[827,29,703,23],[827,31,703,25],[828,20,704,14],[829,18,705,12],[829,19,705,13],[830,16,706,10],[831,16,708,10],[831,20,708,10,"_yield$supabase$from$11"],[831,43,708,10],[831,52,708,34,"supabase"],[831,68,708,42],[831,69,709,13,"from"],[831,73,709,17],[831,74,709,18],[831,97,709,41],[831,98,709,42],[831,99,710,13,"delete"],[831,105,710,19],[831,106,710,20],[831,107,710,21],[831,108,711,13,"eq"],[831,110,711,15],[831,111,711,16],[831,120,711,25],[831,122,711,27,"user"],[831,126,711,31],[831,127,711,32,"id"],[831,129,711,34],[831,130,711,35],[832,18,708,18,"error"],[832,23,708,23],[832,26,708,23,"_yield$supabase$from$11"],[832,49,708,23],[832,50,708,18,"error"],[832,55,708,23],[833,16,713,10],[833,20,713,14,"error"],[833,25,713,19],[833,27,713,21],[834,18,714,12,"EventLogger"],[834,42,714,23],[834,43,714,24,"error"],[834,48,714,29],[834,49,714,30],[834,54,714,35],[834,56,714,37],[834,81,714,62],[834,83,714,64,"error"],[834,88,714,78],[834,89,714,79],[835,18,715,12],[835,25,715,19],[836,20,716,14,"error"],[836,25,716,19],[836,27,716,21],[837,22,717,16,"status"],[837,28,717,22],[837,30,717,24],[837,44,717,38],[838,22,718,16,"message"],[838,29,718,23],[838,31,718,25,"error"],[838,36,718,30],[838,37,718,31,"message"],[838,44,718,38],[838,48,718,42],[838,73,718,67],[839,22,719,16,"code"],[839,26,719,20],[839,28,719,22,"error"],[839,33,719,27],[839,34,719,28,"code"],[840,20,720,14],[841,18,721,12],[841,19,721,13],[842,16,722,10],[843,16,724,10],[843,23,724,17],[844,18,724,19,"data"],[844,22,724,23],[844,24,724,25],[845,16,724,30],[845,17,724,31],[846,14,725,8],[846,15,725,9],[846,16,725,10],[846,23,725,17,"error"],[846,28,725,27],[846,30,725,29],[847,16,726,10,"EventLogger"],[847,40,726,21],[847,41,726,22,"error"],[847,46,726,27],[847,47,726,28],[847,52,726,33],[847,54,726,35],[847,80,726,61],[847,82,726,63,"error"],[847,87,726,77],[847,88,726,78],[848,16,727,10],[848,23,727,17],[849,18,728,12,"error"],[849,23,728,17],[849,25,728,19],[850,20,729,14,"status"],[850,26,729,20],[850,28,729,22],[850,42,729,36],[851,20,730,14,"message"],[851,27,730,21],[851,29,730,23,"error"],[851,34,730,28],[851,35,730,29,"message"],[851,42,730,36],[851,46,730,40],[852,18,731,12],[853,16,732,10],[853,17,732,11],[854,14,733,8],[855,12,734,6],[855,13,734,7],[856,12,734,7],[856,21,695,6,"queryFn"],[856,28,695,13,"queryFn"],[856,29,695,13],[857,14,695,13],[857,21,695,13,"_queryFn10"],[857,31,695,13],[857,32,695,13,"apply"],[857,37,695,13],[857,44,695,13,"arguments"],[857,53,695,13],[858,12,695,13],[859,12,695,13],[859,19,695,6,"queryFn"],[859,26,695,13],[860,10,695,13],[860,13,734,7],[861,10,735,6,"invalidatesTags"],[861,25,735,21],[861,27,735,23],[861,28,736,8],[862,12,736,10,"type"],[862,16,736,14],[862,18,736,16],[862,29,736,27],[863,12,736,29,"id"],[863,14,736,31],[863,16,736,33],[864,10,736,42],[864,11,736,43],[864,13,737,8],[865,12,737,10,"type"],[865,16,737,14],[865,18,737,16],[865,29,737,27],[866,12,737,29,"id"],[866,14,737,31],[866,16,737,33],[867,10,737,43],[867,11,737,44],[867,13,738,8],[868,12,738,10,"type"],[868,16,738,14],[868,18,738,16],[868,24,738,22],[869,12,738,24,"id"],[869,14,738,26],[869,16,738,28],[870,10,738,36],[870,11,738,37],[871,8,740,4],[871,9,740,5],[871,10,740,6],[872,8,742,4],[874,8,744,4],[875,0,745,0],[876,0,746,0],[877,8,747,4,"getTrendingAutomations"],[877,30,747,26],[877,32,747,28,"builder"],[877,39,747,35],[877,40,747,36,"query"],[877,45,747,41],[877,46,747,101],[878,10,748,6,"queryFn"],[878,17,748,13],[879,12,748,13],[879,16,748,13,"_queryFn11"],[879,26,748,13],[879,33,748,13,"_asyncToGenerator2"],[879,51,748,13],[879,52,748,13,"default"],[879,59,748,13],[879,61,748,15],[879,72,748,15,"_ref13"],[879,78,748,15],[879,80,748,15,"_ref14"],[879,86,748,15],[879,88,748,76],[880,14,748,76],[880,18,748,76,"_ref13$limit"],[880,30,748,76],[880,33,748,76,"_ref13"],[880,39,748,76],[880,40,748,24,"limit"],[880,45,748,29],[881,16,748,24,"limit"],[881,21,748,29],[881,24,748,29,"_ref13$limit"],[881,36,748,29],[881,50,748,32],[881,52,748,34],[881,55,748,34,"_ref13$limit"],[881,67,748,34],[882,16,748,34,"_ref13$timeWindow"],[882,33,748,34],[882,36,748,34,"_ref13"],[882,42,748,34],[882,43,748,36,"timeWindow"],[882,53,748,46],[883,16,748,36,"timeWindow"],[883,26,748,46],[883,29,748,46,"_ref13$timeWindow"],[883,46,748,46],[883,60,748,49],[883,68,748,57],[883,71,748,57,"_ref13$timeWindow"],[883,88,748,57],[884,14,748,57],[884,18,748,63,"signal"],[884,24,748,69],[884,27,748,69,"_ref14"],[884,33,748,69],[884,34,748,63,"signal"],[884,40,748,69],[885,14,749,8],[885,18,749,12],[886,16,750,10],[887,16,751,10],[887,20,751,16,"data"],[887,24,751,20],[887,33,751,29],[887,37,751,29,"networkAwareQuery"],[887,71,751,46],[887,90,751,46,"_asyncToGenerator2"],[887,108,751,46],[887,109,751,46,"default"],[887,116,751,46],[887,118,752,12],[887,131,752,24],[888,18,753,14],[889,18,754,14],[889,22,754,14,"_yield$supabase$from$12"],[889,45,754,14],[889,54,754,73,"supabase"],[889,70,754,81],[889,71,755,17,"from"],[889,75,755,21],[889,76,755,22],[889,89,755,35],[889,90,755,36],[889,91,756,17,"select"],[889,97,756,23],[889,98,756,24],[889,101,756,27],[889,102,756,28],[889,103,757,17,"eq"],[889,105,757,19],[889,106,757,20],[889,117,757,31],[889,119,757,33],[889,123,757,37],[889,124,757,38],[889,125,758,17,"order"],[889,130,758,22],[889,131,758,23],[889,143,758,35],[889,145,758,37],[890,22,758,39,"ascending"],[890,31,758,48],[890,33,758,50],[891,20,758,56],[891,21,758,57],[891,22,758,58],[891,23,759,17,"limit"],[891,28,759,22],[891,29,759,23,"limit"],[891,34,759,28],[891,35,759,29],[891,36,760,17,"abortSignal"],[891,47,760,28],[891,48,760,29,"signal"],[891,54,760,35],[891,55,760,36],[892,20,754,28,"fallbackData"],[892,32,754,40],[892,35,754,40,"_yield$supabase$from$12"],[892,58,754,40],[892,59,754,22,"data"],[892,63,754,26],[893,20,754,49,"fallbackError"],[893,33,754,62],[893,36,754,62,"_yield$supabase$from$12"],[893,59,754,62],[893,60,754,42,"error"],[893,65,754,47],[894,18,762,14],[894,22,762,18,"fallbackError"],[894,35,762,31],[894,37,762,33],[895,20,763,16],[895,24,763,16,"logApiError"],[895,52,763,27],[895,54,763,28,"fallbackError"],[895,67,763,41],[895,69,763,43],[895,93,763,67],[895,94,763,68],[896,20,764,16],[896,26,764,22,"fallbackError"],[896,39,764,35],[897,18,765,14],[898,18,767,14],[898,25,767,21,"fallbackData"],[898,37,767,33],[898,41,767,37],[898,43,767,39],[899,16,768,12],[899,17,768,13],[899,20,769,12],[900,18,770,14,"offlineData"],[900,29,770,25],[900,31,770,27],[900,33,770,29],[900,34,770,31],[901,16,771,12],[901,17,772,10],[901,18,772,11],[902,16,774,10],[902,23,774,17],[903,18,774,19,"data"],[903,22,774,23],[903,24,774,19,"data"],[904,16,774,24],[904,17,774,25],[905,14,775,8],[905,15,775,9],[905,16,775,10],[905,23,775,17,"error"],[905,28,775,27],[905,30,775,29],[906,16,776,10],[906,20,776,14,"error"],[906,25,776,19],[906,26,776,20,"name"],[906,30,776,24],[906,35,776,29],[906,47,776,41],[906,49,776,43],[907,18,777,12],[907,25,777,19],[908,20,777,21,"error"],[908,25,777,26],[908,27,777,28],[909,22,777,30,"status"],[909,28,777,36],[909,30,777,38],[909,41,777,49],[910,22,777,51,"message"],[910,29,777,58],[910,31,777,60],[911,20,777,80],[912,18,777,82],[912,19,777,83],[913,16,778,10],[915,16,780,10],[916,16,781,10],[916,20,781,14,"error"],[916,25,781,19],[916,26,781,20,"status"],[916,32,781,26],[916,37,781,31],[916,46,781,40],[916,50,781,44,"error"],[916,55,781,49],[916,56,781,50,"code"],[916,60,781,54],[916,65,781,59],[916,82,781,76],[916,84,781,78],[917,18,782,12],[917,25,782,19],[918,20,782,21,"data"],[918,24,782,25],[918,26,782,27],[919,18,782,30],[919,19,782,31],[919,20,782,32],[919,21,782,33],[920,16,783,10],[921,16,785,10],[921,20,785,10,"logApiError"],[921,48,785,21],[921,50,785,22,"error"],[921,55,785,27],[921,57,785,29],[921,81,785,53],[921,82,785,54],[922,16,786,10],[922,23,786,17],[923,18,787,12,"error"],[923,23,787,17],[923,25,787,19],[924,20,788,14,"status"],[924,26,788,20],[924,28,788,22,"error"],[924,33,788,27],[924,34,788,28,"status"],[924,40,788,34],[924,44,788,38],[924,57,788,51],[925,20,789,14,"message"],[925,27,789,21],[925,29,789,23,"error"],[925,34,789,28],[925,35,789,29,"message"],[925,42,789,36],[925,46,789,40],[925,84,789,78],[926,20,790,14,"code"],[926,24,790,18],[926,26,790,20,"error"],[926,31,790,25],[926,32,790,26,"code"],[927,18,791,12],[928,16,792,10],[928,17,792,11],[929,14,793,8],[930,12,794,6],[930,13,794,7],[931,12,794,7],[931,21,748,6,"queryFn"],[931,28,748,13,"queryFn"],[931,29,748,13,"_x17"],[931,33,748,13],[931,35,748,13,"_x18"],[931,39,748,13],[932,14,748,13],[932,21,748,13,"_queryFn11"],[932,31,748,13],[932,32,748,13,"apply"],[932,37,748,13],[932,44,748,13,"arguments"],[932,53,748,13],[933,12,748,13],[934,12,748,13],[934,19,748,6,"queryFn"],[934,26,748,13],[935,10,748,13],[935,13,794,7],[936,10,795,6,"providesTags"],[936,22,795,18],[936,24,795,20],[936,25,795,21],[937,12,795,23,"type"],[937,16,795,27],[937,18,795,29],[937,30,795,41],[938,12,795,43,"id"],[938,14,795,45],[938,16,795,47],[939,10,795,58],[939,11,795,59],[940,8,796,4],[940,9,796,5],[940,10,796,6],[941,8,798,4],[943,8,800,4],[944,0,801,0],[945,0,802,0],[946,8,803,4,"likeAutomation"],[946,22,803,18],[946,24,803,20,"builder"],[946,31,803,27],[946,32,803,28,"mutation"],[946,40,803,36],[946,41,803,51],[947,10,804,6,"queryFn"],[947,17,804,13],[948,12,804,13],[948,16,804,13,"_queryFn12"],[948,26,804,13],[948,33,804,13,"_asyncToGenerator2"],[948,51,804,13],[948,52,804,13,"default"],[948,59,804,13],[948,61,804,15],[948,72,804,22,"automationId"],[948,84,804,34],[948,86,804,39],[949,14,805,8],[949,18,805,12],[950,16,806,10],[950,20,806,10,"_yield$supabase$auth$8"],[950,42,806,10],[950,51,806,43,"supabase"],[950,67,806,51],[950,68,806,52,"auth"],[950,72,806,56],[950,73,806,57,"getUser"],[950,80,806,64],[950,81,806,65],[950,82,806,66],[951,18,806,26,"user"],[951,22,806,30],[951,25,806,30,"_yield$supabase$auth$8"],[951,47,806,30],[951,48,806,18,"data"],[951,52,806,22],[951,53,806,26,"user"],[951,57,806,30],[952,16,808,10],[952,20,808,14],[952,21,808,15,"user"],[952,25,808,19],[952,27,808,21],[953,18,809,12],[953,25,809,19],[954,20,810,14,"error"],[954,25,810,19],[954,27,810,21],[955,22,811,16,"status"],[955,28,811,22],[955,30,811,24],[955,44,811,38],[956,22,812,16,"message"],[956,29,812,23],[956,31,812,25],[957,20,813,14],[958,18,814,12],[958,19,814,13],[959,16,815,10],[960,16,817,10],[960,20,817,10,"_yield$supabase$from$13"],[960,43,817,10],[960,52,817,34,"supabase"],[960,68,817,42],[960,69,818,13,"from"],[960,73,818,17],[960,74,818,18],[960,92,818,36],[960,93,818,37],[960,94,819,13,"insert"],[960,100,819,19],[960,101,819,20],[961,20,820,14,"automation_id"],[961,33,820,27],[961,35,820,29,"automationId"],[961,47,820,41],[962,20,821,14,"user_id"],[962,27,821,21],[962,29,821,23,"user"],[962,33,821,27],[962,34,821,28,"id"],[963,18,822,12],[963,19,822,13],[963,20,822,14],[964,18,817,18,"error"],[964,23,817,23],[964,26,817,23,"_yield$supabase$from$13"],[964,49,817,23],[964,50,817,18,"error"],[964,55,817,23],[965,16,824,10],[965,20,824,14,"error"],[965,25,824,19],[965,29,824,23],[965,30,824,24,"error"],[965,35,824,29],[965,36,824,30,"message"],[965,43,824,37],[965,44,824,38,"includes"],[965,52,824,46],[965,53,824,47],[965,64,824,58],[965,65,824,59],[965,67,824,61],[966,18,825,12,"EventLogger"],[966,42,825,23],[966,43,825,24,"error"],[966,48,825,29],[966,49,825,30],[966,54,825,35],[966,56,825,37],[966,82,825,63],[966,84,825,65,"error"],[966,89,825,79],[966,90,825,80],[967,18,826,12],[967,25,826,19],[968,20,827,14,"error"],[968,25,827,19],[968,27,827,21],[969,22,828,16,"status"],[969,28,828,22],[969,30,828,24],[969,44,828,38],[970,22,829,16,"message"],[970,29,829,23],[970,31,829,25,"error"],[970,36,829,30],[970,37,829,31,"message"],[970,44,829,38],[970,48,829,42],[970,75,829,69],[971,22,830,16,"code"],[971,26,830,20],[971,28,830,22,"error"],[971,33,830,27],[971,34,830,28,"code"],[972,20,831,14],[973,18,832,12],[973,19,832,13],[974,16,833,10],[975,16,835,10],[975,23,835,17],[976,18,835,19,"data"],[976,22,835,23],[976,24,835,25],[977,16,835,30],[977,17,835,31],[978,14,836,8],[978,15,836,9],[978,16,836,10],[978,23,836,17,"error"],[978,28,836,27],[978,30,836,29],[979,16,837,10,"EventLogger"],[979,40,837,21],[979,41,837,22,"error"],[979,46,837,27],[979,47,837,28],[979,52,837,33],[979,54,837,35],[979,82,837,63],[979,84,837,65,"error"],[979,89,837,79],[979,90,837,80],[980,16,838,10],[980,23,838,17],[981,18,839,12,"error"],[981,23,839,17],[981,25,839,19],[982,20,840,14,"status"],[982,26,840,20],[982,28,840,22],[982,42,840,36],[983,20,841,14,"message"],[983,27,841,21],[983,29,841,23,"error"],[983,34,841,28],[983,35,841,29,"message"],[983,42,841,36],[983,46,841,40],[984,18,842,12],[985,16,843,10],[985,17,843,11],[986,14,844,8],[987,12,845,6],[987,13,845,7],[988,12,845,7],[988,21,804,6,"queryFn"],[988,28,804,13,"queryFn"],[988,29,804,13,"_x19"],[988,33,804,13],[989,14,804,13],[989,21,804,13,"_queryFn12"],[989,31,804,13],[989,32,804,13,"apply"],[989,37,804,13],[989,44,804,13,"arguments"],[989,53,804,13],[990,12,804,13],[991,12,804,13],[991,19,804,6,"queryFn"],[991,26,804,13],[992,10,804,13],[992,13,845,7],[993,10,846,6,"invalidatesTags"],[993,25,846,21],[993,27,846,23],[993,36,846,6,"invalidatesTags"],[993,51,846,21,"invalidatesTags"],[993,52,846,24,"result"],[993,58,846,30],[993,60,846,32,"error"],[993,65,846,37],[993,67,846,39,"automationId"],[993,79,846,51],[994,12,846,51],[994,19,846,56],[994,20,847,8],[995,14,847,10,"type"],[995,18,847,14],[995,20,847,16],[995,32,847,28],[996,14,847,30,"id"],[996,16,847,32],[996,18,847,34,"automationId"],[997,12,847,47],[997,13,847,48],[997,15,848,8],[998,14,848,10,"type"],[998,18,848,14],[998,20,848,16],[998,32,848,28],[999,14,848,30,"id"],[999,16,848,32],[999,18,848,34],[1000,12,848,41],[1000,13,848,42],[1000,15,849,8],[1001,14,849,10,"type"],[1001,18,849,14],[1001,20,849,16],[1001,32,849,28],[1002,14,849,30,"id"],[1002,16,849,32],[1002,18,849,34],[1003,12,849,43],[1003,13,849,44],[1003,14,850,7],[1004,10,850,7],[1005,8,851,4],[1005,9,851,5],[1005,10,851,6],[1006,8,853,4],[1007,0,854,0],[1008,0,855,0],[1009,8,856,4,"unlikeAutomation"],[1009,24,856,20],[1009,26,856,22,"builder"],[1009,33,856,29],[1009,34,856,30,"mutation"],[1009,42,856,38],[1009,43,856,53],[1010,10,857,6,"queryFn"],[1010,17,857,13],[1011,12,857,13],[1011,16,857,13,"_queryFn13"],[1011,26,857,13],[1011,33,857,13,"_asyncToGenerator2"],[1011,51,857,13],[1011,52,857,13,"default"],[1011,59,857,13],[1011,61,857,15],[1011,72,857,22,"automationId"],[1011,84,857,34],[1011,86,857,39],[1012,14,858,8],[1012,18,858,12],[1013,16,859,10],[1013,20,859,10,"_yield$supabase$auth$9"],[1013,42,859,10],[1013,51,859,43,"supabase"],[1013,67,859,51],[1013,68,859,52,"auth"],[1013,72,859,56],[1013,73,859,57,"getUser"],[1013,80,859,64],[1013,81,859,65],[1013,82,859,66],[1014,18,859,26,"user"],[1014,22,859,30],[1014,25,859,30,"_yield$supabase$auth$9"],[1014,47,859,30],[1014,48,859,18,"data"],[1014,52,859,22],[1014,53,859,26,"user"],[1014,57,859,30],[1015,16,861,10],[1015,20,861,14],[1015,21,861,15,"user"],[1015,25,861,19],[1015,27,861,21],[1016,18,862,12],[1016,25,862,19],[1017,20,863,14,"error"],[1017,25,863,19],[1017,27,863,21],[1018,22,864,16,"status"],[1018,28,864,22],[1018,30,864,24],[1018,44,864,38],[1019,22,865,16,"message"],[1019,29,865,23],[1019,31,865,25],[1020,20,866,14],[1021,18,867,12],[1021,19,867,13],[1022,16,868,10],[1023,16,870,10],[1023,20,870,10,"_yield$supabase$from$14"],[1023,43,870,10],[1023,52,870,34,"supabase"],[1023,68,870,42],[1023,69,871,13,"from"],[1023,73,871,17],[1023,74,871,18],[1023,92,871,36],[1023,93,871,37],[1023,94,872,13,"delete"],[1023,100,872,19],[1023,101,872,20],[1023,102,872,21],[1023,103,873,13,"match"],[1023,108,873,18],[1023,109,873,19],[1024,20,874,14,"automation_id"],[1024,33,874,27],[1024,35,874,29,"automationId"],[1024,47,874,41],[1025,20,875,14,"user_id"],[1025,27,875,21],[1025,29,875,23,"user"],[1025,33,875,27],[1025,34,875,28,"id"],[1026,18,876,12],[1026,19,876,13],[1026,20,876,14],[1027,18,870,18,"error"],[1027,23,870,23],[1027,26,870,23,"_yield$supabase$from$14"],[1027,49,870,23],[1027,50,870,18,"error"],[1027,55,870,23],[1028,16,878,10],[1028,20,878,14,"error"],[1028,25,878,19],[1028,27,878,21],[1029,18,879,12,"EventLogger"],[1029,42,879,23],[1029,43,879,24,"error"],[1029,48,879,29],[1029,49,879,30],[1029,54,879,35],[1029,56,879,37],[1029,84,879,65],[1029,86,879,67,"error"],[1029,91,879,81],[1029,92,879,82],[1030,18,880,12],[1030,25,880,19],[1031,20,881,14,"error"],[1031,25,881,19],[1031,27,881,21],[1032,22,882,16,"status"],[1032,28,882,22],[1032,30,882,24],[1032,44,882,38],[1033,22,883,16,"message"],[1033,29,883,23],[1033,31,883,25,"error"],[1033,36,883,30],[1033,37,883,31,"message"],[1033,44,883,38],[1033,48,883,42],[1033,77,883,71],[1034,22,884,16,"code"],[1034,26,884,20],[1034,28,884,22,"error"],[1034,33,884,27],[1034,34,884,28,"code"],[1035,20,885,14],[1036,18,886,12],[1036,19,886,13],[1037,16,887,10],[1038,16,889,10],[1038,23,889,17],[1039,18,889,19,"data"],[1039,22,889,23],[1039,24,889,25],[1040,16,889,30],[1040,17,889,31],[1041,14,890,8],[1041,15,890,9],[1041,16,890,10],[1041,23,890,17,"error"],[1041,28,890,27],[1041,30,890,29],[1042,16,891,10,"EventLogger"],[1042,40,891,21],[1042,41,891,22,"error"],[1042,46,891,27],[1042,47,891,28],[1042,52,891,33],[1042,54,891,35],[1042,84,891,65],[1042,86,891,67,"error"],[1042,91,891,81],[1042,92,891,82],[1043,16,892,10],[1043,23,892,17],[1044,18,893,12,"error"],[1044,23,893,17],[1044,25,893,19],[1045,20,894,14,"status"],[1045,26,894,20],[1045,28,894,22],[1045,42,894,36],[1046,20,895,14,"message"],[1046,27,895,21],[1046,29,895,23,"error"],[1046,34,895,28],[1046,35,895,29,"message"],[1046,42,895,36],[1046,46,895,40],[1047,18,896,12],[1048,16,897,10],[1048,17,897,11],[1049,14,898,8],[1050,12,899,6],[1050,13,899,7],[1051,12,899,7],[1051,21,857,6,"queryFn"],[1051,28,857,13,"queryFn"],[1051,29,857,13,"_x20"],[1051,33,857,13],[1052,14,857,13],[1052,21,857,13,"_queryFn13"],[1052,31,857,13],[1052,32,857,13,"apply"],[1052,37,857,13],[1052,44,857,13,"arguments"],[1052,53,857,13],[1053,12,857,13],[1054,12,857,13],[1054,19,857,6,"queryFn"],[1054,26,857,13],[1055,10,857,13],[1055,13,899,7],[1056,10,900,6,"invalidatesTags"],[1056,25,900,21],[1056,27,900,23],[1056,36,900,6,"invalidatesTags"],[1056,51,900,21,"invalidatesTags"],[1056,52,900,24,"result"],[1056,58,900,30],[1056,60,900,32,"error"],[1056,65,900,37],[1056,67,900,39,"automationId"],[1056,79,900,51],[1057,12,900,51],[1057,19,900,56],[1057,20,901,8],[1058,14,901,10,"type"],[1058,18,901,14],[1058,20,901,16],[1058,32,901,28],[1059,14,901,30,"id"],[1059,16,901,32],[1059,18,901,34,"automationId"],[1060,12,901,47],[1060,13,901,48],[1060,15,902,8],[1061,14,902,10,"type"],[1061,18,902,14],[1061,20,902,16],[1061,32,902,28],[1062,14,902,30,"id"],[1062,16,902,32],[1062,18,902,34],[1063,12,902,41],[1063,13,902,42],[1063,15,903,8],[1064,14,903,10,"type"],[1064,18,903,14],[1064,20,903,16],[1064,32,903,28],[1065,14,903,30,"id"],[1065,16,903,32],[1065,18,903,34],[1066,12,903,43],[1066,13,903,44],[1066,14,904,7],[1067,10,904,7],[1068,8,905,4],[1068,9,905,5],[1068,10,905,6],[1069,8,907,4],[1070,0,908,0],[1071,0,909,0],[1072,8,910,4,"trackAutomationDownload"],[1072,31,910,27],[1072,33,910,29,"builder"],[1072,40,910,36],[1072,41,910,37,"mutation"],[1072,49,910,45],[1072,50,910,60],[1073,10,911,6,"queryFn"],[1073,17,911,13],[1074,12,911,13],[1074,16,911,13,"_queryFn14"],[1074,26,911,13],[1074,33,911,13,"_asyncToGenerator2"],[1074,51,911,13],[1074,52,911,13,"default"],[1074,59,911,13],[1074,61,911,15],[1074,72,911,22,"automationId"],[1074,84,911,34],[1074,86,911,39],[1075,14,912,8],[1075,18,912,12],[1076,16,913,10],[1076,20,913,10,"_yield$supabase$auth$0"],[1076,42,913,10],[1076,51,913,43,"supabase"],[1076,67,913,51],[1076,68,913,52,"auth"],[1076,72,913,56],[1076,73,913,57,"getUser"],[1076,80,913,64],[1076,81,913,65],[1076,82,913,66],[1077,18,913,26,"user"],[1077,22,913,30],[1077,25,913,30,"_yield$supabase$auth$0"],[1077,47,913,30],[1077,48,913,18,"data"],[1077,52,913,22],[1077,53,913,26,"user"],[1077,57,913,30],[1078,16,915,10],[1078,20,915,14],[1078,21,915,15,"user"],[1078,25,915,19],[1078,27,915,21],[1079,18,916,12],[1079,25,916,19],[1080,20,917,14,"error"],[1080,25,917,19],[1080,27,917,21],[1081,22,918,16,"status"],[1081,28,918,22],[1081,30,918,24],[1081,44,918,38],[1082,22,919,16,"message"],[1082,29,919,23],[1082,31,919,25],[1083,20,920,14],[1084,18,921,12],[1084,19,921,13],[1085,16,922,10],[1087,16,924,10],[1088,16,925,10],[1088,20,925,10,"_yield$supabase$from$15"],[1088,43,925,10],[1088,52,925,34,"supabase"],[1088,68,925,42],[1088,69,926,13,"from"],[1088,73,926,17],[1088,74,926,18],[1088,96,926,40],[1088,97,926,41],[1088,98,927,13,"insert"],[1088,104,927,19],[1088,105,927,20],[1089,20,928,14,"automation_id"],[1089,33,928,27],[1089,35,928,29,"automationId"],[1089,47,928,41],[1090,20,929,14,"user_id"],[1090,27,929,21],[1090,29,929,23,"user"],[1090,33,929,27],[1090,34,929,28,"id"],[1090,36,929,30],[1091,20,930,14,"download_type"],[1091,33,930,27],[1091,35,930,29],[1092,18,931,12],[1092,19,931,13],[1092,20,931,14],[1093,18,925,18,"error"],[1093,23,925,23],[1093,26,925,23,"_yield$supabase$from$15"],[1093,49,925,23],[1093,50,925,18,"error"],[1093,55,925,23],[1094,16,933,10],[1094,20,933,14,"error"],[1094,25,933,19],[1094,29,933,23],[1094,30,933,24,"error"],[1094,35,933,29],[1094,36,933,30,"message"],[1094,43,933,37],[1094,44,933,38,"includes"],[1094,52,933,46],[1094,53,933,47],[1094,64,933,58],[1094,65,933,59],[1094,67,933,61],[1095,18,934,12,"EventLogger"],[1095,42,934,23],[1095,43,934,24,"error"],[1095,48,934,29],[1095,49,934,30],[1095,54,934,35],[1095,56,934,37],[1095,82,934,63],[1095,84,934,65,"error"],[1095,89,934,79],[1095,90,934,80],[1096,18,935,12],[1096,25,935,19],[1097,20,936,14,"error"],[1097,25,936,19],[1097,27,936,21],[1098,22,937,16,"status"],[1098,28,937,22],[1098,30,937,24],[1098,44,937,38],[1099,22,938,16,"message"],[1099,29,938,23],[1099,31,938,25,"error"],[1099,36,938,30],[1099,37,938,31,"message"],[1099,44,938,38],[1099,48,938,42],[1099,74,938,68],[1100,22,939,16,"code"],[1100,26,939,20],[1100,28,939,22,"error"],[1100,33,939,27],[1100,34,939,28,"code"],[1101,20,940,14],[1102,18,941,12],[1102,19,941,13],[1103,16,942,10],[1104,16,944,10],[1104,23,944,17],[1105,18,944,19,"data"],[1105,22,944,23],[1105,24,944,25],[1106,16,944,30],[1106,17,944,31],[1107,14,945,8],[1107,15,945,9],[1107,16,945,10],[1107,23,945,17,"error"],[1107,28,945,27],[1107,30,945,29],[1108,16,946,10,"EventLogger"],[1108,40,946,21],[1108,41,946,22,"error"],[1108,46,946,27],[1108,47,946,28],[1108,52,946,33],[1108,54,946,35],[1108,81,946,62],[1108,83,946,64,"error"],[1108,88,946,78],[1108,89,946,79],[1109,16,947,10],[1109,23,947,17],[1110,18,948,12,"error"],[1110,23,948,17],[1110,25,948,19],[1111,20,949,14,"status"],[1111,26,949,20],[1111,28,949,22],[1111,42,949,36],[1112,20,950,14,"message"],[1112,27,950,21],[1112,29,950,23,"error"],[1112,34,950,28],[1112,35,950,29,"message"],[1112,42,950,36],[1112,46,950,40],[1113,18,951,12],[1114,16,952,10],[1114,17,952,11],[1115,14,953,8],[1116,12,954,6],[1116,13,954,7],[1117,12,954,7],[1117,21,911,6,"queryFn"],[1117,28,911,13,"queryFn"],[1117,29,911,13,"_x21"],[1117,33,911,13],[1118,14,911,13],[1118,21,911,13,"_queryFn14"],[1118,31,911,13],[1118,32,911,13,"apply"],[1118,37,911,13],[1118,44,911,13,"arguments"],[1118,53,911,13],[1119,12,911,13],[1120,12,911,13],[1120,19,911,6,"queryFn"],[1120,26,911,13],[1121,10,911,13],[1121,13,954,7],[1122,10,955,6,"invalidatesTags"],[1122,25,955,21],[1122,27,955,23],[1122,36,955,6,"invalidatesTags"],[1122,51,955,21,"invalidatesTags"],[1122,52,955,24,"result"],[1122,58,955,30],[1122,60,955,32,"error"],[1122,65,955,37],[1122,67,955,39,"automationId"],[1122,79,955,51],[1123,12,955,51],[1123,19,955,56],[1123,20,956,8],[1124,14,956,10,"type"],[1124,18,956,14],[1124,20,956,16],[1124,32,956,28],[1125,14,956,30,"id"],[1125,16,956,32],[1125,18,956,34,"automationId"],[1126,12,956,47],[1126,13,956,48],[1126,15,957,8],[1127,14,957,10,"type"],[1127,18,957,14],[1127,20,957,16],[1127,32,957,28],[1128,14,957,30,"id"],[1128,16,957,32],[1128,18,957,34],[1129,12,957,41],[1129,13,957,42],[1129,15,958,8],[1130,14,958,10,"type"],[1130,18,958,14],[1130,20,958,16],[1130,32,958,28],[1131,14,958,30,"id"],[1131,16,958,32],[1131,18,958,34],[1132,12,958,43],[1132,13,958,44],[1132,14,959,7],[1133,10,959,7],[1134,8,960,4],[1134,9,960,5],[1135,6,961,2],[1135,7,961,3],[1136,4,961,3],[1137,2,961,4],[1137,4,962,1],[1137,5,962,2],[1139,2,964,0],[1140,2,965,7],[1140,6,966,2,"useGetMyAutomationsQuery"],[1140,30,966,26],[1140,33,966,26,"exports"],[1140,40,966,26],[1140,41,966,26,"useGetMyAutomationsQuery"],[1140,65,966,26],[1140,68,982,4,"automationApi"],[1140,81,982,17],[1140,82,966,2,"useGetMyAutomationsQuery"],[1140,106,966,26],[1141,4,967,2,"useGetAutomationQuery"],[1141,25,967,23],[1141,28,967,23,"exports"],[1141,35,967,23],[1141,36,967,23,"useGetAutomationQuery"],[1141,57,967,23],[1141,60,982,4,"automationApi"],[1141,73,982,17],[1141,74,967,2,"useGetAutomationQuery"],[1141,95,967,23],[1142,4,968,2,"useGetPublicAutomationsQuery"],[1142,32,968,30],[1142,35,968,30,"exports"],[1142,42,968,30],[1142,43,968,30,"useGetPublicAutomationsQuery"],[1142,71,968,30],[1142,74,982,4,"automationApi"],[1142,87,982,17],[1142,88,968,2,"useGetPublicAutomationsQuery"],[1142,116,968,30],[1143,4,969,2,"useCreateAutomationMutation"],[1143,31,969,29],[1143,34,969,29,"exports"],[1143,41,969,29],[1143,42,969,29,"useCreateAutomationMutation"],[1143,69,969,29],[1143,72,982,4,"automationApi"],[1143,85,982,17],[1143,86,969,2,"useCreateAutomationMutation"],[1143,113,969,29],[1144,4,970,2,"useUpdateAutomationMutation"],[1144,31,970,29],[1144,34,970,29,"exports"],[1144,41,970,29],[1144,42,970,29,"useUpdateAutomationMutation"],[1144,69,970,29],[1144,72,982,4,"automationApi"],[1144,85,982,17],[1144,86,970,2,"useUpdateAutomationMutation"],[1144,113,970,29],[1145,4,971,2,"useDeleteAutomationMutation"],[1145,31,971,29],[1145,34,971,29,"exports"],[1145,41,971,29],[1145,42,971,29,"useDeleteAutomationMutation"],[1145,69,971,29],[1145,72,982,4,"automationApi"],[1145,85,982,17],[1145,86,971,2,"useDeleteAutomationMutation"],[1145,113,971,29],[1146,4,972,2,"useCloneAutomationMutation"],[1146,30,972,28],[1146,33,972,28,"exports"],[1146,40,972,28],[1146,41,972,28,"useCloneAutomationMutation"],[1146,67,972,28],[1146,70,982,4,"automationApi"],[1146,83,982,17],[1146,84,972,2,"useCloneAutomationMutation"],[1146,110,972,28],[1147,4,973,2,"useGetUserStatsQuery"],[1147,24,973,22],[1147,27,973,22,"exports"],[1147,34,973,22],[1147,35,973,22,"useGetUserStatsQuery"],[1147,55,973,22],[1147,58,982,4,"automationApi"],[1147,71,982,17],[1147,72,973,2,"useGetUserStatsQuery"],[1147,92,973,22],[1148,4,974,2,"useGetRecentExecutionsQuery"],[1148,31,974,29],[1148,34,974,29,"exports"],[1148,41,974,29],[1148,42,974,29,"useGetRecentExecutionsQuery"],[1148,69,974,29],[1148,72,982,4,"automationApi"],[1148,85,982,17],[1148,86,974,2,"useGetRecentExecutionsQuery"],[1148,113,974,29],[1149,4,975,2,"useGetAutomationExecutionsQuery"],[1149,35,975,33],[1149,38,975,33,"exports"],[1149,45,975,33],[1149,46,975,33,"useGetAutomationExecutionsQuery"],[1149,77,975,33],[1149,80,982,4,"automationApi"],[1149,93,982,17],[1149,94,975,2,"useGetAutomationExecutionsQuery"],[1149,125,975,33],[1150,4,976,2,"useGetExecutionHistoryQuery"],[1150,31,976,29],[1150,34,976,29,"exports"],[1150,41,976,29],[1150,42,976,29,"useGetExecutionHistoryQuery"],[1150,69,976,29],[1150,72,982,4,"automationApi"],[1150,85,982,17],[1150,86,976,2,"useGetExecutionHistoryQuery"],[1150,113,976,29],[1151,4,977,2,"useClearHistoryMutation"],[1151,27,977,25],[1151,30,977,25,"exports"],[1151,37,977,25],[1151,38,977,25,"useClearHistoryMutation"],[1151,61,977,25],[1151,64,982,4,"automationApi"],[1151,77,982,17],[1151,78,977,2,"useClearHistoryMutation"],[1151,101,977,25],[1152,4,978,2,"useGetTrendingAutomationsQuery"],[1152,34,978,32],[1152,37,978,32,"exports"],[1152,44,978,32],[1152,45,978,32,"useGetTrendingAutomationsQuery"],[1152,75,978,32],[1152,78,982,4,"automationApi"],[1152,91,982,17],[1152,92,978,2,"useGetTrendingAutomationsQuery"],[1152,122,978,32],[1153,4,979,2,"useLikeAutomationMutation"],[1153,29,979,27],[1153,32,979,27,"exports"],[1153,39,979,27],[1153,40,979,27,"useLikeAutomationMutation"],[1153,65,979,27],[1153,68,982,4,"automationApi"],[1153,81,982,17],[1153,82,979,2,"useLikeAutomationMutation"],[1153,107,979,27],[1154,4,980,2,"useUnlikeAutomationMutation"],[1154,31,980,29],[1154,34,980,29,"exports"],[1154,41,980,29],[1154,42,980,29,"useUnlikeAutomationMutation"],[1154,69,980,29],[1154,72,982,4,"automationApi"],[1154,85,982,17],[1154,86,980,2,"useUnlikeAutomationMutation"],[1154,113,980,29],[1155,4,981,2,"useTrackAutomationDownloadMutation"],[1155,38,981,36],[1155,41,981,36,"exports"],[1155,48,981,36],[1155,49,981,36,"useTrackAutomationDownloadMutation"],[1155,83,981,36],[1155,86,982,4,"automationApi"],[1155,99,982,17],[1155,100,981,2,"useTrackAutomationDownloadMutation"],[1155,134,981,36],[1156,0,982,18],[1156,3]],"functionMap":{"names":["<global>","createApi$argument_0.endpoints","builder.query$argument_0.queryFn","builder.query$argument_0.providesTags","result.map$argument_0","networkAwareQuery$argument_0","builder.mutation$argument_0.queryFn","builder.mutation$argument_0.invalidatesTags"],"mappings":"AAA;aCqB;eCO;ODwC;oBEC;2BCE,iDD;gDFC;eCO;ODuE;oBEC,mDF;eCO;YGI;aHe;OD0B;eKQ;OLkD;eKW;OL0C;uBMC;ONI;eKO;OLwC;uBMC;ONI;eKO;OLgF;eCa;ODwD;eCU;ODyC;eCQ;OD8C;oBEC;OFE;eCO;OD4C;eKQ;OLuC;eCc;YGI;aHgB;OD0B;eKU;OLyC;uBMC;ONI;eKO;OL0C;uBMC;ONI;eKO;OL2C;uBMC;ONI;IDE"}},"type":"js/module"}]}