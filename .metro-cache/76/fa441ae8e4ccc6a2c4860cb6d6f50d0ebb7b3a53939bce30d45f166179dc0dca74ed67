{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // ndef-util.js\n  // Copyright 2013 Don Coleman\n  //\n\n  // https://weblog.rogueamoeba.com/2017/02/27/javascript-correctly-converting-a-byte-array-to-a-utf-8-string/\n  function _utf8ArrayToStr(data) {\n    var extraByteMap = [1, 1, 1, 1, 2, 2, 3, 0];\n    var count = data.length;\n    var str = '';\n    for (var index = 0; index < count;) {\n      var ch = data[index++];\n      if (ch & 0x80) {\n        var extra = extraByteMap[ch >> 3 & 0x07];\n        if (!(ch & 0x40) || !extra || index + extra > count) {\n          return null;\n        }\n        ch = ch & 0x3f >> extra;\n        for (; extra > 0; extra -= 1) {\n          var chx = data[index++];\n          if ((chx & 0xc0) !== 0x80) {\n            return null;\n          }\n          ch = ch << 6 | chx & 0x3f;\n        }\n      }\n      str += String.fromCharCode(ch);\n    }\n    return str;\n  }\n\n  // https://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n  function _toUTF8Array(str) {\n    var out = [],\n      p = 0;\n    for (var i = 0; i < str.length; i++) {\n      var c = str.charCodeAt(i);\n      if (c < 128) {\n        out[p++] = c;\n      } else if (c < 2048) {\n        out[p++] = c >> 6 | 192;\n        out[p++] = c & 63 | 128;\n      } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n        // Surrogate Pair\n        c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n        out[p++] = c >> 18 | 240;\n        out[p++] = c >> 12 & 63 | 128;\n        out[p++] = c >> 6 & 63 | 128;\n        out[p++] = c & 63 | 128;\n      } else {\n        out[p++] = c >> 12 | 224;\n        out[p++] = c >> 6 & 63 | 128;\n        out[p++] = c & 63 | 128;\n      }\n    }\n    return out;\n  }\n  function stringToBytes(string) {\n    return _toUTF8Array(string);\n    // var bytes = Buffer(string).toJSON();\n    // if (bytes.hasOwnProperty('data')) {\n    //     // Node 0.12.x\n    //     return bytes.data;\n    // } else {\n    //     // Node 0.10.x\n    //     return bytes;\n    // }\n  }\n  function bytesToString(bytes) {\n    if (typeof bytes === 'string') {\n      return bytes;\n    }\n    return _utf8ArrayToStr(bytes);\n    // return Buffer(bytes).toString();\n  }\n\n  // useful for readable version of Tag UID\n  function bytesToHexString(bytes) {\n    var dec,\n      hexstring,\n      bytesAsHexString = '';\n    for (var i = 0; i < bytes.length; i++) {\n      if (bytes[i] >= 0) {\n        dec = bytes[i];\n      } else {\n        dec = 256 + bytes[i];\n      }\n      hexstring = dec.toString(16);\n      // zero padding\n      if (hexstring.length === 1) {\n        hexstring = '0' + hexstring;\n      }\n      bytesAsHexString += hexstring;\n    }\n    return bytesAsHexString;\n  }\n\n  // i must be <= 256\n  function toHex(i) {\n    var hex;\n    if (i < 0) {\n      i += 256;\n    }\n    hex = i.toString(16);\n\n    // zero padding\n    if (hex.length === 1) {\n      hex = '0' + hex;\n    }\n    return hex;\n  }\n  function toPrintable(i) {\n    if (i >= 0x20 & i <= 0x7f) {\n      return String.fromCharCode(i);\n    } else {\n      return '.';\n    }\n  }\n  module.exports = {\n    stringToBytes: stringToBytes,\n    bytesToString: bytesToString,\n    bytesToHexString: bytesToHexString,\n    toHex: toHex,\n    toPrintable: toPrintable\n  };\n});","lineCount":126,"map":[[2,2,1,0],[3,2,2,0],[4,2,3,0],[6,2,5,0],[7,2,6,0],[7,11,6,9,"_utf8ArrayToStr"],[7,26,6,24,"_utf8ArrayToStr"],[7,27,6,25,"data"],[7,31,6,29],[7,33,6,31],[8,4,7,2],[8,8,7,8,"extraByteMap"],[8,20,7,20],[8,23,7,23],[8,24,7,24],[8,25,7,25],[8,27,7,27],[8,28,7,28],[8,30,7,30],[8,31,7,31],[8,33,7,33],[8,34,7,34],[8,36,7,36],[8,37,7,37],[8,39,7,39],[8,40,7,40],[8,42,7,42],[8,43,7,43],[8,45,7,45],[8,46,7,46],[8,47,7,47],[9,4,8,2],[9,8,8,6,"count"],[9,13,8,11],[9,16,8,14,"data"],[9,20,8,18],[9,21,8,19,"length"],[9,27,8,25],[10,4,9,2],[10,8,9,6,"str"],[10,11,9,9],[10,14,9,12],[10,16,9,14],[11,4,11,2],[11,9,11,7],[11,13,11,11,"index"],[11,18,11,16],[11,21,11,19],[11,22,11,20],[11,24,11,22,"index"],[11,29,11,27],[11,32,11,30,"count"],[11,37,11,35],[11,40,11,39],[12,6,12,4],[12,10,12,8,"ch"],[12,12,12,10],[12,15,12,13,"data"],[12,19,12,17],[12,20,12,18,"index"],[12,25,12,23],[12,27,12,25],[12,28,12,26],[13,6,13,4],[13,10,13,8,"ch"],[13,12,13,10],[13,15,13,13],[13,19,13,17],[13,21,13,19],[14,8,14,6],[14,12,14,10,"extra"],[14,17,14,15],[14,20,14,18,"extraByteMap"],[14,32,14,30],[14,33,14,32,"ch"],[14,35,14,34],[14,39,14,38],[14,40,14,39],[14,43,14,43],[14,47,14,47],[14,48,14,48],[15,8,15,6],[15,12,15,10],[15,14,15,12,"ch"],[15,16,15,14],[15,19,15,17],[15,23,15,21],[15,24,15,22],[15,28,15,26],[15,29,15,27,"extra"],[15,34,15,32],[15,38,15,36,"index"],[15,43,15,41],[15,46,15,44,"extra"],[15,51,15,49],[15,54,15,52,"count"],[15,59,15,57],[15,61,15,59],[16,10,16,8],[16,17,16,15],[16,21,16,19],[17,8,17,6],[18,8,19,6,"ch"],[18,10,19,8],[18,13,19,11,"ch"],[18,15,19,13],[18,18,19,17],[18,22,19,21],[18,26,19,25,"extra"],[18,31,19,31],[19,8,20,6],[19,15,20,13,"extra"],[19,20,20,18],[19,23,20,21],[19,24,20,22],[19,26,20,24,"extra"],[19,31,20,29],[19,35,20,33],[19,36,20,34],[19,38,20,36],[20,10,21,8],[20,14,21,12,"chx"],[20,17,21,15],[20,20,21,18,"data"],[20,24,21,22],[20,25,21,23,"index"],[20,30,21,28],[20,32,21,30],[20,33,21,31],[21,10,22,8],[21,14,22,12],[21,15,22,13,"chx"],[21,18,22,16],[21,21,22,19],[21,25,22,23],[21,31,22,29],[21,35,22,33],[21,37,22,35],[22,12,23,10],[22,19,23,17],[22,23,23,21],[23,10,24,8],[24,10,26,8,"ch"],[24,12,26,10],[24,15,26,14,"ch"],[24,17,26,16],[24,21,26,20],[24,22,26,21],[24,25,26,26,"chx"],[24,28,26,29],[24,31,26,32],[24,35,26,37],[25,8,27,6],[26,6,28,4],[27,6,30,4,"str"],[27,9,30,7],[27,13,30,11,"String"],[27,19,30,17],[27,20,30,18,"fromCharCode"],[27,32,30,30],[27,33,30,31,"ch"],[27,35,30,33],[27,36,30,34],[28,4,31,2],[29,4,33,2],[29,11,33,9,"str"],[29,14,33,12],[30,2,34,0],[32,2,36,0],[33,2,37,0],[33,11,37,9,"_toUTF8Array"],[33,23,37,21,"_toUTF8Array"],[33,24,37,22,"str"],[33,27,37,25],[33,29,37,27],[34,4,38,2],[34,8,38,6,"out"],[34,11,38,9],[34,14,38,12],[34,16,38,14],[35,6,39,4,"p"],[35,7,39,5],[35,10,39,8],[35,11,39,9],[36,4,40,2],[36,9,40,7],[36,13,40,11,"i"],[36,14,40,12],[36,17,40,15],[36,18,40,16],[36,20,40,18,"i"],[36,21,40,19],[36,24,40,22,"str"],[36,27,40,25],[36,28,40,26,"length"],[36,34,40,32],[36,36,40,34,"i"],[36,37,40,35],[36,39,40,37],[36,41,40,39],[37,6,41,4],[37,10,41,8,"c"],[37,11,41,9],[37,14,41,12,"str"],[37,17,41,15],[37,18,41,16,"charCodeAt"],[37,28,41,26],[37,29,41,27,"i"],[37,30,41,28],[37,31,41,29],[38,6,42,4],[38,10,42,8,"c"],[38,11,42,9],[38,14,42,12],[38,17,42,15],[38,19,42,17],[39,8,43,6,"out"],[39,11,43,9],[39,12,43,10,"p"],[39,13,43,11],[39,15,43,13],[39,16,43,14],[39,19,43,17,"c"],[39,20,43,18],[40,6,44,4],[40,7,44,5],[40,13,44,11],[40,17,44,15,"c"],[40,18,44,16],[40,21,44,19],[40,25,44,23],[40,27,44,25],[41,8,45,6,"out"],[41,11,45,9],[41,12,45,10,"p"],[41,13,45,11],[41,15,45,13],[41,16,45,14],[41,19,45,18,"c"],[41,20,45,19],[41,24,45,23],[41,25,45,24],[41,28,45,28],[41,31,45,31],[42,8,46,6,"out"],[42,11,46,9],[42,12,46,10,"p"],[42,13,46,11],[42,15,46,13],[42,16,46,14],[42,19,46,18,"c"],[42,20,46,19],[42,23,46,22],[42,25,46,24],[42,28,46,28],[42,31,46,31],[43,6,47,4],[43,7,47,5],[43,13,47,11],[43,17,48,6],[43,18,48,7,"c"],[43,19,48,8],[43,22,48,11],[43,28,48,17],[43,34,48,23],[43,40,48,29],[43,44,49,6,"i"],[43,45,49,7],[43,48,49,10],[43,49,49,11],[43,52,49,14,"str"],[43,55,49,17],[43,56,49,18,"length"],[43,62,49,24],[43,66,50,6],[43,67,50,7,"str"],[43,70,50,10],[43,71,50,11,"charCodeAt"],[43,81,50,21],[43,82,50,22,"i"],[43,83,50,23],[43,86,50,26],[43,87,50,27],[43,88,50,28],[43,91,50,31],[43,97,50,37],[43,103,50,43],[43,109,50,49],[43,111,51,6],[44,8,52,6],[45,8,53,6,"c"],[45,9,53,7],[45,12,53,10],[45,19,53,17],[45,23,53,21],[45,24,53,22,"c"],[45,25,53,23],[45,28,53,26],[45,34,53,32],[45,39,53,37],[45,41,53,39],[45,42,53,40],[45,46,53,44,"str"],[45,49,53,47],[45,50,53,48,"charCodeAt"],[45,60,53,58],[45,61,53,59],[45,63,53,61,"i"],[45,64,53,62],[45,65,53,63],[45,68,53,66],[45,74,53,72],[45,75,53,73],[46,8,54,6,"out"],[46,11,54,9],[46,12,54,10,"p"],[46,13,54,11],[46,15,54,13],[46,16,54,14],[46,19,54,18,"c"],[46,20,54,19],[46,24,54,23],[46,26,54,25],[46,29,54,29],[46,32,54,32],[47,8,55,6,"out"],[47,11,55,9],[47,12,55,10,"p"],[47,13,55,11],[47,15,55,13],[47,16,55,14],[47,19,55,19,"c"],[47,20,55,20],[47,24,55,24],[47,26,55,26],[47,29,55,30],[47,31,55,32],[47,34,55,36],[47,37,55,39],[48,8,56,6,"out"],[48,11,56,9],[48,12,56,10,"p"],[48,13,56,11],[48,15,56,13],[48,16,56,14],[48,19,56,19,"c"],[48,20,56,20],[48,24,56,24],[48,25,56,25],[48,28,56,29],[48,30,56,31],[48,33,56,35],[48,36,56,38],[49,8,57,6,"out"],[49,11,57,9],[49,12,57,10,"p"],[49,13,57,11],[49,15,57,13],[49,16,57,14],[49,19,57,18,"c"],[49,20,57,19],[49,23,57,22],[49,25,57,24],[49,28,57,28],[49,31,57,31],[50,6,58,4],[50,7,58,5],[50,13,58,11],[51,8,59,6,"out"],[51,11,59,9],[51,12,59,10,"p"],[51,13,59,11],[51,15,59,13],[51,16,59,14],[51,19,59,18,"c"],[51,20,59,19],[51,24,59,23],[51,26,59,25],[51,29,59,29],[51,32,59,32],[52,8,60,6,"out"],[52,11,60,9],[52,12,60,10,"p"],[52,13,60,11],[52,15,60,13],[52,16,60,14],[52,19,60,19,"c"],[52,20,60,20],[52,24,60,24],[52,25,60,25],[52,28,60,29],[52,30,60,31],[52,33,60,35],[52,36,60,38],[53,8,61,6,"out"],[53,11,61,9],[53,12,61,10,"p"],[53,13,61,11],[53,15,61,13],[53,16,61,14],[53,19,61,18,"c"],[53,20,61,19],[53,23,61,22],[53,25,61,24],[53,28,61,28],[53,31,61,31],[54,6,62,4],[55,4,63,2],[56,4,64,2],[56,11,64,9,"out"],[56,14,64,12],[57,2,65,0],[58,2,67,0],[58,11,67,9,"stringToBytes"],[58,24,67,22,"stringToBytes"],[58,25,67,23,"string"],[58,31,67,29],[58,33,67,31],[59,4,68,2],[59,11,68,9,"_toUTF8Array"],[59,23,68,21],[59,24,68,22,"string"],[59,30,68,28],[59,31,68,29],[60,4,69,2],[61,4,70,2],[62,4,71,2],[63,4,72,2],[64,4,73,2],[65,4,74,2],[66,4,75,2],[67,4,76,2],[68,2,77,0],[69,2,79,0],[69,11,79,9,"bytesToString"],[69,24,79,22,"bytesToString"],[69,25,79,23,"bytes"],[69,30,79,28],[69,32,79,30],[70,4,80,2],[70,8,80,6],[70,15,80,13,"bytes"],[70,20,80,18],[70,25,80,23],[70,33,80,31],[70,35,80,33],[71,6,81,4],[71,13,81,11,"bytes"],[71,18,81,16],[72,4,82,2],[73,4,84,2],[73,11,84,9,"_utf8ArrayToStr"],[73,26,84,24],[73,27,84,25,"bytes"],[73,32,84,30],[73,33,84,31],[74,4,85,2],[75,2,86,0],[77,2,88,0],[78,2,89,0],[78,11,89,9,"bytesToHexString"],[78,27,89,25,"bytesToHexString"],[78,28,89,26,"bytes"],[78,33,89,31],[78,35,89,33],[79,4,90,2],[79,8,90,6,"dec"],[79,11,90,9],[80,6,91,4,"hexstring"],[80,15,91,13],[81,6,92,4,"bytesAsHexString"],[81,22,92,20],[81,25,92,23],[81,27,92,25],[82,4,93,2],[82,9,93,7],[82,13,93,11,"i"],[82,14,93,12],[82,17,93,15],[82,18,93,16],[82,20,93,18,"i"],[82,21,93,19],[82,24,93,22,"bytes"],[82,29,93,27],[82,30,93,28,"length"],[82,36,93,34],[82,38,93,36,"i"],[82,39,93,37],[82,41,93,39],[82,43,93,41],[83,6,94,4],[83,10,94,8,"bytes"],[83,15,94,13],[83,16,94,14,"i"],[83,17,94,15],[83,18,94,16],[83,22,94,20],[83,23,94,21],[83,25,94,23],[84,8,95,6,"dec"],[84,11,95,9],[84,14,95,12,"bytes"],[84,19,95,17],[84,20,95,18,"i"],[84,21,95,19],[84,22,95,20],[85,6,96,4],[85,7,96,5],[85,13,96,11],[86,8,97,6,"dec"],[86,11,97,9],[86,14,97,12],[86,17,97,15],[86,20,97,18,"bytes"],[86,25,97,23],[86,26,97,24,"i"],[86,27,97,25],[86,28,97,26],[87,6,98,4],[88,6,99,4,"hexstring"],[88,15,99,13],[88,18,99,16,"dec"],[88,21,99,19],[88,22,99,20,"toString"],[88,30,99,28],[88,31,99,29],[88,33,99,31],[88,34,99,32],[89,6,100,4],[90,6,101,4],[90,10,101,8,"hexstring"],[90,19,101,17],[90,20,101,18,"length"],[90,26,101,24],[90,31,101,29],[90,32,101,30],[90,34,101,32],[91,8,102,6,"hexstring"],[91,17,102,15],[91,20,102,18],[91,23,102,21],[91,26,102,24,"hexstring"],[91,35,102,33],[92,6,103,4],[93,6,104,4,"bytesAsHexString"],[93,22,104,20],[93,26,104,24,"hexstring"],[93,35,104,33],[94,4,105,2],[95,4,106,2],[95,11,106,9,"bytesAsHexString"],[95,27,106,25],[96,2,107,0],[98,2,109,0],[99,2,110,0],[99,11,110,9,"toHex"],[99,16,110,14,"toHex"],[99,17,110,15,"i"],[99,18,110,16],[99,20,110,18],[100,4,111,2],[100,8,111,6,"hex"],[100,11,111,9],[101,4,113,2],[101,8,113,6,"i"],[101,9,113,7],[101,12,113,10],[101,13,113,11],[101,15,113,13],[102,6,114,4,"i"],[102,7,114,5],[102,11,114,9],[102,14,114,12],[103,4,115,2],[104,4,116,2,"hex"],[104,7,116,5],[104,10,116,8,"i"],[104,11,116,9],[104,12,116,10,"toString"],[104,20,116,18],[104,21,116,19],[104,23,116,21],[104,24,116,22],[106,4,118,2],[107,4,119,2],[107,8,119,6,"hex"],[107,11,119,9],[107,12,119,10,"length"],[107,18,119,16],[107,23,119,21],[107,24,119,22],[107,26,119,24],[108,6,120,4,"hex"],[108,9,120,7],[108,12,120,10],[108,15,120,13],[108,18,120,16,"hex"],[108,21,120,19],[109,4,121,2],[110,4,122,2],[110,11,122,9,"hex"],[110,14,122,12],[111,2,123,0],[112,2,125,0],[112,11,125,9,"toPrintable"],[112,22,125,20,"toPrintable"],[112,23,125,21,"i"],[112,24,125,22],[112,26,125,24],[113,4,126,2],[113,8,126,7,"i"],[113,9,126,8],[113,13,126,12],[113,17,126,16],[113,20,126,21,"i"],[113,21,126,22],[113,25,126,26],[113,29,126,31],[113,31,126,33],[114,6,127,4],[114,13,127,11,"String"],[114,19,127,17],[114,20,127,18,"fromCharCode"],[114,32,127,30],[114,33,127,31,"i"],[114,34,127,32],[114,35,127,33],[115,4,128,2],[115,5,128,3],[115,11,128,9],[116,6,129,4],[116,13,129,11],[116,16,129,14],[117,4,130,2],[118,2,131,0],[119,2,133,0,"module"],[119,8,133,6],[119,9,133,7,"exports"],[119,16,133,14],[119,19,133,17],[120,4,134,2,"stringToBytes"],[120,17,134,15],[120,19,134,17,"stringToBytes"],[120,32,134,30],[121,4,135,2,"bytesToString"],[121,17,135,15],[121,19,135,17,"bytesToString"],[121,32,135,30],[122,4,136,2,"bytesToHexString"],[122,20,136,18],[122,22,136,20,"bytesToHexString"],[122,38,136,36],[123,4,137,2,"toHex"],[123,9,137,7],[123,11,137,9,"toHex"],[123,16,137,14],[124,4,138,2,"toPrintable"],[124,15,138,13],[124,17,138,15,"toPrintable"],[125,2,139,0],[125,3,139,1],[126,0,139,2],[126,3]],"functionMap":{"names":["<global>","_utf8ArrayToStr","_toUTF8Array","stringToBytes","bytesToString","bytesToHexString","toHex","toPrintable"],"mappings":"AAA;ACK;CD4B;AEG;CF4B;AGE;CHU;AIE;CJO;AKG;CLkB;AMG;CNa;AOE;CPM"}},"type":"js/module"}]}