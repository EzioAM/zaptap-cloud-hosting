{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"react-native-nfc-manager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":7,"column":34,"index":117}}],"key":"DwEXTZnMmZjAbKP6QyYNZTSkdvU=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":118},"end":{"line":8,"column":47,"index":165}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"../linking/SmartLinkService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":212},"end":{"line":10,"column":63,"index":275}}],"key":"xFWGPFSDqLCUsahlodEUV9ro5tI=","exportNames":["*"]}},{"name":"../sharing/AutomationSharingService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":276},"end":{"line":11,"column":79,"index":355}}],"key":"jIFc41Ve4BG8Qh47s5XdC0prtsg=","exportNames":["*"]}},{"name":"../sharing/SharingAnalyticsService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":356},"end":{"line":12,"column":77,"index":433}}],"key":"P8IQnKhXVMj+c1hljiuMzdRsUOQ=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":434},"end":{"line":13,"column":54,"index":488}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.NFCService = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _reactNativeNfcManager = _interopRequireWildcard(require(_dependencyMap[5], \"react-native-nfc-manager\"));\n  var _reactNative = require(_dependencyMap[6], \"react-native\");\n  var _SmartLinkService = require(_dependencyMap[7], \"../linking/SmartLinkService\");\n  var _AutomationSharingService = require(_dependencyMap[8], \"../sharing/AutomationSharingService\");\n  var _SharingAnalyticsService = require(_dependencyMap[9], \"../sharing/SharingAnalyticsService\");\n  var _EventLogger = require(_dependencyMap[10], \"../../utils/EventLogger\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\n  var NFCService = exports.NFCService = /*#__PURE__*/function () {\n    function NFCService() {\n      (0, _classCallCheck2.default)(this, NFCService);\n      this.isInitialized = false;\n      this.isSupported = false;\n    }\n    return (0, _createClass2.default)(NFCService, [{\n      key: \"initialize\",\n      value: function () {\n        var _initialize = (0, _asyncToGenerator2.default)(function* () {\n          if (this.isInitialized) {\n            return this.isSupported;\n          }\n          try {\n            // Check if NFC Manager is available\n            if (!_reactNativeNfcManager.default) {\n              _EventLogger.EventLogger.debug('NFC', 'NFC Manager not available');\n              this.isSupported = false;\n              this.isInitialized = true;\n              return false;\n            }\n\n            // Initialize NFC Manager\n            var supported = yield _reactNativeNfcManager.default.isSupported();\n            if (!supported) {\n              _EventLogger.EventLogger.debug('NFC', 'NFC is not supported on this device');\n              this.isSupported = false;\n              this.isInitialized = true;\n              return false;\n            }\n            yield _reactNativeNfcManager.default.start();\n            this.isSupported = true;\n            this.isInitialized = true;\n            _EventLogger.EventLogger.debug('NFC', 'NFC initialized successfully');\n            return true;\n          } catch (error) {\n            _EventLogger.EventLogger.error('NFC', 'Failed to initialize NFC:', error);\n            this.isSupported = false;\n            this.isInitialized = true;\n            return false;\n          }\n        });\n        function initialize() {\n          return _initialize.apply(this, arguments);\n        }\n        return initialize;\n      }()\n    }, {\n      key: \"checkNFCEnabled\",\n      value: function () {\n        var _checkNFCEnabled = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            if (!this.isSupported) {\n              return false;\n            }\n            var enabled = yield _reactNativeNfcManager.default.isEnabled();\n            if (!enabled) {\n              _reactNative.Alert.alert('NFC Disabled', 'NFC is disabled on your device. Please enable it in your device settings to use NFC features.', [{\n                text: 'Cancel'\n              }, {\n                text: 'Open Settings',\n                onPress: function onPress() {\n                  return _reactNativeNfcManager.default.goToNfcSetting();\n                }\n              }]);\n              return false;\n            }\n            return true;\n          } catch (error) {\n            _EventLogger.EventLogger.error('NFC', 'Error checking NFC status:', error);\n            return false;\n          }\n        });\n        function checkNFCEnabled() {\n          return _checkNFCEnabled.apply(this, arguments);\n        }\n        return checkNFCEnabled;\n      }()\n    }, {\n      key: \"writeAutomationToNFC\",\n      value: function () {\n        var _writeAutomationToNFC = (0, _asyncToGenerator2.default)(function* (automation) {\n          try {\n            var _automation$steps;\n            if (!(yield this.initialize())) {\n              _reactNative.Alert.alert('NFC Not Available', 'NFC is not supported on this device');\n              return false;\n            }\n            if (!(yield this.checkNFCEnabled())) {\n              return false;\n            }\n            var smartUrl;\n\n            // For public automations, create a public share link\n            if (automation.is_public) {\n              _EventLogger.EventLogger.debug('NFC', 'Creating public share link for NFC tag');\n              var shareResult = yield _AutomationSharingService.automationSharingService.createPublicShareLink(automation);\n              if (shareResult.success && shareResult.shareUrl) {\n                smartUrl = shareResult.shareUrl;\n                _EventLogger.EventLogger.debug('NFC', 'Using public share URL for NFC:', smartUrl);\n              } else {\n                // Fallback to regular smart link\n                var smartLink = _SmartLinkService.smartLinkService.generateSmartLink(automation);\n                smartUrl = smartLink.universalUrl;\n                _EventLogger.EventLogger.warn('NFC', 'Failed to create public share, using regular link:', smartUrl);\n              }\n            } else {\n              // For private automations, use regular smart link\n              var _smartLink = _SmartLinkService.smartLinkService.generateSmartLink(automation);\n              smartUrl = _smartLink.universalUrl;\n              _EventLogger.EventLogger.debug('NFC', 'Using regular smart link for private automation:', smartUrl);\n            }\n\n            // Create NDEF records for better app detection\n            // Primary: Web URL that triggers app if installed (Android App Links / iOS Universal Links)\n            // Secondary: App scheme URL as fallback\n            // Tertiary: Metadata about the automation\n            var records = [];\n\n            // Primary record: HTTPS URL (triggers app if installed via App Links/Universal Links)\n            records.push(_reactNativeNfcManager.Ndef.uriRecord(smartUrl));\n\n            // Add Android Application Record (AAR) to ensure app opens on Android\n            if (_reactNative.Platform.OS === 'android') {\n              // AAR helps Android know which app should handle this NFC tag\n              var aarRecord = {\n                tnf: 4,\n                // TNF_EXTERNAL_TYPE\n                type: Array.from(new TextEncoder().encode('android.com:pkg')),\n                payload: Array.from(new TextEncoder().encode('com.zaptap.app')),\n                id: []\n              };\n              records.push(aarRecord);\n            }\n\n            // Add descriptive text records\n            records.push(_reactNativeNfcManager.Ndef.textRecord(`Zaptap: ${automation.title}`));\n            records.push(_reactNativeNfcManager.Ndef.textRecord(`${((_automation$steps = automation.steps) == null ? void 0 : _automation$steps.length) || 0} steps | Tap to run`));\n            var bytes = _reactNativeNfcManager.Ndef.encodeMessage(records);\n            if (!bytes) {\n              throw new Error('Failed to encode NFC message');\n            }\n\n            // Request NFC tag write\n            yield _reactNativeNfcManager.default.requestTechnology(_reactNativeNfcManager.NfcTech.Ndef);\n\n            // Check if tag is writable\n            var tag = yield _reactNativeNfcManager.default.getTag();\n            if (!tag) {\n              throw new Error('No NFC tag detected');\n            }\n\n            // Write to tag\n            yield _reactNativeNfcManager.default.ndefHandler.writeNdefMessage(bytes);\n\n            // Track NFC share event\n            var shareId;\n            if (automation.is_public && smartUrl.includes('/share/')) {\n              // Extract share ID from URL\n              var match = smartUrl.match(/\\/share\\/([^/?]+)/);\n              shareId = match ? match[1] : undefined;\n            }\n            yield _SharingAnalyticsService.sharingAnalyticsService.trackShareEvent({\n              automationId: automation.id,\n              shareId: shareId,\n              method: 'nfc',\n              sharedBy: automation.created_by || 'anonymous',\n              metadata: {\n                isPublicShare: !!shareId,\n                nfcUrl: smartUrl\n              }\n            });\n            _reactNative.Alert.alert('NFC Write Successful! 🎉', `Automation \"${automation.title}\" has been written to the NFC tag.\\n\\n📱 Works with the app installed\\n🌐 Also works without the app!\\n\\nAnyone can tap this tag to run your automation.`);\n            return true;\n          } catch (error) {\n            var _error$message, _error$message2, _error$message3;\n            _EventLogger.EventLogger.error('NFC', 'NFC write error:', error);\n            var errorMessage = 'Failed to write to NFC tag';\n            if ((_error$message = error.message) != null && _error$message.includes('cancelled')) {\n              errorMessage = 'NFC write was cancelled';\n            } else if ((_error$message2 = error.message) != null && _error$message2.includes('not writable')) {\n              errorMessage = 'This NFC tag is not writable';\n            } else if ((_error$message3 = error.message) != null && _error$message3.includes('No NFC tag')) {\n              errorMessage = 'No NFC tag detected. Please place a tag near your device';\n            }\n            _reactNative.Alert.alert('NFC Write Failed', errorMessage);\n            return false;\n          } finally {\n            try {\n              yield _reactNativeNfcManager.default.cancelTechnologyRequest();\n            } catch (error) {\n              _EventLogger.EventLogger.debug('NFC', 'Error cancelling NFC request:', error);\n            }\n          }\n        });\n        function writeAutomationToNFC(_x) {\n          return _writeAutomationToNFC.apply(this, arguments);\n        }\n        return writeAutomationToNFC;\n      }()\n    }, {\n      key: \"startNFCReader\",\n      value: function () {\n        var _startNFCReader = (0, _asyncToGenerator2.default)(function* (onAutomationFound) {\n          var _this = this;\n          try {\n            if (!(yield this.initialize())) {\n              _reactNative.Alert.alert('NFC Not Available', 'NFC is not supported on this device');\n              return;\n            }\n            if (!(yield this.checkNFCEnabled())) {\n              return;\n            }\n\n            // Register listener for NFC tag discovery\n            var cleanupListener = _reactNativeNfcManager.default.setEventListener(_reactNativeNfcManager.NfcEvents.DiscoverTag, function (tag) {\n              _EventLogger.EventLogger.debug('NFC', 'NFC tag discovered:', tag);\n              _this.handleNFCTagRead(tag, onAutomationFound);\n            });\n\n            // Start NFC scanning\n            yield _reactNativeNfcManager.default.registerTagEvent();\n            return cleanupListener;\n          } catch (error) {\n            _EventLogger.EventLogger.error('NFC', 'Failed to start NFC reader:', error);\n            _reactNative.Alert.alert('NFC Error', 'Failed to start NFC reading');\n          }\n        });\n        function startNFCReader(_x2) {\n          return _startNFCReader.apply(this, arguments);\n        }\n        return startNFCReader;\n      }()\n    }, {\n      key: \"handleNFCTagRead\",\n      value: function () {\n        var _handleNFCTagRead = (0, _asyncToGenerator2.default)(function* (tag, onAutomationFound) {\n          try {\n            var _tag$ndefMessage;\n            _EventLogger.EventLogger.debug('NFC', 'Parsing NFC tag with', (_tag$ndefMessage = tag.ndefMessage) == null ? void 0 : _tag$ndefMessage.length, 'records');\n\n            // Parse NDEF messages from the tag\n            if (tag.ndefMessage && tag.ndefMessage.length > 0) {\n              for (var i = 0; i < tag.ndefMessage.length; i++) {\n                var _record$payload;\n                var record = tag.ndefMessage[i];\n                _EventLogger.EventLogger.debug('NFC', 'Record ${i}:', {\n                  type: record.type,\n                  tnf: record.tnf,\n                  payloadLength: (_record$payload = record.payload) == null ? void 0 : _record$payload.length\n                });\n                var payload = this.parseNDEFRecord(record);\n                _EventLogger.EventLogger.debug('NFC', 'Parsed payload ${i}:', payload);\n                if (payload) {\n                  // Check for app scheme URLs\n                  if (payload.startsWith('zaptap://automation/') || payload.startsWith('shortcuts-like://automation/')) {\n                    try {\n                      var url = new URL(payload);\n                      var automationId = url.pathname.replace('/automation/', '');\n                      var params = Object.fromEntries(url.searchParams);\n                      _EventLogger.EventLogger.debug('NFC', 'Found automation in NFC tag:', {\n                        automationId: automationId,\n                        params: params\n                      });\n\n                      // Stop scanning and callback\n                      yield this.stopNFCReader();\n                      onAutomationFound(automationId, params);\n                      return;\n                    } catch (urlError) {\n                      _EventLogger.EventLogger.error('NFC', 'Error parsing app scheme URL:', urlError);\n                    }\n                  }\n\n                  // Check for web URLs that might contain automation links\n                  if (payload.startsWith('http')) {\n                    try {\n                      var _url = new URL(payload);\n                      _EventLogger.EventLogger.debug('NFC', 'Found web URL:', _url.href);\n\n                      // Check if it's a zaptap.cloud, zaptap.app or shortcutslike.app link (with or without www)\n                      var validHostnames = ['zaptap.cloud', 'www.zaptap.cloud', 'zaptap.app', 'www.zaptap.app', 'shortcutslike.app', 'www.shortcutslike.app'];\n                      if (validHostnames.includes(_url.hostname) && (_url.pathname.includes('/automation/') || _url.pathname.includes('/share/') || _url.pathname.includes('/link/') || _url.pathname.includes('/run/'))) {\n                        // Extract automation ID from web URL\n                        var match = _url.pathname.match(/\\/(automation|share|link|run)\\/([^/?]+)/);\n                        if (match) {\n                          var _automationId = match[2];\n                          _EventLogger.EventLogger.debug('NFC', 'Found automation in web URL:', _automationId);\n\n                          // Stop scanning and callback\n                          yield this.stopNFCReader();\n                          onAutomationFound(_automationId, {\n                            source: 'web',\n                            url: payload\n                          });\n                          return;\n                        }\n                      }\n                    } catch (urlError) {\n                      _EventLogger.EventLogger.error('NFC', 'Error parsing web URL:', urlError);\n                    }\n                  }\n                }\n              }\n            }\n            _EventLogger.EventLogger.debug('NFC', 'No valid automation found in NFC tag');\n            _reactNative.Alert.alert('Invalid NFC Tag', 'This NFC tag does not contain a Zaptap automation.');\n          } catch (error) {\n            _EventLogger.EventLogger.error('NFC', 'Error parsing NFC tag:', error);\n            _reactNative.Alert.alert('NFC Read Error', 'Failed to read NFC tag data');\n          }\n        });\n        function handleNFCTagRead(_x3, _x4) {\n          return _handleNFCTagRead.apply(this, arguments);\n        }\n        return handleNFCTagRead;\n      }()\n    }, {\n      key: \"parseNDEFRecord\",\n      value: function parseNDEFRecord(record) {\n        try {\n          if (!record.type || !record.payload) {\n            return null;\n          }\n          var typeArray = Array.from(record.type);\n          var payloadArray = Array.from(record.payload);\n          _EventLogger.EventLogger.debug('NFC', 'Parsing record type:', typeArray, 'payload length:', payloadArray.length);\n\n          // Handle URI records (TNF = 1, type = 'U')\n          if (record.tnf === 1 && typeArray.length === 1 && typeArray[0] === 0x55) {\n            _EventLogger.EventLogger.debug('NFC', 'Found URI record');\n            if (payloadArray.length === 0) return null;\n\n            // First byte is URI identifier code\n            var uriIdentifier = payloadArray[0];\n            var uriData = payloadArray.slice(1);\n\n            // Convert bytes to string\n            var uriString = String.fromCharCode.apply(String, (0, _toConsumableArray2.default)(uriData));\n\n            // Add prefix based on URI identifier\n            var uriPrefixes = ['',\n            // 0x00\n            'http://www.',\n            // 0x01\n            'https://www.',\n            // 0x02\n            'http://',\n            // 0x03\n            'https://',\n            // 0x04\n            'tel:',\n            // 0x05\n            'mailto:',\n            // 0x06\n            'ftp://anonymous:anonymous@',\n            // 0x07\n            'ftp://ftp.',\n            // 0x08\n            'ftps://',\n            // 0x09\n            'sftp://',\n            // 0x0A\n            'smb://',\n            // 0x0B\n            'nfs://',\n            // 0x0C\n            'ftp://',\n            // 0x0D\n            'dav://',\n            // 0x0E\n            'news:',\n            // 0x0F\n            'telnet://',\n            // 0x10\n            'imap:',\n            // 0x11\n            'rtsp://',\n            // 0x12\n            'urn:',\n            // 0x13\n            'pop:',\n            // 0x14\n            'sip:',\n            // 0x15\n            'sips:',\n            // 0x16\n            'tftp:',\n            // 0x17\n            'btspp://',\n            // 0x18\n            'btl2cap://',\n            // 0x19\n            'btgoep://',\n            // 0x1A\n            'tcpobex://',\n            // 0x1B\n            'irdaobex://',\n            // 0x1C\n            'file://',\n            // 0x1D\n            'urn:epc:id:',\n            // 0x1E\n            'urn:epc:tag:',\n            // 0x1F\n            'urn:epc:pat:',\n            // 0x20\n            'urn:epc:raw:',\n            // 0x21\n            'urn:epc:',\n            // 0x22\n            'urn:nfc:' // 0x23\n            ];\n            if (uriIdentifier < uriPrefixes.length) {\n              uriString = uriPrefixes[uriIdentifier] + uriString;\n            }\n            _EventLogger.EventLogger.debug('NFC', 'Parsed URI:', uriString);\n            return uriString;\n          }\n\n          // Handle text records (TNF = 1, type = 'T')\n          if (record.tnf === 1 && typeArray.length === 1 && typeArray[0] === 0x54) {\n            _EventLogger.EventLogger.debug('NFC', 'Found text record');\n            if (payloadArray.length === 0) return null;\n            var statusByte = payloadArray[0];\n            var languageCodeLength = statusByte & 0x3F;\n            var isUTF16 = (statusByte & 0x80) !== 0;\n            if (payloadArray.length < 1 + languageCodeLength) return null;\n            var textData = payloadArray.slice(1 + languageCodeLength);\n            if (isUTF16) {\n              // Handle UTF-16 (pairs of bytes)\n              var textString = String.fromCharCode.apply(String, (0, _toConsumableArray2.default)(textData));\n              _EventLogger.EventLogger.debug('NFC', 'Parsed UTF-16 text:', textString);\n              return textString;\n            } else {\n              // Handle UTF-8\n              var _textString = String.fromCharCode.apply(String, (0, _toConsumableArray2.default)(textData));\n              _EventLogger.EventLogger.debug('NFC', 'Parsed UTF-8 text:', _textString);\n              return _textString;\n            }\n          }\n\n          // Handle well-known types\n          if (record.tnf === 1) {\n            var typeString = String.fromCharCode.apply(String, typeArray);\n            _EventLogger.EventLogger.debug('NFC', 'Well-known type:', typeString);\n\n            // Try to parse as raw text if other methods fail\n            var rawText = String.fromCharCode.apply(String, payloadArray);\n            _EventLogger.EventLogger.debug('NFC', 'Raw payload as text:', rawText);\n\n            // Check if it looks like a URL\n            if (rawText.includes('http') || rawText.includes('zaptap') || rawText.includes('shortcuts-like')) {\n              return rawText;\n            }\n          }\n        } catch (error) {\n          _EventLogger.EventLogger.error('NFC', 'Error parsing NDEF record:', error);\n        }\n        return null;\n      }\n    }, {\n      key: \"stopNFCReader\",\n      value: function () {\n        var _stopNFCReader = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield _reactNativeNfcManager.default.unregisterTagEvent();\n            _reactNativeNfcManager.default.setEventListener(_reactNativeNfcManager.NfcEvents.DiscoverTag, null);\n          } catch (error) {\n            _EventLogger.EventLogger.error('NFC', 'Error stopping NFC reader:', error);\n          }\n        });\n        function stopNFCReader() {\n          return _stopNFCReader.apply(this, arguments);\n        }\n        return stopNFCReader;\n      }()\n    }, {\n      key: \"cleanup\",\n      value: function () {\n        var _cleanup = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield this.stopNFCReader();\n            yield _reactNativeNfcManager.default.cancelTechnologyRequest();\n          } catch (error) {\n            _EventLogger.EventLogger.error('NFC', 'Error during NFC cleanup:', error);\n          }\n        });\n        function cleanup() {\n          return _cleanup.apply(this, arguments);\n        }\n        return cleanup;\n      }()\n    }, {\n      key: \"isNFCSupported\",\n      value: function isNFCSupported() {\n        return this.isSupported;\n      }\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance() {\n        if (!NFCService.instance) {\n          NFCService.instance = new NFCService();\n        }\n        return NFCService.instance;\n      }\n    }]);\n  }();\n  var _default = exports.default = NFCService.getInstance();\n});","lineCount":527,"map":[[11,2,1,0],[11,6,1,0,"_reactNativeNfcManager"],[11,28,1,0],[11,31,1,0,"_interopRequireWildcard"],[11,54,1,0],[11,55,1,0,"require"],[11,62,1,0],[11,63,1,0,"_dependencyMap"],[11,77,1,0],[12,2,8,0],[12,6,8,0,"_reactNative"],[12,18,8,0],[12,21,8,0,"require"],[12,28,8,0],[12,29,8,0,"_dependencyMap"],[12,43,8,0],[13,2,10,0],[13,6,10,0,"_SmartLinkService"],[13,23,10,0],[13,26,10,0,"require"],[13,33,10,0],[13,34,10,0,"_dependencyMap"],[13,48,10,0],[14,2,11,0],[14,6,11,0,"_AutomationSharingService"],[14,31,11,0],[14,34,11,0,"require"],[14,41,11,0],[14,42,11,0,"_dependencyMap"],[14,56,11,0],[15,2,12,0],[15,6,12,0,"_SharingAnalyticsService"],[15,30,12,0],[15,33,12,0,"require"],[15,40,12,0],[15,41,12,0,"_dependencyMap"],[15,55,12,0],[16,2,13,0],[16,6,13,0,"_EventLogger"],[16,18,13,0],[16,21,13,0,"require"],[16,28,13,0],[16,29,13,0,"_dependencyMap"],[16,43,13,0],[17,2,13,54],[17,11,13,54,"_interopRequireWildcard"],[17,35,13,54,"e"],[17,36,13,54],[17,38,13,54,"t"],[17,39,13,54],[17,68,13,54,"WeakMap"],[17,75,13,54],[17,81,13,54,"r"],[17,82,13,54],[17,89,13,54,"WeakMap"],[17,96,13,54],[17,100,13,54,"n"],[17,101,13,54],[17,108,13,54,"WeakMap"],[17,115,13,54],[17,127,13,54,"_interopRequireWildcard"],[17,150,13,54],[17,162,13,54,"_interopRequireWildcard"],[17,186,13,54,"e"],[17,187,13,54],[17,189,13,54,"t"],[17,190,13,54],[17,199,13,54,"t"],[17,200,13,54],[17,204,13,54,"e"],[17,205,13,54],[17,209,13,54,"e"],[17,210,13,54],[17,211,13,54,"__esModule"],[17,221,13,54],[17,230,13,54,"e"],[17,231,13,54],[17,237,13,54,"o"],[17,238,13,54],[17,240,13,54,"i"],[17,241,13,54],[17,243,13,54,"f"],[17,244,13,54],[17,249,13,54,"__proto__"],[17,258,13,54],[17,266,13,54,"default"],[17,273,13,54],[17,275,13,54,"e"],[17,276,13,54],[17,293,13,54,"e"],[17,294,13,54],[17,317,13,54,"e"],[17,318,13,54],[17,343,13,54,"e"],[17,344,13,54],[17,353,13,54,"f"],[17,354,13,54],[17,360,13,54,"o"],[17,361,13,54],[17,364,13,54,"t"],[17,365,13,54],[17,368,13,54,"n"],[17,369,13,54],[17,372,13,54,"r"],[17,373,13,54],[17,381,13,54,"o"],[17,382,13,54],[17,383,13,54,"has"],[17,386,13,54],[17,387,13,54,"e"],[17,388,13,54],[17,398,13,54,"o"],[17,399,13,54],[17,400,13,54,"get"],[17,403,13,54],[17,404,13,54,"e"],[17,405,13,54],[17,408,13,54,"o"],[17,409,13,54],[17,410,13,54,"set"],[17,413,13,54],[17,414,13,54,"e"],[17,415,13,54],[17,417,13,54,"f"],[17,418,13,54],[17,432,13,54,"_t"],[17,434,13,54],[17,438,13,54,"e"],[17,439,13,54],[17,455,13,54,"_t"],[17,457,13,54],[17,464,13,54,"hasOwnProperty"],[17,478,13,54],[17,479,13,54,"call"],[17,483,13,54],[17,484,13,54,"e"],[17,485,13,54],[17,487,13,54,"_t"],[17,489,13,54],[17,496,13,54,"i"],[17,497,13,54],[17,501,13,54,"o"],[17,502,13,54],[17,505,13,54,"Object"],[17,511,13,54],[17,512,13,54,"defineProperty"],[17,526,13,54],[17,531,13,54,"Object"],[17,537,13,54],[17,538,13,54,"getOwnPropertyDescriptor"],[17,562,13,54],[17,563,13,54,"e"],[17,564,13,54],[17,566,13,54,"_t"],[17,568,13,54],[17,575,13,54,"i"],[17,576,13,54],[17,577,13,54,"get"],[17,580,13,54],[17,584,13,54,"i"],[17,585,13,54],[17,586,13,54,"set"],[17,589,13,54],[17,593,13,54,"o"],[17,594,13,54],[17,595,13,54,"f"],[17,596,13,54],[17,598,13,54,"_t"],[17,600,13,54],[17,602,13,54,"i"],[17,603,13,54],[17,607,13,54,"f"],[17,608,13,54],[17,609,13,54,"_t"],[17,611,13,54],[17,615,13,54,"e"],[17,616,13,54],[17,617,13,54,"_t"],[17,619,13,54],[17,630,13,54,"f"],[17,631,13,54],[17,636,13,54,"e"],[17,637,13,54],[17,639,13,54,"t"],[17,640,13,54],[18,2,13,54],[18,6,22,13,"NFCService"],[18,16,22,23],[18,19,22,23,"exports"],[18,26,22,23],[18,27,22,23,"NFCService"],[18,37,22,23],[19,4,27,2],[19,13,27,2,"NFCService"],[19,24,27,2],[19,26,27,24],[20,6,27,24],[20,10,27,24,"_classCallCheck2"],[20,26,27,24],[20,27,27,24,"default"],[20,34,27,24],[20,42,27,24,"NFCService"],[20,52,27,24],[21,6,27,24],[21,11,24,10,"isInitialized"],[21,24,24,23],[21,27,24,35],[21,32,24,40],[22,6,24,40],[22,11,25,10,"isSupported"],[22,22,25,21],[22,25,25,33],[22,30,25,38],[23,4,27,25],[24,4,27,26],[24,15,27,26,"_createClass2"],[24,28,27,26],[24,29,27,26,"default"],[24,36,27,26],[24,38,27,26,"NFCService"],[24,48,27,26],[25,6,27,26,"key"],[25,9,27,26],[26,6,27,26,"value"],[26,11,27,26],[27,8,27,26],[27,12,27,26,"_initialize"],[27,23,27,26],[27,30,27,26,"_asyncToGenerator2"],[27,48,27,26],[27,49,27,26,"default"],[27,56,27,26],[27,58,36,2],[27,71,36,39],[28,10,37,4],[28,14,37,8],[28,18,37,12],[28,19,37,13,"isInitialized"],[28,32,37,26],[28,34,37,28],[29,12,38,6],[29,19,38,13],[29,23,38,17],[29,24,38,18,"isSupported"],[29,35,38,29],[30,10,39,4],[31,10,41,4],[31,14,41,8],[32,12,42,6],[33,12,43,6],[33,16,43,10],[33,17,43,11,"NfcManager"],[33,47,43,21],[33,49,43,23],[34,14,44,8,"EventLogger"],[34,38,44,19],[34,39,44,20,"debug"],[34,44,44,25],[34,45,44,26],[34,50,44,31],[34,52,44,33],[34,79,44,60],[34,80,44,61],[35,14,45,8],[35,18,45,12],[35,19,45,13,"isSupported"],[35,30,45,24],[35,33,45,27],[35,38,45,32],[36,14,46,8],[36,18,46,12],[36,19,46,13,"isInitialized"],[36,32,46,26],[36,35,46,29],[36,39,46,33],[37,14,47,8],[37,21,47,15],[37,26,47,20],[38,12,48,6],[40,12,50,6],[41,12,51,6],[41,16,51,12,"supported"],[41,25,51,21],[41,34,51,30,"NfcManager"],[41,64,51,40],[41,65,51,41,"isSupported"],[41,76,51,52],[41,77,51,53],[41,78,51,54],[42,12,53,6],[42,16,53,10],[42,17,53,11,"supported"],[42,26,53,20],[42,28,53,22],[43,14,54,8,"EventLogger"],[43,38,54,19],[43,39,54,20,"debug"],[43,44,54,25],[43,45,54,26],[43,50,54,31],[43,52,54,33],[43,89,54,70],[43,90,54,71],[44,14,55,8],[44,18,55,12],[44,19,55,13,"isSupported"],[44,30,55,24],[44,33,55,27],[44,38,55,32],[45,14,56,8],[45,18,56,12],[45,19,56,13,"isInitialized"],[45,32,56,26],[45,35,56,29],[45,39,56,33],[46,14,57,8],[46,21,57,15],[46,26,57,20],[47,12,58,6],[48,12,60,6],[48,18,60,12,"NfcManager"],[48,48,60,22],[48,49,60,23,"start"],[48,54,60,28],[48,55,60,29],[48,56,60,30],[49,12,61,6],[49,16,61,10],[49,17,61,11,"isSupported"],[49,28,61,22],[49,31,61,25],[49,35,61,29],[50,12,62,6],[50,16,62,10],[50,17,62,11,"isInitialized"],[50,30,62,24],[50,33,62,27],[50,37,62,31],[51,12,64,6,"EventLogger"],[51,36,64,17],[51,37,64,18,"debug"],[51,42,64,23],[51,43,64,24],[51,48,64,29],[51,50,64,31],[51,80,64,61],[51,81,64,62],[52,12,65,6],[52,19,65,13],[52,23,65,17],[53,10,66,4],[53,11,66,5],[53,12,66,6],[53,19,66,13,"error"],[53,24,66,18],[53,26,66,20],[54,12,67,6,"EventLogger"],[54,36,67,17],[54,37,67,18,"error"],[54,42,67,23],[54,43,67,24],[54,48,67,29],[54,50,67,31],[54,77,67,58],[54,79,67,60,"error"],[54,84,67,74],[54,85,67,75],[55,12,68,6],[55,16,68,10],[55,17,68,11,"isSupported"],[55,28,68,22],[55,31,68,25],[55,36,68,30],[56,12,69,6],[56,16,69,10],[56,17,69,11,"isInitialized"],[56,30,69,24],[56,33,69,27],[56,37,69,31],[57,12,70,6],[57,19,70,13],[57,24,70,18],[58,10,71,4],[59,8,72,2],[59,9,72,3],[60,8,72,3],[60,17,36,8,"initialize"],[60,27,36,18,"initialize"],[60,28,36,18],[61,10,36,18],[61,17,36,18,"_initialize"],[61,28,36,18],[61,29,36,18,"apply"],[61,34,36,18],[61,41,36,18,"arguments"],[61,50,36,18],[62,8,36,18],[63,8,36,18],[63,15,36,8,"initialize"],[63,25,36,18],[64,6,36,18],[65,4,36,18],[66,6,36,18,"key"],[66,9,36,18],[67,6,36,18,"value"],[67,11,36,18],[68,8,36,18],[68,12,36,18,"_checkNFCEnabled"],[68,28,36,18],[68,35,36,18,"_asyncToGenerator2"],[68,53,36,18],[68,54,36,18,"default"],[68,61,36,18],[68,63,74,2],[68,76,74,44],[69,10,75,4],[69,14,75,8],[70,12,76,6],[70,16,76,10],[70,17,76,11],[70,21,76,15],[70,22,76,16,"isSupported"],[70,33,76,27],[70,35,76,29],[71,14,77,8],[71,21,77,15],[71,26,77,20],[72,12,78,6],[73,12,80,6],[73,16,80,12,"enabled"],[73,23,80,19],[73,32,80,28,"NfcManager"],[73,62,80,38],[73,63,80,39,"isEnabled"],[73,72,80,48],[73,73,80,49],[73,74,80,50],[74,12,81,6],[74,16,81,10],[74,17,81,11,"enabled"],[74,24,81,18],[74,26,81,20],[75,14,82,8,"Alert"],[75,32,82,13],[75,33,82,14,"alert"],[75,38,82,19],[75,39,83,10],[75,53,83,24],[75,55,84,10],[75,150,84,105],[75,152,85,10],[75,153,86,12],[76,16,86,14,"text"],[76,20,86,18],[76,22,86,20],[77,14,86,29],[77,15,86,30],[77,17,87,12],[78,16,88,14,"text"],[78,20,88,18],[78,22,88,20],[78,37,88,35],[79,16,89,14,"onPress"],[79,23,89,21],[79,25,89,23],[79,34,89,14,"onPress"],[79,41,89,21,"onPress"],[79,42,89,21],[80,18,89,21],[80,25,89,29,"NfcManager"],[80,55,89,39],[80,56,89,40,"goToNfcSetting"],[80,70,89,54],[80,71,89,55],[80,72,89,56],[81,16,89,56],[82,14,90,12],[82,15,90,13],[82,16,92,8],[82,17,92,9],[83,14,93,8],[83,21,93,15],[83,26,93,20],[84,12,94,6],[85,12,96,6],[85,19,96,13],[85,23,96,17],[86,10,97,4],[86,11,97,5],[86,12,97,6],[86,19,97,13,"error"],[86,24,97,18],[86,26,97,20],[87,12,98,6,"EventLogger"],[87,36,98,17],[87,37,98,18,"error"],[87,42,98,23],[87,43,98,24],[87,48,98,29],[87,50,98,31],[87,78,98,59],[87,80,98,61,"error"],[87,85,98,75],[87,86,98,76],[88,12,99,6],[88,19,99,13],[88,24,99,18],[89,10,100,4],[90,8,101,2],[90,9,101,3],[91,8,101,3],[91,17,74,8,"checkNFCEnabled"],[91,32,74,23,"checkNFCEnabled"],[91,33,74,23],[92,10,74,23],[92,17,74,23,"_checkNFCEnabled"],[92,33,74,23],[92,34,74,23,"apply"],[92,39,74,23],[92,46,74,23,"arguments"],[92,55,74,23],[93,8,74,23],[94,8,74,23],[94,15,74,8,"checkNFCEnabled"],[94,30,74,23],[95,6,74,23],[96,4,74,23],[97,6,74,23,"key"],[97,9,74,23],[98,6,74,23,"value"],[98,11,74,23],[99,8,74,23],[99,12,74,23,"_writeAutomationToNFC"],[99,33,74,23],[99,40,74,23,"_asyncToGenerator2"],[99,58,74,23],[99,59,74,23,"default"],[99,66,74,23],[99,68,103,2],[99,79,103,29,"automation"],[99,89,103,55],[99,91,103,75],[100,10,104,4],[100,14,104,8],[101,12,104,8],[101,16,104,8,"_automation$steps"],[101,33,104,8],[102,12,105,6],[102,16,105,10],[102,24,105,17],[102,28,105,21],[102,29,105,22,"initialize"],[102,39,105,32],[102,40,105,33],[102,41,105,34],[102,44,105,36],[103,14,106,8,"Alert"],[103,32,106,13],[103,33,106,14,"alert"],[103,38,106,19],[103,39,106,20],[103,58,106,39],[103,60,106,41],[103,97,106,78],[103,98,106,79],[104,14,107,8],[104,21,107,15],[104,26,107,20],[105,12,108,6],[106,12,110,6],[106,16,110,10],[106,24,110,17],[106,28,110,21],[106,29,110,22,"checkNFCEnabled"],[106,44,110,37],[106,45,110,38],[106,46,110,39],[106,49,110,41],[107,14,111,8],[107,21,111,15],[107,26,111,20],[108,12,112,6],[109,12,114,6],[109,16,114,10,"smartUrl"],[109,24,114,26],[111,12,116,6],[112,12,117,6],[112,16,117,10,"automation"],[112,26,117,20],[112,27,117,21,"is_public"],[112,36,117,30],[112,38,117,32],[113,14,118,8,"EventLogger"],[113,38,118,19],[113,39,118,20,"debug"],[113,44,118,25],[113,45,118,26],[113,50,118,31],[113,52,118,33],[113,92,118,73],[113,93,118,74],[114,14,119,8],[114,18,119,14,"shareResult"],[114,29,119,25],[114,38,119,34,"automationSharingService"],[114,88,119,58],[114,89,119,59,"createPublicShareLink"],[114,110,119,80],[114,111,119,81,"automation"],[114,121,119,91],[114,122,119,92],[115,14,121,8],[115,18,121,12,"shareResult"],[115,29,121,23],[115,30,121,24,"success"],[115,37,121,31],[115,41,121,35,"shareResult"],[115,52,121,46],[115,53,121,47,"shareUrl"],[115,61,121,55],[115,63,121,57],[116,16,122,10,"smartUrl"],[116,24,122,18],[116,27,122,21,"shareResult"],[116,38,122,32],[116,39,122,33,"shareUrl"],[116,47,122,41],[117,16,123,10,"EventLogger"],[117,40,123,21],[117,41,123,22,"debug"],[117,46,123,27],[117,47,123,28],[117,52,123,33],[117,54,123,35],[117,87,123,68],[117,89,123,70,"smartUrl"],[117,97,123,78],[117,98,123,79],[118,14,124,8],[118,15,124,9],[118,21,124,15],[119,16,125,10],[120,16,126,10],[120,20,126,16,"smartLink"],[120,29,126,25],[120,32,126,28,"smartLinkService"],[120,66,126,44],[120,67,126,45,"generateSmartLink"],[120,84,126,62],[120,85,126,63,"automation"],[120,95,126,73],[120,96,126,74],[121,16,127,10,"smartUrl"],[121,24,127,18],[121,27,127,21,"smartLink"],[121,36,127,30],[121,37,127,31,"universalUrl"],[121,49,127,43],[122,16,128,10,"EventLogger"],[122,40,128,21],[122,41,128,22,"warn"],[122,45,128,26],[122,46,128,27],[122,51,128,32],[122,53,128,34],[122,105,128,86],[122,107,128,88,"smartUrl"],[122,115,128,96],[122,116,128,97],[123,14,129,8],[124,12,130,6],[124,13,130,7],[124,19,130,13],[125,14,131,8],[126,14,132,8],[126,18,132,14,"smartLink"],[126,28,132,23],[126,31,132,26,"smartLinkService"],[126,65,132,42],[126,66,132,43,"generateSmartLink"],[126,83,132,60],[126,84,132,61,"automation"],[126,94,132,71],[126,95,132,72],[127,14,133,8,"smartUrl"],[127,22,133,16],[127,25,133,19,"smartLink"],[127,35,133,28],[127,36,133,29,"universalUrl"],[127,48,133,41],[128,14,134,8,"EventLogger"],[128,38,134,19],[128,39,134,20,"debug"],[128,44,134,25],[128,45,134,26],[128,50,134,31],[128,52,134,33],[128,102,134,83],[128,104,134,85,"smartUrl"],[128,112,134,93],[128,113,134,94],[129,12,135,6],[131,12,137,6],[132,12,138,6],[133,12,139,6],[134,12,140,6],[135,12,141,6],[135,16,141,12,"records"],[135,23,141,19],[135,26,141,22],[135,28,141,24],[137,12,143,6],[138,12,144,6,"records"],[138,19,144,13],[138,20,144,14,"push"],[138,24,144,18],[138,25,144,19,"Ndef"],[138,52,144,23],[138,53,144,24,"uriRecord"],[138,62,144,33],[138,63,144,34,"smartUrl"],[138,71,144,42],[138,72,144,43],[138,73,144,44],[140,12,146,6],[141,12,147,6],[141,16,147,10,"Platform"],[141,37,147,18],[141,38,147,19,"OS"],[141,40,147,21],[141,45,147,26],[141,54,147,35],[141,56,147,37],[142,14,148,8],[143,14,149,8],[143,18,149,14,"aarRecord"],[143,27,149,23],[143,30,149,26],[144,16,150,10,"tnf"],[144,19,150,13],[144,21,150,15],[144,22,150,16],[145,16,150,18],[146,16,151,10,"type"],[146,20,151,14],[146,22,151,16,"Array"],[146,27,151,21],[146,28,151,22,"from"],[146,32,151,26],[146,33,151,27],[146,37,151,31,"TextEncoder"],[146,48,151,42],[146,49,151,43],[146,50,151,44],[146,51,151,45,"encode"],[146,57,151,51],[146,58,151,52],[146,75,151,69],[146,76,151,70],[146,77,151,71],[147,16,152,10,"payload"],[147,23,152,17],[147,25,152,19,"Array"],[147,30,152,24],[147,31,152,25,"from"],[147,35,152,29],[147,36,152,30],[147,40,152,34,"TextEncoder"],[147,51,152,45],[147,52,152,46],[147,53,152,47],[147,54,152,48,"encode"],[147,60,152,54],[147,61,152,55],[147,77,152,71],[147,78,152,72],[147,79,152,73],[148,16,153,10,"id"],[148,18,153,12],[148,20,153,14],[149,14,154,8],[149,15,154,9],[150,14,155,8,"records"],[150,21,155,15],[150,22,155,16,"push"],[150,26,155,20],[150,27,155,21,"aarRecord"],[150,36,155,30],[150,37,155,31],[151,12,156,6],[153,12,158,6],[154,12,159,6,"records"],[154,19,159,13],[154,20,159,14,"push"],[154,24,159,18],[154,25,159,19,"Ndef"],[154,52,159,23],[154,53,159,24,"textRecord"],[154,63,159,34],[154,64,159,35],[154,75,159,46,"automation"],[154,85,159,56],[154,86,159,57,"title"],[154,91,159,62],[154,93,159,64],[154,94,159,65],[154,95,159,66],[155,12,160,6,"records"],[155,19,160,13],[155,20,160,14,"push"],[155,24,160,18],[155,25,160,19,"Ndef"],[155,52,160,23],[155,53,160,24,"textRecord"],[155,63,160,34],[155,64,160,35],[155,67,160,38],[155,69,160,38,"_automation$steps"],[155,86,160,38],[155,89,160,38,"automation"],[155,99,160,48],[155,100,160,49,"steps"],[155,105,160,54],[155,126,160,38,"_automation$steps"],[155,143,160,38],[155,144,160,56,"length"],[155,150,160,62],[155,155,160,66],[155,156,160,67],[155,177,160,88],[155,178,160,89],[155,179,160,90],[156,12,162,6],[156,16,162,12,"bytes"],[156,21,162,17],[156,24,162,20,"Ndef"],[156,51,162,24],[156,52,162,25,"encodeMessage"],[156,65,162,38],[156,66,162,39,"records"],[156,73,162,46],[156,74,162,47],[157,12,164,6],[157,16,164,10],[157,17,164,11,"bytes"],[157,22,164,16],[157,24,164,18],[158,14,165,8],[158,20,165,14],[158,24,165,18,"Error"],[158,29,165,23],[158,30,165,24],[158,60,165,54],[158,61,165,55],[159,12,166,6],[161,12,168,6],[162,12,169,6],[162,18,169,12,"NfcManager"],[162,48,169,22],[162,49,169,23,"requestTechnology"],[162,66,169,40],[162,67,169,41,"NfcTech"],[162,97,169,48],[162,98,169,49,"Ndef"],[162,102,169,53],[162,103,169,54],[164,12,171,6],[165,12,172,6],[165,16,172,12,"tag"],[165,19,172,15],[165,28,172,24,"NfcManager"],[165,58,172,34],[165,59,172,35,"getTag"],[165,65,172,41],[165,66,172,42],[165,67,172,43],[166,12,173,6],[166,16,173,10],[166,17,173,11,"tag"],[166,20,173,14],[166,22,173,16],[167,14,174,8],[167,20,174,14],[167,24,174,18,"Error"],[167,29,174,23],[167,30,174,24],[167,51,174,45],[167,52,174,46],[168,12,175,6],[170,12,177,6],[171,12,178,6],[171,18,178,12,"NfcManager"],[171,48,178,22],[171,49,178,23,"ndefHandler"],[171,60,178,34],[171,61,178,35,"writeNdefMessage"],[171,77,178,51],[171,78,178,52,"bytes"],[171,83,178,57],[171,84,178,58],[173,12,180,6],[174,12,181,6],[174,16,181,10,"shareId"],[174,23,181,37],[175,12,182,6],[175,16,182,10,"automation"],[175,26,182,20],[175,27,182,21,"is_public"],[175,36,182,30],[175,40,182,34,"smartUrl"],[175,48,182,42],[175,49,182,43,"includes"],[175,57,182,51],[175,58,182,52],[175,67,182,61],[175,68,182,62],[175,70,182,64],[176,14,183,8],[177,14,184,8],[177,18,184,14,"match"],[177,23,184,19],[177,26,184,22,"smartUrl"],[177,34,184,30],[177,35,184,31,"match"],[177,40,184,36],[177,41,184,37],[177,60,184,56],[177,61,184,57],[178,14,185,8,"shareId"],[178,21,185,15],[178,24,185,18,"match"],[178,29,185,23],[178,32,185,26,"match"],[178,37,185,31],[178,38,185,32],[178,39,185,33],[178,40,185,34],[178,43,185,37,"undefined"],[178,52,185,46],[179,12,186,6],[180,12,188,6],[180,18,188,12,"sharingAnalyticsService"],[180,66,188,35],[180,67,188,36,"trackShareEvent"],[180,82,188,51],[180,83,188,52],[181,14,189,8,"automationId"],[181,26,189,20],[181,28,189,22,"automation"],[181,38,189,32],[181,39,189,33,"id"],[181,41,189,35],[182,14,190,8,"shareId"],[182,21,190,15],[182,23,190,8,"shareId"],[182,30,190,15],[183,14,191,8,"method"],[183,20,191,14],[183,22,191,16],[183,27,191,21],[184,14,192,8,"sharedBy"],[184,22,192,16],[184,24,192,18,"automation"],[184,34,192,28],[184,35,192,29,"created_by"],[184,45,192,39],[184,49,192,43],[184,60,192,54],[185,14,193,8,"metadata"],[185,22,193,16],[185,24,193,18],[186,16,194,10,"isPublicShare"],[186,29,194,23],[186,31,194,25],[186,32,194,26],[186,33,194,27,"shareId"],[186,40,194,34],[187,16,195,10,"nfcUrl"],[187,22,195,16],[187,24,195,18,"smartUrl"],[188,14,196,8],[189,12,197,6],[189,13,197,7],[189,14,197,8],[190,12,199,6,"Alert"],[190,30,199,11],[190,31,199,12,"alert"],[190,36,199,17],[190,37,200,8],[190,63,200,34],[190,65,201,8],[190,80,201,23,"automation"],[190,90,201,33],[190,91,201,34,"title"],[190,96,201,39],[190,250,202,6],[190,251,202,7],[191,12,204,6],[191,19,204,13],[191,23,204,17],[192,10,206,4],[192,11,206,5],[192,12,206,6],[192,19,206,13,"error"],[192,24,206,23],[192,26,206,25],[193,12,206,25],[193,16,206,25,"_error$message"],[193,30,206,25],[193,32,206,25,"_error$message2"],[193,47,206,25],[193,49,206,25,"_error$message3"],[193,64,206,25],[194,12,207,6,"EventLogger"],[194,36,207,17],[194,37,207,18,"error"],[194,42,207,23],[194,43,207,24],[194,48,207,29],[194,50,207,31],[194,68,207,49],[194,70,207,51,"error"],[194,75,207,65],[194,76,207,66],[195,12,209,6],[195,16,209,10,"errorMessage"],[195,28,209,22],[195,31,209,25],[195,59,209,53],[196,12,210,6],[196,17,210,6,"_error$message"],[196,31,210,6],[196,34,210,10,"error"],[196,39,210,15],[196,40,210,16,"message"],[196,47,210,23],[196,60,210,10,"_error$message"],[196,74,210,10],[196,75,210,25,"includes"],[196,83,210,33],[196,84,210,34],[196,95,210,45],[196,96,210,46],[196,98,210,48],[197,14,211,8,"errorMessage"],[197,26,211,20],[197,29,211,23],[197,54,211,48],[198,12,212,6],[198,13,212,7],[198,19,212,13],[198,24,212,13,"_error$message2"],[198,39,212,13],[198,42,212,17,"error"],[198,47,212,22],[198,48,212,23,"message"],[198,55,212,30],[198,68,212,17,"_error$message2"],[198,83,212,17],[198,84,212,32,"includes"],[198,92,212,40],[198,93,212,41],[198,107,212,55],[198,108,212,56],[198,110,212,58],[199,14,213,8,"errorMessage"],[199,26,213,20],[199,29,213,23],[199,59,213,53],[200,12,214,6],[200,13,214,7],[200,19,214,13],[200,24,214,13,"_error$message3"],[200,39,214,13],[200,42,214,17,"error"],[200,47,214,22],[200,48,214,23,"message"],[200,55,214,30],[200,68,214,17,"_error$message3"],[200,83,214,17],[200,84,214,32,"includes"],[200,92,214,40],[200,93,214,41],[200,105,214,53],[200,106,214,54],[200,108,214,56],[201,14,215,8,"errorMessage"],[201,26,215,20],[201,29,215,23],[201,87,215,81],[202,12,216,6],[203,12,218,6,"Alert"],[203,30,218,11],[203,31,218,12,"alert"],[203,36,218,17],[203,37,218,18],[203,55,218,36],[203,57,218,38,"errorMessage"],[203,69,218,50],[203,70,218,51],[204,12,219,6],[204,19,219,13],[204,24,219,18],[205,10,220,4],[205,11,220,5],[205,20,220,14],[206,12,221,6],[206,16,221,10],[207,14,222,8],[207,20,222,14,"NfcManager"],[207,50,222,24],[207,51,222,25,"cancelTechnologyRequest"],[207,74,222,48],[207,75,222,49],[207,76,222,50],[208,12,223,6],[208,13,223,7],[208,14,223,8],[208,21,223,15,"error"],[208,26,223,20],[208,28,223,22],[209,14,224,8,"EventLogger"],[209,38,224,19],[209,39,224,20,"debug"],[209,44,224,25],[209,45,224,26],[209,50,224,31],[209,52,224,33],[209,83,224,64],[209,85,224,66,"error"],[209,90,224,71],[209,91,224,72],[210,12,225,6],[211,10,226,4],[212,8,227,2],[212,9,227,3],[213,8,227,3],[213,17,103,8,"writeAutomationToNFC"],[213,37,103,28,"writeAutomationToNFC"],[213,38,103,28,"_x"],[213,40,103,28],[214,10,103,28],[214,17,103,28,"_writeAutomationToNFC"],[214,38,103,28],[214,39,103,28,"apply"],[214,44,103,28],[214,51,103,28,"arguments"],[214,60,103,28],[215,8,103,28],[216,8,103,28],[216,15,103,8,"writeAutomationToNFC"],[216,35,103,28],[217,6,103,28],[218,4,103,28],[219,6,103,28,"key"],[219,9,103,28],[220,6,103,28,"value"],[220,11,103,28],[221,8,103,28],[221,12,103,28,"_startNFCReader"],[221,27,103,28],[221,34,103,28,"_asyncToGenerator2"],[221,52,103,28],[221,53,103,28,"default"],[221,60,103,28],[221,62,229,2],[221,73,229,23,"onAutomationFound"],[221,90,229,87],[221,92,229,104],[222,10,229,104],[222,14,229,104,"_this"],[222,19,229,104],[223,10,230,4],[223,14,230,8],[224,12,231,6],[224,16,231,10],[224,24,231,17],[224,28,231,21],[224,29,231,22,"initialize"],[224,39,231,32],[224,40,231,33],[224,41,231,34],[224,44,231,36],[225,14,232,8,"Alert"],[225,32,232,13],[225,33,232,14,"alert"],[225,38,232,19],[225,39,232,20],[225,58,232,39],[225,60,232,41],[225,97,232,78],[225,98,232,79],[226,14,233,8],[227,12,234,6],[228,12,236,6],[228,16,236,10],[228,24,236,17],[228,28,236,21],[228,29,236,22,"checkNFCEnabled"],[228,44,236,37],[228,45,236,38],[228,46,236,39],[228,49,236,41],[229,14,237,8],[230,12,238,6],[232,12,240,6],[233,12,241,6],[233,16,241,12,"cleanupListener"],[233,31,241,27],[233,34,241,30,"NfcManager"],[233,64,241,40],[233,65,241,41,"setEventListener"],[233,81,241,57],[233,82,241,58,"NfcEvents"],[233,114,241,67],[233,115,241,68,"DiscoverTag"],[233,126,241,79],[233,128,241,81],[233,138,241,82,"tag"],[233,141,241,95],[233,143,241,100],[234,14,242,8,"EventLogger"],[234,38,242,19],[234,39,242,20,"debug"],[234,44,242,25],[234,45,242,26],[234,50,242,31],[234,52,242,33],[234,73,242,54],[234,75,242,56,"tag"],[234,78,242,59],[234,79,242,60],[235,14,243,8,"_this"],[235,19,243,12],[235,20,243,13,"handleNFCTagRead"],[235,36,243,29],[235,37,243,30,"tag"],[235,40,243,33],[235,42,243,35,"onAutomationFound"],[235,59,243,52],[235,60,243,53],[236,12,244,6],[236,13,244,7],[236,14,244,8],[238,12,246,6],[239,12,247,6],[239,18,247,12,"NfcManager"],[239,48,247,22],[239,49,247,23,"registerTagEvent"],[239,65,247,39],[239,66,247,40],[239,67,247,41],[240,12,249,6],[240,19,249,13,"cleanupListener"],[240,34,249,28],[241,10,251,4],[241,11,251,5],[241,12,251,6],[241,19,251,13,"error"],[241,24,251,18],[241,26,251,20],[242,12,252,6,"EventLogger"],[242,36,252,17],[242,37,252,18,"error"],[242,42,252,23],[242,43,252,24],[242,48,252,29],[242,50,252,31],[242,79,252,60],[242,81,252,62,"error"],[242,86,252,76],[242,87,252,77],[243,12,253,6,"Alert"],[243,30,253,11],[243,31,253,12,"alert"],[243,36,253,17],[243,37,253,18],[243,48,253,29],[243,50,253,31],[243,79,253,60],[243,80,253,61],[244,10,254,4],[245,8,255,2],[245,9,255,3],[246,8,255,3],[246,17,229,8,"startNFCReader"],[246,31,229,22,"startNFCReader"],[246,32,229,22,"_x2"],[246,35,229,22],[247,10,229,22],[247,17,229,22,"_startNFCReader"],[247,32,229,22],[247,33,229,22,"apply"],[247,38,229,22],[247,45,229,22,"arguments"],[247,54,229,22],[248,8,229,22],[249,8,229,22],[249,15,229,8,"startNFCReader"],[249,29,229,22],[250,6,229,22],[251,4,229,22],[252,6,229,22,"key"],[252,9,229,22],[253,6,229,22,"value"],[253,11,229,22],[254,8,229,22],[254,12,229,22,"_handleNFCTagRead"],[254,29,229,22],[254,36,229,22,"_asyncToGenerator2"],[254,54,229,22],[254,55,229,22,"default"],[254,62,229,22],[254,64,257,2],[254,75,257,33,"tag"],[254,78,257,46],[254,80,257,48,"onAutomationFound"],[254,97,257,112],[254,99,257,129],[255,10,258,4],[255,14,258,8],[256,12,258,8],[256,16,258,8,"_tag$ndefMessage"],[256,32,258,8],[257,12,259,6,"EventLogger"],[257,36,259,17],[257,37,259,18,"debug"],[257,42,259,23],[257,43,259,24],[257,48,259,29],[257,50,259,31],[257,72,259,53],[257,75,259,53,"_tag$ndefMessage"],[257,91,259,53],[257,94,259,55,"tag"],[257,97,259,58],[257,98,259,59,"ndefMessage"],[257,109,259,70],[257,130,259,55,"_tag$ndefMessage"],[257,146,259,55],[257,147,259,72,"length"],[257,153,259,78],[257,155,259,80],[257,164,259,89],[257,165,259,90],[259,12,261,6],[260,12,262,6],[260,16,262,10,"tag"],[260,19,262,13],[260,20,262,14,"ndefMessage"],[260,31,262,25],[260,35,262,29,"tag"],[260,38,262,32],[260,39,262,33,"ndefMessage"],[260,50,262,44],[260,51,262,45,"length"],[260,57,262,51],[260,60,262,54],[260,61,262,55],[260,63,262,57],[261,14,263,8],[261,19,263,13],[261,23,263,17,"i"],[261,24,263,18],[261,27,263,21],[261,28,263,22],[261,30,263,24,"i"],[261,31,263,25],[261,34,263,28,"tag"],[261,37,263,31],[261,38,263,32,"ndefMessage"],[261,49,263,43],[261,50,263,44,"length"],[261,56,263,50],[261,58,263,52,"i"],[261,59,263,53],[261,61,263,55],[261,63,263,57],[262,16,263,57],[262,20,263,57,"_record$payload"],[262,35,263,57],[263,16,264,10],[263,20,264,16,"record"],[263,26,264,22],[263,29,264,25,"tag"],[263,32,264,28],[263,33,264,29,"ndefMessage"],[263,44,264,40],[263,45,264,41,"i"],[263,46,264,42],[263,47,264,43],[264,16,265,10,"EventLogger"],[264,40,265,21],[264,41,265,22,"debug"],[264,46,265,27],[264,47,265,28],[264,52,265,33],[264,54,265,35],[264,68,265,49],[264,70,265,51],[265,18,266,12,"type"],[265,22,266,16],[265,24,266,18,"record"],[265,30,266,24],[265,31,266,25,"type"],[265,35,266,29],[266,18,267,12,"tnf"],[266,21,267,15],[266,23,267,17,"record"],[266,29,267,23],[266,30,267,24,"tnf"],[266,33,267,27],[267,18,268,12,"payloadLength"],[267,31,268,25],[267,34,268,25,"_record$payload"],[267,49,268,25],[267,52,268,27,"record"],[267,58,268,33],[267,59,268,34,"payload"],[267,66,268,41],[267,87,268,27,"_record$payload"],[267,102,268,27],[267,103,268,43,"length"],[268,16,269,10],[268,17,269,11],[268,18,269,12],[269,16,271,10],[269,20,271,16,"payload"],[269,27,271,23],[269,30,271,26],[269,34,271,30],[269,35,271,31,"parseNDEFRecord"],[269,50,271,46],[269,51,271,47,"record"],[269,57,271,53],[269,58,271,54],[270,16,272,10,"EventLogger"],[270,40,272,21],[270,41,272,22,"debug"],[270,46,272,27],[270,47,272,28],[270,52,272,33],[270,54,272,35],[270,76,272,57],[270,78,272,59,"payload"],[270,85,272,66],[270,86,272,67],[271,16,274,10],[271,20,274,14,"payload"],[271,27,274,21],[271,29,274,23],[272,18,275,12],[273,18,276,12],[273,22,276,16,"payload"],[273,29,276,23],[273,30,276,24,"startsWith"],[273,40,276,34],[273,41,276,35],[273,63,276,57],[273,64,276,58],[273,68,276,62,"payload"],[273,75,276,69],[273,76,276,70,"startsWith"],[273,86,276,80],[273,87,276,81],[273,117,276,111],[273,118,276,112],[273,120,276,114],[274,20,277,14],[274,24,277,18],[275,22,278,16],[275,26,278,22,"url"],[275,29,278,25],[275,32,278,28],[275,36,278,32,"URL"],[275,39,278,35],[275,40,278,36,"payload"],[275,47,278,43],[275,48,278,44],[276,22,279,16],[276,26,279,22,"automationId"],[276,38,279,34],[276,41,279,37,"url"],[276,44,279,40],[276,45,279,41,"pathname"],[276,53,279,49],[276,54,279,50,"replace"],[276,61,279,57],[276,62,279,58],[276,76,279,72],[276,78,279,74],[276,80,279,76],[276,81,279,77],[277,22,280,16],[277,26,280,22,"params"],[277,32,280,28],[277,35,280,31,"Object"],[277,41,280,37],[277,42,280,38,"fromEntries"],[277,53,280,49],[277,54,280,50,"url"],[277,57,280,53],[277,58,280,54,"searchParams"],[277,70,280,66],[277,71,280,67],[278,22,282,16,"EventLogger"],[278,46,282,27],[278,47,282,28,"debug"],[278,52,282,33],[278,53,282,34],[278,58,282,39],[278,60,282,41],[278,90,282,71],[278,92,282,73],[279,24,282,75,"automationId"],[279,36,282,87],[279,38,282,75,"automationId"],[279,50,282,87],[280,24,282,89,"params"],[280,30,282,95],[280,32,282,89,"params"],[281,22,282,96],[281,23,282,97],[281,24,282,98],[283,22,284,16],[284,22,285,16],[284,28,285,22],[284,32,285,26],[284,33,285,27,"stopNFCReader"],[284,46,285,40],[284,47,285,41],[284,48,285,42],[285,22,286,16,"onAutomationFound"],[285,39,286,33],[285,40,286,34,"automationId"],[285,52,286,46],[285,54,286,48,"params"],[285,60,286,54],[285,61,286,55],[286,22,287,16],[287,20,288,14],[287,21,288,15],[287,22,288,16],[287,29,288,23,"urlError"],[287,37,288,31],[287,39,288,33],[288,22,289,16,"EventLogger"],[288,46,289,27],[288,47,289,28,"error"],[288,52,289,33],[288,53,289,34],[288,58,289,39],[288,60,289,41],[288,91,289,72],[288,93,289,74,"urlError"],[288,101,289,91],[288,102,289,92],[289,20,290,14],[290,18,291,12],[292,18,293,12],[293,18,294,12],[293,22,294,16,"payload"],[293,29,294,23],[293,30,294,24,"startsWith"],[293,40,294,34],[293,41,294,35],[293,47,294,41],[293,48,294,42],[293,50,294,44],[294,20,295,14],[294,24,295,18],[295,22,296,16],[295,26,296,22,"url"],[295,30,296,25],[295,33,296,28],[295,37,296,32,"URL"],[295,40,296,35],[295,41,296,36,"payload"],[295,48,296,43],[295,49,296,44],[296,22,297,16,"EventLogger"],[296,46,297,27],[296,47,297,28,"debug"],[296,52,297,33],[296,53,297,34],[296,58,297,39],[296,60,297,41],[296,76,297,57],[296,78,297,59,"url"],[296,82,297,62],[296,83,297,63,"href"],[296,87,297,67],[296,88,297,68],[298,22,299,16],[299,22,300,16],[299,26,300,22,"validHostnames"],[299,40,300,36],[299,43,300,39],[299,44,300,40],[299,58,300,54],[299,60,300,56],[299,78,300,74],[299,80,300,76],[299,92,300,88],[299,94,300,90],[299,110,300,106],[299,112,300,108],[299,131,300,127],[299,133,300,129],[299,156,300,152],[299,157,300,153],[300,22,301,16],[300,26,301,20,"validHostnames"],[300,40,301,34],[300,41,301,35,"includes"],[300,49,301,43],[300,50,301,44,"url"],[300,54,301,47],[300,55,301,48,"hostname"],[300,63,301,56],[300,64,301,57],[300,69,302,21,"url"],[300,73,302,24],[300,74,302,25,"pathname"],[300,82,302,33],[300,83,302,34,"includes"],[300,91,302,42],[300,92,302,43],[300,106,302,57],[300,107,302,58],[300,111,302,62,"url"],[300,115,302,65],[300,116,302,66,"pathname"],[300,124,302,74],[300,125,302,75,"includes"],[300,133,302,83],[300,134,302,84],[300,143,302,93],[300,144,302,94],[300,148,302,98,"url"],[300,152,302,101],[300,153,302,102,"pathname"],[300,161,302,110],[300,162,302,111,"includes"],[300,170,302,119],[300,171,302,120],[300,179,302,128],[300,180,302,129],[300,184,302,133,"url"],[300,188,302,136],[300,189,302,137,"pathname"],[300,197,302,145],[300,198,302,146,"includes"],[300,206,302,154],[300,207,302,155],[300,214,302,162],[300,215,302,163],[300,216,302,164],[300,218,302,166],[301,24,304,18],[302,24,305,18],[302,28,305,24,"match"],[302,33,305,29],[302,36,305,32,"url"],[302,40,305,35],[302,41,305,36,"pathname"],[302,49,305,44],[302,50,305,45,"match"],[302,55,305,50],[302,56,305,51],[302,97,305,92],[302,98,305,93],[303,24,306,18],[303,28,306,22,"match"],[303,33,306,27],[303,35,306,29],[304,26,307,20],[304,30,307,26,"automationId"],[304,43,307,38],[304,46,307,41,"match"],[304,51,307,46],[304,52,307,47],[304,53,307,48],[304,54,307,49],[305,26,308,20,"EventLogger"],[305,50,308,31],[305,51,308,32,"debug"],[305,56,308,37],[305,57,308,38],[305,62,308,43],[305,64,308,45],[305,94,308,75],[305,96,308,77,"automationId"],[305,109,308,89],[305,110,308,90],[307,26,310,20],[308,26,311,20],[308,32,311,26],[308,36,311,30],[308,37,311,31,"stopNFCReader"],[308,50,311,44],[308,51,311,45],[308,52,311,46],[309,26,312,20,"onAutomationFound"],[309,43,312,37],[309,44,312,38,"automationId"],[309,57,312,50],[309,59,312,52],[310,28,312,54,"source"],[310,34,312,60],[310,36,312,62],[310,41,312,67],[311,28,312,69,"url"],[311,31,312,72],[311,33,312,74,"payload"],[312,26,312,82],[312,27,312,83],[312,28,312,84],[313,26,313,20],[314,24,314,18],[315,22,315,16],[316,20,316,14],[316,21,316,15],[316,22,316,16],[316,29,316,23,"urlError"],[316,37,316,31],[316,39,316,33],[317,22,317,16,"EventLogger"],[317,46,317,27],[317,47,317,28,"error"],[317,52,317,33],[317,53,317,34],[317,58,317,39],[317,60,317,41],[317,84,317,65],[317,86,317,67,"urlError"],[317,94,317,84],[317,95,317,85],[318,20,318,14],[319,18,319,12],[320,16,320,10],[321,14,321,8],[322,12,322,6],[323,12,324,6,"EventLogger"],[323,36,324,17],[323,37,324,18,"debug"],[323,42,324,23],[323,43,324,24],[323,48,324,29],[323,50,324,31],[323,88,324,69],[323,89,324,70],[324,12,325,6,"Alert"],[324,30,325,11],[324,31,325,12,"alert"],[324,36,325,17],[324,37,326,8],[324,54,326,25],[324,56,327,8],[324,108,328,6],[324,109,328,7],[325,10,330,4],[325,11,330,5],[325,12,330,6],[325,19,330,13,"error"],[325,24,330,18],[325,26,330,20],[326,12,331,6,"EventLogger"],[326,36,331,17],[326,37,331,18,"error"],[326,42,331,23],[326,43,331,24],[326,48,331,29],[326,50,331,31],[326,74,331,55],[326,76,331,57,"error"],[326,81,331,71],[326,82,331,72],[327,12,332,6,"Alert"],[327,30,332,11],[327,31,332,12,"alert"],[327,36,332,17],[327,37,332,18],[327,53,332,34],[327,55,332,36],[327,84,332,65],[327,85,332,66],[328,10,333,4],[329,8,334,2],[329,9,334,3],[330,8,334,3],[330,17,257,16,"handleNFCTagRead"],[330,33,257,32,"handleNFCTagRead"],[330,34,257,32,"_x3"],[330,37,257,32],[330,39,257,32,"_x4"],[330,42,257,32],[331,10,257,32],[331,17,257,32,"_handleNFCTagRead"],[331,34,257,32],[331,35,257,32,"apply"],[331,40,257,32],[331,47,257,32,"arguments"],[331,56,257,32],[332,8,257,32],[333,8,257,32],[333,15,257,16,"handleNFCTagRead"],[333,31,257,32],[334,6,257,32],[335,4,257,32],[336,6,257,32,"key"],[336,9,257,32],[337,6,257,32,"value"],[337,11,257,32],[337,13,336,2],[337,22,336,10,"parseNDEFRecord"],[337,37,336,25,"parseNDEFRecord"],[337,38,336,26,"record"],[337,44,336,44],[337,46,336,61],[338,8,337,4],[338,12,337,8],[339,10,338,6],[339,14,338,10],[339,15,338,11,"record"],[339,21,338,17],[339,22,338,18,"type"],[339,26,338,22],[339,30,338,26],[339,31,338,27,"record"],[339,37,338,33],[339,38,338,34,"payload"],[339,45,338,41],[339,47,338,43],[340,12,339,8],[340,19,339,15],[340,23,339,19],[341,10,340,6],[342,10,342,6],[342,14,342,12,"typeArray"],[342,23,342,21],[342,26,342,24,"Array"],[342,31,342,29],[342,32,342,30,"from"],[342,36,342,34],[342,37,342,35,"record"],[342,43,342,41],[342,44,342,42,"type"],[342,48,342,46],[342,49,342,47],[343,10,343,6],[343,14,343,12,"payloadArray"],[343,26,343,24],[343,29,343,27,"Array"],[343,34,343,32],[343,35,343,33,"from"],[343,39,343,37],[343,40,343,38,"record"],[343,46,343,44],[343,47,343,45,"payload"],[343,54,343,52],[343,55,343,53],[344,10,345,6,"EventLogger"],[344,34,345,17],[344,35,345,18,"debug"],[344,40,345,23],[344,41,345,24],[344,46,345,29],[344,48,345,31],[344,70,345,53],[344,72,345,55,"typeArray"],[344,81,345,64],[344,83,345,66],[344,100,345,83],[344,102,345,85,"payloadArray"],[344,114,345,97],[344,115,345,98,"length"],[344,121,345,104],[344,122,345,105],[346,10,347,6],[347,10,348,6],[347,14,348,10,"record"],[347,20,348,16],[347,21,348,17,"tnf"],[347,24,348,20],[347,29,348,25],[347,30,348,26],[347,34,348,30,"typeArray"],[347,43,348,39],[347,44,348,40,"length"],[347,50,348,46],[347,55,348,51],[347,56,348,52],[347,60,348,56,"typeArray"],[347,69,348,65],[347,70,348,66],[347,71,348,67],[347,72,348,68],[347,77,348,73],[347,81,348,77],[347,83,348,79],[348,12,349,8,"EventLogger"],[348,36,349,19],[348,37,349,20,"debug"],[348,42,349,25],[348,43,349,26],[348,48,349,31],[348,50,349,33],[348,68,349,51],[348,69,349,52],[349,12,351,8],[349,16,351,12,"payloadArray"],[349,28,351,24],[349,29,351,25,"length"],[349,35,351,31],[349,40,351,36],[349,41,351,37],[349,43,351,39],[349,50,351,46],[349,54,351,50],[351,12,353,8],[352,12,354,8],[352,16,354,14,"uriIdentifier"],[352,29,354,27],[352,32,354,30,"payloadArray"],[352,44,354,42],[352,45,354,43],[352,46,354,44],[352,47,354,45],[353,12,355,8],[353,16,355,14,"uriData"],[353,23,355,21],[353,26,355,24,"payloadArray"],[353,38,355,36],[353,39,355,37,"slice"],[353,44,355,42],[353,45,355,43],[353,46,355,44],[353,47,355,45],[355,12,357,8],[356,12,358,8],[356,16,358,12,"uriString"],[356,25,358,21],[356,28,358,24,"String"],[356,34,358,30],[356,35,358,31,"fromCharCode"],[356,47,358,43],[356,48,358,43,"apply"],[356,53,358,43],[356,54,358,24,"String"],[356,60,358,30],[356,66,358,30,"_toConsumableArray2"],[356,85,358,30],[356,86,358,30,"default"],[356,93,358,30],[356,95,358,47,"uriData"],[356,102,358,54],[356,104,358,55],[358,12,360,8],[359,12,361,8],[359,16,361,14,"uriPrefixes"],[359,27,361,25],[359,30,361,28],[359,31,362,10],[359,33,362,12],[360,12,362,14],[361,12,363,10],[361,25,363,23],[362,12,363,25],[363,12,364,10],[363,26,364,24],[364,12,364,26],[365,12,365,10],[365,21,365,19],[366,12,365,21],[367,12,366,10],[367,22,366,20],[368,12,366,22],[369,12,367,10],[369,18,367,16],[370,12,367,18],[371,12,368,10],[371,21,368,19],[372,12,368,21],[373,12,369,10],[373,40,369,38],[374,12,369,40],[375,12,370,10],[375,24,370,22],[376,12,370,24],[377,12,371,10],[377,21,371,19],[378,12,371,21],[379,12,372,10],[379,21,372,19],[380,12,372,21],[381,12,373,10],[381,20,373,18],[382,12,373,20],[383,12,374,10],[383,20,374,18],[384,12,374,20],[385,12,375,10],[385,20,375,18],[386,12,375,20],[387,12,376,10],[387,20,376,18],[388,12,376,20],[389,12,377,10],[389,19,377,17],[390,12,377,19],[391,12,378,10],[391,23,378,21],[392,12,378,23],[393,12,379,10],[393,19,379,17],[394,12,379,19],[395,12,380,10],[395,21,380,19],[396,12,380,21],[397,12,381,10],[397,18,381,16],[398,12,381,18],[399,12,382,10],[399,18,382,16],[400,12,382,18],[401,12,383,10],[401,18,383,16],[402,12,383,18],[403,12,384,10],[403,19,384,17],[404,12,384,19],[405,12,385,10],[405,19,385,17],[406,12,385,19],[407,12,386,10],[407,22,386,20],[408,12,386,22],[409,12,387,10],[409,24,387,22],[410,12,387,24],[411,12,388,10],[411,23,388,21],[412,12,388,23],[413,12,389,10],[413,24,389,22],[414,12,389,24],[415,12,390,10],[415,25,390,23],[416,12,390,25],[417,12,391,10],[417,21,391,19],[418,12,391,21],[419,12,392,10],[419,25,392,23],[420,12,392,25],[421,12,393,10],[421,26,393,24],[422,12,393,26],[423,12,394,10],[423,26,394,24],[424,12,394,26],[425,12,395,10],[425,26,395,24],[426,12,395,26],[427,12,396,10],[427,22,396,20],[428,12,396,22],[429,12,397,10],[429,22,397,20],[429,23,397,22],[430,12,397,22],[430,13,398,9],[431,12,400,8],[431,16,400,12,"uriIdentifier"],[431,29,400,25],[431,32,400,28,"uriPrefixes"],[431,43,400,39],[431,44,400,40,"length"],[431,50,400,46],[431,52,400,48],[432,14,401,10,"uriString"],[432,23,401,19],[432,26,401,22,"uriPrefixes"],[432,37,401,33],[432,38,401,34,"uriIdentifier"],[432,51,401,47],[432,52,401,48],[432,55,401,51,"uriString"],[432,64,401,60],[433,12,402,8],[434,12,404,8,"EventLogger"],[434,36,404,19],[434,37,404,20,"debug"],[434,42,404,25],[434,43,404,26],[434,48,404,31],[434,50,404,33],[434,63,404,46],[434,65,404,48,"uriString"],[434,74,404,57],[434,75,404,58],[435,12,405,8],[435,19,405,15,"uriString"],[435,28,405,24],[436,10,406,6],[438,10,408,6],[439,10,409,6],[439,14,409,10,"record"],[439,20,409,16],[439,21,409,17,"tnf"],[439,24,409,20],[439,29,409,25],[439,30,409,26],[439,34,409,30,"typeArray"],[439,43,409,39],[439,44,409,40,"length"],[439,50,409,46],[439,55,409,51],[439,56,409,52],[439,60,409,56,"typeArray"],[439,69,409,65],[439,70,409,66],[439,71,409,67],[439,72,409,68],[439,77,409,73],[439,81,409,77],[439,83,409,79],[440,12,410,8,"EventLogger"],[440,36,410,19],[440,37,410,20,"debug"],[440,42,410,25],[440,43,410,26],[440,48,410,31],[440,50,410,33],[440,69,410,52],[440,70,410,53],[441,12,412,8],[441,16,412,12,"payloadArray"],[441,28,412,24],[441,29,412,25,"length"],[441,35,412,31],[441,40,412,36],[441,41,412,37],[441,43,412,39],[441,50,412,46],[441,54,412,50],[442,12,414,8],[442,16,414,14,"statusByte"],[442,26,414,24],[442,29,414,27,"payloadArray"],[442,41,414,39],[442,42,414,40],[442,43,414,41],[442,44,414,42],[443,12,415,8],[443,16,415,14,"languageCodeLength"],[443,34,415,32],[443,37,415,35,"statusByte"],[443,47,415,45],[443,50,415,48],[443,54,415,52],[444,12,416,8],[444,16,416,14,"isUTF16"],[444,23,416,21],[444,26,416,24],[444,27,416,25,"statusByte"],[444,37,416,35],[444,40,416,38],[444,44,416,42],[444,50,416,48],[444,51,416,49],[445,12,418,8],[445,16,418,12,"payloadArray"],[445,28,418,24],[445,29,418,25,"length"],[445,35,418,31],[445,38,418,34],[445,39,418,35],[445,42,418,38,"languageCodeLength"],[445,60,418,56],[445,62,418,58],[445,69,418,65],[445,73,418,69],[446,12,420,8],[446,16,420,14,"textData"],[446,24,420,22],[446,27,420,25,"payloadArray"],[446,39,420,37],[446,40,420,38,"slice"],[446,45,420,43],[446,46,420,44],[446,47,420,45],[446,50,420,48,"languageCodeLength"],[446,68,420,66],[446,69,420,67],[447,12,422,8],[447,16,422,12,"isUTF16"],[447,23,422,19],[447,25,422,21],[448,14,423,10],[449,14,424,10],[449,18,424,16,"textString"],[449,28,424,26],[449,31,424,29,"String"],[449,37,424,35],[449,38,424,36,"fromCharCode"],[449,50,424,48],[449,51,424,48,"apply"],[449,56,424,48],[449,57,424,29,"String"],[449,63,424,35],[449,69,424,35,"_toConsumableArray2"],[449,88,424,35],[449,89,424,35,"default"],[449,96,424,35],[449,98,424,52,"textData"],[449,106,424,60],[449,108,424,61],[450,14,425,10,"EventLogger"],[450,38,425,21],[450,39,425,22,"debug"],[450,44,425,27],[450,45,425,28],[450,50,425,33],[450,52,425,35],[450,73,425,56],[450,75,425,58,"textString"],[450,85,425,68],[450,86,425,69],[451,14,426,10],[451,21,426,17,"textString"],[451,31,426,27],[452,12,427,8],[452,13,427,9],[452,19,427,15],[453,14,428,10],[454,14,429,10],[454,18,429,16,"textString"],[454,29,429,26],[454,32,429,29,"String"],[454,38,429,35],[454,39,429,36,"fromCharCode"],[454,51,429,48],[454,52,429,48,"apply"],[454,57,429,48],[454,58,429,29,"String"],[454,64,429,35],[454,70,429,35,"_toConsumableArray2"],[454,89,429,35],[454,90,429,35,"default"],[454,97,429,35],[454,99,429,52,"textData"],[454,107,429,60],[454,109,429,61],[455,14,430,10,"EventLogger"],[455,38,430,21],[455,39,430,22,"debug"],[455,44,430,27],[455,45,430,28],[455,50,430,33],[455,52,430,35],[455,72,430,55],[455,74,430,57,"textString"],[455,85,430,67],[455,86,430,68],[456,14,431,10],[456,21,431,17,"textString"],[456,32,431,27],[457,12,432,8],[458,10,433,6],[460,10,435,6],[461,10,436,6],[461,14,436,10,"record"],[461,20,436,16],[461,21,436,17,"tnf"],[461,24,436,20],[461,29,436,25],[461,30,436,26],[461,32,436,28],[462,12,437,8],[462,16,437,14,"typeString"],[462,26,437,24],[462,29,437,27,"String"],[462,35,437,33],[462,36,437,34,"fromCharCode"],[462,48,437,46],[462,49,437,46,"apply"],[462,54,437,46],[462,55,437,27,"String"],[462,61,437,33],[462,63,437,50,"typeArray"],[462,72,437,59],[462,73,437,60],[463,12,438,8,"EventLogger"],[463,36,438,19],[463,37,438,20,"debug"],[463,42,438,25],[463,43,438,26],[463,48,438,31],[463,50,438,33],[463,68,438,51],[463,70,438,53,"typeString"],[463,80,438,63],[463,81,438,64],[465,12,440,8],[466,12,441,8],[466,16,441,14,"rawText"],[466,23,441,21],[466,26,441,24,"String"],[466,32,441,30],[466,33,441,31,"fromCharCode"],[466,45,441,43],[466,46,441,43,"apply"],[466,51,441,43],[466,52,441,24,"String"],[466,58,441,30],[466,60,441,47,"payloadArray"],[466,72,441,59],[466,73,441,60],[467,12,442,8,"EventLogger"],[467,36,442,19],[467,37,442,20,"debug"],[467,42,442,25],[467,43,442,26],[467,48,442,31],[467,50,442,33],[467,72,442,55],[467,74,442,57,"rawText"],[467,81,442,64],[467,82,442,65],[469,12,444,8],[470,12,445,8],[470,16,445,12,"rawText"],[470,23,445,19],[470,24,445,20,"includes"],[470,32,445,28],[470,33,445,29],[470,39,445,35],[470,40,445,36],[470,44,445,40,"rawText"],[470,51,445,47],[470,52,445,48,"includes"],[470,60,445,56],[470,61,445,57],[470,69,445,65],[470,70,445,66],[470,74,445,70,"rawText"],[470,81,445,77],[470,82,445,78,"includes"],[470,90,445,86],[470,91,445,87],[470,107,445,103],[470,108,445,104],[470,110,445,106],[471,14,446,10],[471,21,446,17,"rawText"],[471,28,446,24],[472,12,447,8],[473,10,448,6],[474,8,450,4],[474,9,450,5],[474,10,450,6],[474,17,450,13,"error"],[474,22,450,18],[474,24,450,20],[475,10,451,6,"EventLogger"],[475,34,451,17],[475,35,451,18,"error"],[475,40,451,23],[475,41,451,24],[475,46,451,29],[475,48,451,31],[475,76,451,59],[475,78,451,61,"error"],[475,83,451,75],[475,84,451,76],[476,8,452,4],[477,8,453,4],[477,15,453,11],[477,19,453,15],[478,6,454,2],[479,4,454,3],[480,6,454,3,"key"],[480,9,454,3],[481,6,454,3,"value"],[481,11,454,3],[482,8,454,3],[482,12,454,3,"_stopNFCReader"],[482,26,454,3],[482,33,454,3,"_asyncToGenerator2"],[482,51,454,3],[482,52,454,3,"default"],[482,59,454,3],[482,61,456,2],[482,74,456,39],[483,10,457,4],[483,14,457,8],[484,12,458,6],[484,18,458,12,"NfcManager"],[484,48,458,22],[484,49,458,23,"unregisterTagEvent"],[484,67,458,41],[484,68,458,42],[484,69,458,43],[485,12,459,6,"NfcManager"],[485,42,459,16],[485,43,459,17,"setEventListener"],[485,59,459,33],[485,60,459,34,"NfcEvents"],[485,92,459,43],[485,93,459,44,"DiscoverTag"],[485,104,459,55],[485,106,459,57],[485,110,459,61],[485,111,459,62],[486,10,460,4],[486,11,460,5],[486,12,460,6],[486,19,460,13,"error"],[486,24,460,18],[486,26,460,20],[487,12,461,6,"EventLogger"],[487,36,461,17],[487,37,461,18,"error"],[487,42,461,23],[487,43,461,24],[487,48,461,29],[487,50,461,31],[487,78,461,59],[487,80,461,61,"error"],[487,85,461,75],[487,86,461,76],[488,10,462,4],[489,8,463,2],[489,9,463,3],[490,8,463,3],[490,17,456,8,"stopNFCReader"],[490,30,456,21,"stopNFCReader"],[490,31,456,21],[491,10,456,21],[491,17,456,21,"_stopNFCReader"],[491,31,456,21],[491,32,456,21,"apply"],[491,37,456,21],[491,44,456,21,"arguments"],[491,53,456,21],[492,8,456,21],[493,8,456,21],[493,15,456,8,"stopNFCReader"],[493,28,456,21],[494,6,456,21],[495,4,456,21],[496,6,456,21,"key"],[496,9,456,21],[497,6,456,21,"value"],[497,11,456,21],[498,8,456,21],[498,12,456,21,"_cleanup"],[498,20,456,21],[498,27,456,21,"_asyncToGenerator2"],[498,45,456,21],[498,46,456,21,"default"],[498,53,456,21],[498,55,465,2],[498,68,465,33],[499,10,466,4],[499,14,466,8],[500,12,467,6],[500,18,467,12],[500,22,467,16],[500,23,467,17,"stopNFCReader"],[500,36,467,30],[500,37,467,31],[500,38,467,32],[501,12,468,6],[501,18,468,12,"NfcManager"],[501,48,468,22],[501,49,468,23,"cancelTechnologyRequest"],[501,72,468,46],[501,73,468,47],[501,74,468,48],[502,10,469,4],[502,11,469,5],[502,12,469,6],[502,19,469,13,"error"],[502,24,469,18],[502,26,469,20],[503,12,470,6,"EventLogger"],[503,36,470,17],[503,37,470,18,"error"],[503,42,470,23],[503,43,470,24],[503,48,470,29],[503,50,470,31],[503,77,470,58],[503,79,470,60,"error"],[503,84,470,74],[503,85,470,75],[504,10,471,4],[505,8,472,2],[505,9,472,3],[506,8,472,3],[506,17,465,8,"cleanup"],[506,24,465,15,"cleanup"],[506,25,465,15],[507,10,465,15],[507,17,465,15,"_cleanup"],[507,25,465,15],[507,26,465,15,"apply"],[507,31,465,15],[507,38,465,15,"arguments"],[507,47,465,15],[508,8,465,15],[509,8,465,15],[509,15,465,8,"cleanup"],[509,22,465,15],[510,6,465,15],[511,4,465,15],[512,6,465,15,"key"],[512,9,465,15],[513,6,465,15,"value"],[513,11,465,15],[513,13,474,2],[513,22,474,2,"isNFCSupported"],[513,36,474,16,"isNFCSupported"],[513,37,474,16],[513,39,474,28],[514,8,475,4],[514,15,475,11],[514,19,475,15],[514,20,475,16,"isSupported"],[514,31,475,27],[515,6,476,2],[516,4,476,3],[517,6,476,3,"key"],[517,9,476,3],[518,6,476,3,"value"],[518,11,476,3],[518,13,29,2],[518,22,29,9,"getInstance"],[518,33,29,20,"getInstance"],[518,34,29,20],[518,36,29,35],[519,8,30,4],[519,12,30,8],[519,13,30,9,"NFCService"],[519,23,30,19],[519,24,30,20,"instance"],[519,32,30,28],[519,34,30,30],[520,10,31,6,"NFCService"],[520,20,31,16],[520,21,31,17,"instance"],[520,29,31,25],[520,32,31,28],[520,36,31,32,"NFCService"],[520,46,31,42],[520,47,31,43],[520,48,31,44],[521,8,32,4],[522,8,33,4],[522,15,33,11,"NFCService"],[522,25,33,21],[522,26,33,22,"instance"],[522,34,33,30],[523,6,34,2],[524,4,34,3],[525,2,34,3],[526,2,34,3],[526,6,34,3,"_default"],[526,14,34,3],[526,17,34,3,"exports"],[526,24,34,3],[526,25,34,3,"default"],[526,32,34,3],[526,35,479,15,"NFCService"],[526,45,479,25],[526,46,479,26,"getInstance"],[526,57,479,37],[526,58,479,38],[526,59,479,39],[527,0,479,39],[527,3]],"functionMap":{"names":["<global>","NFCService","constructor","getInstance","initialize","checkNFCEnabled","onPress","writeAutomationToNFC","startNFCReader","NfcManager.setEventListener$argument_1","handleNFCTagRead","parseNDEFRecord","stopNFCReader","cleanup","isNFCSupported"],"mappings":"AAA;OCqB;ECK,wBD;EEE;GFK;EGE;GHoC;EIE;uBCe,iCD;GJY;EME;GN4H;EOE;iFCY;ODG;GPW;ESE;GT6E;EUE;GVsH;EWE;GXO;EYE;GZO;EaE;GbE;CDC"}},"type":"js/module"}]}