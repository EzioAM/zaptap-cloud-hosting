{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":69,"index":69}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"]}},{"name":"../analytics/AnalyticsService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":71},"end":{"line":2,"column":55,"index":126}}],"key":"9lSExDzipJQ6FrXGqQHAvtkxQ6s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.offlineQueue = exports.OfflineQueue = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _asyncStorage = _interopRequireDefault(require(_dependencyMap[4], \"@react-native-async-storage/async-storage\"));\n  var _AnalyticsService = require(_dependencyMap[5], \"../analytics/AnalyticsService\");\n  /**\r\n   * Queue item interface defining the structure of operations queued for offline processing\r\n   */\n  /**\r\n   * Retry strategy configuration for exponential backoff\r\n   */\n  /**\r\n   * Queue configuration options\r\n   */\n  /**\r\n   * Comprehensive offline queue management system\r\n   * Handles queuing, persistence, retry logic, and dead letter queue for failed operations\r\n   */\n  var OfflineQueue = exports.OfflineQueue = /*#__PURE__*/function () {\n    function OfflineQueue() {\n      (0, _classCallCheck2.default)(this, OfflineQueue);\n      this.queue = [];\n      this.isProcessing = false;\n      this.cleanupInterval = null;\n      this.STORAGE_KEY = '@shortcutslike_offline_queue';\n      this.DEAD_LETTER_KEY = '@shortcutslike_dead_letter_queue';\n      this.config = {\n        maxQueueSize: 1000,\n        retryStrategy: {\n          initialDelay: 1000,\n          maxDelay: 30000,\n          multiplier: 2,\n          jitter: true\n        },\n        cleanupInterval: 300000,\n        // 5 minutes\n        maxCompletedAge: 3600000 // 1 hour\n      };\n      this.initializeQueue();\n      this.startCleanupTimer();\n    }\n\n    /**\r\n     * Singleton pattern implementation\r\n     */\n    return (0, _createClass2.default)(OfflineQueue, [{\n      key: \"initializeQueue\",\n      value: (\n      /**\r\n       * Initialize queue by loading from AsyncStorage\r\n       */\n      function () {\n        var _initializeQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var storedQueue = yield _asyncStorage.default.getItem(this.STORAGE_KEY);\n            if (storedQueue) {\n              this.queue = JSON.parse(storedQueue);\n              _AnalyticsService.logger.info('OfflineQueue: Loaded queue from storage', {\n                queueSize: this.queue.length\n              });\n            }\n          } catch (error) {\n            _AnalyticsService.logger.error('OfflineQueue: Failed to load queue from storage', {\n              error: error\n            });\n            this.queue = [];\n          }\n        });\n        function initializeQueue() {\n          return _initializeQueue.apply(this, arguments);\n        }\n        return initializeQueue;\n      }()\n      /**\r\n       * Persist current queue to AsyncStorage\r\n       */\n      )\n    }, {\n      key: \"persistQueue\",\n      value: (function () {\n        var _persistQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield _asyncStorage.default.setItem(this.STORAGE_KEY, JSON.stringify(this.queue));\n          } catch (error) {\n            _AnalyticsService.logger.error('OfflineQueue: Failed to persist queue', {\n              error: error\n            });\n          }\n        });\n        function persistQueue() {\n          return _persistQueue.apply(this, arguments);\n        }\n        return persistQueue;\n      }()\n      /**\r\n       * Add operation to the queue\r\n       */\n      )\n    }, {\n      key: \"enqueue\",\n      value: (function () {\n        var _enqueue = (0, _asyncToGenerator2.default)(function* (operation) {\n          // Check queue size limit\n          if (this.queue.length >= this.config.maxQueueSize) {\n            // Remove oldest completed items to make space\n            this.cleanupCompletedItems();\n            if (this.queue.length >= this.config.maxQueueSize) {\n              throw new Error('Queue is full. Cannot add more operations.');\n            }\n          }\n          var queuedOperation = Object.assign({\n            id: this.generateId(),\n            timestamp: Date.now(),\n            retryCount: 0,\n            status: 'pending'\n          }, operation);\n\n          // Insert based on priority\n          var insertIndex = this.findInsertIndex(queuedOperation.priority);\n          this.queue.splice(insertIndex, 0, queuedOperation);\n          yield this.persistQueue();\n          _AnalyticsService.logger.info('OfflineQueue: Operation enqueued', {\n            operationId: queuedOperation.id,\n            type: queuedOperation.type,\n            priority: queuedOperation.priority,\n            queueSize: this.queue.length\n          });\n          return queuedOperation.id;\n        });\n        function enqueue(_x) {\n          return _enqueue.apply(this, arguments);\n        }\n        return enqueue;\n      }()\n      /**\r\n       * Find the correct insertion index based on priority\r\n       */\n      )\n    }, {\n      key: \"findInsertIndex\",\n      value: function findInsertIndex(priority) {\n        var priorityOrder = {\n          high: 0,\n          normal: 1,\n          low: 2\n        };\n        var targetPriority = priorityOrder[priority];\n        for (var i = 0; i < this.queue.length; i++) {\n          var currentPriority = priorityOrder[this.queue[i].priority];\n          if (currentPriority > targetPriority) {\n            return i;\n          }\n        }\n        return this.queue.length;\n      }\n\n      /**\r\n       * Remove operation from queue\r\n       */\n    }, {\n      key: \"dequeue\",\n      value: (function () {\n        var _dequeue = (0, _asyncToGenerator2.default)(function* (operationId) {\n          var index = this.queue.findIndex(function (op) {\n            return op.id === operationId;\n          });\n          if (index === -1) {\n            return null;\n          }\n          var operation = this.queue.splice(index, 1)[0];\n          yield this.persistQueue();\n          _AnalyticsService.logger.info('OfflineQueue: Operation dequeued', {\n            operationId: operationId,\n            type: operation.type,\n            queueSize: this.queue.length\n          });\n          return operation;\n        });\n        function dequeue(_x2) {\n          return _dequeue.apply(this, arguments);\n        }\n        return dequeue;\n      }()\n      /**\r\n       * Get all pending operations sorted by priority\r\n       */\n      )\n    }, {\n      key: \"getPendingOperations\",\n      value: function getPendingOperations() {\n        return this.queue.filter(function (op) {\n          return op.status === 'pending';\n        }).sort(function (a, b) {\n          var priorityOrder = {\n            high: 0,\n            normal: 1,\n            low: 2\n          };\n          return priorityOrder[a.priority] - priorityOrder[b.priority];\n        });\n      }\n\n      /**\r\n       * Get operation by ID\r\n       */\n    }, {\n      key: \"getOperation\",\n      value: function getOperation(operationId) {\n        return this.queue.find(function (op) {\n          return op.id === operationId;\n        }) || null;\n      }\n\n      /**\r\n       * Update operation status\r\n       */\n    }, {\n      key: \"updateOperationStatus\",\n      value: (function () {\n        var _updateOperationStatus = (0, _asyncToGenerator2.default)(function* (operationId, status, errorMessage) {\n          var operation = this.queue.find(function (op) {\n            return op.id === operationId;\n          });\n          if (!operation) {\n            _AnalyticsService.logger.warn('OfflineQueue: Operation not found for status update', {\n              operationId: operationId\n            });\n            return;\n          }\n          operation.status = status;\n          if (errorMessage) {\n            operation.errorMessage = errorMessage;\n          }\n\n          // Move to dead letter queue if max retries exceeded\n          if (status === 'failed' && operation.retryCount >= operation.maxRetries) {\n            operation.status = 'dead_letter';\n            yield this.moveToDeadLetterQueue(operation);\n          }\n          yield this.persistQueue();\n          _AnalyticsService.logger.info('OfflineQueue: Operation status updated', {\n            operationId: operationId,\n            status: status,\n            retryCount: operation.retryCount,\n            maxRetries: operation.maxRetries\n          });\n        });\n        function updateOperationStatus(_x3, _x4, _x5) {\n          return _updateOperationStatus.apply(this, arguments);\n        }\n        return updateOperationStatus;\n      }()\n      /**\r\n       * Increment retry count and calculate next retry delay\r\n       */\n      )\n    }, {\n      key: \"incrementRetryCount\",\n      value: (function () {\n        var _incrementRetryCount = (0, _asyncToGenerator2.default)(function* (operationId) {\n          var operation = this.queue.find(function (op) {\n            return op.id === operationId;\n          });\n          if (!operation) {\n            throw new Error(`Operation ${operationId} not found`);\n          }\n          operation.retryCount++;\n          operation.lastRetryTimestamp = Date.now();\n          operation.status = 'pending';\n          var delay = this.calculateRetryDelay(operation.retryCount);\n          yield this.persistQueue();\n          _AnalyticsService.logger.info('OfflineQueue: Retry count incremented', {\n            operationId: operationId,\n            retryCount: operation.retryCount,\n            nextRetryDelay: delay\n          });\n          return delay;\n        });\n        function incrementRetryCount(_x6) {\n          return _incrementRetryCount.apply(this, arguments);\n        }\n        return incrementRetryCount;\n      }()\n      /**\r\n       * Calculate retry delay using exponential backoff with jitter\r\n       */\n      )\n    }, {\n      key: \"calculateRetryDelay\",\n      value: function calculateRetryDelay(retryCount) {\n        var _this$config$retryStr = this.config.retryStrategy,\n          initialDelay = _this$config$retryStr.initialDelay,\n          maxDelay = _this$config$retryStr.maxDelay,\n          multiplier = _this$config$retryStr.multiplier,\n          jitter = _this$config$retryStr.jitter;\n        var delay = Math.min(initialDelay * Math.pow(multiplier, retryCount - 1), maxDelay);\n\n        // Add jitter to prevent thundering herd problem\n        if (jitter) {\n          delay = delay + Math.random() * delay * 0.1; // ±10% jitter\n        }\n        return Math.floor(delay);\n      }\n\n      /**\r\n       * Get queue statistics\r\n       */\n    }, {\n      key: \"getQueueStats\",\n      value: function getQueueStats() {\n        var stats = {\n          total: this.queue.length,\n          pending: 0,\n          processing: 0,\n          completed: 0,\n          failed: 0,\n          deadLetter: 0\n        };\n        this.queue.forEach(function (op) {\n          switch (op.status) {\n            case 'pending':\n              stats.pending++;\n              break;\n            case 'processing':\n              stats.processing++;\n              break;\n            case 'completed':\n              stats.completed++;\n              break;\n            case 'failed':\n              stats.failed++;\n              break;\n            case 'dead_letter':\n              stats.deadLetter++;\n              break;\n          }\n        });\n        return stats;\n      }\n\n      /**\r\n       * Clear completed operations older than configured age\r\n       */\n    }, {\n      key: \"cleanupCompletedItems\",\n      value: function cleanupCompletedItems() {\n        var cutoffTime = Date.now() - this.config.maxCompletedAge;\n        var originalLength = this.queue.length;\n        this.queue = this.queue.filter(function (op) {\n          return !(op.status === 'completed' && op.timestamp < cutoffTime);\n        });\n        if (this.queue.length < originalLength) {\n          this.persistQueue();\n          _AnalyticsService.logger.info('OfflineQueue: Cleaned up completed items', {\n            removed: originalLength - this.queue.length,\n            remaining: this.queue.length\n          });\n        }\n      }\n\n      /**\r\n       * Move operation to dead letter queue\r\n       */\n    }, {\n      key: \"moveToDeadLetterQueue\",\n      value: (function () {\n        var _moveToDeadLetterQueue = (0, _asyncToGenerator2.default)(function* (operation) {\n          try {\n            var deadLetterQueueStr = yield _asyncStorage.default.getItem(this.DEAD_LETTER_KEY);\n            var deadLetterQueue = deadLetterQueueStr ? JSON.parse(deadLetterQueueStr) : [];\n            deadLetterQueue.push(Object.assign({}, operation, {\n              status: 'dead_letter',\n              timestamp: Date.now() // Update timestamp for dead letter entry\n            }));\n\n            // Keep only recent dead letter items (last 100)\n            if (deadLetterQueue.length > 100) {\n              deadLetterQueue.splice(0, deadLetterQueue.length - 100);\n            }\n            yield _asyncStorage.default.setItem(this.DEAD_LETTER_KEY, JSON.stringify(deadLetterQueue));\n            _AnalyticsService.logger.warn('OfflineQueue: Operation moved to dead letter queue', {\n              operationId: operation.id,\n              type: operation.type,\n              retryCount: operation.retryCount,\n              errorMessage: operation.errorMessage\n            });\n          } catch (error) {\n            _AnalyticsService.logger.error('OfflineQueue: Failed to move operation to dead letter queue', {\n              operationId: operation.id,\n              error: error\n            });\n          }\n        });\n        function moveToDeadLetterQueue(_x7) {\n          return _moveToDeadLetterQueue.apply(this, arguments);\n        }\n        return moveToDeadLetterQueue;\n      }()\n      /**\r\n       * Get dead letter queue items\r\n       */\n      )\n    }, {\n      key: \"getDeadLetterQueue\",\n      value: (function () {\n        var _getDeadLetterQueue = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var deadLetterQueueStr = yield _asyncStorage.default.getItem(this.DEAD_LETTER_KEY);\n            return deadLetterQueueStr ? JSON.parse(deadLetterQueueStr) : [];\n          } catch (error) {\n            _AnalyticsService.logger.error('OfflineQueue: Failed to load dead letter queue', {\n              error: error\n            });\n            return [];\n          }\n        });\n        function getDeadLetterQueue() {\n          return _getDeadLetterQueue.apply(this, arguments);\n        }\n        return getDeadLetterQueue;\n      }()\n      /**\r\n       * Requeue operation from dead letter queue\r\n       */\n      )\n    }, {\n      key: \"requeueFromDeadLetter\",\n      value: (function () {\n        var _requeueFromDeadLetter = (0, _asyncToGenerator2.default)(function* (operationId) {\n          try {\n            var deadLetterQueue = yield this.getDeadLetterQueue();\n            var operationIndex = deadLetterQueue.findIndex(function (op) {\n              return op.id === operationId;\n            });\n            if (operationIndex === -1) {\n              return false;\n            }\n            var operation = deadLetterQueue[operationIndex];\n\n            // Reset operation for retry\n            operation.status = 'pending';\n            operation.retryCount = 0;\n            operation.timestamp = Date.now();\n            operation.errorMessage = undefined;\n\n            // Add back to main queue\n            this.queue.push(operation);\n\n            // Remove from dead letter queue\n            deadLetterQueue.splice(operationIndex, 1);\n            yield _asyncStorage.default.setItem(this.DEAD_LETTER_KEY, JSON.stringify(deadLetterQueue));\n            yield this.persistQueue();\n            _AnalyticsService.logger.info('OfflineQueue: Operation requeued from dead letter queue', {\n              operationId: operationId,\n              type: operation.type\n            });\n            return true;\n          } catch (error) {\n            _AnalyticsService.logger.error('OfflineQueue: Failed to requeue from dead letter queue', {\n              operationId: operationId,\n              error: error\n            });\n            return false;\n          }\n        });\n        function requeueFromDeadLetter(_x8) {\n          return _requeueFromDeadLetter.apply(this, arguments);\n        }\n        return requeueFromDeadLetter;\n      }()\n      /**\r\n       * Clear all completed operations\r\n       */\n      )\n    }, {\n      key: \"clearCompleted\",\n      value: (function () {\n        var _clearCompleted = (0, _asyncToGenerator2.default)(function* () {\n          var originalLength = this.queue.length;\n          this.queue = this.queue.filter(function (op) {\n            return op.status !== 'completed';\n          });\n          yield this.persistQueue();\n          var removedCount = originalLength - this.queue.length;\n          _AnalyticsService.logger.info('OfflineQueue: Cleared completed operations', {\n            removed: removedCount,\n            remaining: this.queue.length\n          });\n          return removedCount;\n        });\n        function clearCompleted() {\n          return _clearCompleted.apply(this, arguments);\n        }\n        return clearCompleted;\n      }()\n      /**\r\n       * Start cleanup timer for periodic maintenance\r\n       */\n      )\n    }, {\n      key: \"startCleanupTimer\",\n      value: function startCleanupTimer() {\n        var _this = this;\n        this.cleanupInterval = setInterval(function () {\n          _this.cleanupCompletedItems();\n        }, this.config.cleanupInterval);\n      }\n\n      /**\r\n       * Stop cleanup timer\r\n       */\n    }, {\n      key: \"stopCleanupTimer\",\n      value: function stopCleanupTimer() {\n        if (this.cleanupInterval) {\n          clearInterval(this.cleanupInterval);\n          this.cleanupInterval = null;\n        }\n      }\n\n      /**\r\n       * Generate unique ID for operations\r\n       */\n    }, {\n      key: \"generateId\",\n      value: function generateId() {\n        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Check if operation is ready for retry based on backoff delay\r\n       */\n    }, {\n      key: \"isOperationReadyForRetry\",\n      value: function isOperationReadyForRetry(operation) {\n        if (operation.status !== 'pending' || operation.retryCount === 0) {\n          return true;\n        }\n        if (!operation.lastRetryTimestamp) {\n          return true;\n        }\n        var delay = this.calculateRetryDelay(operation.retryCount);\n        var timeSinceLastRetry = Date.now() - operation.lastRetryTimestamp;\n        return timeSinceLastRetry >= delay;\n      }\n\n      /**\r\n       * Get operations ready for processing (considering retry delays)\r\n       */\n    }, {\n      key: \"getReadyOperations\",\n      value: function getReadyOperations() {\n        var _this2 = this;\n        return this.getPendingOperations().filter(function (op) {\n          return _this2.isOperationReadyForRetry(op);\n        });\n      }\n\n      /**\r\n       * Clear entire queue (use with caution)\r\n       */\n    }, {\n      key: \"clearQueue\",\n      value: (function () {\n        var _clearQueue = (0, _asyncToGenerator2.default)(function* () {\n          this.queue = [];\n          yield _asyncStorage.default.removeItem(this.STORAGE_KEY);\n          _AnalyticsService.logger.warn('OfflineQueue: Queue cleared');\n        });\n        function clearQueue() {\n          return _clearQueue.apply(this, arguments);\n        }\n        return clearQueue;\n      }()\n      /**\r\n       * Cleanup on app termination\r\n       */\n      )\n    }, {\n      key: \"cleanup\",\n      value: (function () {\n        var _cleanup = (0, _asyncToGenerator2.default)(function* () {\n          this.stopCleanupTimer();\n          yield this.persistQueue();\n          _AnalyticsService.logger.info('OfflineQueue: Cleanup completed');\n        });\n        function cleanup() {\n          return _cleanup.apply(this, arguments);\n        }\n        return cleanup;\n      }())\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance() {\n        if (!OfflineQueue.instance) {\n          OfflineQueue.instance = new OfflineQueue();\n        }\n        return OfflineQueue.instance;\n      }\n    }]);\n  }(); // Export singleton instance\n  var offlineQueue = exports.offlineQueue = OfflineQueue.getInstance();\n});","lineCount":609,"map":[[10,2,1,0],[10,6,1,0,"_asyncStorage"],[10,19,1,0],[10,22,1,0,"_interopRequireDefault"],[10,44,1,0],[10,45,1,0,"require"],[10,52,1,0],[10,53,1,0,"_dependencyMap"],[10,67,1,0],[11,2,2,0],[11,6,2,0,"_AnalyticsService"],[11,23,2,0],[11,26,2,0,"require"],[11,33,2,0],[11,34,2,0,"_dependencyMap"],[11,48,2,0],[12,2,4,0],[13,0,5,0],[14,0,6,0],[15,2,20,0],[16,0,21,0],[17,0,22,0],[18,2,30,0],[19,0,31,0],[20,0,32,0],[21,2,40,0],[22,0,41,0],[23,0,42,0],[24,0,43,0],[25,2,40,0],[25,6,44,13,"OfflineQueue"],[25,18,44,25],[25,21,44,25,"exports"],[25,28,44,25],[25,29,44,25,"OfflineQueue"],[25,41,44,25],[26,4,65,2],[26,13,65,2,"OfflineQueue"],[26,26,65,2],[26,28,65,24],[27,6,65,24],[27,10,65,24,"_classCallCheck2"],[27,26,65,24],[27,27,65,24,"default"],[27,34,65,24],[27,42,65,24,"OfflineQueue"],[27,54,65,24],[28,6,65,24],[28,11,46,10,"queue"],[28,16,46,15],[28,19,46,37],[28,21,46,39],[29,6,46,39],[29,11,47,10,"isProcessing"],[29,23,47,22],[29,26,47,25],[29,31,47,30],[30,6,47,30],[30,11,48,10,"cleanupInterval"],[30,26,48,25],[30,29,48,51],[30,33,48,55],[31,6,48,55],[31,11,50,19,"STORAGE_KEY"],[31,22,50,30],[31,25,50,33],[31,55,50,63],[32,6,50,63],[32,11,51,19,"DEAD_LETTER_KEY"],[32,26,51,34],[32,29,51,37],[32,63,51,71],[33,6,51,71],[33,11,53,19,"config"],[33,17,53,25],[33,20,53,41],[34,8,54,4,"maxQueueSize"],[34,20,54,16],[34,22,54,18],[34,26,54,22],[35,8,55,4,"retryStrategy"],[35,21,55,17],[35,23,55,19],[36,10,56,6,"initialDelay"],[36,22,56,18],[36,24,56,20],[36,28,56,24],[37,10,57,6,"maxDelay"],[37,18,57,14],[37,20,57,16],[37,25,57,21],[38,10,58,6,"multiplier"],[38,20,58,16],[38,22,58,18],[38,23,58,19],[39,10,59,6,"jitter"],[39,16,59,12],[39,18,59,14],[40,8,60,4],[40,9,60,5],[41,8,61,4,"cleanupInterval"],[41,23,61,19],[41,25,61,21],[41,31,61,27],[42,8,61,29],[43,8,62,4,"maxCompletedAge"],[43,23,62,19],[43,25,62,21],[43,32,62,28],[43,33,62,30],[44,6,63,2],[44,7,63,3],[45,6,66,4],[45,10,66,8],[45,11,66,9,"initializeQueue"],[45,26,66,24],[45,27,66,25],[45,28,66,26],[46,6,67,4],[46,10,67,8],[46,11,67,9,"startCleanupTimer"],[46,28,67,26],[46,29,67,27],[46,30,67,28],[47,4,68,2],[49,4,70,2],[50,0,71,0],[51,0,72,0],[52,4,70,2],[52,15,70,2,"_createClass2"],[52,28,70,2],[52,29,70,2,"default"],[52,36,70,2],[52,38,70,2,"OfflineQueue"],[52,50,70,2],[53,6,70,2,"key"],[53,9,70,2],[54,6,70,2,"value"],[54,11,70,2],[55,6,80,2],[56,0,81,0],[57,0,82,0],[58,6,80,2],[59,8,80,2],[59,12,80,2,"_initializeQueue"],[59,28,80,2],[59,35,80,2,"_asyncToGenerator2"],[59,53,80,2],[59,54,80,2,"default"],[59,61,80,2],[59,63,83,2],[59,76,83,49],[60,10,84,4],[60,14,84,8],[61,12,85,6],[61,16,85,12,"storedQueue"],[61,27,85,23],[61,36,85,32,"AsyncStorage"],[61,57,85,44],[61,58,85,45,"getItem"],[61,65,85,52],[61,66,85,53],[61,70,85,57],[61,71,85,58,"STORAGE_KEY"],[61,82,85,69],[61,83,85,70],[62,12,86,6],[62,16,86,10,"storedQueue"],[62,27,86,21],[62,29,86,23],[63,14,87,8],[63,18,87,12],[63,19,87,13,"queue"],[63,24,87,18],[63,27,87,21,"JSON"],[63,31,87,25],[63,32,87,26,"parse"],[63,37,87,31],[63,38,87,32,"storedQueue"],[63,49,87,43],[63,50,87,44],[64,14,88,8,"logger"],[64,38,88,14],[64,39,88,15,"info"],[64,43,88,19],[64,44,88,20],[64,85,88,61],[64,87,88,63],[65,16,88,65,"queueSize"],[65,25,88,74],[65,27,88,76],[65,31,88,80],[65,32,88,81,"queue"],[65,37,88,86],[65,38,88,87,"length"],[66,14,88,94],[66,15,88,95],[66,16,88,96],[67,12,89,6],[68,10,90,4],[68,11,90,5],[68,12,90,6],[68,19,90,13,"error"],[68,24,90,18],[68,26,90,20],[69,12,91,6,"logger"],[69,36,91,12],[69,37,91,13,"error"],[69,42,91,18],[69,43,91,19],[69,92,91,68],[69,94,91,70],[70,14,91,72,"error"],[70,19,91,77],[70,21,91,72,"error"],[71,12,91,78],[71,13,91,79],[71,14,91,80],[72,12,92,6],[72,16,92,10],[72,17,92,11,"queue"],[72,22,92,16],[72,25,92,19],[72,27,92,21],[73,10,93,4],[74,8,94,2],[74,9,94,3],[75,8,94,3],[75,17,83,16,"initializeQueue"],[75,32,83,31,"initializeQueue"],[75,33,83,31],[76,10,83,31],[76,17,83,31,"_initializeQueue"],[76,33,83,31],[76,34,83,31,"apply"],[76,39,83,31],[76,46,83,31,"arguments"],[76,55,83,31],[77,8,83,31],[78,8,83,31],[78,15,83,16,"initializeQueue"],[78,30,83,31],[79,6,83,31],[80,6,96,2],[81,0,97,0],[82,0,98,0],[83,6,96,2],[84,4,96,2],[85,6,96,2,"key"],[85,9,96,2],[86,6,96,2,"value"],[86,11,96,2],[87,8,96,2],[87,12,96,2,"_persistQueue"],[87,25,96,2],[87,32,96,2,"_asyncToGenerator2"],[87,50,96,2],[87,51,96,2,"default"],[87,58,96,2],[87,60,99,2],[87,73,99,46],[88,10,100,4],[88,14,100,8],[89,12,101,6],[89,18,101,12,"AsyncStorage"],[89,39,101,24],[89,40,101,25,"setItem"],[89,47,101,32],[89,48,101,33],[89,52,101,37],[89,53,101,38,"STORAGE_KEY"],[89,64,101,49],[89,66,101,51,"JSON"],[89,70,101,55],[89,71,101,56,"stringify"],[89,80,101,65],[89,81,101,66],[89,85,101,70],[89,86,101,71,"queue"],[89,91,101,76],[89,92,101,77],[89,93,101,78],[90,10,102,4],[90,11,102,5],[90,12,102,6],[90,19,102,13,"error"],[90,24,102,18],[90,26,102,20],[91,12,103,6,"logger"],[91,36,103,12],[91,37,103,13,"error"],[91,42,103,18],[91,43,103,19],[91,82,103,58],[91,84,103,60],[92,14,103,62,"error"],[92,19,103,67],[92,21,103,62,"error"],[93,12,103,68],[93,13,103,69],[93,14,103,70],[94,10,104,4],[95,8,105,2],[95,9,105,3],[96,8,105,3],[96,17,99,16,"persistQueue"],[96,29,99,28,"persistQueue"],[96,30,99,28],[97,10,99,28],[97,17,99,28,"_persistQueue"],[97,30,99,28],[97,31,99,28,"apply"],[97,36,99,28],[97,43,99,28,"arguments"],[97,52,99,28],[98,8,99,28],[99,8,99,28],[99,15,99,16,"persistQueue"],[99,27,99,28],[100,6,99,28],[101,6,107,2],[102,0,108,0],[103,0,109,0],[104,6,107,2],[105,4,107,2],[106,6,107,2,"key"],[106,9,107,2],[107,6,107,2,"value"],[107,11,107,2],[108,8,107,2],[108,12,107,2,"_enqueue"],[108,20,107,2],[108,27,107,2,"_asyncToGenerator2"],[108,45,107,2],[108,46,107,2,"default"],[108,53,107,2],[108,55,110,2],[108,66,110,23,"operation"],[108,75,110,101],[108,77,110,120],[109,10,111,4],[110,10,112,4],[110,14,112,8],[110,18,112,12],[110,19,112,13,"queue"],[110,24,112,18],[110,25,112,19,"length"],[110,31,112,25],[110,35,112,29],[110,39,112,33],[110,40,112,34,"config"],[110,46,112,40],[110,47,112,41,"maxQueueSize"],[110,59,112,53],[110,61,112,55],[111,12,113,6],[112,12,114,6],[112,16,114,10],[112,17,114,11,"cleanupCompletedItems"],[112,38,114,32],[112,39,114,33],[112,40,114,34],[113,12,116,6],[113,16,116,10],[113,20,116,14],[113,21,116,15,"queue"],[113,26,116,20],[113,27,116,21,"length"],[113,33,116,27],[113,37,116,31],[113,41,116,35],[113,42,116,36,"config"],[113,48,116,42],[113,49,116,43,"maxQueueSize"],[113,61,116,55],[113,63,116,57],[114,14,117,8],[114,20,117,14],[114,24,117,18,"Error"],[114,29,117,23],[114,30,117,24],[114,74,117,68],[114,75,117,69],[115,12,118,6],[116,10,119,4],[117,10,121,4],[117,14,121,10,"queuedOperation"],[117,29,121,42],[117,32,121,42,"Object"],[117,38,121,42],[117,39,121,42,"assign"],[117,45,121,42],[118,12,122,6,"id"],[118,14,122,8],[118,16,122,10],[118,20,122,14],[118,21,122,15,"generateId"],[118,31,122,25],[118,32,122,26],[118,33,122,27],[119,12,123,6,"timestamp"],[119,21,123,15],[119,23,123,17,"Date"],[119,27,123,21],[119,28,123,22,"now"],[119,31,123,25],[119,32,123,26],[119,33,123,27],[120,12,124,6,"retryCount"],[120,22,124,16],[120,24,124,18],[120,25,124,19],[121,12,125,6,"status"],[121,18,125,12],[121,20,125,14],[122,10,125,23],[122,13,126,9,"operation"],[122,22,126,18],[122,23,127,5],[124,10,129,4],[125,10,130,4],[125,14,130,10,"insertIndex"],[125,25,130,21],[125,28,130,24],[125,32,130,28],[125,33,130,29,"findInsertIndex"],[125,48,130,44],[125,49,130,45,"queuedOperation"],[125,64,130,60],[125,65,130,61,"priority"],[125,73,130,69],[125,74,130,70],[126,10,131,4],[126,14,131,8],[126,15,131,9,"queue"],[126,20,131,14],[126,21,131,15,"splice"],[126,27,131,21],[126,28,131,22,"insertIndex"],[126,39,131,33],[126,41,131,35],[126,42,131,36],[126,44,131,38,"queuedOperation"],[126,59,131,53],[126,60,131,54],[127,10,133,4],[127,16,133,10],[127,20,133,14],[127,21,133,15,"persistQueue"],[127,33,133,27],[127,34,133,28],[127,35,133,29],[128,10,135,4,"logger"],[128,34,135,10],[128,35,135,11,"info"],[128,39,135,15],[128,40,135,16],[128,74,135,50],[128,76,135,52],[129,12,136,6,"operationId"],[129,23,136,17],[129,25,136,19,"queuedOperation"],[129,40,136,34],[129,41,136,35,"id"],[129,43,136,37],[130,12,137,6,"type"],[130,16,137,10],[130,18,137,12,"queuedOperation"],[130,33,137,27],[130,34,137,28,"type"],[130,38,137,32],[131,12,138,6,"priority"],[131,20,138,14],[131,22,138,16,"queuedOperation"],[131,37,138,31],[131,38,138,32,"priority"],[131,46,138,40],[132,12,139,6,"queueSize"],[132,21,139,15],[132,23,139,17],[132,27,139,21],[132,28,139,22,"queue"],[132,33,139,27],[132,34,139,28,"length"],[133,10,140,4],[133,11,140,5],[133,12,140,6],[134,10,142,4],[134,17,142,11,"queuedOperation"],[134,32,142,26],[134,33,142,27,"id"],[134,35,142,29],[135,8,143,2],[135,9,143,3],[136,8,143,3],[136,17,110,15,"enqueue"],[136,24,110,22,"enqueue"],[136,25,110,22,"_x"],[136,27,110,22],[137,10,110,22],[137,17,110,22,"_enqueue"],[137,25,110,22],[137,26,110,22,"apply"],[137,31,110,22],[137,38,110,22,"arguments"],[137,47,110,22],[138,8,110,22],[139,8,110,22],[139,15,110,15,"enqueue"],[139,22,110,22],[140,6,110,22],[141,6,145,2],[142,0,146,0],[143,0,147,0],[144,6,145,2],[145,4,145,2],[146,6,145,2,"key"],[146,9,145,2],[147,6,145,2,"value"],[147,11,145,2],[147,13,148,2],[147,22,148,10,"findInsertIndex"],[147,37,148,25,"findInsertIndex"],[147,38,148,26,"priority"],[147,46,148,63],[147,48,148,73],[148,8,149,4],[148,12,149,10,"priorityOrder"],[148,25,149,23],[148,28,149,26],[149,10,149,28,"high"],[149,14,149,32],[149,16,149,34],[149,17,149,35],[150,10,149,37,"normal"],[150,16,149,43],[150,18,149,45],[150,19,149,46],[151,10,149,48,"low"],[151,13,149,51],[151,15,149,53],[152,8,149,55],[152,9,149,56],[153,8,150,4],[153,12,150,10,"targetPriority"],[153,26,150,24],[153,29,150,27,"priorityOrder"],[153,42,150,40],[153,43,150,41,"priority"],[153,51,150,49],[153,52,150,50],[154,8,152,4],[154,13,152,9],[154,17,152,13,"i"],[154,18,152,14],[154,21,152,17],[154,22,152,18],[154,24,152,20,"i"],[154,25,152,21],[154,28,152,24],[154,32,152,28],[154,33,152,29,"queue"],[154,38,152,34],[154,39,152,35,"length"],[154,45,152,41],[154,47,152,43,"i"],[154,48,152,44],[154,50,152,46],[154,52,152,48],[155,10,153,6],[155,14,153,12,"currentPriority"],[155,29,153,27],[155,32,153,30,"priorityOrder"],[155,45,153,43],[155,46,153,44],[155,50,153,48],[155,51,153,49,"queue"],[155,56,153,54],[155,57,153,55,"i"],[155,58,153,56],[155,59,153,57],[155,60,153,58,"priority"],[155,68,153,66],[155,69,153,67],[156,10,154,6],[156,14,154,10,"currentPriority"],[156,29,154,25],[156,32,154,28,"targetPriority"],[156,46,154,42],[156,48,154,44],[157,12,155,8],[157,19,155,15,"i"],[157,20,155,16],[158,10,156,6],[159,8,157,4],[160,8,159,4],[160,15,159,11],[160,19,159,15],[160,20,159,16,"queue"],[160,25,159,21],[160,26,159,22,"length"],[160,32,159,28],[161,6,160,2],[163,6,162,2],[164,0,163,0],[165,0,164,0],[166,4,162,2],[167,6,162,2,"key"],[167,9,162,2],[168,6,162,2,"value"],[168,11,162,2],[169,8,162,2],[169,12,162,2,"_dequeue"],[169,20,162,2],[169,27,162,2,"_asyncToGenerator2"],[169,45,162,2],[169,46,162,2,"default"],[169,53,162,2],[169,55,165,2],[169,66,165,23,"operationId"],[169,77,165,42],[169,79,165,77],[170,10,166,4],[170,14,166,10,"index"],[170,19,166,15],[170,22,166,18],[170,26,166,22],[170,27,166,23,"queue"],[170,32,166,28],[170,33,166,29,"findIndex"],[170,42,166,38],[170,43,166,39],[170,53,166,39,"op"],[170,55,166,41],[171,12,166,41],[171,19,166,45,"op"],[171,21,166,47],[171,22,166,48,"id"],[171,24,166,50],[171,29,166,55,"operationId"],[171,40,166,66],[172,10,166,66],[172,12,166,67],[173,10,167,4],[173,14,167,8,"index"],[173,19,167,13],[173,24,167,18],[173,25,167,19],[173,26,167,20],[173,28,167,22],[174,12,168,6],[174,19,168,13],[174,23,168,17],[175,10,169,4],[176,10,171,4],[176,14,171,10,"operation"],[176,23,171,19],[176,26,171,22],[176,30,171,26],[176,31,171,27,"queue"],[176,36,171,32],[176,37,171,33,"splice"],[176,43,171,39],[176,44,171,40,"index"],[176,49,171,45],[176,51,171,47],[176,52,171,48],[176,53,171,49],[176,54,171,50],[176,55,171,51],[176,56,171,52],[177,10,172,4],[177,16,172,10],[177,20,172,14],[177,21,172,15,"persistQueue"],[177,33,172,27],[177,34,172,28],[177,35,172,29],[178,10,174,4,"logger"],[178,34,174,10],[178,35,174,11,"info"],[178,39,174,15],[178,40,174,16],[178,74,174,50],[178,76,174,52],[179,12,175,6,"operationId"],[179,23,175,17],[179,25,175,6,"operationId"],[179,36,175,17],[180,12,176,6,"type"],[180,16,176,10],[180,18,176,12,"operation"],[180,27,176,21],[180,28,176,22,"type"],[180,32,176,26],[181,12,177,6,"queueSize"],[181,21,177,15],[181,23,177,17],[181,27,177,21],[181,28,177,22,"queue"],[181,33,177,27],[181,34,177,28,"length"],[182,10,178,4],[182,11,178,5],[182,12,178,6],[183,10,180,4],[183,17,180,11,"operation"],[183,26,180,20],[184,8,181,2],[184,9,181,3],[185,8,181,3],[185,17,165,15,"dequeue"],[185,24,165,22,"dequeue"],[185,25,165,22,"_x2"],[185,28,165,22],[186,10,165,22],[186,17,165,22,"_dequeue"],[186,25,165,22],[186,26,165,22,"apply"],[186,31,165,22],[186,38,165,22,"arguments"],[186,47,165,22],[187,8,165,22],[188,8,165,22],[188,15,165,15,"dequeue"],[188,22,165,22],[189,6,165,22],[190,6,183,2],[191,0,184,0],[192,0,185,0],[193,6,183,2],[194,4,183,2],[195,6,183,2,"key"],[195,9,183,2],[196,6,183,2,"value"],[196,11,183,2],[196,13,186,2],[196,22,186,9,"getPendingOperations"],[196,42,186,29,"getPendingOperations"],[196,43,186,29],[196,45,186,51],[197,8,187,4],[197,15,187,11],[197,19,187,15],[197,20,187,16,"queue"],[197,25,187,21],[197,26,188,7,"filter"],[197,32,188,13],[197,33,188,14],[197,43,188,14,"op"],[197,45,188,16],[198,10,188,16],[198,17,188,20,"op"],[198,19,188,22],[198,20,188,23,"status"],[198,26,188,29],[198,31,188,34],[198,40,188,43],[199,8,188,43],[199,10,188,44],[199,11,189,7,"sort"],[199,15,189,11],[199,16,189,12],[199,26,189,13,"a"],[199,27,189,14],[199,29,189,16,"b"],[199,30,189,17],[199,32,189,22],[200,10,190,8],[200,14,190,14,"priorityOrder"],[200,27,190,27],[200,30,190,30],[201,12,190,32,"high"],[201,16,190,36],[201,18,190,38],[201,19,190,39],[202,12,190,41,"normal"],[202,18,190,47],[202,20,190,49],[202,21,190,50],[203,12,190,52,"low"],[203,15,190,55],[203,17,190,57],[204,10,190,59],[204,11,190,60],[205,10,191,8],[205,17,191,15,"priorityOrder"],[205,30,191,28],[205,31,191,29,"a"],[205,32,191,30],[205,33,191,31,"priority"],[205,41,191,39],[205,42,191,40],[205,45,191,43,"priorityOrder"],[205,58,191,56],[205,59,191,57,"b"],[205,60,191,58],[205,61,191,59,"priority"],[205,69,191,67],[205,70,191,68],[206,8,192,6],[206,9,192,7],[206,10,192,8],[207,6,193,2],[209,6,195,2],[210,0,196,0],[211,0,197,0],[212,4,195,2],[213,6,195,2,"key"],[213,9,195,2],[214,6,195,2,"value"],[214,11,195,2],[214,13,198,2],[214,22,198,9,"getOperation"],[214,34,198,21,"getOperation"],[214,35,198,22,"operationId"],[214,46,198,41],[214,48,198,67],[215,8,199,4],[215,15,199,11],[215,19,199,15],[215,20,199,16,"queue"],[215,25,199,21],[215,26,199,22,"find"],[215,30,199,26],[215,31,199,27],[215,41,199,27,"op"],[215,43,199,29],[216,10,199,29],[216,17,199,33,"op"],[216,19,199,35],[216,20,199,36,"id"],[216,22,199,38],[216,27,199,43,"operationId"],[216,38,199,54],[217,8,199,54],[217,10,199,55],[217,14,199,59],[217,18,199,63],[218,6,200,2],[220,6,202,2],[221,0,203,0],[222,0,204,0],[223,4,202,2],[224,6,202,2,"key"],[224,9,202,2],[225,6,202,2,"value"],[225,11,202,2],[226,8,202,2],[226,12,202,2,"_updateOperationStatus"],[226,34,202,2],[226,41,202,2,"_asyncToGenerator2"],[226,59,202,2],[226,60,202,2,"default"],[226,67,202,2],[226,69,205,2],[226,80,206,4,"operationId"],[226,91,206,23],[226,93,207,4,"status"],[226,99,207,37],[226,101,208,4,"errorMessage"],[226,113,208,25],[226,115,209,19],[227,10,210,4],[227,14,210,10,"operation"],[227,23,210,19],[227,26,210,22],[227,30,210,26],[227,31,210,27,"queue"],[227,36,210,32],[227,37,210,33,"find"],[227,41,210,37],[227,42,210,38],[227,52,210,38,"op"],[227,54,210,40],[228,12,210,40],[228,19,210,44,"op"],[228,21,210,46],[228,22,210,47,"id"],[228,24,210,49],[228,29,210,54,"operationId"],[228,40,210,65],[229,10,210,65],[229,12,210,66],[230,10,211,4],[230,14,211,8],[230,15,211,9,"operation"],[230,24,211,18],[230,26,211,20],[231,12,212,6,"logger"],[231,36,212,12],[231,37,212,13,"warn"],[231,41,212,17],[231,42,212,18],[231,95,212,71],[231,97,212,73],[232,14,212,75,"operationId"],[232,25,212,86],[232,27,212,75,"operationId"],[233,12,212,87],[233,13,212,88],[233,14,212,89],[234,12,213,6],[235,10,214,4],[236,10,216,4,"operation"],[236,19,216,13],[236,20,216,14,"status"],[236,26,216,20],[236,29,216,23,"status"],[236,35,216,29],[237,10,217,4],[237,14,217,8,"errorMessage"],[237,26,217,20],[237,28,217,22],[238,12,218,6,"operation"],[238,21,218,15],[238,22,218,16,"errorMessage"],[238,34,218,28],[238,37,218,31,"errorMessage"],[238,49,218,43],[239,10,219,4],[241,10,221,4],[242,10,222,4],[242,14,222,8,"status"],[242,20,222,14],[242,25,222,19],[242,33,222,27],[242,37,222,31,"operation"],[242,46,222,40],[242,47,222,41,"retryCount"],[242,57,222,51],[242,61,222,55,"operation"],[242,70,222,64],[242,71,222,65,"maxRetries"],[242,81,222,75],[242,83,222,77],[243,12,223,6,"operation"],[243,21,223,15],[243,22,223,16,"status"],[243,28,223,22],[243,31,223,25],[243,44,223,38],[244,12,224,6],[244,18,224,12],[244,22,224,16],[244,23,224,17,"moveToDeadLetterQueue"],[244,44,224,38],[244,45,224,39,"operation"],[244,54,224,48],[244,55,224,49],[245,10,225,4],[246,10,227,4],[246,16,227,10],[246,20,227,14],[246,21,227,15,"persistQueue"],[246,33,227,27],[246,34,227,28],[246,35,227,29],[247,10,229,4,"logger"],[247,34,229,10],[247,35,229,11,"info"],[247,39,229,15],[247,40,229,16],[247,80,229,56],[247,82,229,58],[248,12,230,6,"operationId"],[248,23,230,17],[248,25,230,6,"operationId"],[248,36,230,17],[249,12,231,6,"status"],[249,18,231,12],[249,20,231,6,"status"],[249,26,231,12],[250,12,232,6,"retryCount"],[250,22,232,16],[250,24,232,18,"operation"],[250,33,232,27],[250,34,232,28,"retryCount"],[250,44,232,38],[251,12,233,6,"maxRetries"],[251,22,233,16],[251,24,233,18,"operation"],[251,33,233,27],[251,34,233,28,"maxRetries"],[252,10,234,4],[252,11,234,5],[252,12,234,6],[253,8,235,2],[253,9,235,3],[254,8,235,3],[254,17,205,15,"updateOperationStatus"],[254,38,205,36,"updateOperationStatus"],[254,39,205,36,"_x3"],[254,42,205,36],[254,44,205,36,"_x4"],[254,47,205,36],[254,49,205,36,"_x5"],[254,52,205,36],[255,10,205,36],[255,17,205,36,"_updateOperationStatus"],[255,39,205,36],[255,40,205,36,"apply"],[255,45,205,36],[255,52,205,36,"arguments"],[255,61,205,36],[256,8,205,36],[257,8,205,36],[257,15,205,15,"updateOperationStatus"],[257,36,205,36],[258,6,205,36],[259,6,237,2],[260,0,238,0],[261,0,239,0],[262,6,237,2],[263,4,237,2],[264,6,237,2,"key"],[264,9,237,2],[265,6,237,2,"value"],[265,11,237,2],[266,8,237,2],[266,12,237,2,"_incrementRetryCount"],[266,32,237,2],[266,39,237,2,"_asyncToGenerator2"],[266,57,237,2],[266,58,237,2,"default"],[266,65,237,2],[266,67,240,2],[266,78,240,35,"operationId"],[266,89,240,54],[266,91,240,73],[267,10,241,4],[267,14,241,10,"operation"],[267,23,241,19],[267,26,241,22],[267,30,241,26],[267,31,241,27,"queue"],[267,36,241,32],[267,37,241,33,"find"],[267,41,241,37],[267,42,241,38],[267,52,241,38,"op"],[267,54,241,40],[268,12,241,40],[268,19,241,44,"op"],[268,21,241,46],[268,22,241,47,"id"],[268,24,241,49],[268,29,241,54,"operationId"],[268,40,241,65],[269,10,241,65],[269,12,241,66],[270,10,242,4],[270,14,242,8],[270,15,242,9,"operation"],[270,24,242,18],[270,26,242,20],[271,12,243,6],[271,18,243,12],[271,22,243,16,"Error"],[271,27,243,21],[271,28,243,22],[271,41,243,35,"operationId"],[271,52,243,46],[271,64,243,58],[271,65,243,59],[272,10,244,4],[273,10,246,4,"operation"],[273,19,246,13],[273,20,246,14,"retryCount"],[273,30,246,24],[273,32,246,26],[274,10,247,4,"operation"],[274,19,247,13],[274,20,247,14,"lastRetryTimestamp"],[274,38,247,32],[274,41,247,35,"Date"],[274,45,247,39],[274,46,247,40,"now"],[274,49,247,43],[274,50,247,44],[274,51,247,45],[275,10,248,4,"operation"],[275,19,248,13],[275,20,248,14,"status"],[275,26,248,20],[275,29,248,23],[275,38,248,32],[276,10,250,4],[276,14,250,10,"delay"],[276,19,250,15],[276,22,250,18],[276,26,250,22],[276,27,250,23,"calculateRetryDelay"],[276,46,250,42],[276,47,250,43,"operation"],[276,56,250,52],[276,57,250,53,"retryCount"],[276,67,250,63],[276,68,250,64],[277,10,252,4],[277,16,252,10],[277,20,252,14],[277,21,252,15,"persistQueue"],[277,33,252,27],[277,34,252,28],[277,35,252,29],[278,10,254,4,"logger"],[278,34,254,10],[278,35,254,11,"info"],[278,39,254,15],[278,40,254,16],[278,79,254,55],[278,81,254,57],[279,12,255,6,"operationId"],[279,23,255,17],[279,25,255,6,"operationId"],[279,36,255,17],[280,12,256,6,"retryCount"],[280,22,256,16],[280,24,256,18,"operation"],[280,33,256,27],[280,34,256,28,"retryCount"],[280,44,256,38],[281,12,257,6,"nextRetryDelay"],[281,26,257,20],[281,28,257,22,"delay"],[282,10,258,4],[282,11,258,5],[282,12,258,6],[283,10,260,4],[283,17,260,11,"delay"],[283,22,260,16],[284,8,261,2],[284,9,261,3],[285,8,261,3],[285,17,240,15,"incrementRetryCount"],[285,36,240,34,"incrementRetryCount"],[285,37,240,34,"_x6"],[285,40,240,34],[286,10,240,34],[286,17,240,34,"_incrementRetryCount"],[286,37,240,34],[286,38,240,34,"apply"],[286,43,240,34],[286,50,240,34,"arguments"],[286,59,240,34],[287,8,240,34],[288,8,240,34],[288,15,240,15,"incrementRetryCount"],[288,34,240,34],[289,6,240,34],[290,6,263,2],[291,0,264,0],[292,0,265,0],[293,6,263,2],[294,4,263,2],[295,6,263,2,"key"],[295,9,263,2],[296,6,263,2,"value"],[296,11,263,2],[296,13,266,2],[296,22,266,10,"calculateRetryDelay"],[296,41,266,29,"calculateRetryDelay"],[296,42,266,30,"retryCount"],[296,52,266,48],[296,54,266,58],[297,8,267,4],[297,12,267,4,"_this$config$retryStr"],[297,33,267,4],[297,36,267,59],[297,40,267,63],[297,41,267,64,"config"],[297,47,267,70],[297,48,267,71,"retryStrategy"],[297,61,267,84],[298,10,267,12,"initialDelay"],[298,22,267,24],[298,25,267,24,"_this$config$retryStr"],[298,46,267,24],[298,47,267,12,"initialDelay"],[298,59,267,24],[299,10,267,26,"maxDelay"],[299,18,267,34],[299,21,267,34,"_this$config$retryStr"],[299,42,267,34],[299,43,267,26,"maxDelay"],[299,51,267,34],[300,10,267,36,"multiplier"],[300,20,267,46],[300,23,267,46,"_this$config$retryStr"],[300,44,267,46],[300,45,267,36,"multiplier"],[300,55,267,46],[301,10,267,48,"jitter"],[301,16,267,54],[301,19,267,54,"_this$config$retryStr"],[301,40,267,54],[301,41,267,48,"jitter"],[301,47,267,54],[302,8,269,4],[302,12,269,8,"delay"],[302,17,269,13],[302,20,269,16,"Math"],[302,24,269,20],[302,25,269,21,"min"],[302,28,269,24],[302,29,269,25,"initialDelay"],[302,41,269,37],[302,44,269,40,"Math"],[302,48,269,44],[302,49,269,45,"pow"],[302,52,269,48],[302,53,269,49,"multiplier"],[302,63,269,59],[302,65,269,61,"retryCount"],[302,75,269,71],[302,78,269,74],[302,79,269,75],[302,80,269,76],[302,82,269,78,"maxDelay"],[302,90,269,86],[302,91,269,87],[304,8,271,4],[305,8,272,4],[305,12,272,8,"jitter"],[305,18,272,14],[305,20,272,16],[306,10,273,6,"delay"],[306,15,273,11],[306,18,273,14,"delay"],[306,23,273,19],[306,26,273,23,"Math"],[306,30,273,27],[306,31,273,28,"random"],[306,37,273,34],[306,38,273,35],[306,39,273,36],[306,42,273,39,"delay"],[306,47,273,44],[306,50,273,47],[306,53,273,51],[306,54,273,52],[306,55,273,53],[307,8,274,4],[308,8,276,4],[308,15,276,11,"Math"],[308,19,276,15],[308,20,276,16,"floor"],[308,25,276,21],[308,26,276,22,"delay"],[308,31,276,27],[308,32,276,28],[309,6,277,2],[311,6,279,2],[312,0,280,0],[313,0,281,0],[314,4,279,2],[315,6,279,2,"key"],[315,9,279,2],[316,6,279,2,"value"],[316,11,279,2],[316,13,282,2],[316,22,282,9,"getQueueStats"],[316,35,282,22,"getQueueStats"],[316,36,282,22],[316,38,289,4],[317,8,290,4],[317,12,290,10,"stats"],[317,17,290,15],[317,20,290,18],[318,10,291,6,"total"],[318,15,291,11],[318,17,291,13],[318,21,291,17],[318,22,291,18,"queue"],[318,27,291,23],[318,28,291,24,"length"],[318,34,291,30],[319,10,292,6,"pending"],[319,17,292,13],[319,19,292,15],[319,20,292,16],[320,10,293,6,"processing"],[320,20,293,16],[320,22,293,18],[320,23,293,19],[321,10,294,6,"completed"],[321,19,294,15],[321,21,294,17],[321,22,294,18],[322,10,295,6,"failed"],[322,16,295,12],[322,18,295,14],[322,19,295,15],[323,10,296,6,"deadLetter"],[323,20,296,16],[323,22,296,18],[324,8,297,4],[324,9,297,5],[325,8,299,4],[325,12,299,8],[325,13,299,9,"queue"],[325,18,299,14],[325,19,299,15,"forEach"],[325,26,299,22],[325,27,299,23],[325,37,299,23,"op"],[325,39,299,25],[325,41,299,29],[326,10,300,6],[326,18,300,14,"op"],[326,20,300,16],[326,21,300,17,"status"],[326,27,300,23],[327,12,301,8],[327,17,301,13],[327,26,301,22],[328,14,302,10,"stats"],[328,19,302,15],[328,20,302,16,"pending"],[328,27,302,23],[328,29,302,25],[329,14,303,10],[330,12,304,8],[330,17,304,13],[330,29,304,25],[331,14,305,10,"stats"],[331,19,305,15],[331,20,305,16,"processing"],[331,30,305,26],[331,32,305,28],[332,14,306,10],[333,12,307,8],[333,17,307,13],[333,28,307,24],[334,14,308,10,"stats"],[334,19,308,15],[334,20,308,16,"completed"],[334,29,308,25],[334,31,308,27],[335,14,309,10],[336,12,310,8],[336,17,310,13],[336,25,310,21],[337,14,311,10,"stats"],[337,19,311,15],[337,20,311,16,"failed"],[337,26,311,22],[337,28,311,24],[338,14,312,10],[339,12,313,8],[339,17,313,13],[339,30,313,26],[340,14,314,10,"stats"],[340,19,314,15],[340,20,314,16,"deadLetter"],[340,30,314,26],[340,32,314,28],[341,14,315,10],[342,10,316,6],[343,8,317,4],[343,9,317,5],[343,10,317,6],[344,8,319,4],[344,15,319,11,"stats"],[344,20,319,16],[345,6,320,2],[347,6,322,2],[348,0,323,0],[349,0,324,0],[350,4,322,2],[351,6,322,2,"key"],[351,9,322,2],[352,6,322,2,"value"],[352,11,322,2],[352,13,325,2],[352,22,325,10,"cleanupCompletedItems"],[352,43,325,31,"cleanupCompletedItems"],[352,44,325,31],[352,46,325,40],[353,8,326,4],[353,12,326,10,"cutoffTime"],[353,22,326,20],[353,25,326,23,"Date"],[353,29,326,27],[353,30,326,28,"now"],[353,33,326,31],[353,34,326,32],[353,35,326,33],[353,38,326,36],[353,42,326,40],[353,43,326,41,"config"],[353,49,326,47],[353,50,326,48,"maxCompletedAge"],[353,65,326,63],[354,8,327,4],[354,12,327,10,"originalLength"],[354,26,327,24],[354,29,327,27],[354,33,327,31],[354,34,327,32,"queue"],[354,39,327,37],[354,40,327,38,"length"],[354,46,327,44],[355,8,329,4],[355,12,329,8],[355,13,329,9,"queue"],[355,18,329,14],[355,21,329,17],[355,25,329,21],[355,26,329,22,"queue"],[355,31,329,27],[355,32,329,28,"filter"],[355,38,329,34],[355,39,329,35],[355,49,329,35,"op"],[355,51,329,37],[355,53,329,41],[356,10,330,6],[356,17,330,13],[356,19,330,15,"op"],[356,21,330,17],[356,22,330,18,"status"],[356,28,330,24],[356,33,330,29],[356,44,330,40],[356,48,330,44,"op"],[356,50,330,46],[356,51,330,47,"timestamp"],[356,60,330,56],[356,63,330,59,"cutoffTime"],[356,73,330,69],[356,74,330,70],[357,8,331,4],[357,9,331,5],[357,10,331,6],[358,8,333,4],[358,12,333,8],[358,16,333,12],[358,17,333,13,"queue"],[358,22,333,18],[358,23,333,19,"length"],[358,29,333,25],[358,32,333,28,"originalLength"],[358,46,333,42],[358,48,333,44],[359,10,334,6],[359,14,334,10],[359,15,334,11,"persistQueue"],[359,27,334,23],[359,28,334,24],[359,29,334,25],[360,10,335,6,"logger"],[360,34,335,12],[360,35,335,13,"info"],[360,39,335,17],[360,40,335,18],[360,82,335,60],[360,84,335,62],[361,12,336,8,"removed"],[361,19,336,15],[361,21,336,17,"originalLength"],[361,35,336,31],[361,38,336,34],[361,42,336,38],[361,43,336,39,"queue"],[361,48,336,44],[361,49,336,45,"length"],[361,55,336,51],[362,12,337,8,"remaining"],[362,21,337,17],[362,23,337,19],[362,27,337,23],[362,28,337,24,"queue"],[362,33,337,29],[362,34,337,30,"length"],[363,10,338,6],[363,11,338,7],[363,12,338,8],[364,8,339,4],[365,6,340,2],[367,6,342,2],[368,0,343,0],[369,0,344,0],[370,4,342,2],[371,6,342,2,"key"],[371,9,342,2],[372,6,342,2,"value"],[372,11,342,2],[373,8,342,2],[373,12,342,2,"_moveToDeadLetterQueue"],[373,34,342,2],[373,41,342,2,"_asyncToGenerator2"],[373,59,342,2],[373,60,342,2,"default"],[373,67,342,2],[373,69,345,2],[373,80,345,38,"operation"],[373,89,345,64],[373,91,345,81],[374,10,346,4],[374,14,346,8],[375,12,347,6],[375,16,347,12,"deadLetterQueueStr"],[375,34,347,30],[375,43,347,39,"AsyncStorage"],[375,64,347,51],[375,65,347,52,"getItem"],[375,72,347,59],[375,73,347,60],[375,77,347,64],[375,78,347,65,"DEAD_LETTER_KEY"],[375,93,347,80],[375,94,347,81],[376,12,348,6],[376,16,348,12,"deadLetterQueue"],[376,31,348,46],[376,34,348,49,"deadLetterQueueStr"],[376,52,348,67],[376,55,349,10,"JSON"],[376,59,349,14],[376,60,349,15,"parse"],[376,65,349,20],[376,66,349,21,"deadLetterQueueStr"],[376,84,349,39],[376,85,349,40],[376,88,350,10],[376,90,350,12],[377,12,352,6,"deadLetterQueue"],[377,27,352,21],[377,28,352,22,"push"],[377,32,352,26],[377,33,352,26,"Object"],[377,39,352,26],[377,40,352,26,"assign"],[377,46,352,26],[377,51,353,11,"operation"],[377,60,353,20],[378,14,354,8,"status"],[378,20,354,14],[378,22,354,16],[378,35,354,29],[379,14,355,8,"timestamp"],[379,23,355,17],[379,25,355,19,"Date"],[379,29,355,23],[379,30,355,24,"now"],[379,33,355,27],[379,34,355,28],[379,35,355,29],[379,36,355,31],[380,12,355,31],[380,14,356,7],[380,15,356,8],[382,12,358,6],[383,12,359,6],[383,16,359,10,"deadLetterQueue"],[383,31,359,25],[383,32,359,26,"length"],[383,38,359,32],[383,41,359,35],[383,44,359,38],[383,46,359,40],[384,14,360,8,"deadLetterQueue"],[384,29,360,23],[384,30,360,24,"splice"],[384,36,360,30],[384,37,360,31],[384,38,360,32],[384,40,360,34,"deadLetterQueue"],[384,55,360,49],[384,56,360,50,"length"],[384,62,360,56],[384,65,360,59],[384,68,360,62],[384,69,360,63],[385,12,361,6],[386,12,363,6],[386,18,363,12,"AsyncStorage"],[386,39,363,24],[386,40,363,25,"setItem"],[386,47,363,32],[386,48,363,33],[386,52,363,37],[386,53,363,38,"DEAD_LETTER_KEY"],[386,68,363,53],[386,70,363,55,"JSON"],[386,74,363,59],[386,75,363,60,"stringify"],[386,84,363,69],[386,85,363,70,"deadLetterQueue"],[386,100,363,85],[386,101,363,86],[386,102,363,87],[387,12,365,6,"logger"],[387,36,365,12],[387,37,365,13,"warn"],[387,41,365,17],[387,42,365,18],[387,94,365,70],[387,96,365,72],[388,14,366,8,"operationId"],[388,25,366,19],[388,27,366,21,"operation"],[388,36,366,30],[388,37,366,31,"id"],[388,39,366,33],[389,14,367,8,"type"],[389,18,367,12],[389,20,367,14,"operation"],[389,29,367,23],[389,30,367,24,"type"],[389,34,367,28],[390,14,368,8,"retryCount"],[390,24,368,18],[390,26,368,20,"operation"],[390,35,368,29],[390,36,368,30,"retryCount"],[390,46,368,40],[391,14,369,8,"errorMessage"],[391,26,369,20],[391,28,369,22,"operation"],[391,37,369,31],[391,38,369,32,"errorMessage"],[392,12,370,6],[392,13,370,7],[392,14,370,8],[393,10,371,4],[393,11,371,5],[393,12,371,6],[393,19,371,13,"error"],[393,24,371,18],[393,26,371,20],[394,12,372,6,"logger"],[394,36,372,12],[394,37,372,13,"error"],[394,42,372,18],[394,43,372,19],[394,104,372,80],[394,106,372,82],[395,14,373,8,"operationId"],[395,25,373,19],[395,27,373,21,"operation"],[395,36,373,30],[395,37,373,31,"id"],[395,39,373,33],[396,14,374,8,"error"],[396,19,374,13],[396,21,374,8,"error"],[397,12,375,6],[397,13,375,7],[397,14,375,8],[398,10,376,4],[399,8,377,2],[399,9,377,3],[400,8,377,3],[400,17,345,16,"moveToDeadLetterQueue"],[400,38,345,37,"moveToDeadLetterQueue"],[400,39,345,37,"_x7"],[400,42,345,37],[401,10,345,37],[401,17,345,37,"_moveToDeadLetterQueue"],[401,39,345,37],[401,40,345,37,"apply"],[401,45,345,37],[401,52,345,37,"arguments"],[401,61,345,37],[402,8,345,37],[403,8,345,37],[403,15,345,16,"moveToDeadLetterQueue"],[403,36,345,37],[404,6,345,37],[405,6,379,2],[406,0,380,0],[407,0,381,0],[408,6,379,2],[409,4,379,2],[410,6,379,2,"key"],[410,9,379,2],[411,6,379,2,"value"],[411,11,379,2],[412,8,379,2],[412,12,379,2,"_getDeadLetterQueue"],[412,31,379,2],[412,38,379,2,"_asyncToGenerator2"],[412,56,379,2],[412,57,379,2,"default"],[412,64,379,2],[412,66,382,2],[412,79,382,64],[413,10,383,4],[413,14,383,8],[414,12,384,6],[414,16,384,12,"deadLetterQueueStr"],[414,34,384,30],[414,43,384,39,"AsyncStorage"],[414,64,384,51],[414,65,384,52,"getItem"],[414,72,384,59],[414,73,384,60],[414,77,384,64],[414,78,384,65,"DEAD_LETTER_KEY"],[414,93,384,80],[414,94,384,81],[415,12,385,6],[415,19,385,13,"deadLetterQueueStr"],[415,37,385,31],[415,40,385,34,"JSON"],[415,44,385,38],[415,45,385,39,"parse"],[415,50,385,44],[415,51,385,45,"deadLetterQueueStr"],[415,69,385,63],[415,70,385,64],[415,73,385,67],[415,75,385,69],[416,10,386,4],[416,11,386,5],[416,12,386,6],[416,19,386,13,"error"],[416,24,386,18],[416,26,386,20],[417,12,387,6,"logger"],[417,36,387,12],[417,37,387,13,"error"],[417,42,387,18],[417,43,387,19],[417,91,387,67],[417,93,387,69],[418,14,387,71,"error"],[418,19,387,76],[418,21,387,71,"error"],[419,12,387,77],[419,13,387,78],[419,14,387,79],[420,12,388,6],[420,19,388,13],[420,21,388,15],[421,10,389,4],[422,8,390,2],[422,9,390,3],[423,8,390,3],[423,17,382,15,"getDeadLetterQueue"],[423,35,382,33,"getDeadLetterQueue"],[423,36,382,33],[424,10,382,33],[424,17,382,33,"_getDeadLetterQueue"],[424,36,382,33],[424,37,382,33,"apply"],[424,42,382,33],[424,49,382,33,"arguments"],[424,58,382,33],[425,8,382,33],[426,8,382,33],[426,15,382,15,"getDeadLetterQueue"],[426,33,382,33],[427,6,382,33],[428,6,392,2],[429,0,393,0],[430,0,394,0],[431,6,392,2],[432,4,392,2],[433,6,392,2,"key"],[433,9,392,2],[434,6,392,2,"value"],[434,11,392,2],[435,8,392,2],[435,12,392,2,"_requeueFromDeadLetter"],[435,34,392,2],[435,41,392,2,"_asyncToGenerator2"],[435,59,392,2],[435,60,392,2,"default"],[435,67,392,2],[435,69,395,2],[435,80,395,37,"operationId"],[435,91,395,56],[435,93,395,76],[436,10,396,4],[436,14,396,8],[437,12,397,6],[437,16,397,12,"deadLetterQueue"],[437,31,397,27],[437,40,397,36],[437,44,397,40],[437,45,397,41,"getDeadLetterQueue"],[437,63,397,59],[437,64,397,60],[437,65,397,61],[438,12,398,6],[438,16,398,12,"operationIndex"],[438,30,398,26],[438,33,398,29,"deadLetterQueue"],[438,48,398,44],[438,49,398,45,"findIndex"],[438,58,398,54],[438,59,398,55],[438,69,398,55,"op"],[438,71,398,57],[439,14,398,57],[439,21,398,61,"op"],[439,23,398,63],[439,24,398,64,"id"],[439,26,398,66],[439,31,398,71,"operationId"],[439,42,398,82],[440,12,398,82],[440,14,398,83],[441,12,400,6],[441,16,400,10,"operationIndex"],[441,30,400,24],[441,35,400,29],[441,36,400,30],[441,37,400,31],[441,39,400,33],[442,14,401,8],[442,21,401,15],[442,26,401,20],[443,12,402,6],[444,12,404,6],[444,16,404,12,"operation"],[444,25,404,21],[444,28,404,24,"deadLetterQueue"],[444,43,404,39],[444,44,404,40,"operationIndex"],[444,58,404,54],[444,59,404,55],[446,12,406,6],[447,12,407,6,"operation"],[447,21,407,15],[447,22,407,16,"status"],[447,28,407,22],[447,31,407,25],[447,40,407,34],[448,12,408,6,"operation"],[448,21,408,15],[448,22,408,16,"retryCount"],[448,32,408,26],[448,35,408,29],[448,36,408,30],[449,12,409,6,"operation"],[449,21,409,15],[449,22,409,16,"timestamp"],[449,31,409,25],[449,34,409,28,"Date"],[449,38,409,32],[449,39,409,33,"now"],[449,42,409,36],[449,43,409,37],[449,44,409,38],[450,12,410,6,"operation"],[450,21,410,15],[450,22,410,16,"errorMessage"],[450,34,410,28],[450,37,410,31,"undefined"],[450,46,410,40],[452,12,412,6],[453,12,413,6],[453,16,413,10],[453,17,413,11,"queue"],[453,22,413,16],[453,23,413,17,"push"],[453,27,413,21],[453,28,413,22,"operation"],[453,37,413,31],[453,38,413,32],[455,12,415,6],[456,12,416,6,"deadLetterQueue"],[456,27,416,21],[456,28,416,22,"splice"],[456,34,416,28],[456,35,416,29,"operationIndex"],[456,49,416,43],[456,51,416,45],[456,52,416,46],[456,53,416,47],[457,12,417,6],[457,18,417,12,"AsyncStorage"],[457,39,417,24],[457,40,417,25,"setItem"],[457,47,417,32],[457,48,417,33],[457,52,417,37],[457,53,417,38,"DEAD_LETTER_KEY"],[457,68,417,53],[457,70,417,55,"JSON"],[457,74,417,59],[457,75,417,60,"stringify"],[457,84,417,69],[457,85,417,70,"deadLetterQueue"],[457,100,417,85],[457,101,417,86],[457,102,417,87],[458,12,419,6],[458,18,419,12],[458,22,419,16],[458,23,419,17,"persistQueue"],[458,35,419,29],[458,36,419,30],[458,37,419,31],[459,12,421,6,"logger"],[459,36,421,12],[459,37,421,13,"info"],[459,41,421,17],[459,42,421,18],[459,99,421,75],[459,101,421,77],[460,14,422,8,"operationId"],[460,25,422,19],[460,27,422,8,"operationId"],[460,38,422,19],[461,14,423,8,"type"],[461,18,423,12],[461,20,423,14,"operation"],[461,29,423,23],[461,30,423,24,"type"],[462,12,424,6],[462,13,424,7],[462,14,424,8],[463,12,426,6],[463,19,426,13],[463,23,426,17],[464,10,427,4],[464,11,427,5],[464,12,427,6],[464,19,427,13,"error"],[464,24,427,18],[464,26,427,20],[465,12,428,6,"logger"],[465,36,428,12],[465,37,428,13,"error"],[465,42,428,18],[465,43,428,19],[465,99,428,75],[465,101,428,77],[466,14,429,8,"operationId"],[466,25,429,19],[466,27,429,8,"operationId"],[466,38,429,19],[467,14,430,8,"error"],[467,19,430,13],[467,21,430,8,"error"],[468,12,431,6],[468,13,431,7],[468,14,431,8],[469,12,432,6],[469,19,432,13],[469,24,432,18],[470,10,433,4],[471,8,434,2],[471,9,434,3],[472,8,434,3],[472,17,395,15,"requeueFromDeadLetter"],[472,38,395,36,"requeueFromDeadLetter"],[472,39,395,36,"_x8"],[472,42,395,36],[473,10,395,36],[473,17,395,36,"_requeueFromDeadLetter"],[473,39,395,36],[473,40,395,36,"apply"],[473,45,395,36],[473,52,395,36,"arguments"],[473,61,395,36],[474,8,395,36],[475,8,395,36],[475,15,395,15,"requeueFromDeadLetter"],[475,36,395,36],[476,6,395,36],[477,6,436,2],[478,0,437,0],[479,0,438,0],[480,6,436,2],[481,4,436,2],[482,6,436,2,"key"],[482,9,436,2],[483,6,436,2,"value"],[483,11,436,2],[484,8,436,2],[484,12,436,2,"_clearCompleted"],[484,27,436,2],[484,34,436,2,"_asyncToGenerator2"],[484,52,436,2],[484,53,436,2,"default"],[484,60,436,2],[484,62,439,2],[484,75,439,49],[485,10,440,4],[485,14,440,10,"originalLength"],[485,28,440,24],[485,31,440,27],[485,35,440,31],[485,36,440,32,"queue"],[485,41,440,37],[485,42,440,38,"length"],[485,48,440,44],[486,10,441,4],[486,14,441,8],[486,15,441,9,"queue"],[486,20,441,14],[486,23,441,17],[486,27,441,21],[486,28,441,22,"queue"],[486,33,441,27],[486,34,441,28,"filter"],[486,40,441,34],[486,41,441,35],[486,51,441,35,"op"],[486,53,441,37],[487,12,441,37],[487,19,441,41,"op"],[487,21,441,43],[487,22,441,44,"status"],[487,28,441,50],[487,33,441,55],[487,44,441,66],[488,10,441,66],[488,12,441,67],[489,10,443,4],[489,16,443,10],[489,20,443,14],[489,21,443,15,"persistQueue"],[489,33,443,27],[489,34,443,28],[489,35,443,29],[490,10,445,4],[490,14,445,10,"removedCount"],[490,26,445,22],[490,29,445,25,"originalLength"],[490,43,445,39],[490,46,445,42],[490,50,445,46],[490,51,445,47,"queue"],[490,56,445,52],[490,57,445,53,"length"],[490,63,445,59],[491,10,447,4,"logger"],[491,34,447,10],[491,35,447,11,"info"],[491,39,447,15],[491,40,447,16],[491,84,447,60],[491,86,447,62],[492,12,448,6,"removed"],[492,19,448,13],[492,21,448,15,"removedCount"],[492,33,448,27],[493,12,449,6,"remaining"],[493,21,449,15],[493,23,449,17],[493,27,449,21],[493,28,449,22,"queue"],[493,33,449,27],[493,34,449,28,"length"],[494,10,450,4],[494,11,450,5],[494,12,450,6],[495,10,452,4],[495,17,452,11,"removedCount"],[495,29,452,23],[496,8,453,2],[496,9,453,3],[497,8,453,3],[497,17,439,15,"clearCompleted"],[497,31,439,29,"clearCompleted"],[497,32,439,29],[498,10,439,29],[498,17,439,29,"_clearCompleted"],[498,32,439,29],[498,33,439,29,"apply"],[498,38,439,29],[498,45,439,29,"arguments"],[498,54,439,29],[499,8,439,29],[500,8,439,29],[500,15,439,15,"clearCompleted"],[500,29,439,29],[501,6,439,29],[502,6,455,2],[503,0,456,0],[504,0,457,0],[505,6,455,2],[506,4,455,2],[507,6,455,2,"key"],[507,9,455,2],[508,6,455,2,"value"],[508,11,455,2],[508,13,458,2],[508,22,458,10,"startCleanupTimer"],[508,39,458,27,"startCleanupTimer"],[508,40,458,27],[508,42,458,36],[509,8,458,36],[509,12,458,36,"_this"],[509,17,458,36],[510,8,459,4],[510,12,459,8],[510,13,459,9,"cleanupInterval"],[510,28,459,24],[510,31,459,27,"setInterval"],[510,42,459,38],[510,43,459,39],[510,55,459,45],[511,10,460,6,"_this"],[511,15,460,10],[511,16,460,11,"cleanupCompletedItems"],[511,37,460,32],[511,38,460,33],[511,39,460,34],[512,8,461,4],[512,9,461,5],[512,11,461,7],[512,15,461,11],[512,16,461,12,"config"],[512,22,461,18],[512,23,461,19,"cleanupInterval"],[512,38,461,34],[512,39,461,35],[513,6,462,2],[515,6,464,2],[516,0,465,0],[517,0,466,0],[518,4,464,2],[519,6,464,2,"key"],[519,9,464,2],[520,6,464,2,"value"],[520,11,464,2],[520,13,467,2],[520,22,467,9,"stopCleanupTimer"],[520,38,467,25,"stopCleanupTimer"],[520,39,467,25],[520,41,467,34],[521,8,468,4],[521,12,468,8],[521,16,468,12],[521,17,468,13,"cleanupInterval"],[521,32,468,28],[521,34,468,30],[522,10,469,6,"clearInterval"],[522,23,469,19],[522,24,469,20],[522,28,469,24],[522,29,469,25,"cleanupInterval"],[522,44,469,40],[522,45,469,41],[523,10,470,6],[523,14,470,10],[523,15,470,11,"cleanupInterval"],[523,30,470,26],[523,33,470,29],[523,37,470,33],[524,8,471,4],[525,6,472,2],[527,6,474,2],[528,0,475,0],[529,0,476,0],[530,4,474,2],[531,6,474,2,"key"],[531,9,474,2],[532,6,474,2,"value"],[532,11,474,2],[532,13,477,2],[532,22,477,10,"generateId"],[532,32,477,20,"generateId"],[532,33,477,20],[532,35,477,31],[533,8,478,4],[533,15,478,11],[533,18,478,14,"Date"],[533,22,478,18],[533,23,478,19,"now"],[533,26,478,22],[533,27,478,23],[533,28,478,24],[533,32,478,28,"Math"],[533,36,478,32],[533,37,478,33,"random"],[533,43,478,39],[533,44,478,40],[533,45,478,41],[533,46,478,42,"toString"],[533,54,478,50],[533,55,478,51],[533,57,478,53],[533,58,478,54],[533,59,478,55,"substr"],[533,65,478,61],[533,66,478,62],[533,67,478,63],[533,69,478,65],[533,70,478,66],[533,71,478,67],[533,73,478,69],[534,6,479,2],[536,6,481,2],[537,0,482,0],[538,0,483,0],[539,4,481,2],[540,6,481,2,"key"],[540,9,481,2],[541,6,481,2,"value"],[541,11,481,2],[541,13,484,2],[541,22,484,9,"isOperationReadyForRetry"],[541,46,484,33,"isOperationReadyForRetry"],[541,47,484,34,"operation"],[541,56,484,60],[541,58,484,71],[542,8,485,4],[542,12,485,8,"operation"],[542,21,485,17],[542,22,485,18,"status"],[542,28,485,24],[542,33,485,29],[542,42,485,38],[542,46,485,42,"operation"],[542,55,485,51],[542,56,485,52,"retryCount"],[542,66,485,62],[542,71,485,67],[542,72,485,68],[542,74,485,70],[543,10,486,6],[543,17,486,13],[543,21,486,17],[544,8,487,4],[545,8,489,4],[545,12,489,8],[545,13,489,9,"operation"],[545,22,489,18],[545,23,489,19,"lastRetryTimestamp"],[545,41,489,37],[545,43,489,39],[546,10,490,6],[546,17,490,13],[546,21,490,17],[547,8,491,4],[548,8,493,4],[548,12,493,10,"delay"],[548,17,493,15],[548,20,493,18],[548,24,493,22],[548,25,493,23,"calculateRetryDelay"],[548,44,493,42],[548,45,493,43,"operation"],[548,54,493,52],[548,55,493,53,"retryCount"],[548,65,493,63],[548,66,493,64],[549,8,494,4],[549,12,494,10,"timeSinceLastRetry"],[549,30,494,28],[549,33,494,31,"Date"],[549,37,494,35],[549,38,494,36,"now"],[549,41,494,39],[549,42,494,40],[549,43,494,41],[549,46,494,44,"operation"],[549,55,494,53],[549,56,494,54,"lastRetryTimestamp"],[549,74,494,72],[550,8,496,4],[550,15,496,11,"timeSinceLastRetry"],[550,33,496,29],[550,37,496,33,"delay"],[550,42,496,38],[551,6,497,2],[553,6,499,2],[554,0,500,0],[555,0,501,0],[556,4,499,2],[557,6,499,2,"key"],[557,9,499,2],[558,6,499,2,"value"],[558,11,499,2],[558,13,502,2],[558,22,502,9,"getReadyOperations"],[558,40,502,27,"getReadyOperations"],[558,41,502,27],[558,43,502,49],[559,8,502,49],[559,12,502,49,"_this2"],[559,18,502,49],[560,8,503,4],[560,15,503,11],[560,19,503,15],[560,20,503,16,"getPendingOperations"],[560,40,503,36],[560,41,503,37],[560,42,503,38],[560,43,503,39,"filter"],[560,49,503,45],[560,50,503,46],[560,60,503,46,"op"],[560,62,503,48],[561,10,503,48],[561,17,503,52,"_this2"],[561,23,503,56],[561,24,503,57,"isOperationReadyForRetry"],[561,48,503,81],[561,49,503,82,"op"],[561,51,503,84],[561,52,503,85],[562,8,503,85],[562,10,503,86],[563,6,504,2],[565,6,506,2],[566,0,507,0],[567,0,508,0],[568,4,506,2],[569,6,506,2,"key"],[569,9,506,2],[570,6,506,2,"value"],[570,11,506,2],[571,8,506,2],[571,12,506,2,"_clearQueue"],[571,23,506,2],[571,30,506,2,"_asyncToGenerator2"],[571,48,506,2],[571,49,506,2,"default"],[571,56,506,2],[571,58,509,2],[571,71,509,43],[572,10,510,4],[572,14,510,8],[572,15,510,9,"queue"],[572,20,510,14],[572,23,510,17],[572,25,510,19],[573,10,511,4],[573,16,511,10,"AsyncStorage"],[573,37,511,22],[573,38,511,23,"removeItem"],[573,48,511,33],[573,49,511,34],[573,53,511,38],[573,54,511,39,"STORAGE_KEY"],[573,65,511,50],[573,66,511,51],[574,10,512,4,"logger"],[574,34,512,10],[574,35,512,11,"warn"],[574,39,512,15],[574,40,512,16],[574,69,512,45],[574,70,512,46],[575,8,513,2],[575,9,513,3],[576,8,513,3],[576,17,509,15,"clearQueue"],[576,27,509,25,"clearQueue"],[576,28,509,25],[577,10,509,25],[577,17,509,25,"_clearQueue"],[577,28,509,25],[577,29,509,25,"apply"],[577,34,509,25],[577,41,509,25,"arguments"],[577,50,509,25],[578,8,509,25],[579,8,509,25],[579,15,509,15,"clearQueue"],[579,25,509,25],[580,6,509,25],[581,6,515,2],[582,0,516,0],[583,0,517,0],[584,6,515,2],[585,4,515,2],[586,6,515,2,"key"],[586,9,515,2],[587,6,515,2,"value"],[587,11,515,2],[588,8,515,2],[588,12,515,2,"_cleanup"],[588,20,515,2],[588,27,515,2,"_asyncToGenerator2"],[588,45,515,2],[588,46,515,2,"default"],[588,53,515,2],[588,55,518,2],[588,68,518,40],[589,10,519,4],[589,14,519,8],[589,15,519,9,"stopCleanupTimer"],[589,31,519,25],[589,32,519,26],[589,33,519,27],[590,10,520,4],[590,16,520,10],[590,20,520,14],[590,21,520,15,"persistQueue"],[590,33,520,27],[590,34,520,28],[590,35,520,29],[591,10,521,4,"logger"],[591,34,521,10],[591,35,521,11,"info"],[591,39,521,15],[591,40,521,16],[591,73,521,49],[591,74,521,50],[592,8,522,2],[592,9,522,3],[593,8,522,3],[593,17,518,15,"cleanup"],[593,24,518,22,"cleanup"],[593,25,518,22],[594,10,518,22],[594,17,518,22,"_cleanup"],[594,25,518,22],[594,26,518,22,"apply"],[594,31,518,22],[594,38,518,22,"arguments"],[594,47,518,22],[595,8,518,22],[596,8,518,22],[596,15,518,15,"cleanup"],[596,22,518,22],[597,6,518,22],[598,4,518,22],[599,6,518,22,"key"],[599,9,518,22],[600,6,518,22,"value"],[600,11,518,22],[600,13,73,2],[600,22,73,16,"getInstance"],[600,33,73,27,"getInstance"],[600,34,73,27],[600,36,73,44],[601,8,74,4],[601,12,74,8],[601,13,74,9,"OfflineQueue"],[601,25,74,21],[601,26,74,22,"instance"],[601,34,74,30],[601,36,74,32],[602,10,75,6,"OfflineQueue"],[602,22,75,18],[602,23,75,19,"instance"],[602,31,75,27],[602,34,75,30],[602,38,75,34,"OfflineQueue"],[602,50,75,46],[602,51,75,47],[602,52,75,48],[603,8,76,4],[604,8,77,4],[604,15,77,11,"OfflineQueue"],[604,27,77,23],[604,28,77,24,"instance"],[604,36,77,32],[605,6,78,2],[606,4,78,3],[607,2,78,3],[607,7,525,0],[608,2,526,7],[608,6,526,13,"offlineQueue"],[608,18,526,25],[608,21,526,25,"exports"],[608,28,526,25],[608,29,526,25,"offlineQueue"],[608,41,526,25],[608,44,526,28,"OfflineQueue"],[608,56,526,40],[608,57,526,41,"getInstance"],[608,68,526,52],[608,69,526,53],[608,70,526,54],[609,0,526,55],[609,3]],"functionMap":{"names":["<global>","OfflineQueue","constructor","getInstance","initializeQueue","persistQueue","enqueue","findInsertIndex","dequeue","queue.findIndex$argument_0","getPendingOperations","queue.filter$argument_0","queue.filter.sort$argument_0","getOperation","queue.find$argument_0","updateOperationStatus","incrementRetryCount","calculateRetryDelay","getQueueStats","queue.forEach$argument_0","cleanupCompletedItems","moveToDeadLetterQueue","getDeadLetterQueue","requeueFromDeadLetter","deadLetterQueue.findIndex$argument_0","clearCompleted","startCleanupTimer","setInterval$argument_0","stopCleanupTimer","generateId","isOperationReadyForRetry","getReadyOperations","getPendingOperations.filter$argument_0","clearQueue","cleanup"],"mappings":"AAA;OC2C;ECqB;GDG;EEK;GFK;EGK;GHW;EIK;GJM;EKK;GLiC;EMK;GNY;EOK;uCCC,2BD;GPe;ESK;cCE,6BD;YEC;OFG;GTC;EYK;2BCC,2BD;GZC;EcK;sCDK,2BC;GdyB;EeK;sCFC,2BE;GfoB;EgBK;GhBW;EiBK;uBCiB;KDkB;GjBG;EmBK;mCTI;KSE;GnBS;EoBK;GpBgC;EqBK;GrBQ;EsBK;uDCG,2BD;GtBoC;EwBK;mCdE,+Bc;GxBY;EyBK;uCCC;KDE;GzBC;E2BK;G3BK;E4BK;G5BE;E6BK;G7Ba;E8BK;8CCC,uCD;G9BC;EgCK;GhCI;EiCK;GjCI;CDC"}},"type":"js/module"}]}