{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@react-native-community/netinfo","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":153},"end":{"line":8,"column":54,"index":207}}],"key":"PqZcYTlMIVnzFjdViPzMiGUu7Hg=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":246},"end":{"line":10,"column":54,"index":300}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.networkAwareQuery = exports.logApiError = exports.clearErrorLogCache = exports.checkNetworkStatus = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _netinfo = _interopRequireDefault(require(_dependencyMap[2], \"@react-native-community/netinfo\"));\n  var _EventLogger = require(_dependencyMap[3], \"../../utils/EventLogger\");\n  /**\n   * Network-aware API utilities\n   * \n   * This module provides utilities to prevent API calls when offline\n   * and handle network errors gracefully.\n   */\n\n  // Cache network status to avoid repeated checks\n  var isOnline = true;\n  var lastNetworkCheck = 0;\n  var NETWORK_CHECK_INTERVAL = 5000; // 5 seconds\n\n  // Initialize network listener\n  _netinfo.default.addEventListener(function (state) {\n    var _state$isConnected;\n    isOnline = (_state$isConnected = state.isConnected) != null ? _state$isConnected : true;\n    lastNetworkCheck = Date.now();\n  });\n\n  /**\n   * Check if device is online (with caching)\n   */\n  var checkNetworkStatus = exports.checkNetworkStatus = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)(function* () {\n      // Use cached value if recent\n      if (Date.now() - lastNetworkCheck < NETWORK_CHECK_INTERVAL) {\n        return isOnline;\n      }\n      try {\n        var _state$isConnected2;\n        var state = yield _netinfo.default.fetch();\n        isOnline = (_state$isConnected2 = state.isConnected) != null ? _state$isConnected2 : true;\n        lastNetworkCheck = Date.now();\n        return isOnline;\n      } catch (error) {\n        _EventLogger.EventLogger.warn('API', 'Failed to check network status:', error);\n        return isOnline; // Return last known state\n      }\n    });\n    return function checkNetworkStatus() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Network-aware query wrapper that prevents API calls when offline\n   */\n  var networkAwareQuery = exports.networkAwareQuery = /*#__PURE__*/function () {\n    var _ref2 = (0, _asyncToGenerator2.default)(function* (queryFn, options) {\n      var _ref3 = options || {},\n        _ref3$skipNetworkChec = _ref3.skipNetworkCheck,\n        skipNetworkCheck = _ref3$skipNetworkChec === void 0 ? false : _ref3$skipNetworkChec,\n        offlineData = _ref3.offlineData;\n\n      // Skip network check if requested (for critical operations)\n      if (!skipNetworkCheck) {\n        var online = yield checkNetworkStatus();\n        if (!online) {\n          if (offlineData !== undefined) {\n            return offlineData;\n          }\n          throw {\n            status: 'OFFLINE',\n            message: 'No internet connection. Please check your network and try again.',\n            code: 'NETWORK_OFFLINE'\n          };\n        }\n      }\n      try {\n        return yield queryFn();\n      } catch (error) {\n        var _error$message, _error$message2;\n        // Check if error is due to network failure\n        if (error != null && (_error$message = error.message) != null && _error$message.includes('Network request failed') || error != null && (_error$message2 = error.message) != null && _error$message2.includes('Failed to fetch') || (error == null ? void 0 : error.code) === 'NETWORK_ERROR') {\n          // Update network status\n          isOnline = false;\n          lastNetworkCheck = Date.now();\n          throw {\n            status: 'OFFLINE',\n            message: 'Connection lost. Please check your internet connection.',\n            code: 'NETWORK_ERROR'\n          };\n        }\n\n        // Re-throw other errors\n        throw error;\n      }\n    });\n    return function networkAwareQuery(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Debounced error logger to prevent spam\n   */\n  var errorLogCache = new Map();\n  var ERROR_LOG_INTERVAL = 60000; // 1 minute\n\n  var logApiError = exports.logApiError = function logApiError(error, context) {\n    var errorKey = `${context}:${(error == null ? void 0 : error.message) || (error == null ? void 0 : error.code) || 'unknown'}`;\n    var lastLogged = errorLogCache.get(errorKey) || 0;\n    if (Date.now() - lastLogged > ERROR_LOG_INTERVAL) {\n      _EventLogger.EventLogger.error('API', '[${context}] API Error:', error);\n      errorLogCache.set(errorKey, Date.now());\n    }\n  };\n\n  /**\n   * Clear error log cache (useful for testing)\n   */\n  var clearErrorLogCache = exports.clearErrorLogCache = function clearErrorLogCache() {\n    errorLogCache.clear();\n  };\n});","lineCount":124,"map":[[8,2,8,0],[8,6,8,0,"_netinfo"],[8,14,8,0],[8,17,8,0,"_interopRequireDefault"],[8,39,8,0],[8,40,8,0,"require"],[8,47,8,0],[8,48,8,0,"_dependencyMap"],[8,62,8,0],[9,2,10,0],[9,6,10,0,"_EventLogger"],[9,18,10,0],[9,21,10,0,"require"],[9,28,10,0],[9,29,10,0,"_dependencyMap"],[9,43,10,0],[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[17,2,12,0],[18,2,13,0],[18,6,13,4,"isOnline"],[18,14,13,12],[18,17,13,15],[18,21,13,19],[19,2,14,0],[19,6,14,4,"lastNetworkCheck"],[19,22,14,20],[19,25,14,23],[19,26,14,24],[20,2,15,0],[20,6,15,6,"NETWORK_CHECK_INTERVAL"],[20,28,15,28],[20,31,15,31],[20,35,15,35],[20,36,15,36],[20,37,15,37],[22,2,17,0],[23,2,18,0,"NetInfo"],[23,18,18,7],[23,19,18,8,"addEventListener"],[23,35,18,24],[23,36,18,25],[23,46,18,25,"state"],[23,51,18,30],[23,53,18,34],[24,4,18,34],[24,8,18,34,"_state$isConnected"],[24,26,18,34],[25,4,19,2,"isOnline"],[25,12,19,10],[25,16,19,10,"_state$isConnected"],[25,34,19,10],[25,37,19,13,"state"],[25,42,19,18],[25,43,19,19,"isConnected"],[25,54,19,30],[25,66,19,30,"_state$isConnected"],[25,84,19,30],[25,87,19,34],[25,91,19,38],[26,4,20,2,"lastNetworkCheck"],[26,20,20,18],[26,23,20,21,"Date"],[26,27,20,25],[26,28,20,26,"now"],[26,31,20,29],[26,32,20,30],[26,33,20,31],[27,2,21,0],[27,3,21,1],[27,4,21,2],[29,2,23,0],[30,0,24,0],[31,0,25,0],[32,2,26,7],[32,6,26,13,"checkNetworkStatus"],[32,24,26,31],[32,27,26,31,"exports"],[32,34,26,31],[32,35,26,31,"checkNetworkStatus"],[32,53,26,31],[33,4,26,31],[33,8,26,31,"_ref"],[33,12,26,31],[33,19,26,31,"_asyncToGenerator2"],[33,37,26,31],[33,38,26,31,"default"],[33,45,26,31],[33,47,26,34],[33,60,26,64],[34,6,27,2],[35,6,28,2],[35,10,28,6,"Date"],[35,14,28,10],[35,15,28,11,"now"],[35,18,28,14],[35,19,28,15],[35,20,28,16],[35,23,28,19,"lastNetworkCheck"],[35,39,28,35],[35,42,28,38,"NETWORK_CHECK_INTERVAL"],[35,64,28,60],[35,66,28,62],[36,8,29,4],[36,15,29,11,"isOnline"],[36,23,29,19],[37,6,30,2],[38,6,32,2],[38,10,32,6],[39,8,32,6],[39,12,32,6,"_state$isConnected2"],[39,31,32,6],[40,8,33,4],[40,12,33,10,"state"],[40,17,33,15],[40,26,33,24,"NetInfo"],[40,42,33,31],[40,43,33,32,"fetch"],[40,48,33,37],[40,49,33,38],[40,50,33,39],[41,8,34,4,"isOnline"],[41,16,34,12],[41,20,34,12,"_state$isConnected2"],[41,39,34,12],[41,42,34,15,"state"],[41,47,34,20],[41,48,34,21,"isConnected"],[41,59,34,32],[41,71,34,32,"_state$isConnected2"],[41,90,34,32],[41,93,34,36],[41,97,34,40],[42,8,35,4,"lastNetworkCheck"],[42,24,35,20],[42,27,35,23,"Date"],[42,31,35,27],[42,32,35,28,"now"],[42,35,35,31],[42,36,35,32],[42,37,35,33],[43,8,36,4],[43,15,36,11,"isOnline"],[43,23,36,19],[44,6,37,2],[44,7,37,3],[44,8,37,4],[44,15,37,11,"error"],[44,20,37,16],[44,22,37,18],[45,8,38,4,"EventLogger"],[45,32,38,15],[45,33,38,16,"warn"],[45,37,38,20],[45,38,38,21],[45,43,38,26],[45,45,38,28],[45,78,38,61],[45,80,38,63,"error"],[45,85,38,68],[45,86,38,69],[46,8,39,4],[46,15,39,11,"isOnline"],[46,23,39,19],[46,24,39,20],[46,25,39,21],[47,6,40,2],[48,4,41,0],[48,5,41,1],[49,4,41,1],[49,20,26,13,"checkNetworkStatus"],[49,38,26,31,"checkNetworkStatus"],[49,39,26,31],[50,6,26,31],[50,13,26,31,"_ref"],[50,17,26,31],[50,18,26,31,"apply"],[50,23,26,31],[50,30,26,31,"arguments"],[50,39,26,31],[51,4,26,31],[52,2,26,31],[52,5,41,1],[54,2,43,0],[55,0,44,0],[56,0,45,0],[57,2,46,7],[57,6,46,13,"networkAwareQuery"],[57,23,46,30],[57,26,46,30,"exports"],[57,33,46,30],[57,34,46,30,"networkAwareQuery"],[57,51,46,30],[58,4,46,30],[58,8,46,30,"_ref2"],[58,13,46,30],[58,20,46,30,"_asyncToGenerator2"],[58,38,46,30],[58,39,46,30,"default"],[58,46,46,30],[58,48,46,33],[58,59,47,2,"queryFn"],[58,66,47,27],[58,68,48,2,"options"],[58,75,51,3],[58,77,52,17],[59,6,53,2],[59,10,53,2,"_ref3"],[59,15,53,2],[59,18,53,52,"options"],[59,25,53,59],[59,29,53,63],[59,30,53,64],[59,31,53,65],[60,8,53,65,"_ref3$skipNetworkChec"],[60,29,53,65],[60,32,53,65,"_ref3"],[60,37,53,65],[60,38,53,10,"skipNetworkCheck"],[60,54,53,26],[61,8,53,10,"skipNetworkCheck"],[61,24,53,26],[61,27,53,26,"_ref3$skipNetworkChec"],[61,48,53,26],[61,62,53,29],[61,67,53,34],[61,70,53,34,"_ref3$skipNetworkChec"],[61,91,53,34],[62,8,53,36,"offlineData"],[62,19,53,47],[62,22,53,47,"_ref3"],[62,27,53,47],[62,28,53,36,"offlineData"],[62,39,53,47],[64,6,55,2],[65,6,56,2],[65,10,56,6],[65,11,56,7,"skipNetworkCheck"],[65,27,56,23],[65,29,56,25],[66,8,57,4],[66,12,57,10,"online"],[66,18,57,16],[66,27,57,25,"checkNetworkStatus"],[66,45,57,43],[66,46,57,44],[66,47,57,45],[67,8,59,4],[67,12,59,8],[67,13,59,9,"online"],[67,19,59,15],[67,21,59,17],[68,10,60,6],[68,14,60,10,"offlineData"],[68,25,60,21],[68,30,60,26,"undefined"],[68,39,60,35],[68,41,60,37],[69,12,61,8],[69,19,61,15,"offlineData"],[69,30,61,26],[70,10,62,6],[71,10,64,6],[71,16,64,12],[72,12,65,8,"status"],[72,18,65,14],[72,20,65,16],[72,29,65,25],[73,12,66,8,"message"],[73,19,66,15],[73,21,66,17],[73,87,66,83],[74,12,67,8,"code"],[74,16,67,12],[74,18,67,14],[75,10,68,6],[75,11,68,7],[76,8,69,4],[77,6,70,2],[78,6,72,2],[78,10,72,6],[79,8,73,4],[79,21,73,17,"queryFn"],[79,28,73,24],[79,29,73,25],[79,30,73,26],[80,6,74,2],[80,7,74,3],[80,8,74,4],[80,15,74,11,"error"],[80,20,74,21],[80,22,74,23],[81,8,74,23],[81,12,74,23,"_error$message"],[81,26,74,23],[81,28,74,23,"_error$message2"],[81,43,74,23],[82,8,75,4],[83,8,76,4],[83,12,76,8,"error"],[83,17,76,13],[83,30,76,13,"_error$message"],[83,44,76,13],[83,47,76,8,"error"],[83,52,76,13],[83,53,76,15,"message"],[83,60,76,22],[83,73,76,8,"_error$message"],[83,87,76,8],[83,88,76,24,"includes"],[83,96,76,32],[83,97,76,33],[83,121,76,57],[83,122,76,58],[83,126,77,8,"error"],[83,131,77,13],[83,144,77,13,"_error$message2"],[83,159,77,13],[83,162,77,8,"error"],[83,167,77,13],[83,168,77,15,"message"],[83,175,77,22],[83,188,77,8,"_error$message2"],[83,203,77,8],[83,204,77,24,"includes"],[83,212,77,32],[83,213,77,33],[83,230,77,50],[83,231,77,51],[83,235,78,8],[83,236,78,8,"error"],[83,241,78,13],[83,261,78,8,"error"],[83,266,78,13],[83,267,78,15,"code"],[83,271,78,19],[83,277,78,24],[83,292,78,39],[83,294,78,41],[84,10,80,6],[85,10,81,6,"isOnline"],[85,18,81,14],[85,21,81,17],[85,26,81,22],[86,10,82,6,"lastNetworkCheck"],[86,26,82,22],[86,29,82,25,"Date"],[86,33,82,29],[86,34,82,30,"now"],[86,37,82,33],[86,38,82,34],[86,39,82,35],[87,10,84,6],[87,16,84,12],[88,12,85,8,"status"],[88,18,85,14],[88,20,85,16],[88,29,85,25],[89,12,86,8,"message"],[89,19,86,15],[89,21,86,17],[89,78,86,74],[90,12,87,8,"code"],[90,16,87,12],[90,18,87,14],[91,10,88,6],[91,11,88,7],[92,8,89,4],[94,8,91,4],[95,8,92,4],[95,14,92,10,"error"],[95,19,92,15],[96,6,93,2],[97,4,94,0],[97,5,94,1],[98,4,94,1],[98,20,46,13,"networkAwareQuery"],[98,37,46,30,"networkAwareQuery"],[98,38,46,30,"_x"],[98,40,46,30],[98,42,46,30,"_x2"],[98,45,46,30],[99,6,46,30],[99,13,46,30,"_ref2"],[99,18,46,30],[99,19,46,30,"apply"],[99,24,46,30],[99,31,46,30,"arguments"],[99,40,46,30],[100,4,46,30],[101,2,46,30],[101,5,94,1],[103,2,96,0],[104,0,97,0],[105,0,98,0],[106,2,99,0],[106,6,99,6,"errorLogCache"],[106,19,99,19],[106,22,99,22],[106,26,99,26,"Map"],[106,29,99,29],[106,30,99,46],[106,31,99,47],[107,2,100,0],[107,6,100,6,"ERROR_LOG_INTERVAL"],[107,24,100,24],[107,27,100,27],[107,32,100,32],[107,33,100,33],[107,34,100,34],[109,2,102,7],[109,6,102,13,"logApiError"],[109,17,102,24],[109,20,102,24,"exports"],[109,27,102,24],[109,28,102,24,"logApiError"],[109,39,102,24],[109,42,102,27],[109,51,102,13,"logApiError"],[109,62,102,24,"logApiError"],[109,63,102,28,"error"],[109,68,102,38],[109,70,102,40,"context"],[109,77,102,55],[109,79,102,60],[110,4,103,2],[110,8,103,8,"errorKey"],[110,16,103,16],[110,19,103,19],[110,22,103,22,"context"],[110,29,103,29],[110,33,103,33],[110,34,103,33,"error"],[110,39,103,38],[110,59,103,33,"error"],[110,64,103,38],[110,65,103,40,"message"],[110,72,103,47],[110,78,103,51,"error"],[110,83,103,56],[110,103,103,51,"error"],[110,108,103,56],[110,109,103,58,"code"],[110,113,103,62],[110,118,103,66],[110,127,103,75],[110,129,103,77],[111,4,104,2],[111,8,104,8,"lastLogged"],[111,18,104,18],[111,21,104,21,"errorLogCache"],[111,34,104,34],[111,35,104,35,"get"],[111,38,104,38],[111,39,104,39,"errorKey"],[111,47,104,47],[111,48,104,48],[111,52,104,52],[111,53,104,53],[112,4,106,2],[112,8,106,6,"Date"],[112,12,106,10],[112,13,106,11,"now"],[112,16,106,14],[112,17,106,15],[112,18,106,16],[112,21,106,19,"lastLogged"],[112,31,106,29],[112,34,106,32,"ERROR_LOG_INTERVAL"],[112,52,106,50],[112,54,106,52],[113,6,107,4,"EventLogger"],[113,30,107,15],[113,31,107,16,"error"],[113,36,107,21],[113,37,107,22],[113,42,107,27],[113,44,107,29],[113,69,107,54],[113,71,107,56,"error"],[113,76,107,70],[113,77,107,71],[114,6,108,4,"errorLogCache"],[114,19,108,17],[114,20,108,18,"set"],[114,23,108,21],[114,24,108,22,"errorKey"],[114,32,108,30],[114,34,108,32,"Date"],[114,38,108,36],[114,39,108,37,"now"],[114,42,108,40],[114,43,108,41],[114,44,108,42],[114,45,108,43],[115,4,109,2],[116,2,110,0],[116,3,110,1],[118,2,112,0],[119,0,113,0],[120,0,114,0],[121,2,115,7],[121,6,115,13,"clearErrorLogCache"],[121,24,115,31],[121,27,115,31,"exports"],[121,34,115,31],[121,35,115,31,"clearErrorLogCache"],[121,53,115,31],[121,56,115,34],[121,65,115,13,"clearErrorLogCache"],[121,83,115,31,"clearErrorLogCache"],[121,84,115,31],[121,86,115,40],[122,4,116,2,"errorLogCache"],[122,17,116,15],[122,18,116,16,"clear"],[122,23,116,21],[122,24,116,22],[122,25,116,23],[123,2,117,0],[123,3,117,1],[124,0,117,2],[124,3]],"functionMap":{"names":["<global>","NetInfo.addEventListener$argument_0","checkNetworkStatus","networkAwareQuery","logApiError","clearErrorLogCache"],"mappings":"AAA;yBCiB;CDG;kCEK;CFe;iCGK;CHgD;2BIQ;CJQ;kCKK;CLE"}},"type":"js/module"}]}