{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"]}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"]}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"]}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"]}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function get() {\n      return _Font.FontDisplay;\n    }\n  });\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = require(_dependencyMap[2], \"expo-modules-core\");\n  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[3], \"./ExpoFontLoader\"));\n  var _Font = require(_dependencyMap[4], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[5], \"./FontLoader\");\n  var _memory = require(_dependencyMap[6], \"./memory\");\n  var _server = require(_dependencyMap[7], \"./server\");\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      return (0, _memory.isLoadedInCache)(fontFamily) || !!_ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return _ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(function (name) {\n          return (0, _server.registerStaticFont)(name, fontMap[name]);\n        });\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(function (name) {\n        return loadFontInNamespaceAsync(name, fontMap[name]);\n      })).then(function () {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield _ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n      if (!_ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(function (name) {\n          return unloadFontInNamespaceAsync(name, fontMap[name]);\n        }));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield _ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":205,"map":[[19,2,1,0],[19,6,1,0,"_expoModulesCore"],[19,22,1,0],[19,25,1,0,"require"],[19,32,1,0],[19,33,1,0,"_dependencyMap"],[19,47,1,0],[20,2,2,0],[20,6,2,0,"_ExpoFontLoader"],[20,21,2,0],[20,24,2,0,"_interopRequireDefault"],[20,46,2,0],[20,47,2,0,"require"],[20,54,2,0],[20,55,2,0,"_dependencyMap"],[20,69,2,0],[21,2,3,0],[21,6,3,0,"_Font"],[21,11,3,0],[21,14,3,0,"require"],[21,21,3,0],[21,22,3,0,"_dependencyMap"],[21,36,3,0],[22,2,4,0],[22,6,4,0,"_FontLoader"],[22,17,4,0],[22,20,4,0,"require"],[22,27,4,0],[22,28,4,0,"_dependencyMap"],[22,42,4,0],[23,2,5,0],[23,6,5,0,"_memory"],[23,13,5,0],[23,16,5,0,"require"],[23,23,5,0],[23,24,5,0,"_dependencyMap"],[23,38,5,0],[24,2,6,0],[24,6,6,0,"_server"],[24,13,6,0],[24,16,6,0,"require"],[24,23,6,0],[24,24,6,0,"_dependencyMap"],[24,38,6,0],[25,2,7,0],[26,2,8,0],[27,0,9,0],[28,0,10,0],[29,0,11,0],[30,0,12,0],[31,0,13,0],[32,2,14,7],[32,11,14,16,"isLoaded"],[32,19,14,24,"isLoaded"],[32,20,14,25,"fontFamily"],[32,30,14,35],[32,32,14,37],[33,4,15,4],[33,8,15,8,"Platform"],[33,33,15,16],[33,34,15,17,"OS"],[33,36,15,19],[33,41,15,24],[33,46,15,29],[33,48,15,31],[34,6,16,8],[34,13,16,15],[34,17,16,15,"isLoadedInCache"],[34,40,16,30],[34,42,16,31,"fontFamily"],[34,52,16,41],[34,53,16,42],[34,57,16,46],[34,58,16,47],[34,59,16,48,"ExpoFontLoader"],[34,82,16,62],[34,83,16,63,"isLoaded"],[34,91,16,71],[34,92,16,72,"fontFamily"],[34,102,16,82],[34,103,16,83],[35,4,17,4],[36,4,18,4],[36,11,18,11],[36,15,18,11,"isLoadedNative"],[36,37,18,25],[36,39,18,26,"fontFamily"],[36,49,18,36],[36,50,18,37],[37,2,19,0],[38,2,20,0],[39,0,21,0],[40,0,22,0],[41,0,23,0],[42,0,24,0],[43,0,25,0],[44,2,26,7],[44,11,26,16,"getLoadedFonts"],[44,25,26,30,"getLoadedFonts"],[44,26,26,30],[44,28,26,33],[45,4,27,4],[45,11,27,11,"ExpoFontLoader"],[45,34,27,25],[45,35,27,26,"getLoadedFonts"],[45,49,27,40],[45,50,27,41],[45,51,27,42],[46,2,28,0],[47,2,29,0],[48,2,30,0],[49,0,31,0],[50,0,32,0],[51,0,33,0],[52,0,34,0],[53,0,35,0],[54,2,36,7],[54,11,36,16,"isLoading"],[54,20,36,25,"isLoading"],[54,21,36,26,"fontFamily"],[54,31,36,36],[54,33,36,38],[55,4,37,4],[55,11,37,11,"fontFamily"],[55,21,37,21],[55,25,37,25,"loadPromises"],[55,45,37,37],[56,2,38,0],[57,2,39,0],[58,2,40,0],[59,0,41,0],[60,0,42,0],[61,0,43,0],[62,0,44,0],[63,0,45,0],[64,0,46,0],[65,0,47,0],[66,0,48,0],[67,0,49,0],[68,0,50,0],[69,0,51,0],[70,0,52,0],[71,0,53,0],[72,2,54,7],[72,11,54,16,"loadAsync"],[72,20,54,25,"loadAsync"],[72,21,54,26,"fontFamilyOrFontMap"],[72,40,54,45],[72,42,54,47,"source"],[72,48,54,53],[72,50,54,55],[73,4,55,4],[74,4,56,4],[75,4,57,4],[76,4,58,4],[76,8,58,10,"isServer"],[76,16,58,18],[76,19,58,21,"Platform"],[76,44,58,29],[76,45,58,30,"OS"],[76,47,58,32],[76,52,58,37],[76,57,58,42],[76,61,58,46],[76,68,58,53,"window"],[76,74,58,59],[76,79,58,64],[76,90,58,75],[77,4,59,4],[77,8,59,8],[77,15,59,15,"fontFamilyOrFontMap"],[77,34,59,34],[77,39,59,39],[77,47,59,47],[77,49,59,49],[78,6,60,8],[78,10,60,12,"source"],[78,16,60,18],[78,18,60,20],[79,8,61,12],[79,15,61,19,"Promise"],[79,22,61,26],[79,23,61,27,"reject"],[79,29,61,33],[79,30,61,34],[79,34,61,38,"CodedError"],[79,61,61,48],[79,62,61,49],[79,76,61,63],[79,78,61,65],[79,132,61,119,"source"],[79,138,61,125],[79,244,61,231],[79,245,61,232],[79,246,61,233],[80,6,62,8],[81,6,63,8],[81,10,63,14,"fontMap"],[81,17,63,21],[81,20,63,24,"fontFamilyOrFontMap"],[81,39,63,43],[82,6,64,8],[82,10,64,14,"names"],[82,15,64,19],[82,18,64,22,"Object"],[82,24,64,28],[82,25,64,29,"keys"],[82,29,64,33],[82,30,64,34,"fontMap"],[82,37,64,41],[82,38,64,42],[83,6,65,8],[83,10,65,12,"isServer"],[83,18,65,20],[83,20,65,22],[84,8,66,12,"names"],[84,13,66,17],[84,14,66,18,"map"],[84,17,66,21],[84,18,66,22],[84,28,66,23,"name"],[84,32,66,27],[85,10,66,27],[85,17,66,32],[85,21,66,32,"registerStaticFont"],[85,47,66,50],[85,49,66,51,"name"],[85,53,66,55],[85,55,66,57,"fontMap"],[85,62,66,64],[85,63,66,65,"name"],[85,67,66,69],[85,68,66,70],[85,69,66,71],[86,8,66,71],[86,10,66,72],[87,8,67,12],[87,15,67,19,"Promise"],[87,22,67,26],[87,23,67,27,"resolve"],[87,30,67,34],[87,31,67,35],[87,32,67,36],[88,6,68,8],[89,6,69,8],[89,13,69,15,"Promise"],[89,20,69,22],[89,21,69,23,"all"],[89,24,69,26],[89,25,69,27,"names"],[89,30,69,32],[89,31,69,33,"map"],[89,34,69,36],[89,35,69,37],[89,45,69,38,"name"],[89,49,69,42],[90,8,69,42],[90,15,69,47,"loadFontInNamespaceAsync"],[90,39,69,71],[90,40,69,72,"name"],[90,44,69,76],[90,46,69,78,"fontMap"],[90,53,69,85],[90,54,69,86,"name"],[90,58,69,90],[90,59,69,91],[90,60,69,92],[91,6,69,92],[91,8,69,93],[91,9,69,94],[91,10,69,95,"then"],[91,14,69,99],[91,15,69,100],[91,27,69,106],[91,28,69,108],[91,29,69,109],[91,30,69,110],[92,4,70,4],[93,4,71,4],[93,8,71,8,"isServer"],[93,16,71,16],[93,18,71,18],[94,6,72,8],[94,10,72,8,"registerStaticFont"],[94,36,72,26],[94,38,72,27,"fontFamilyOrFontMap"],[94,57,72,46],[94,59,72,48,"source"],[94,65,72,54],[94,66,72,55],[95,6,73,8],[95,13,73,15,"Promise"],[95,20,73,22],[95,21,73,23,"resolve"],[95,28,73,30],[95,29,73,31],[95,30,73,32],[96,4,74,4],[97,4,75,4],[97,11,75,11,"loadFontInNamespaceAsync"],[97,35,75,35],[97,36,75,36,"fontFamilyOrFontMap"],[97,55,75,55],[97,57,75,57,"source"],[97,63,75,63],[97,64,75,64],[98,2,76,0],[99,2,76,1],[99,11,77,15,"loadFontInNamespaceAsync"],[99,35,77,39,"loadFontInNamespaceAsync"],[99,36,77,39,"_x"],[99,38,77,39],[99,40,77,39,"_x2"],[99,43,77,39],[100,4,77,39],[100,11,77,39,"_loadFontInNamespaceAsync"],[100,36,77,39],[100,37,77,39,"apply"],[100,42,77,39],[100,49,77,39,"arguments"],[100,58,77,39],[101,2,77,39],[101,4,105,0],[102,2,106,0],[103,0,107,0],[104,0,108,0],[105,0,109,0],[106,2,106,0],[106,11,106,0,"_loadFontInNamespaceAsync"],[106,37,106,0],[107,4,106,0,"_loadFontInNamespaceAsync"],[107,29,106,0],[107,36,106,0,"_asyncToGenerator2"],[107,54,106,0],[107,55,106,0,"default"],[107,62,106,0],[107,64,77,0],[107,75,77,40,"fontFamily"],[107,85,77,50],[107,87,77,52,"source"],[107,93,77,58],[107,95,77,60],[108,6,78,4],[108,10,78,8],[108,11,78,9,"source"],[108,17,78,15],[108,19,78,17],[109,8,79,8],[109,14,79,14],[109,18,79,18,"CodedError"],[109,45,79,28],[109,46,79,29],[109,63,79,46],[109,65,79,48],[109,114,79,97,"fontFamily"],[109,124,79,107],[109,130,79,113,"source"],[109,136,79,119],[109,206,79,189,"fontFamily"],[109,216,79,199],[109,219,79,202],[109,220,79,203],[110,6,80,4],[111,6,81,4],[112,6,82,4],[113,6,83,4],[113,10,83,8,"isLoaded"],[113,18,83,16],[113,19,83,17,"fontFamily"],[113,29,83,27],[113,30,83,28],[113,32,83,30],[114,8,84,8],[115,6,85,4],[116,6,86,4],[116,10,86,8,"loadPromises"],[116,30,86,20],[116,31,86,21,"hasOwnProperty"],[116,45,86,35],[116,46,86,36,"fontFamily"],[116,56,86,46],[116,57,86,47],[116,59,86,49],[117,8,87,8],[117,15,87,15,"loadPromises"],[117,35,87,27],[117,36,87,28,"fontFamily"],[117,46,87,38],[117,47,87,39],[118,6,88,4],[119,6,89,4],[120,6,90,4],[121,6,91,4],[122,6,92,4],[123,6,93,4],[123,10,93,10,"asset"],[123,15,93,15],[123,18,93,18],[123,22,93,18,"getAssetForSource"],[123,51,93,35],[123,53,93,36,"source"],[123,59,93,42],[123,60,93,43],[124,6,94,4,"loadPromises"],[124,26,94,16],[124,27,94,17,"fontFamily"],[124,37,94,27],[124,38,94,28],[124,41,94,31],[124,45,94,31,"_asyncToGenerator2"],[124,63,94,31],[124,64,94,31,"default"],[124,71,94,31],[124,73,94,32],[124,86,94,44],[125,8,95,8],[125,12,95,12],[126,10,96,12],[126,16,96,18],[126,20,96,18,"loadSingleFontAsync"],[126,51,96,37],[126,53,96,38,"fontFamily"],[126,63,96,48],[126,65,96,50,"asset"],[126,70,96,55],[126,71,96,56],[127,10,97,12],[127,14,97,12,"markLoaded"],[127,32,97,22],[127,34,97,23,"fontFamily"],[127,44,97,33],[127,45,97,34],[128,8,98,8],[128,9,98,9],[128,18,99,16],[129,10,100,12],[129,17,100,19,"loadPromises"],[129,37,100,31],[129,38,100,32,"fontFamily"],[129,48,100,42],[129,49,100,43],[130,8,101,8],[131,6,102,4],[131,7,102,5],[131,9,102,7],[131,10,102,8],[132,6,103,4],[132,12,103,10,"loadPromises"],[132,32,103,22],[132,33,103,23,"fontFamily"],[132,43,103,33],[132,44,103,34],[133,4,104,0],[133,5,104,1],[134,4,104,1],[134,11,104,1,"_loadFontInNamespaceAsync"],[134,36,104,1],[134,37,104,1,"apply"],[134,42,104,1],[134,49,104,1,"arguments"],[134,58,104,1],[135,2,104,1],[136,2,104,1],[136,11,110,22,"unloadAllAsync"],[136,25,110,36,"unloadAllAsync"],[136,26,110,36],[137,4,110,36],[137,11,110,36,"_unloadAllAsync"],[137,26,110,36],[137,27,110,36,"apply"],[137,32,110,36],[137,39,110,36,"arguments"],[137,48,110,36],[138,2,110,36],[138,4,120,0],[139,2,121,0],[140,0,122,0],[141,0,123,0],[142,0,124,0],[143,0,125,0],[144,0,126,0],[145,0,127,0],[146,0,128,0],[147,0,129,0],[148,2,121,0],[148,11,121,0,"_unloadAllAsync"],[148,27,121,0],[149,4,121,0,"_unloadAllAsync"],[149,19,121,0],[149,26,121,0,"_asyncToGenerator2"],[149,44,121,0],[149,45,121,0,"default"],[149,52,121,0],[149,54,110,7],[149,67,110,39],[150,6,111,4],[150,10,111,8],[150,11,111,9,"ExpoFontLoader"],[150,34,111,23],[150,35,111,24,"unloadAllAsync"],[150,49,111,38],[150,51,111,40],[151,8,112,8],[151,14,112,14],[151,18,112,18,"UnavailabilityError"],[151,54,112,37],[151,55,112,38],[151,66,112,49],[151,68,112,51],[151,84,112,67],[151,85,112,68],[152,6,113,4],[153,6,114,4],[153,10,114,8,"Object"],[153,16,114,14],[153,17,114,15,"keys"],[153,21,114,19],[153,22,114,20,"loadPromises"],[153,42,114,32],[153,43,114,33],[153,44,114,34,"length"],[153,50,114,40],[153,52,114,42],[154,8,115,8],[154,14,115,14],[154,18,115,18,"CodedError"],[154,45,115,28],[154,46,115,29],[154,58,115,41],[154,60,115,43],[154,112,115,95,"Object"],[154,118,115,101],[154,119,115,102,"keys"],[154,123,115,106],[154,124,115,107,"loadPromises"],[154,144,115,119],[154,145,115,120],[154,146,115,121,"join"],[154,150,115,125],[154,151,115,126],[154,155,115,130],[154,156,115,131],[154,158,115,133],[154,159,115,134],[155,6,116,4],[156,6,117,4],[156,10,117,4,"purgeCache"],[156,28,117,14],[156,30,117,15],[156,31,117,16],[157,6,118,4],[157,12,118,10,"ExpoFontLoader"],[157,35,118,24],[157,36,118,25,"unloadAllAsync"],[157,50,118,39],[157,51,118,40],[157,52,118,41],[158,4,119,0],[158,5,119,1],[159,4,119,1],[159,11,119,1,"_unloadAllAsync"],[159,26,119,1],[159,27,119,1,"apply"],[159,32,119,1],[159,39,119,1,"arguments"],[159,48,119,1],[160,2,119,1],[161,2,119,1],[161,11,130,22,"unloadAsync"],[161,22,130,33,"unloadAsync"],[161,23,130,33,"_x3"],[161,26,130,33],[161,28,130,33,"_x4"],[161,31,130,33],[162,4,130,33],[162,11,130,33,"_unloadAsync"],[162,23,130,33],[162,24,130,33,"apply"],[162,29,130,33],[162,36,130,33,"arguments"],[162,45,130,33],[163,2,130,33],[164,2,130,33],[164,11,130,33,"_unloadAsync"],[164,24,130,33],[165,4,130,33,"_unloadAsync"],[165,16,130,33],[165,23,130,33,"_asyncToGenerator2"],[165,41,130,33],[165,42,130,33,"default"],[165,49,130,33],[165,51,130,7],[165,62,130,34,"fontFamilyOrFontMap"],[165,81,130,53],[165,83,130,55,"options"],[165,90,130,62],[165,92,130,64],[166,6,131,4],[166,10,131,8],[166,11,131,9,"ExpoFontLoader"],[166,34,131,23],[166,35,131,24,"unloadAsync"],[166,46,131,35],[166,48,131,37],[167,8,132,8],[167,14,132,14],[167,18,132,18,"UnavailabilityError"],[167,54,132,37],[167,55,132,38],[167,66,132,49],[167,68,132,51],[167,81,132,64],[167,82,132,65],[168,6,133,4],[169,6,134,4],[169,10,134,8],[169,17,134,15,"fontFamilyOrFontMap"],[169,36,134,34],[169,41,134,39],[169,49,134,47],[169,51,134,49],[170,8,135,8],[170,12,135,12,"options"],[170,19,135,19],[170,21,135,21],[171,10,136,12],[171,16,136,18],[171,20,136,22,"CodedError"],[171,47,136,32],[171,48,136,33],[171,62,136,47],[171,64,136,49],[171,119,136,104,"options"],[171,126,136,111],[171,234,136,219],[171,235,136,220],[172,8,137,8],[173,8,138,8],[173,12,138,14,"fontMap"],[173,19,138,21],[173,22,138,24,"fontFamilyOrFontMap"],[173,41,138,43],[174,8,139,8],[174,12,139,14,"names"],[174,17,139,19],[174,20,139,22,"Object"],[174,26,139,28],[174,27,139,29,"keys"],[174,31,139,33],[174,32,139,34,"fontMap"],[174,39,139,41],[174,40,139,42],[175,8,140,8],[175,14,140,14,"Promise"],[175,21,140,21],[175,22,140,22,"all"],[175,25,140,25],[175,26,140,26,"names"],[175,31,140,31],[175,32,140,32,"map"],[175,35,140,35],[175,36,140,36],[175,46,140,37,"name"],[175,50,140,41],[176,10,140,41],[176,17,140,46,"unloadFontInNamespaceAsync"],[176,43,140,72],[176,44,140,73,"name"],[176,48,140,77],[176,50,140,79,"fontMap"],[176,57,140,86],[176,58,140,87,"name"],[176,62,140,91],[176,63,140,92],[176,64,140,93],[177,8,140,93],[177,10,140,94],[177,11,140,95],[178,8,141,8],[179,6,142,4],[180,6,143,4],[180,19,143,17,"unloadFontInNamespaceAsync"],[180,45,143,43],[180,46,143,44,"fontFamilyOrFontMap"],[180,65,143,63],[180,67,143,65,"options"],[180,74,143,72],[180,75,143,73],[181,4,144,0],[181,5,144,1],[182,4,144,1],[182,11,144,1,"_unloadAsync"],[182,23,144,1],[182,24,144,1,"apply"],[182,29,144,1],[182,36,144,1,"arguments"],[182,45,144,1],[183,2,144,1],[184,2,144,1],[184,11,145,15,"unloadFontInNamespaceAsync"],[184,37,145,41,"unloadFontInNamespaceAsync"],[184,38,145,41,"_x5"],[184,41,145,41],[184,43,145,41,"_x6"],[184,46,145,41],[185,4,145,41],[185,11,145,41,"_unloadFontInNamespaceAsync"],[185,38,145,41],[185,39,145,41,"apply"],[185,44,145,41],[185,51,145,41,"arguments"],[185,60,145,41],[186,2,145,41],[187,2,145,41],[187,11,145,41,"_unloadFontInNamespaceAsync"],[187,39,145,41],[188,4,145,41,"_unloadFontInNamespaceAsync"],[188,31,145,41],[188,38,145,41,"_asyncToGenerator2"],[188,56,145,41],[188,57,145,41,"default"],[188,64,145,41],[188,66,145,0],[188,77,145,42,"fontFamily"],[188,87,145,52],[188,89,145,54,"options"],[188,96,145,61],[188,98,145,63],[189,6,146,4],[189,10,146,8],[189,11,146,9,"isLoaded"],[189,19,146,17],[189,20,146,18,"fontFamily"],[189,30,146,28],[189,31,146,29],[189,33,146,31],[190,8,147,8],[191,6,148,4],[191,7,148,5],[191,13,149,9],[192,8,150,8],[192,12,150,8,"purgeFontFamilyFromCache"],[192,44,150,32],[192,46,150,33,"fontFamily"],[192,56,150,43],[192,57,150,44],[193,6,151,4],[194,6,152,4],[195,6,153,4],[196,6,154,4],[197,6,155,4],[198,6,156,4],[198,10,156,8],[198,11,156,9,"fontFamily"],[198,21,156,19],[198,23,156,21],[199,8,157,8],[199,14,157,14],[199,18,157,18,"CodedError"],[199,45,157,28],[199,46,157,29],[199,63,157,46],[199,65,157,48],[199,94,157,77],[199,95,157,78],[200,6,158,4],[201,6,159,4],[201,12,159,10,"ExpoFontLoader"],[201,35,159,24],[201,36,159,25,"unloadAsync"],[201,47,159,36],[201,48,159,37,"fontFamily"],[201,58,159,47],[201,60,159,49,"options"],[201,67,159,56],[201,68,159,57],[202,4,160,0],[202,5,160,1],[203,4,160,1],[203,11,160,1,"_unloadFontInNamespaceAsync"],[203,38,160,1],[203,39,160,1,"apply"],[203,44,160,1],[203,51,160,1,"arguments"],[203,60,160,1],[204,2,160,1],[205,0,160,1],[205,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDK;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXe"}},"type":"js/module"}]}