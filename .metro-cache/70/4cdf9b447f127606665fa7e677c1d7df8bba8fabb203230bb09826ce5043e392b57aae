{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@react-native-async-storage/async-storage","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":177},"end":{"line":6,"column":69,"index":246}}],"key":"0kSRlooyBOaYM9tlTtK91nq+uds=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":248},"end":{"line":7,"column":60,"index":308}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"../supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":310},"end":{"line":8,"column":46,"index":356}}],"key":"q3G/dBcB/lyqe2ZqsudXc9dkd4E=","exportNames":["*"]}},{"name":"../../config/analytics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":358},"end":{"line":9,"column":58,"index":416}}],"key":"4gjS6BEK9IQgu06QXmlywlo09Ys=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":418},"end":{"line":10,"column":54,"index":472}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.trackCustomMetric = exports.startScreenRender = exports.startApiCall = exports.endScreenRender = exports.endApiCall = exports.PerformanceMonitor = undefined;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2]));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3]));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4]));\n  var _asyncStorage = _interopRequireDefault(require(_dependencyMap[5]));\n  var _reactNative = require(_dependencyMap[6]);\n  var _client = require(_dependencyMap[7]);\n  var _analytics = require(_dependencyMap[8]);\n  var _EventLogger = require(_dependencyMap[9]);\n  /**\r\n   * PerformanceMonitor - Comprehensive app performance tracking service\r\n   * Monitors app launch time, screen render time, API response times, memory usage, and more\r\n   */\n  var PerformanceMonitorService = /*#__PURE__*/function () {\n    function PerformanceMonitorService() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, PerformanceMonitorService);\n      this.metrics = [];\n      this.alerts = [];\n      this.isInitialized = false;\n      this.screenStartTimes = new Map();\n      this.apiCallTimes = new Map();\n      this.metricQueue = [];\n      this.isFlushingMetrics = false;\n      this.databaseAvailable = false;\n      this.databaseUnavailableLogged = false;\n      this.config = {\n        enabled: _analytics.ANALYTICS_CONFIG.performance.trackFPS,\n        sampleRate: _analytics.ANALYTICS_CONFIG.performance.sampleRate,\n        alertThresholds: {\n          slowAppLaunch: 3000,\n          // 3 seconds\n          slowScreenRender: 2000,\n          // 2 seconds\n          slowApiResponse: _analytics.ANALYTICS_CONFIG.performance.slowThresholdMs,\n          memoryUsagePercent: 80,\n          // 80%\n          lowBatteryPercent: 20,\n          // 20%\n          lowFpsThreshold: 50 // 50 FPS\n        },\n        trackingEnabled: {\n          appLaunch: _analytics.ANALYTICS_CONFIG.performance.trackAppLaunchTime,\n          screenRender: _analytics.ANALYTICS_CONFIG.performance.trackScreenRenderTime,\n          apiCalls: _analytics.ANALYTICS_CONFIG.performance.trackNetworkLatency,\n          memoryUsage: _analytics.ANALYTICS_CONFIG.performance.trackMemory,\n          batteryUsage: true,\n          frameRate: _analytics.ANALYTICS_CONFIG.performance.trackFPS,\n          networkLatency: _analytics.ANALYTICS_CONFIG.performance.trackNetworkLatency\n        },\n        ...config\n      };\n      this.sessionId = this.generateSessionId();\n      this.appStartTime = Date.now();\n    }\n\n    /**\r\n     * Initialize performance monitoring\r\n     */\n    return (0, _createClass2.default)(PerformanceMonitorService, [{\n      key: \"initialize\",\n      value: (function () {\n        var _initialize = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            if (!this.config.enabled) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance monitoring disabled');\n              this.isInitialized = true; // Mark as initialized even when disabled\n              return;\n            }\n\n            // Initialize in batches to avoid blocking\n            yield Promise.resolve().then(() => {\n              // Setup periodic memory monitoring\n              if (this.config.trackingEnabled.memoryUsage) {\n                this.setupMemoryMonitoring();\n              }\n\n              // Setup frame rate monitoring\n              if (this.config.trackingEnabled.frameRate) {\n                this.setupFrameRateMonitoring();\n              }\n\n              // Setup periodic metric flushing\n              this.setupPeriodicFlush();\n            });\n\n            // Check database availability in background (only log once)\n            this.checkDatabaseAvailability().catch(error => {\n              if (!this.databaseUnavailableLogged) {\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Database not available - metrics will be stored locally only', error);\n                this.databaseUnavailableLogged = true;\n              }\n              this.databaseAvailable = false;\n            });\n\n            // Load offline data in background\n            this.loadOfflineData().catch(error => {\n              _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to load offline data', error);\n            });\n\n            // Track app launch time\n            if (this.config.trackingEnabled.appLaunch) {\n              Promise.resolve().then(() => this.trackAppLaunchTime());\n            }\n            this.isInitialized = true;\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance monitoring initialized');\n          } catch (error) {\n            this.isInitialized = true; // Mark as initialized to prevent blocking\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to initialize performance monitor', error);\n          }\n        });\n        function initialize() {\n          return _initialize.apply(this, arguments);\n        }\n        return initialize;\n      }()\n      /**\r\n       * Check if the database is available and accessible\r\n       */\n      )\n    }, {\n      key: \"checkDatabaseAvailability\",\n      value: (function () {\n        var _checkDatabaseAvailability = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            if (!_client.supabase) {\n              throw new Error('Supabase client not initialized');\n            }\n\n            // Test table access with INSERT capability (more comprehensive than SELECT)\n            // Create a minimal test record to verify the table exists and we can write to it\n            var testMetricId = `test-availability-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;\n            var _yield$supabase$from$ = yield _client.supabase.from('performance_metrics').insert({\n                id: testMetricId,\n                type: 'custom',\n                name: 'database_availability_test',\n                value: 1,\n                unit: 'count',\n                context: {\n                  test: true\n                },\n                tags: {\n                  test: 'availability_check'\n                }\n              }),\n              insertError = _yield$supabase$from$.error;\n            if (insertError) {\n              // Handle specific error cases\n              if (insertError.code === '42P01') {\n                // Table does not exist\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Performance metrics table does not exist', {\n                  suggestion: 'Run the SQL setup script: scripts/setup-monitoring-tables.sql'\n                });\n              } else if (insertError.code === '42501') {\n                // Permission denied\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Permission denied for performance metrics table', {\n                  suggestion: 'Check RLS policies and authentication'\n                });\n              } else {\n                // Other database error\n                _EventLogger.EventLogger.warn('PerformanceMonitor', 'Performance metrics table not accessible', {\n                  tableError: insertError.message,\n                  code: insertError.code\n                });\n              }\n              this.databaseAvailable = false;\n              throw new Error(`Table access error: ${insertError.message} (code: ${insertError.code})`);\n            }\n\n            // Clean up the test record\n            yield _client.supabase.from('performance_metrics').delete().eq('id', testMetricId);\n            this.databaseAvailable = true;\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Database available for metrics storage');\n          } catch (error) {\n            this.databaseAvailable = false;\n\n            // Log specific guidance based on error type\n            var message = 'Database not available - will store metrics locally';\n            var errorDetails = {\n              error: error instanceof Error ? error.message : String(error)\n            };\n            if (error instanceof Error) {\n              if (error.message.includes('42P01') || error.message.includes('does not exist')) {\n                message = 'Performance metrics table missing - run setup script to create tables';\n                errorDetails.setupScript = 'scripts/setup-monitoring-tables.sql';\n              } else if (error.message.includes('42501') || error.message.includes('permission')) {\n                message = 'Database permission denied - check RLS policies';\n              } else if (error.message.includes('not initialized')) {\n                message = 'Supabase not configured - check environment variables';\n              }\n            }\n            _EventLogger.EventLogger.warn('PerformanceMonitor', message, errorDetails);\n            throw error;\n          }\n        });\n        function checkDatabaseAvailability() {\n          return _checkDatabaseAvailability.apply(this, arguments);\n        }\n        return checkDatabaseAvailability;\n      }()\n      /**\r\n       * Track app launch time\r\n       */\n      )\n    }, {\n      key: \"trackAppLaunchTime\",\n      value: function trackAppLaunchTime() {\n        _reactNative.InteractionManager.runAfterInteractions(() => {\n          var launchTime = Date.now() - this.appStartTime;\n          this.trackMetric({\n            type: 'app_launch',\n            name: 'app_launch_time',\n            value: launchTime,\n            unit: 'ms',\n            context: {\n              platform: \"android\",\n              os_version: _reactNative.Platform.Version.toString()\n            }\n          });\n\n          // Check for slow launch\n          if (launchTime > this.config.alertThresholds.slowAppLaunch) {\n            this.createAlert({\n              type: 'slow_launch',\n              severity: launchTime > this.config.alertThresholds.slowAppLaunch * 2 ? 'high' : 'medium',\n              message: `App launch took ${launchTime}ms`,\n              value: launchTime,\n              threshold: this.config.alertThresholds.slowAppLaunch\n            });\n          }\n          _EventLogger.EventLogger.performance('App', 'launch_time', launchTime, {\n            platform: \"android\"\n          });\n        });\n      }\n\n      /**\r\n       * Start tracking screen render time\r\n       */\n    }, {\n      key: \"startScreenRender\",\n      value: function startScreenRender(screenName) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.screenRender) return;\n        var startTime = Date.now();\n        this.screenStartTimes.set(screenName, startTime);\n        _EventLogger.EventLogger.debug('PerformanceMonitor', `Started tracking render for ${screenName}`);\n      }\n\n      /**\r\n       * End tracking screen render time\r\n       */\n    }, {\n      key: \"endScreenRender\",\n      value: function endScreenRender(screenName, additionalContext) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.screenRender) return;\n        var startTime = this.screenStartTimes.get(screenName);\n        if (!startTime) {\n          _EventLogger.EventLogger.warn('PerformanceMonitor', `No start time found for screen ${screenName}`);\n          return;\n        }\n        var renderTime = Date.now() - startTime;\n        this.screenStartTimes.delete(screenName);\n        this.trackMetric({\n          type: 'screen_render',\n          name: 'screen_render_time',\n          value: renderTime,\n          unit: 'ms',\n          context: {\n            screen_name: screenName,\n            ...additionalContext\n          }\n        });\n\n        // Check for slow render\n        if (renderTime > this.config.alertThresholds.slowScreenRender) {\n          this.createAlert({\n            type: 'slow_render',\n            severity: renderTime > this.config.alertThresholds.slowScreenRender * 2 ? 'high' : 'medium',\n            message: `Screen ${screenName} rendered in ${renderTime}ms`,\n            value: renderTime,\n            threshold: this.config.alertThresholds.slowScreenRender,\n            context: {\n              screen_name: screenName\n            }\n          });\n        }\n        _EventLogger.EventLogger.performance('Screen', `render_${screenName}`, renderTime);\n      }\n\n      /**\r\n       * Start tracking API call\r\n       */\n    }, {\n      key: \"startApiCall\",\n      value: function startApiCall(requestId, endpoint, method) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.apiCalls) return;\n        var startTime = Date.now();\n        this.apiCallTimes.set(requestId, startTime);\n        _EventLogger.EventLogger.debug('PerformanceMonitor', `Started tracking API call ${method} ${endpoint}`, {\n          requestId\n        });\n      }\n\n      /**\r\n       * End tracking API call\r\n       */\n    }, {\n      key: \"endApiCall\",\n      value: function endApiCall(requestId, endpoint, method, statusCode, error) {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.apiCalls) return;\n        var startTime = this.apiCallTimes.get(requestId);\n        if (!startTime) {\n          _EventLogger.EventLogger.warn('PerformanceMonitor', `No start time found for API call ${requestId}`);\n          return;\n        }\n        var responseTime = Date.now() - startTime;\n        this.apiCallTimes.delete(requestId);\n        this.trackMetric({\n          type: 'api_call',\n          name: 'api_response_time',\n          value: responseTime,\n          unit: 'ms',\n          context: {\n            api_endpoint: endpoint,\n            method,\n            status_code: statusCode,\n            success: !error && statusCode >= 200 && statusCode < 300,\n            error_message: error?.message\n          }\n        });\n\n        // Check for slow API response\n        if (responseTime > this.config.alertThresholds.slowApiResponse) {\n          this.createAlert({\n            type: 'slow_api',\n            severity: responseTime > this.config.alertThresholds.slowApiResponse * 2 ? 'high' : 'medium',\n            message: `API ${method} ${endpoint} responded in ${responseTime}ms`,\n            value: responseTime,\n            threshold: this.config.alertThresholds.slowApiResponse,\n            context: {\n              endpoint,\n              method,\n              status_code: statusCode\n            }\n          });\n        }\n        _EventLogger.EventLogger.networkRequest(endpoint, method, statusCode, responseTime, error);\n      }\n\n      /**\r\n       * Track custom performance metric\r\n       */\n    }, {\n      key: \"trackCustomMetric\",\n      value: function trackCustomMetric(name, value, unit, context) {\n        if (!this.shouldTrack()) return;\n        this.trackMetric({\n          type: 'custom',\n          name,\n          value,\n          unit,\n          context\n        });\n        _EventLogger.EventLogger.performance('Custom', name, value, context);\n      }\n\n      /**\r\n       * Track memory usage\r\n       */\n    }, {\n      key: \"trackMemoryUsage\",\n      value: function trackMemoryUsage() {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.memoryUsage) return;\n        try {\n          // In React Native, memory info is limited\n          // You'd typically use a native module or react-native-device-info\n\n          if (typeof performance.memory !== 'undefined') {\n            var memInfo = performance.memory;\n            var usedMemory = memInfo.usedJSHeapSize;\n            var totalMemory = memInfo.totalJSHeapSize;\n            var memoryPercent = usedMemory / totalMemory * 100;\n            this.trackMetric({\n              type: 'memory_usage',\n              name: 'js_heap_usage',\n              value: usedMemory,\n              unit: 'bytes',\n              context: {\n                total_memory: totalMemory,\n                usage_percent: memoryPercent,\n                memory_pressure: memoryPercent > this.config.alertThresholds.memoryUsagePercent\n              }\n            });\n\n            // Check for memory warning\n            if (memoryPercent > this.config.alertThresholds.memoryUsagePercent) {\n              this.createAlert({\n                type: 'memory_warning',\n                severity: memoryPercent > 90 ? 'high' : 'medium',\n                message: `Memory usage at ${memoryPercent.toFixed(1)}%`,\n                value: memoryPercent,\n                threshold: this.config.alertThresholds.memoryUsagePercent\n              });\n            }\n          }\n        } catch (error) {\n          _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to track memory usage', error);\n        }\n      }\n\n      /**\r\n       * Track battery level (would need native module)\r\n       */\n    }, {\n      key: \"trackBatteryUsage\",\n      value: function trackBatteryUsage() {\n        if (!this.shouldTrack() || !this.config.trackingEnabled.batteryUsage) return;\n\n        // In a real implementation, you'd use react-native-device-info\n        // DeviceInfo.getBatteryLevel().then((batteryLevel) => {\n        //   this.trackMetric({\n        //     type: 'battery',\n        //     name: 'battery_level',\n        //     value: batteryLevel * 100,\n        //     unit: 'percent',\n        //   });\n        //   \n        //   if (batteryLevel * 100 < this.config.alertThresholds.lowBatteryPercent) {\n        //     this.createAlert({\n        //       type: 'low_battery',\n        //       severity: 'medium',\n        //       message: `Battery level at ${(batteryLevel * 100).toFixed(1)}%`,\n        //       value: batteryLevel * 100,\n        //       threshold: this.config.alertThresholds.lowBatteryPercent,\n        //     });\n        //   }\n        // });\n      }\n\n      /**\r\n       * Get performance summary\r\n       */\n    }, {\n      key: \"getPerformanceSummary\",\n      value: function getPerformanceSummary() {\n        var summary = {\n          app_launch_time: this.calculateStats(this.metrics.filter(m => m.name === 'app_launch_time')),\n          screen_render_times: this.groupScreenRenderStats(),\n          api_performance: this.groupApiPerformanceStats(),\n          memory_usage: this.calculateMemoryStats(),\n          battery_impact: this.calculateBatteryStats(),\n          frame_rate: this.calculateFrameRateStats()\n        };\n        return summary;\n      }\n\n      /**\r\n       * Get recent alerts\r\n       */\n    }, {\n      key: \"getRecentAlerts\",\n      value: function getRecentAlerts() {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n        return this.alerts.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, limit);\n      }\n\n      /**\r\n       * Clear all metrics and alerts\r\n       */\n    }, {\n      key: \"clearData\",\n      value: function clearData() {\n        this.metrics = [];\n        this.alerts = [];\n        _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance data cleared');\n      }\n\n      /**\r\n       * Export performance data\r\n       */\n    }, {\n      key: \"exportData\",\n      value: function exportData() {\n        return {\n          metrics: [...this.metrics],\n          alerts: [...this.alerts]\n        };\n      }\n\n      /**\r\n       * Track a performance metric internally\r\n       */\n    }, {\n      key: \"trackMetric\",\n      value: function trackMetric(metricData) {\n        var metric = {\n          id: this.generateMetricId(),\n          timestamp: new Date().toISOString(),\n          context: {\n            session_id: this.sessionId,\n            ...metricData.context\n          },\n          ...metricData\n        };\n        this.metrics.push(metric);\n        this.metricQueue.push(metric);\n\n        // Maintain metrics limit\n        if (this.metrics.length > 1000) {\n          this.metrics = this.metrics.slice(-1000);\n        }\n\n        // Auto-flush if queue is full\n        if (this.metricQueue.length >= 50) {\n          this.flushMetrics();\n        }\n      }\n\n      /**\r\n       * Create a performance alert\r\n       */\n    }, {\n      key: \"createAlert\",\n      value: function createAlert(alertData) {\n        var alert = {\n          id: this.generateAlertId(),\n          timestamp: new Date().toISOString(),\n          ...alertData\n        };\n        this.alerts.push(alert);\n\n        // Maintain alerts limit\n        if (this.alerts.length > 100) {\n          this.alerts = this.alerts.slice(-100);\n        }\n\n        // Store alert offline if database is not available\n        if (!this.databaseAvailable) {\n          this.storeOfflineAlerts([alert]).catch(error => {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to store alert offline', error);\n          });\n        }\n        _EventLogger.EventLogger.warn('PerformanceMonitor', `Performance alert: ${alert.message}`, {\n          type: alert.type,\n          severity: alert.severity,\n          value: alert.value,\n          threshold: alert.threshold\n        });\n      }\n\n      /**\r\n       * Setup memory monitoring\r\n       */\n    }, {\n      key: \"setupMemoryMonitoring\",\n      value: function setupMemoryMonitoring() {\n        this.memoryCheckInterval = setInterval(() => {\n          this.trackMemoryUsage();\n        }, 30000); // Every 30 seconds\n      }\n\n      /**\r\n       * Setup frame rate monitoring\r\n       */\n    }, {\n      key: \"setupFrameRateMonitoring\",\n      value: function setupFrameRateMonitoring() {\n        // Frame rate monitoring would require a native module\n        // This is a placeholder for the concept\n        _EventLogger.EventLogger.debug('PerformanceMonitor', 'Frame rate monitoring setup (requires native module)');\n      }\n\n      /**\r\n       * Setup periodic metric flushing\r\n       */\n    }, {\n      key: \"setupPeriodicFlush\",\n      value: function setupPeriodicFlush() {\n        // Delay initial flush to ensure services are fully ready\n        setTimeout(() => {\n          setInterval(() => {\n            if (this.isInitialized && this.config.enabled && this.metricQueue.length > 0) {\n              _EventLogger.EventLogger.debug('PerformanceMonitor', 'Periodic flush triggered', {\n                queueLength: this.metricQueue.length\n              });\n              this.flushMetrics().catch(error => {\n                _EventLogger.EventLogger.error('PerformanceMonitor', 'Periodic flush failed', error);\n              });\n            }\n          }, 60000); // Flush every minute\n        }, 5000); // Wait 5 seconds before starting periodic flush\n      }\n\n      /**\r\n       * Flush metrics to backend\r\n       */\n    }, {\n      key: \"flush\",\n      value: (function () {\n        var _flush = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.isInitialized) {\n            _EventLogger.EventLogger.warn('PerformanceMonitor', 'Cannot flush before initialization');\n            return;\n          }\n          return this.flushMetrics();\n        });\n        function flush() {\n          return _flush.apply(this, arguments);\n        }\n        return flush;\n      }()\n      /**\r\n       * Flush metrics to backend (internal implementation)\r\n       */\n      )\n    }, {\n      key: \"flushMetrics\",\n      value: (function () {\n        var _flushMetrics = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.config.enabled || !this.isInitialized || this.isFlushingMetrics || this.metricQueue.length === 0) {\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Skipping flush', {\n              enabled: this.config.enabled,\n              initialized: this.isInitialized,\n              flushing: this.isFlushingMetrics,\n              queueLength: this.metricQueue.length\n            });\n            return;\n          }\n\n          // If database is not available, just store metrics offline and don't try to send\n          if (!this.databaseAvailable) {\n            var _metrics = [...this.metricQueue];\n            this.metricQueue = [];\n            yield this.storeOfflineMetrics(_metrics);\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Stored metrics offline - database not available', {\n              count: _metrics.length\n            });\n            return;\n          }\n          this.isFlushingMetrics = true;\n          var metrics = [...this.metricQueue];\n          this.metricQueue = [];\n          try {\n            yield this.sendMetrics(metrics);\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Metrics flushed successfully', {\n              count: metrics.length\n            });\n          } catch (error) {\n            // Put metrics back in queue and store offline\n            this.metricQueue.unshift(...metrics);\n            yield this.storeOfflineMetrics(metrics);\n\n            // Log actual error details\n            var errorDetails = {\n              name: error instanceof Error ? error.name : 'UnknownError',\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined,\n              metricCount: metrics.length,\n              isSupabaseError: error && typeof error === 'object' && 'code' in error,\n              errorCode: error && typeof error === 'object' && 'code' in error ? error.code : undefined\n            };\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to flush metrics - detailed error', errorDetails);\n          } finally {\n            this.isFlushingMetrics = false;\n          }\n        });\n        function flushMetrics() {\n          return _flushMetrics.apply(this, arguments);\n        }\n        return flushMetrics;\n      }()\n      /**\r\n       * Send metrics to backend\r\n       */\n      )\n    }, {\n      key: \"sendMetrics\",\n      value: (function () {\n        var _sendMetrics = (0, _asyncToGenerator2.default)(function* (metrics) {\n          // Check if Supabase is properly configured\n          if (!_client.supabase) {\n            throw new Error('Supabase client not initialized');\n          }\n\n          // Database availability is already checked in checkDatabaseAvailability()\n          // No need to test again here since we only call this when databaseAvailable is true\n\n          var errors = [];\n          var results = yield Promise.allSettled(metrics.map(/*#__PURE__*/function () {\n            var _ref = (0, _asyncToGenerator2.default)(function* (metric) {\n              try {\n                var _yield$supabase$from$2 = yield _client.supabase.from('performance_metrics').insert({\n                    id: metric.id,\n                    timestamp: metric.timestamp,\n                    type: metric.type,\n                    name: metric.name,\n                    value: metric.value,\n                    unit: metric.unit,\n                    context: metric.context,\n                    tags: metric.tags\n                  }),\n                  error = _yield$supabase$from$2.error;\n                if (error) {\n                  _EventLogger.EventLogger.error('PerformanceMonitor', `Failed to insert metric ${metric.id}`, {\n                    supabaseError: error,\n                    errorCode: error.code,\n                    errorMessage: error.message,\n                    metricId: metric.id\n                  });\n                  throw new Error(`Supabase error: ${error.message} (code: ${error.code})`);\n                }\n                return {\n                  success: true,\n                  metricId: metric.id\n                };\n              } catch (insertError) {\n                _EventLogger.EventLogger.error('PerformanceMonitor', `Database insert failed for metric ${metric.id}`, {\n                  error: insertError,\n                  metricId: metric.id\n                });\n                throw insertError;\n              }\n            });\n            return function (_x2) {\n              return _ref.apply(this, arguments);\n            };\n          }()));\n\n          // Collect all errors from failed insertions\n          results.forEach((result, index) => {\n            if (result.status === 'rejected') {\n              errors.push(new Error(`Metric ${metrics[index].id}: ${result.reason}`));\n            }\n          });\n\n          // If any errors occurred, throw with details\n          if (errors.length > 0) {\n            var errorMessage = `Failed to send ${errors.length}/${metrics.length} performance metrics:\\n${errors.map(e => e.message).join('\\n')}`;\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Batch send failed with detailed errors', {\n              failedCount: errors.length,\n              totalCount: metrics.length,\n              errors: errors.map(e => ({\n                name: e.name,\n                message: e.message,\n                stack: e.stack\n              }))\n            });\n            throw new Error(errorMessage);\n          }\n        });\n        function sendMetrics(_x) {\n          return _sendMetrics.apply(this, arguments);\n        }\n        return sendMetrics;\n      }()\n      /**\r\n       * Load offline data (metrics and alerts)\r\n       */\n      )\n    }, {\n      key: \"loadOfflineData\",\n      value: (function () {\n        var _loadOfflineData = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            var _yield$AsyncStorage$m = yield _asyncStorage.default.multiGet([PerformanceMonitorService.OFFLINE_METRICS_KEY, PerformanceMonitorService.OFFLINE_ALERTS_KEY]),\n              _yield$AsyncStorage$m2 = (0, _slicedToArray2.default)(_yield$AsyncStorage$m, 2),\n              offlineMetrics = _yield$AsyncStorage$m2[0],\n              offlineAlerts = _yield$AsyncStorage$m2[1];\n            var loadedMetrics = 0;\n            var loadedAlerts = 0;\n            if (offlineMetrics[1]) {\n              var metrics = JSON.parse(offlineMetrics[1]);\n\n              // Clean up old metrics (older than 24 hours) and limit to most recent 100\n              var oneDayAgo = Date.now() - 86400000;\n              var recentMetrics = metrics.filter(m => m.timestamp > oneDayAgo).slice(-100); // Keep only the most recent 100\n\n              this.metricQueue.unshift(...recentMetrics);\n              loadedMetrics = recentMetrics.length;\n              yield _asyncStorage.default.removeItem(PerformanceMonitorService.OFFLINE_METRICS_KEY);\n              if (metrics.length !== recentMetrics.length) {\n                _EventLogger.EventLogger.debug('PerformanceMonitor', `Cleaned up ${metrics.length - recentMetrics.length} old/excess metrics`);\n              }\n            }\n            if (offlineAlerts[1]) {\n              var alerts = JSON.parse(offlineAlerts[1]);\n\n              // Limit alerts to most recent 50\n              var recentAlerts = alerts.slice(-50);\n              this.alerts.unshift(...recentAlerts);\n              loadedAlerts = recentAlerts.length;\n              yield _asyncStorage.default.removeItem(PerformanceMonitorService.OFFLINE_ALERTS_KEY);\n              if (alerts.length !== recentAlerts.length) {\n                _EventLogger.EventLogger.debug('PerformanceMonitor', `Trimmed alerts from ${alerts.length} to ${recentAlerts.length}`);\n              }\n            }\n            if (loadedMetrics > 0 || loadedAlerts > 0) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Loaded offline performance data', {\n                metricsLoaded: loadedMetrics,\n                alertsLoaded: loadedAlerts\n              });\n\n              // Try to sync loaded data when database becomes available\n              if (this.databaseAvailable) {\n                this.syncOfflineData().catch(error => {\n                  _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to sync offline data immediately', error);\n                });\n              }\n            }\n          } catch (error) {\n            // Handle oversized data error specifically\n            if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && error.message.includes('Row too big')) {\n              _EventLogger.EventLogger.warn('PerformanceMonitor', 'Offline data too large, clearing data', {\n                error: error.message\n              });\n              yield this.clearOversizedOfflineData();\n              this.metricQueue = [];\n              this.alerts = [];\n            } else {\n              _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to load offline data', error);\n            }\n          }\n        });\n        function loadOfflineData() {\n          return _loadOfflineData.apply(this, arguments);\n        }\n        return loadOfflineData;\n      }()\n      /**\r\n       * Clear oversized offline data when it cannot be loaded\r\n       */\n      )\n    }, {\n      key: \"clearOversizedOfflineData\",\n      value: (function () {\n        var _clearOversizedOfflineData = (0, _asyncToGenerator2.default)(function* () {\n          try {\n            yield _asyncStorage.default.multiRemove([PerformanceMonitorService.OFFLINE_METRICS_KEY, PerformanceMonitorService.OFFLINE_ALERTS_KEY]);\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Cleared oversized offline data');\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to clear offline data', error);\n          }\n        });\n        function clearOversizedOfflineData() {\n          return _clearOversizedOfflineData.apply(this, arguments);\n        }\n        return clearOversizedOfflineData;\n      }()\n      /**\r\n       * Store metrics offline\r\n       */\n      )\n    }, {\n      key: \"storeOfflineMetrics\",\n      value: (function () {\n        var _storeOfflineMetrics = (0, _asyncToGenerator2.default)(function* (metrics) {\n          try {\n            // Get existing offline metrics to append to\n            var existingData = yield _asyncStorage.default.getItem(PerformanceMonitorService.OFFLINE_METRICS_KEY);\n            var existingMetrics = existingData ? JSON.parse(existingData) : [];\n\n            // Combine with new metrics\n            var allMetrics = [...existingMetrics, ...metrics];\n\n            // Limit offline storage to prevent storage bloat (keep last 100 metrics to avoid cursor overflow)\n            var maxOfflineMetrics = 100;\n            if (allMetrics.length > maxOfflineMetrics) {\n              allMetrics.splice(0, allMetrics.length - maxOfflineMetrics);\n              _EventLogger.EventLogger.debug('PerformanceMonitor', `Trimmed offline metrics to ${maxOfflineMetrics} most recent`);\n            }\n\n            // Check size before storing (rough estimate: 2KB per metric max)\n            var estimatedSize = JSON.stringify(allMetrics).length;\n            if (estimatedSize > 200000) {\n              // ~200KB limit\n              // Keep only the most recent 50 if still too large\n              allMetrics.splice(0, allMetrics.length - 50);\n              _EventLogger.EventLogger.warn('PerformanceMonitor', 'Offline metrics too large, reduced to 50 most recent');\n            }\n            yield _asyncStorage.default.setItem(PerformanceMonitorService.OFFLINE_METRICS_KEY, JSON.stringify(allMetrics));\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Stored metrics offline', {\n              newCount: metrics.length,\n              totalStored: allMetrics.length\n            });\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to store offline metrics', error);\n          }\n        });\n        function storeOfflineMetrics(_x3) {\n          return _storeOfflineMetrics.apply(this, arguments);\n        }\n        return storeOfflineMetrics;\n      }()\n      /**\r\n       * Store alerts offline\r\n       */\n      )\n    }, {\n      key: \"storeOfflineAlerts\",\n      value: (function () {\n        var _storeOfflineAlerts = (0, _asyncToGenerator2.default)(function* (alerts) {\n          try {\n            // Get existing offline alerts to append to\n            var existingData = yield _asyncStorage.default.getItem(PerformanceMonitorService.OFFLINE_ALERTS_KEY);\n            var existingAlerts = existingData ? JSON.parse(existingData) : [];\n\n            // Combine with new alerts\n            var allAlerts = [...existingAlerts, ...alerts];\n\n            // Limit offline storage to prevent storage bloat (keep last 50 alerts to avoid cursor overflow)\n            var maxOfflineAlerts = 50;\n            if (allAlerts.length > maxOfflineAlerts) {\n              allAlerts.splice(0, allAlerts.length - maxOfflineAlerts);\n              _EventLogger.EventLogger.debug('PerformanceMonitor', `Trimmed offline alerts to ${maxOfflineAlerts} most recent`);\n            }\n\n            // Check size before storing (rough estimate: 3KB per alert max)\n            var estimatedSize = JSON.stringify(allAlerts).length;\n            if (estimatedSize > 150000) {\n              // ~150KB limit\n              // Keep only the most recent 25 if still too large\n              allAlerts.splice(0, allAlerts.length - 25);\n              _EventLogger.EventLogger.warn('PerformanceMonitor', 'Offline alerts too large, reduced to 25 most recent');\n            }\n            yield _asyncStorage.default.setItem(PerformanceMonitorService.OFFLINE_ALERTS_KEY, JSON.stringify(allAlerts));\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Stored alerts offline', {\n              newCount: alerts.length,\n              totalStored: allAlerts.length\n            });\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to store offline alerts', error);\n          }\n        });\n        function storeOfflineAlerts(_x4) {\n          return _storeOfflineAlerts.apply(this, arguments);\n        }\n        return storeOfflineAlerts;\n      }()\n      /**\r\n       * Sync offline data when database becomes available\r\n       */\n      )\n    }, {\n      key: \"syncOfflineData\",\n      value: (function () {\n        var _syncOfflineData = (0, _asyncToGenerator2.default)(function* () {\n          if (!this.databaseAvailable || !this.isInitialized) {\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Cannot sync offline data - database not available or not initialized');\n            return;\n          }\n          try {\n            // Check if we have metrics in queue that came from offline storage\n            if (this.metricQueue.length > 0) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Syncing offline metrics to database', {\n                count: this.metricQueue.length\n              });\n              yield this.flushMetrics();\n            }\n\n            // Note: Alerts are typically not sent to database individually like metrics\n            // They're mainly used locally for monitoring and debugging purposes\n            // If alerts need to be synced, implement alert syncing logic here\n\n            _EventLogger.EventLogger.info('PerformanceMonitor', 'Offline data sync completed');\n          } catch (error) {\n            _EventLogger.EventLogger.error('PerformanceMonitor', 'Failed to sync offline data', error);\n          }\n        });\n        function syncOfflineData() {\n          return _syncOfflineData.apply(this, arguments);\n        }\n        return syncOfflineData;\n      }()\n      /**\r\n       * Check database availability and sync offline data if newly available\r\n       */\n      )\n    }, {\n      key: \"recheckDatabaseAvailability\",\n      value: (function () {\n        var _recheckDatabaseAvailability = (0, _asyncToGenerator2.default)(function* () {\n          var wasAvailable = this.databaseAvailable;\n          try {\n            yield this.checkDatabaseAvailability();\n\n            // If database just became available, sync offline data and reset log flag\n            if (!wasAvailable && this.databaseAvailable) {\n              _EventLogger.EventLogger.info('PerformanceMonitor', 'Database became available - syncing offline data');\n              this.databaseUnavailableLogged = false; // Reset so we can log again if it goes down\n              yield this.syncOfflineData();\n            }\n          } catch (error) {\n            this.databaseAvailable = false;\n            _EventLogger.EventLogger.debug('PerformanceMonitor', 'Database still not available');\n          }\n        });\n        function recheckDatabaseAvailability() {\n          return _recheckDatabaseAvailability.apply(this, arguments);\n        }\n        return recheckDatabaseAvailability;\n      }()\n      /**\r\n       * Check if we should track (sampling)\r\n       */\n      )\n    }, {\n      key: \"shouldTrack\",\n      value: function shouldTrack() {\n        if (!this.config.enabled || !this.isInitialized) {\n          return false;\n        }\n\n        // Always track in development\n\n        // Apply sample rate\n        return Math.random() < this.config.sampleRate;\n      }\n\n      /**\r\n       * Calculate statistics for metrics\r\n       */\n    }, {\n      key: \"calculateStats\",\n      value: function calculateStats(metrics) {\n        if (metrics.length === 0) {\n          return {\n            average: 0,\n            p50: 0,\n            p90: 0,\n            p99: 0,\n            samples: 0\n          };\n        }\n        var values = metrics.map(m => m.value).sort((a, b) => a - b);\n        var len = values.length;\n        return {\n          average: values.reduce((a, b) => a + b, 0) / len,\n          p50: values[Math.floor(len * 0.5)],\n          p90: values[Math.floor(len * 0.9)],\n          p99: values[Math.floor(len * 0.99)],\n          samples: len\n        };\n      }\n\n      /**\r\n       * Group screen render statistics\r\n       */\n    }, {\n      key: \"groupScreenRenderStats\",\n      value: function groupScreenRenderStats() {\n        var screenMetrics = this.metrics.filter(m => m.type === 'screen_render');\n        var grouped = {};\n        screenMetrics.forEach(metric => {\n          var screenName = metric.context?.screen_name || 'unknown';\n          if (!grouped[screenName]) {\n            grouped[screenName] = [];\n          }\n          grouped[screenName].push(metric);\n        });\n        var result = {};\n        Object.entries(grouped).forEach(_ref2 => {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n            screenName = _ref3[0],\n            metrics = _ref3[1];\n          var values = metrics.map(m => m.value);\n          var sortedValues = values.sort((a, b) => a - b);\n          result[screenName] = {\n            average: values.reduce((a, b) => a + b, 0) / values.length,\n            p90: sortedValues[Math.floor(sortedValues.length * 0.9)],\n            samples: values.length\n          };\n        });\n        return result;\n      }\n\n      /**\r\n       * Group API performance statistics\r\n       */\n    }, {\n      key: \"groupApiPerformanceStats\",\n      value: function groupApiPerformanceStats() {\n        var apiMetrics = this.metrics.filter(m => m.type === 'api_call');\n        var grouped = {};\n        apiMetrics.forEach(metric => {\n          var endpoint = metric.context?.api_endpoint || 'unknown';\n          if (!grouped[endpoint]) {\n            grouped[endpoint] = [];\n          }\n          grouped[endpoint].push(metric);\n        });\n        var result = {};\n        Object.entries(grouped).forEach(_ref4 => {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n            endpoint = _ref5[0],\n            metrics = _ref5[1];\n          var responseTimes = metrics.map(m => m.value);\n          var successfulRequests = metrics.filter(m => m.context?.success === true);\n          var errorRequests = metrics.filter(m => m.context?.success === false);\n          result[endpoint] = {\n            average_response_time: responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length,\n            success_rate: successfulRequests.length / metrics.length * 100,\n            error_rate: errorRequests.length / metrics.length * 100,\n            total_requests: metrics.length\n          };\n        });\n        return result;\n      }\n\n      /**\r\n       * Calculate memory statistics\r\n       */\n    }, {\n      key: \"calculateMemoryStats\",\n      value: function calculateMemoryStats() {\n        var memoryMetrics = this.metrics.filter(m => m.type === 'memory_usage');\n        if (memoryMetrics.length === 0) {\n          return {\n            average: 0,\n            peak: 0,\n            warnings: 0\n          };\n        }\n        var values = memoryMetrics.map(m => m.value);\n        var warnings = memoryMetrics.filter(m => m.context?.memory_pressure === true).length;\n        return {\n          average: values.reduce((a, b) => a + b, 0) / values.length,\n          peak: Math.max(...values),\n          warnings\n        };\n      }\n\n      /**\r\n       * Calculate battery statistics\r\n       */\n    }, {\n      key: \"calculateBatteryStats\",\n      value: function calculateBatteryStats() {\n        var batteryMetrics = this.metrics.filter(m => m.type === 'battery');\n        return {\n          average_drain: 0,\n          // Would calculate based on battery level changes\n          high_usage_events: 0 // Would track periods of high CPU/GPU usage\n        };\n      }\n\n      /**\r\n       * Calculate frame rate statistics\r\n       */\n    }, {\n      key: \"calculateFrameRateStats\",\n      value: function calculateFrameRateStats() {\n        // Would be populated by actual frame rate monitoring\n        return {\n          average_fps: 60,\n          // Default assumption\n          dropped_frames: 0\n        };\n      }\n\n      /**\r\n       * Generate metric ID\r\n       */\n    }, {\n      key: \"generateMetricId\",\n      value: function generateMetricId() {\n        return `perf-metric-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Generate alert ID\r\n       */\n    }, {\n      key: \"generateAlertId\",\n      value: function generateAlertId() {\n        return `perf-alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Generate session ID\r\n       */\n    }, {\n      key: \"generateSessionId\",\n      value: function generateSessionId() {\n        return `perf-session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      /**\r\n       * Cleanup when shutting down\r\n       */\n    }, {\n      key: \"shutdown\",\n      value: (function () {\n        var _shutdown = (0, _asyncToGenerator2.default)(function* () {\n          if (this.memoryCheckInterval) {\n            clearInterval(this.memoryCheckInterval);\n          }\n\n          // Flush remaining metrics\n          if (this.metricQueue.length > 0) {\n            yield this.flushMetrics();\n          }\n          this.isInitialized = false;\n          _EventLogger.EventLogger.info('PerformanceMonitor', 'Performance monitor shut down');\n        });\n        function shutdown() {\n          return _shutdown.apply(this, arguments);\n        }\n        return shutdown;\n      }())\n    }]);\n  }(); // Singleton instance\n  // Track if we've already logged database unavailability\n  // Storage keys\n  PerformanceMonitorService.OFFLINE_METRICS_KEY = 'performance_metrics_offline';\n  PerformanceMonitorService.OFFLINE_ALERTS_KEY = 'performance_alerts_offline';\n  var PerformanceMonitor = exports.PerformanceMonitor = new PerformanceMonitorService();\n\n  // Convenience functions\n  var startScreenRender = screenName => {\n    PerformanceMonitor.startScreenRender(screenName);\n  };\n  exports.startScreenRender = startScreenRender;\n  var endScreenRender = (screenName, context) => {\n    PerformanceMonitor.endScreenRender(screenName, context);\n  };\n  exports.endScreenRender = endScreenRender;\n  var startApiCall = (requestId, endpoint, method) => {\n    PerformanceMonitor.startApiCall(requestId, endpoint, method);\n  };\n  exports.startApiCall = startApiCall;\n  var endApiCall = (requestId, endpoint, method, statusCode, error) => {\n    PerformanceMonitor.endApiCall(requestId, endpoint, method, statusCode, error);\n  };\n  exports.endApiCall = endApiCall;\n  var trackCustomMetric = (name, value, unit, context) => {\n    PerformanceMonitor.trackCustomMetric(name, value, unit, context);\n  };\n\n  // Export types\n  exports.trackCustomMetric = trackCustomMetric;\n});","lineCount":1247,"map":[[11,2,6,0],[11,6,6,0,"_asyncStorage"],[11,19,6,0],[11,22,6,0,"_interopRequireDefault"],[11,44,6,0],[11,45,6,0,"require"],[11,52,6,0],[11,53,6,0,"_dependencyMap"],[11,67,6,0],[12,2,7,0],[12,6,7,0,"_reactNative"],[12,18,7,0],[12,21,7,0,"require"],[12,28,7,0],[12,29,7,0,"_dependencyMap"],[12,43,7,0],[13,2,8,0],[13,6,8,0,"_client"],[13,13,8,0],[13,16,8,0,"require"],[13,23,8,0],[13,24,8,0,"_dependencyMap"],[13,38,8,0],[14,2,9,0],[14,6,9,0,"_analytics"],[14,16,9,0],[14,19,9,0,"require"],[14,26,9,0],[14,27,9,0,"_dependencyMap"],[14,41,9,0],[15,2,10,0],[15,6,10,0,"_EventLogger"],[15,18,10,0],[15,21,10,0,"require"],[15,28,10,0],[15,29,10,0,"_dependencyMap"],[15,43,10,0],[16,2,1,0],[17,0,2,0],[18,0,3,0],[19,0,4,0],[20,2,1,0],[20,6,108,6,"PerformanceMonitorService"],[20,31,108,31],[21,4,128,2],[21,13,128,2,"PerformanceMonitorService"],[21,39,128,2],[21,41,128,55],[22,6,128,55],[22,10,128,14,"config"],[22,16,128,48],[22,19,128,48,"arguments"],[22,28,128,48],[22,29,128,48,"length"],[22,35,128,48],[22,43,128,48,"arguments"],[22,52,128,48],[22,60,128,48,"undefined"],[22,69,128,48],[22,72,128,48,"arguments"],[22,81,128,48],[22,87,128,51],[22,88,128,52],[22,89,128,53],[23,6,128,53],[23,10,128,53,"_classCallCheck2"],[23,26,128,53],[23,27,128,53,"default"],[23,34,128,53],[23,42,128,53,"PerformanceMonitorService"],[23,67,128,53],[24,6,128,53],[24,11,110,10,"metrics"],[24,18,110,17],[24,21,110,41],[24,23,110,43],[25,6,110,43],[25,11,111,10,"alerts"],[25,17,111,16],[25,20,111,39],[25,22,111,41],[26,6,111,41],[26,11,112,10,"isInitialized"],[26,24,112,23],[26,27,112,26],[26,32,112,31],[27,6,112,31],[27,11,115,10,"screenStartTimes"],[27,27,115,26],[27,30,115,50],[27,34,115,54,"Map"],[27,37,115,57],[27,38,115,58],[27,39,115,59],[28,6,115,59],[28,11,116,10,"apiCallTimes"],[28,23,116,22],[28,26,116,46],[28,30,116,50,"Map"],[28,33,116,53],[28,34,116,54],[28,35,116,55],[29,6,116,55],[29,11,119,10,"metricQueue"],[29,22,119,21],[29,25,119,45],[29,27,119,47],[30,6,119,47],[30,11,120,10,"isFlushingMetrics"],[30,28,120,27],[30,31,120,30],[30,36,120,35],[31,6,120,35],[31,11,121,10,"databaseAvailable"],[31,28,121,27],[31,31,121,30],[31,36,121,35],[32,6,121,35],[32,11,122,10,"databaseUnavailableLogged"],[32,36,122,35],[32,39,122,38],[32,44,122,43],[33,6,129,4],[33,10,129,8],[33,11,129,9,"config"],[33,17,129,15],[33,20,129,18],[34,8,130,6,"enabled"],[34,15,130,13],[34,17,130,15,"ANALYTICS_CONFIG"],[34,44,130,31],[34,45,130,32,"performance"],[34,56,130,43],[34,57,130,44,"trackFPS"],[34,65,130,52],[35,8,131,6,"sampleRate"],[35,18,131,16],[35,20,131,18,"ANALYTICS_CONFIG"],[35,47,131,34],[35,48,131,35,"performance"],[35,59,131,46],[35,60,131,47,"sampleRate"],[35,70,131,57],[36,8,132,6,"alertThresholds"],[36,23,132,21],[36,25,132,23],[37,10,133,8,"slowAppLaunch"],[37,23,133,21],[37,25,133,23],[37,29,133,27],[38,10,133,29],[39,10,134,8,"slowScreenRender"],[39,26,134,24],[39,28,134,26],[39,32,134,30],[40,10,134,32],[41,10,135,8,"slowApiResponse"],[41,25,135,23],[41,27,135,25,"ANALYTICS_CONFIG"],[41,54,135,41],[41,55,135,42,"performance"],[41,66,135,53],[41,67,135,54,"slowThresholdMs"],[41,82,135,69],[42,10,136,8,"memoryUsagePercent"],[42,28,136,26],[42,30,136,28],[42,32,136,30],[43,10,136,32],[44,10,137,8,"lowBatteryPercent"],[44,27,137,25],[44,29,137,27],[44,31,137,29],[45,10,137,31],[46,10,138,8,"lowFpsThreshold"],[46,25,138,23],[46,27,138,25],[46,29,138,27],[46,30,138,29],[47,8,139,6],[47,9,139,7],[48,8,140,6,"trackingEnabled"],[48,23,140,21],[48,25,140,23],[49,10,141,8,"appLaunch"],[49,19,141,17],[49,21,141,19,"ANALYTICS_CONFIG"],[49,48,141,35],[49,49,141,36,"performance"],[49,60,141,47],[49,61,141,48,"trackAppLaunchTime"],[49,79,141,66],[50,10,142,8,"screenRender"],[50,22,142,20],[50,24,142,22,"ANALYTICS_CONFIG"],[50,51,142,38],[50,52,142,39,"performance"],[50,63,142,50],[50,64,142,51,"trackScreenRenderTime"],[50,85,142,72],[51,10,143,8,"apiCalls"],[51,18,143,16],[51,20,143,18,"ANALYTICS_CONFIG"],[51,47,143,34],[51,48,143,35,"performance"],[51,59,143,46],[51,60,143,47,"trackNetworkLatency"],[51,79,143,66],[52,10,144,8,"memoryUsage"],[52,21,144,19],[52,23,144,21,"ANALYTICS_CONFIG"],[52,50,144,37],[52,51,144,38,"performance"],[52,62,144,49],[52,63,144,50,"trackMemory"],[52,74,144,61],[53,10,145,8,"batteryUsage"],[53,22,145,20],[53,24,145,22],[53,28,145,26],[54,10,146,8,"frameRate"],[54,19,146,17],[54,21,146,19,"ANALYTICS_CONFIG"],[54,48,146,35],[54,49,146,36,"performance"],[54,60,146,47],[54,61,146,48,"trackFPS"],[54,69,146,56],[55,10,147,8,"networkLatency"],[55,24,147,22],[55,26,147,24,"ANALYTICS_CONFIG"],[55,53,147,40],[55,54,147,41,"performance"],[55,65,147,52],[55,66,147,53,"trackNetworkLatency"],[56,8,148,6],[56,9,148,7],[57,8,149,6],[57,11,149,9,"config"],[58,6,150,4],[58,7,150,5],[59,6,152,4],[59,10,152,8],[59,11,152,9,"sessionId"],[59,20,152,18],[59,23,152,21],[59,27,152,25],[59,28,152,26,"generateSessionId"],[59,45,152,43],[59,46,152,44],[59,47,152,45],[60,6,153,4],[60,10,153,8],[60,11,153,9,"appStartTime"],[60,23,153,21],[60,26,153,24,"Date"],[60,30,153,28],[60,31,153,29,"now"],[60,34,153,32],[60,35,153,33],[60,36,153,34],[61,4,154,2],[63,4,156,2],[64,0,157,0],[65,0,158,0],[66,4,156,2],[66,15,156,2,"_createClass2"],[66,28,156,2],[66,29,156,2,"default"],[66,36,156,2],[66,38,156,2,"PerformanceMonitorService"],[66,63,156,2],[67,6,156,2,"key"],[67,9,156,2],[68,6,156,2,"value"],[68,11,156,2],[69,8,156,2],[69,12,156,2,"_initialize"],[69,23,156,2],[69,30,156,2,"_asyncToGenerator2"],[69,48,156,2],[69,49,156,2,"default"],[69,56,156,2],[69,58,159,2],[69,71,159,43],[70,10,160,4],[70,14,160,8],[71,12,161,6],[71,16,161,10],[71,17,161,11],[71,21,161,15],[71,22,161,16,"config"],[71,28,161,22],[71,29,161,23,"enabled"],[71,36,161,30],[71,38,161,32],[72,14,162,8,"EventLogger"],[72,38,162,19],[72,39,162,20,"info"],[72,43,162,24],[72,44,162,25],[72,64,162,45],[72,66,162,47],[72,99,162,80],[72,100,162,81],[73,14,163,8],[73,18,163,12],[73,19,163,13,"isInitialized"],[73,32,163,26],[73,35,163,29],[73,39,163,33],[73,40,163,34],[73,41,163,35],[74,14,164,8],[75,12,165,6],[77,12,167,6],[78,12,168,6],[78,18,168,12,"Promise"],[78,25,168,19],[78,26,168,20,"resolve"],[78,33,168,27],[78,34,168,28],[78,35,168,29],[78,36,168,30,"then"],[78,40,168,34],[78,41,168,35],[78,47,168,41],[79,14,169,8],[80,14,170,8],[80,18,170,12],[80,22,170,16],[80,23,170,17,"config"],[80,29,170,23],[80,30,170,24,"trackingEnabled"],[80,45,170,39],[80,46,170,40,"memoryUsage"],[80,57,170,51],[80,59,170,53],[81,16,171,10],[81,20,171,14],[81,21,171,15,"setupMemoryMonitoring"],[81,42,171,36],[81,43,171,37],[81,44,171,38],[82,14,172,8],[84,14,174,8],[85,14,175,8],[85,18,175,12],[85,22,175,16],[85,23,175,17,"config"],[85,29,175,23],[85,30,175,24,"trackingEnabled"],[85,45,175,39],[85,46,175,40,"frameRate"],[85,55,175,49],[85,57,175,51],[86,16,176,10],[86,20,176,14],[86,21,176,15,"setupFrameRateMonitoring"],[86,45,176,39],[86,46,176,40],[86,47,176,41],[87,14,177,8],[89,14,179,8],[90,14,180,8],[90,18,180,12],[90,19,180,13,"setupPeriodicFlush"],[90,37,180,31],[90,38,180,32],[90,39,180,33],[91,12,181,6],[91,13,181,7],[91,14,181,8],[93,12,183,6],[94,12,184,6],[94,16,184,10],[94,17,184,11,"checkDatabaseAvailability"],[94,42,184,36],[94,43,184,37],[94,44,184,38],[94,45,184,39,"catch"],[94,50,184,44],[94,51,184,45,"error"],[94,56,184,50],[94,60,184,54],[95,14,185,8],[95,18,185,12],[95,19,185,13],[95,23,185,17],[95,24,185,18,"databaseUnavailableLogged"],[95,49,185,43],[95,51,185,45],[96,16,186,10,"EventLogger"],[96,40,186,21],[96,41,186,22,"warn"],[96,45,186,26],[96,46,186,27],[96,66,186,47],[96,68,186,49],[96,130,186,111],[96,132,186,113,"error"],[96,137,186,127],[96,138,186,128],[97,16,187,10],[97,20,187,14],[97,21,187,15,"databaseUnavailableLogged"],[97,46,187,40],[97,49,187,43],[97,53,187,47],[98,14,188,8],[99,14,189,8],[99,18,189,12],[99,19,189,13,"databaseAvailable"],[99,36,189,30],[99,39,189,33],[99,44,189,38],[100,12,190,6],[100,13,190,7],[100,14,190,8],[102,12,192,6],[103,12,193,6],[103,16,193,10],[103,17,193,11,"loadOfflineData"],[103,32,193,26],[103,33,193,27],[103,34,193,28],[103,35,193,29,"catch"],[103,40,193,34],[103,41,193,35,"error"],[103,46,193,40],[103,50,193,44],[104,14,194,8,"EventLogger"],[104,38,194,19],[104,39,194,20,"error"],[104,44,194,25],[104,45,194,26],[104,65,194,46],[104,67,194,48],[104,96,194,77],[104,98,194,79,"error"],[104,103,194,93],[104,104,194,94],[105,12,195,6],[105,13,195,7],[105,14,195,8],[107,12,197,6],[108,12,198,6],[108,16,198,10],[108,20,198,14],[108,21,198,15,"config"],[108,27,198,21],[108,28,198,22,"trackingEnabled"],[108,43,198,37],[108,44,198,38,"appLaunch"],[108,53,198,47],[108,55,198,49],[109,14,199,8,"Promise"],[109,21,199,15],[109,22,199,16,"resolve"],[109,29,199,23],[109,30,199,24],[109,31,199,25],[109,32,199,26,"then"],[109,36,199,30],[109,37,199,31],[109,43,199,37],[109,47,199,41],[109,48,199,42,"trackAppLaunchTime"],[109,66,199,60],[109,67,199,61],[109,68,199,62],[109,69,199,63],[110,12,200,6],[111,12,202,6],[111,16,202,10],[111,17,202,11,"isInitialized"],[111,30,202,24],[111,33,202,27],[111,37,202,31],[112,12,203,6,"EventLogger"],[112,36,203,17],[112,37,203,18,"info"],[112,41,203,22],[112,42,203,23],[112,62,203,43],[112,64,203,45],[112,100,203,81],[112,101,203,82],[113,10,205,4],[113,11,205,5],[113,12,205,6],[113,19,205,13,"error"],[113,24,205,18],[113,26,205,20],[114,12,206,6],[114,16,206,10],[114,17,206,11,"isInitialized"],[114,30,206,24],[114,33,206,27],[114,37,206,31],[114,38,206,32],[114,39,206,33],[115,12,207,6,"EventLogger"],[115,36,207,17],[115,37,207,18,"error"],[115,42,207,23],[115,43,207,24],[115,63,207,44],[115,65,207,46],[115,107,207,88],[115,109,207,90,"error"],[115,114,207,104],[115,115,207,105],[116,10,208,4],[117,8,209,2],[117,9,209,3],[118,8,209,3],[118,17,159,15,"initialize"],[118,27,159,25,"initialize"],[118,28,159,25],[119,10,159,25],[119,17,159,25,"_initialize"],[119,28,159,25],[119,29,159,25,"apply"],[119,34,159,25],[119,41,159,25,"arguments"],[119,50,159,25],[120,8,159,25],[121,8,159,25],[121,15,159,15,"initialize"],[121,25,159,25],[122,6,159,25],[123,6,211,2],[124,0,212,0],[125,0,213,0],[126,6,211,2],[127,4,211,2],[128,6,211,2,"key"],[128,9,211,2],[129,6,211,2,"value"],[129,11,211,2],[130,8,211,2],[130,12,211,2,"_checkDatabaseAvailability"],[130,38,211,2],[130,45,211,2,"_asyncToGenerator2"],[130,63,211,2],[130,64,211,2,"default"],[130,71,211,2],[130,73,214,2],[130,86,214,59],[131,10,215,4],[131,14,215,8],[132,12,216,6],[132,16,216,10],[132,17,216,11,"supabase"],[132,33,216,19],[132,35,216,21],[133,14,217,8],[133,20,217,14],[133,24,217,18,"Error"],[133,29,217,23],[133,30,217,24],[133,63,217,57],[133,64,217,58],[134,12,218,6],[136,12,220,6],[137,12,221,6],[138,12,222,6],[138,16,222,12,"testMetricId"],[138,28,222,24],[138,31,222,27],[138,52,222,48,"Date"],[138,56,222,52],[138,57,222,53,"now"],[138,60,222,56],[138,61,222,57],[138,62,222,58],[138,66,222,62,"Math"],[138,70,222,66],[138,71,222,67,"random"],[138,77,222,73],[138,78,222,74],[138,79,222,75],[138,80,222,76,"toString"],[138,88,222,84],[138,89,222,85],[138,91,222,87],[138,92,222,88],[138,93,222,89,"substr"],[138,99,222,95],[138,100,222,96],[138,101,222,97],[138,103,222,99],[138,104,222,100],[138,105,222,101],[138,107,222,103],[139,12,224,6],[139,16,224,6,"_yield$supabase$from$"],[139,37,224,6],[139,46,224,43,"supabase"],[139,62,224,51],[139,63,225,9,"from"],[139,67,225,13],[139,68,225,14],[139,89,225,35],[139,90,225,36],[139,91,226,9,"insert"],[139,97,226,15],[139,98,226,16],[140,16,227,10,"id"],[140,18,227,12],[140,20,227,14,"testMetricId"],[140,32,227,26],[141,16,228,10,"type"],[141,20,228,14],[141,22,228,16],[141,30,228,24],[142,16,229,10,"name"],[142,20,229,14],[142,22,229,16],[142,50,229,44],[143,16,230,10,"value"],[143,21,230,15],[143,23,230,17],[143,24,230,18],[144,16,231,10,"unit"],[144,20,231,14],[144,22,231,16],[144,29,231,23],[145,16,232,10,"context"],[145,23,232,17],[145,25,232,19],[146,18,232,21,"test"],[146,22,232,25],[146,24,232,27],[147,16,232,32],[147,17,232,33],[148,16,233,10,"tags"],[148,20,233,14],[148,22,233,16],[149,18,233,18,"test"],[149,22,233,22],[149,24,233,24],[150,16,233,45],[151,14,234,8],[151,15,234,9],[151,16,234,10],[152,14,224,21,"insertError"],[152,25,224,32],[152,28,224,32,"_yield$supabase$from$"],[152,49,224,32],[152,50,224,14,"error"],[152,55,224,19],[153,12,236,6],[153,16,236,10,"insertError"],[153,27,236,21],[153,29,236,23],[154,14,237,8],[155,14,238,8],[155,18,238,12,"insertError"],[155,29,238,23],[155,30,238,24,"code"],[155,34,238,28],[155,39,238,33],[155,46,238,40],[155,48,238,42],[156,16,239,10],[157,16,240,10,"EventLogger"],[157,40,240,21],[157,41,240,22,"warn"],[157,45,240,26],[157,46,240,27],[157,66,240,47],[157,68,240,49],[157,110,240,91],[157,112,240,93],[158,18,241,12,"suggestion"],[158,28,241,22],[158,30,241,24],[159,16,242,10],[159,17,242,18],[159,18,242,19],[160,14,243,8],[160,15,243,9],[160,21,243,15],[160,25,243,19,"insertError"],[160,36,243,30],[160,37,243,31,"code"],[160,41,243,35],[160,46,243,40],[160,53,243,47],[160,55,243,49],[161,16,244,10],[162,16,245,10,"EventLogger"],[162,40,245,21],[162,41,245,22,"warn"],[162,45,245,26],[162,46,245,27],[162,66,245,47],[162,68,245,49],[162,117,245,98],[162,119,245,100],[163,18,246,12,"suggestion"],[163,28,246,22],[163,30,246,24],[164,16,247,10],[164,17,247,18],[164,18,247,19],[165,14,248,8],[165,15,248,9],[165,21,248,15],[166,16,249,10],[167,16,250,10,"EventLogger"],[167,40,250,21],[167,41,250,22,"warn"],[167,45,250,26],[167,46,250,27],[167,66,250,47],[167,68,250,49],[167,110,250,91],[167,112,250,93],[168,18,251,12,"tableError"],[168,28,251,22],[168,30,251,24,"insertError"],[168,41,251,35],[168,42,251,36,"message"],[168,49,251,43],[169,18,252,12,"code"],[169,22,252,16],[169,24,252,18,"insertError"],[169,35,252,29],[169,36,252,30,"code"],[170,16,253,10],[170,17,253,18],[170,18,253,19],[171,14,254,8],[172,14,256,8],[172,18,256,12],[172,19,256,13,"databaseAvailable"],[172,36,256,30],[172,39,256,33],[172,44,256,38],[173,14,257,8],[173,20,257,14],[173,24,257,18,"Error"],[173,29,257,23],[173,30,257,24],[173,53,257,47,"insertError"],[173,64,257,58],[173,65,257,59,"message"],[173,72,257,66],[173,83,257,77,"insertError"],[173,94,257,88],[173,95,257,89,"code"],[173,99,257,93],[173,102,257,96],[173,103,257,97],[174,12,258,6],[176,12,260,6],[177,12,261,6],[177,18,261,12,"supabase"],[177,34,261,20],[177,35,262,9,"from"],[177,39,262,13],[177,40,262,14],[177,61,262,35],[177,62,262,36],[177,63,263,9,"delete"],[177,69,263,15],[177,70,263,16],[177,71,263,17],[177,72,264,9,"eq"],[177,74,264,11],[177,75,264,12],[177,79,264,16],[177,81,264,18,"testMetricId"],[177,93,264,30],[177,94,264,31],[178,12,266,6],[178,16,266,10],[178,17,266,11,"databaseAvailable"],[178,34,266,28],[178,37,266,31],[178,41,266,35],[179,12,267,6,"EventLogger"],[179,36,267,17],[179,37,267,18,"info"],[179,41,267,22],[179,42,267,23],[179,62,267,43],[179,64,267,45],[179,104,267,85],[179,105,267,86],[180,10,269,4],[180,11,269,5],[180,12,269,6],[180,19,269,13,"error"],[180,24,269,18],[180,26,269,20],[181,12,270,6],[181,16,270,10],[181,17,270,11,"databaseAvailable"],[181,34,270,28],[181,37,270,31],[181,42,270,36],[183,12,272,6],[184,12,273,6],[184,16,273,10,"message"],[184,23,273,17],[184,26,273,20],[184,79,273,73],[185,12,274,6],[185,16,274,12,"errorDetails"],[185,28,274,29],[185,31,274,32],[186,14,275,8,"error"],[186,19,275,13],[186,21,275,15,"error"],[186,26,275,20],[186,38,275,32,"Error"],[186,43,275,37],[186,46,275,40,"error"],[186,51,275,45],[186,52,275,46,"message"],[186,59,275,53],[186,62,275,56,"String"],[186,68,275,62],[186,69,275,63,"error"],[186,74,275,68],[187,12,276,6],[187,13,276,7],[188,12,278,6],[188,16,278,10,"error"],[188,21,278,15],[188,33,278,27,"Error"],[188,38,278,32],[188,40,278,34],[189,14,279,8],[189,18,279,12,"error"],[189,23,279,17],[189,24,279,18,"message"],[189,31,279,25],[189,32,279,26,"includes"],[189,40,279,34],[189,41,279,35],[189,48,279,42],[189,49,279,43],[189,53,279,47,"error"],[189,58,279,52],[189,59,279,53,"message"],[189,66,279,60],[189,67,279,61,"includes"],[189,75,279,69],[189,76,279,70],[189,92,279,86],[189,93,279,87],[189,95,279,89],[190,16,280,10,"message"],[190,23,280,17],[190,26,280,20],[190,97,280,91],[191,16,281,10,"errorDetails"],[191,28,281,22],[191,29,281,23,"setupScript"],[191,40,281,34],[191,43,281,37],[191,80,281,74],[192,14,282,8],[192,15,282,9],[192,21,282,15],[192,25,282,19,"error"],[192,30,282,24],[192,31,282,25,"message"],[192,38,282,32],[192,39,282,33,"includes"],[192,47,282,41],[192,48,282,42],[192,55,282,49],[192,56,282,50],[192,60,282,54,"error"],[192,65,282,59],[192,66,282,60,"message"],[192,73,282,67],[192,74,282,68,"includes"],[192,82,282,76],[192,83,282,77],[192,95,282,89],[192,96,282,90],[192,98,282,92],[193,16,283,10,"message"],[193,23,283,17],[193,26,283,20],[193,75,283,69],[194,14,284,8],[194,15,284,9],[194,21,284,15],[194,25,284,19,"error"],[194,30,284,24],[194,31,284,25,"message"],[194,38,284,32],[194,39,284,33,"includes"],[194,47,284,41],[194,48,284,42],[194,65,284,59],[194,66,284,60],[194,68,284,62],[195,16,285,10,"message"],[195,23,285,17],[195,26,285,20],[195,81,285,75],[196,14,286,8],[197,12,287,6],[198,12,289,6,"EventLogger"],[198,36,289,17],[198,37,289,18,"warn"],[198,41,289,22],[198,42,289,23],[198,62,289,43],[198,64,289,45,"message"],[198,71,289,52],[198,73,289,54,"errorDetails"],[198,85,289,66],[198,86,289,67],[199,12,290,6],[199,18,290,12,"error"],[199,23,290,17],[200,10,291,4],[201,8,292,2],[201,9,292,3],[202,8,292,3],[202,17,214,16,"checkDatabaseAvailability"],[202,42,214,41,"checkDatabaseAvailability"],[202,43,214,41],[203,10,214,41],[203,17,214,41,"_checkDatabaseAvailability"],[203,43,214,41],[203,44,214,41,"apply"],[203,49,214,41],[203,56,214,41,"arguments"],[203,65,214,41],[204,8,214,41],[205,8,214,41],[205,15,214,16,"checkDatabaseAvailability"],[205,40,214,41],[206,6,214,41],[207,6,294,2],[208,0,295,0],[209,0,296,0],[210,6,294,2],[211,4,294,2],[212,6,294,2,"key"],[212,9,294,2],[213,6,294,2,"value"],[213,11,294,2],[213,13,297,2],[213,22,297,10,"trackAppLaunchTime"],[213,40,297,28,"trackAppLaunchTime"],[213,41,297,28],[213,43,297,37],[214,8,298,4,"InteractionManager"],[214,39,298,22],[214,40,298,23,"runAfterInteractions"],[214,60,298,43],[214,61,298,44],[214,67,298,50],[215,10,299,6],[215,14,299,12,"launchTime"],[215,24,299,22],[215,27,299,25,"Date"],[215,31,299,29],[215,32,299,30,"now"],[215,35,299,33],[215,36,299,34],[215,37,299,35],[215,40,299,38],[215,44,299,42],[215,45,299,43,"appStartTime"],[215,57,299,55],[216,10,301,6],[216,14,301,10],[216,15,301,11,"trackMetric"],[216,26,301,22],[216,27,301,23],[217,12,302,8,"type"],[217,16,302,12],[217,18,302,14],[217,30,302,26],[218,12,303,8,"name"],[218,16,303,12],[218,18,303,14],[218,35,303,31],[219,12,304,8,"value"],[219,17,304,13],[219,19,304,15,"launchTime"],[219,29,304,25],[220,12,305,8,"unit"],[220,16,305,12],[220,18,305,14],[220,22,305,18],[221,12,306,8,"context"],[221,19,306,15],[221,21,306,17],[222,14,307,10,"platform"],[222,22,307,18],[222,33,307,31],[223,14,308,10,"os_version"],[223,24,308,20],[223,26,308,22,"Platform"],[223,47,308,30],[223,48,308,31,"Version"],[223,55,308,38],[223,56,308,39,"toString"],[223,64,308,47],[223,65,308,48],[224,12,309,8],[225,10,310,6],[225,11,310,7],[225,12,310,8],[227,10,312,6],[228,10,313,6],[228,14,313,10,"launchTime"],[228,24,313,20],[228,27,313,23],[228,31,313,27],[228,32,313,28,"config"],[228,38,313,34],[228,39,313,35,"alertThresholds"],[228,54,313,50],[228,55,313,51,"slowAppLaunch"],[228,68,313,64],[228,70,313,66],[229,12,314,8],[229,16,314,12],[229,17,314,13,"createAlert"],[229,28,314,24],[229,29,314,25],[230,14,315,10,"type"],[230,18,315,14],[230,20,315,16],[230,33,315,29],[231,14,316,10,"severity"],[231,22,316,18],[231,24,316,20,"launchTime"],[231,34,316,30],[231,37,316,33],[231,41,316,37],[231,42,316,38,"config"],[231,48,316,44],[231,49,316,45,"alertThresholds"],[231,64,316,60],[231,65,316,61,"slowAppLaunch"],[231,78,316,74],[231,81,316,77],[231,82,316,78],[231,85,316,81],[231,91,316,87],[231,94,316,90],[231,102,316,98],[232,14,317,10,"message"],[232,21,317,17],[232,23,317,19],[232,42,317,38,"launchTime"],[232,52,317,48],[232,56,317,52],[233,14,318,10,"value"],[233,19,318,15],[233,21,318,17,"launchTime"],[233,31,318,27],[234,14,319,10,"threshold"],[234,23,319,19],[234,25,319,21],[234,29,319,25],[234,30,319,26,"config"],[234,36,319,32],[234,37,319,33,"alertThresholds"],[234,52,319,48],[234,53,319,49,"slowAppLaunch"],[235,12,320,8],[235,13,320,9],[235,14,320,10],[236,10,321,6],[237,10,323,6,"EventLogger"],[237,34,323,17],[237,35,323,18,"performance"],[237,46,323,29],[237,47,323,30],[237,52,323,35],[237,54,323,37],[237,67,323,50],[237,69,323,52,"launchTime"],[237,79,323,62],[237,81,323,64],[238,12,323,66,"platform"],[238,20,323,74],[239,10,323,88],[239,11,323,89],[239,12,323,90],[240,8,324,4],[240,9,324,5],[240,10,324,6],[241,6,325,2],[243,6,327,2],[244,0,328,0],[245,0,329,0],[246,4,327,2],[247,6,327,2,"key"],[247,9,327,2],[248,6,327,2,"value"],[248,11,327,2],[248,13,330,2],[248,22,330,9,"startScreenRender"],[248,39,330,26,"startScreenRender"],[248,40,330,27,"screenName"],[248,50,330,45],[248,52,330,53],[249,8,331,4],[249,12,331,8],[249,13,331,9],[249,17,331,13],[249,18,331,14,"shouldTrack"],[249,29,331,25],[249,30,331,26],[249,31,331,27],[249,35,331,31],[249,36,331,32],[249,40,331,36],[249,41,331,37,"config"],[249,47,331,43],[249,48,331,44,"trackingEnabled"],[249,63,331,59],[249,64,331,60,"screenRender"],[249,76,331,72],[249,78,331,74],[250,8,333,4],[250,12,333,10,"startTime"],[250,21,333,19],[250,24,333,22,"Date"],[250,28,333,26],[250,29,333,27,"now"],[250,32,333,30],[250,33,333,31],[250,34,333,32],[251,8,334,4],[251,12,334,8],[251,13,334,9,"screenStartTimes"],[251,29,334,25],[251,30,334,26,"set"],[251,33,334,29],[251,34,334,30,"screenName"],[251,44,334,40],[251,46,334,42,"startTime"],[251,55,334,51],[251,56,334,52],[252,8,336,4,"EventLogger"],[252,32,336,15],[252,33,336,16,"debug"],[252,38,336,21],[252,39,336,22],[252,59,336,42],[252,61,336,44],[252,92,336,75,"screenName"],[252,102,336,85],[252,104,336,87],[252,105,336,88],[253,6,337,2],[255,6,339,2],[256,0,340,0],[257,0,341,0],[258,4,339,2],[259,6,339,2,"key"],[259,9,339,2],[260,6,339,2,"value"],[260,11,339,2],[260,13,342,2],[260,22,342,9,"endScreenRender"],[260,37,342,24,"endScreenRender"],[260,38,342,25,"screenName"],[260,48,342,43],[260,50,342,45,"additionalContext"],[260,67,342,84],[260,69,342,92],[261,8,343,4],[261,12,343,8],[261,13,343,9],[261,17,343,13],[261,18,343,14,"shouldTrack"],[261,29,343,25],[261,30,343,26],[261,31,343,27],[261,35,343,31],[261,36,343,32],[261,40,343,36],[261,41,343,37,"config"],[261,47,343,43],[261,48,343,44,"trackingEnabled"],[261,63,343,59],[261,64,343,60,"screenRender"],[261,76,343,72],[261,78,343,74],[262,8,345,4],[262,12,345,10,"startTime"],[262,21,345,19],[262,24,345,22],[262,28,345,26],[262,29,345,27,"screenStartTimes"],[262,45,345,43],[262,46,345,44,"get"],[262,49,345,47],[262,50,345,48,"screenName"],[262,60,345,58],[262,61,345,59],[263,8,346,4],[263,12,346,8],[263,13,346,9,"startTime"],[263,22,346,18],[263,24,346,20],[264,10,347,6,"EventLogger"],[264,34,347,17],[264,35,347,18,"warn"],[264,39,347,22],[264,40,347,23],[264,60,347,43],[264,62,347,45],[264,96,347,79,"screenName"],[264,106,347,89],[264,108,347,91],[264,109,347,92],[265,10,348,6],[266,8,349,4],[267,8,351,4],[267,12,351,10,"renderTime"],[267,22,351,20],[267,25,351,23,"Date"],[267,29,351,27],[267,30,351,28,"now"],[267,33,351,31],[267,34,351,32],[267,35,351,33],[267,38,351,36,"startTime"],[267,47,351,45],[268,8,352,4],[268,12,352,8],[268,13,352,9,"screenStartTimes"],[268,29,352,25],[268,30,352,26,"delete"],[268,36,352,32],[268,37,352,33,"screenName"],[268,47,352,43],[268,48,352,44],[269,8,354,4],[269,12,354,8],[269,13,354,9,"trackMetric"],[269,24,354,20],[269,25,354,21],[270,10,355,6,"type"],[270,14,355,10],[270,16,355,12],[270,31,355,27],[271,10,356,6,"name"],[271,14,356,10],[271,16,356,12],[271,36,356,32],[272,10,357,6,"value"],[272,15,357,11],[272,17,357,13,"renderTime"],[272,27,357,23],[273,10,358,6,"unit"],[273,14,358,10],[273,16,358,12],[273,20,358,16],[274,10,359,6,"context"],[274,17,359,13],[274,19,359,15],[275,12,360,8,"screen_name"],[275,23,360,19],[275,25,360,21,"screenName"],[275,35,360,31],[276,12,361,8],[276,15,361,11,"additionalContext"],[277,10,362,6],[278,8,363,4],[278,9,363,5],[278,10,363,6],[280,8,365,4],[281,8,366,4],[281,12,366,8,"renderTime"],[281,22,366,18],[281,25,366,21],[281,29,366,25],[281,30,366,26,"config"],[281,36,366,32],[281,37,366,33,"alertThresholds"],[281,52,366,48],[281,53,366,49,"slowScreenRender"],[281,69,366,65],[281,71,366,67],[282,10,367,6],[282,14,367,10],[282,15,367,11,"createAlert"],[282,26,367,22],[282,27,367,23],[283,12,368,8,"type"],[283,16,368,12],[283,18,368,14],[283,31,368,27],[284,12,369,8,"severity"],[284,20,369,16],[284,22,369,18,"renderTime"],[284,32,369,28],[284,35,369,31],[284,39,369,35],[284,40,369,36,"config"],[284,46,369,42],[284,47,369,43,"alertThresholds"],[284,62,369,58],[284,63,369,59,"slowScreenRender"],[284,79,369,75],[284,82,369,78],[284,83,369,79],[284,86,369,82],[284,92,369,88],[284,95,369,91],[284,103,369,99],[285,12,370,8,"message"],[285,19,370,15],[285,21,370,17],[285,31,370,27,"screenName"],[285,41,370,37],[285,57,370,53,"renderTime"],[285,67,370,63],[285,71,370,67],[286,12,371,8,"value"],[286,17,371,13],[286,19,371,15,"renderTime"],[286,29,371,25],[287,12,372,8,"threshold"],[287,21,372,17],[287,23,372,19],[287,27,372,23],[287,28,372,24,"config"],[287,34,372,30],[287,35,372,31,"alertThresholds"],[287,50,372,46],[287,51,372,47,"slowScreenRender"],[287,67,372,63],[288,12,373,8,"context"],[288,19,373,15],[288,21,373,17],[289,14,373,19,"screen_name"],[289,25,373,30],[289,27,373,32,"screenName"],[290,12,373,43],[291,10,374,6],[291,11,374,7],[291,12,374,8],[292,8,375,4],[293,8,377,4,"EventLogger"],[293,32,377,15],[293,33,377,16,"performance"],[293,44,377,27],[293,45,377,28],[293,53,377,36],[293,55,377,38],[293,65,377,48,"screenName"],[293,75,377,58],[293,77,377,60],[293,79,377,62,"renderTime"],[293,89,377,72],[293,90,377,73],[294,6,378,2],[296,6,380,2],[297,0,381,0],[298,0,382,0],[299,4,380,2],[300,6,380,2,"key"],[300,9,380,2],[301,6,380,2,"value"],[301,11,380,2],[301,13,383,2],[301,22,383,9,"startApiCall"],[301,34,383,21,"startApiCall"],[301,35,383,22,"requestId"],[301,44,383,39],[301,46,383,41,"endpoint"],[301,54,383,57],[301,56,383,59,"method"],[301,62,383,73],[301,64,383,81],[302,8,384,4],[302,12,384,8],[302,13,384,9],[302,17,384,13],[302,18,384,14,"shouldTrack"],[302,29,384,25],[302,30,384,26],[302,31,384,27],[302,35,384,31],[302,36,384,32],[302,40,384,36],[302,41,384,37,"config"],[302,47,384,43],[302,48,384,44,"trackingEnabled"],[302,63,384,59],[302,64,384,60,"apiCalls"],[302,72,384,68],[302,74,384,70],[303,8,386,4],[303,12,386,10,"startTime"],[303,21,386,19],[303,24,386,22,"Date"],[303,28,386,26],[303,29,386,27,"now"],[303,32,386,30],[303,33,386,31],[303,34,386,32],[304,8,387,4],[304,12,387,8],[304,13,387,9,"apiCallTimes"],[304,25,387,21],[304,26,387,22,"set"],[304,29,387,25],[304,30,387,26,"requestId"],[304,39,387,35],[304,41,387,37,"startTime"],[304,50,387,46],[304,51,387,47],[305,8,389,4,"EventLogger"],[305,32,389,15],[305,33,389,16,"debug"],[305,38,389,21],[305,39,389,22],[305,59,389,42],[305,61,389,44],[305,90,389,73,"method"],[305,96,389,79],[305,100,389,83,"endpoint"],[305,108,389,91],[305,110,389,93],[305,112,389,95],[306,10,389,97,"requestId"],[307,8,389,107],[307,9,389,108],[307,10,389,109],[308,6,390,2],[310,6,392,2],[311,0,393,0],[312,0,394,0],[313,4,392,2],[314,6,392,2,"key"],[314,9,392,2],[315,6,392,2,"value"],[315,11,392,2],[315,13,395,2],[315,22,395,9,"endApiCall"],[315,32,395,19,"endApiCall"],[315,33,396,4,"requestId"],[315,42,396,21],[315,44,397,4,"endpoint"],[315,52,397,20],[315,54,398,4,"method"],[315,60,398,18],[315,62,399,4,"statusCode"],[315,72,399,22],[315,74,400,4,"error"],[315,79,400,17],[315,81,401,10],[316,8,402,4],[316,12,402,8],[316,13,402,9],[316,17,402,13],[316,18,402,14,"shouldTrack"],[316,29,402,25],[316,30,402,26],[316,31,402,27],[316,35,402,31],[316,36,402,32],[316,40,402,36],[316,41,402,37,"config"],[316,47,402,43],[316,48,402,44,"trackingEnabled"],[316,63,402,59],[316,64,402,60,"apiCalls"],[316,72,402,68],[316,74,402,70],[317,8,404,4],[317,12,404,10,"startTime"],[317,21,404,19],[317,24,404,22],[317,28,404,26],[317,29,404,27,"apiCallTimes"],[317,41,404,39],[317,42,404,40,"get"],[317,45,404,43],[317,46,404,44,"requestId"],[317,55,404,53],[317,56,404,54],[318,8,405,4],[318,12,405,8],[318,13,405,9,"startTime"],[318,22,405,18],[318,24,405,20],[319,10,406,6,"EventLogger"],[319,34,406,17],[319,35,406,18,"warn"],[319,39,406,22],[319,40,406,23],[319,60,406,43],[319,62,406,45],[319,98,406,81,"requestId"],[319,107,406,90],[319,109,406,92],[319,110,406,93],[320,10,407,6],[321,8,408,4],[322,8,410,4],[322,12,410,10,"responseTime"],[322,24,410,22],[322,27,410,25,"Date"],[322,31,410,29],[322,32,410,30,"now"],[322,35,410,33],[322,36,410,34],[322,37,410,35],[322,40,410,38,"startTime"],[322,49,410,47],[323,8,411,4],[323,12,411,8],[323,13,411,9,"apiCallTimes"],[323,25,411,21],[323,26,411,22,"delete"],[323,32,411,28],[323,33,411,29,"requestId"],[323,42,411,38],[323,43,411,39],[324,8,413,4],[324,12,413,8],[324,13,413,9,"trackMetric"],[324,24,413,20],[324,25,413,21],[325,10,414,6,"type"],[325,14,414,10],[325,16,414,12],[325,26,414,22],[326,10,415,6,"name"],[326,14,415,10],[326,16,415,12],[326,35,415,31],[327,10,416,6,"value"],[327,15,416,11],[327,17,416,13,"responseTime"],[327,29,416,25],[328,10,417,6,"unit"],[328,14,417,10],[328,16,417,12],[328,20,417,16],[329,10,418,6,"context"],[329,17,418,13],[329,19,418,15],[330,12,419,8,"api_endpoint"],[330,24,419,20],[330,26,419,22,"endpoint"],[330,34,419,30],[331,12,420,8,"method"],[331,18,420,14],[332,12,421,8,"status_code"],[332,23,421,19],[332,25,421,21,"statusCode"],[332,35,421,31],[333,12,422,8,"success"],[333,19,422,15],[333,21,422,17],[333,22,422,18,"error"],[333,27,422,23],[333,31,422,27,"statusCode"],[333,41,422,37],[333,45,422,41],[333,48,422,44],[333,52,422,48,"statusCode"],[333,62,422,58],[333,65,422,61],[333,68,422,64],[334,12,423,8,"error_message"],[334,25,423,21],[334,27,423,23,"error"],[334,32,423,28],[334,34,423,30,"message"],[335,10,424,6],[336,8,425,4],[336,9,425,5],[336,10,425,6],[338,8,427,4],[339,8,428,4],[339,12,428,8,"responseTime"],[339,24,428,20],[339,27,428,23],[339,31,428,27],[339,32,428,28,"config"],[339,38,428,34],[339,39,428,35,"alertThresholds"],[339,54,428,50],[339,55,428,51,"slowApiResponse"],[339,70,428,66],[339,72,428,68],[340,10,429,6],[340,14,429,10],[340,15,429,11,"createAlert"],[340,26,429,22],[340,27,429,23],[341,12,430,8,"type"],[341,16,430,12],[341,18,430,14],[341,28,430,24],[342,12,431,8,"severity"],[342,20,431,16],[342,22,431,18,"responseTime"],[342,34,431,30],[342,37,431,33],[342,41,431,37],[342,42,431,38,"config"],[342,48,431,44],[342,49,431,45,"alertThresholds"],[342,64,431,60],[342,65,431,61,"slowApiResponse"],[342,80,431,76],[342,83,431,79],[342,84,431,80],[342,87,431,83],[342,93,431,89],[342,96,431,92],[342,104,431,100],[343,12,432,8,"message"],[343,19,432,15],[343,21,432,17],[343,28,432,24,"method"],[343,34,432,30],[343,38,432,34,"endpoint"],[343,46,432,42],[343,63,432,59,"responseTime"],[343,75,432,71],[343,79,432,75],[344,12,433,8,"value"],[344,17,433,13],[344,19,433,15,"responseTime"],[344,31,433,27],[345,12,434,8,"threshold"],[345,21,434,17],[345,23,434,19],[345,27,434,23],[345,28,434,24,"config"],[345,34,434,30],[345,35,434,31,"alertThresholds"],[345,50,434,46],[345,51,434,47,"slowApiResponse"],[345,66,434,62],[346,12,435,8,"context"],[346,19,435,15],[346,21,435,17],[347,14,435,19,"endpoint"],[347,22,435,27],[348,14,435,29,"method"],[348,20,435,35],[349,14,435,37,"status_code"],[349,25,435,48],[349,27,435,50,"statusCode"],[350,12,435,61],[351,10,436,6],[351,11,436,7],[351,12,436,8],[352,8,437,4],[353,8,439,4,"EventLogger"],[353,32,439,15],[353,33,439,16,"networkRequest"],[353,47,439,30],[353,48,439,31,"endpoint"],[353,56,439,39],[353,58,439,41,"method"],[353,64,439,47],[353,66,439,49,"statusCode"],[353,76,439,59],[353,78,439,61,"responseTime"],[353,90,439,73],[353,92,439,75,"error"],[353,97,439,80],[353,98,439,81],[354,6,440,2],[356,6,442,2],[357,0,443,0],[358,0,444,0],[359,4,442,2],[360,6,442,2,"key"],[360,9,442,2],[361,6,442,2,"value"],[361,11,442,2],[361,13,445,2],[361,22,445,9,"trackCustomMetric"],[361,39,445,26,"trackCustomMetric"],[361,40,446,4,"name"],[361,44,446,16],[361,46,447,4,"value"],[361,51,447,17],[361,53,448,4,"unit"],[361,57,448,35],[361,59,449,4,"context"],[361,66,449,33],[361,68,450,10],[362,8,451,4],[362,12,451,8],[362,13,451,9],[362,17,451,13],[362,18,451,14,"shouldTrack"],[362,29,451,25],[362,30,451,26],[362,31,451,27],[362,33,451,29],[363,8,453,4],[363,12,453,8],[363,13,453,9,"trackMetric"],[363,24,453,20],[363,25,453,21],[364,10,454,6,"type"],[364,14,454,10],[364,16,454,12],[364,24,454,20],[365,10,455,6,"name"],[365,14,455,10],[366,10,456,6,"value"],[366,15,456,11],[367,10,457,6,"unit"],[367,14,457,10],[368,10,458,6,"context"],[369,8,459,4],[369,9,459,5],[369,10,459,6],[370,8,461,4,"EventLogger"],[370,32,461,15],[370,33,461,16,"performance"],[370,44,461,27],[370,45,461,28],[370,53,461,36],[370,55,461,38,"name"],[370,59,461,42],[370,61,461,44,"value"],[370,66,461,49],[370,68,461,51,"context"],[370,75,461,58],[370,76,461,59],[371,6,462,2],[373,6,464,2],[374,0,465,0],[375,0,466,0],[376,4,464,2],[377,6,464,2,"key"],[377,9,464,2],[378,6,464,2,"value"],[378,11,464,2],[378,13,467,2],[378,22,467,9,"trackMemoryUsage"],[378,38,467,25,"trackMemoryUsage"],[378,39,467,25],[378,41,467,34],[379,8,468,4],[379,12,468,8],[379,13,468,9],[379,17,468,13],[379,18,468,14,"shouldTrack"],[379,29,468,25],[379,30,468,26],[379,31,468,27],[379,35,468,31],[379,36,468,32],[379,40,468,36],[379,41,468,37,"config"],[379,47,468,43],[379,48,468,44,"trackingEnabled"],[379,63,468,59],[379,64,468,60,"memoryUsage"],[379,75,468,71],[379,77,468,73],[380,8,470,4],[380,12,470,8],[381,10,471,6],[382,10,472,6],[384,10,474,6],[384,14,474,10],[384,21,474,18,"performance"],[384,32,474,29],[384,33,474,38,"memory"],[384,39,474,44],[384,44,474,49],[384,55,474,60],[384,57,474,62],[385,12,475,8],[385,16,475,14,"memInfo"],[385,23,475,21],[385,26,475,25,"performance"],[385,37,475,36],[385,38,475,45,"memory"],[385,44,475,51],[386,12,476,8],[386,16,476,14,"usedMemory"],[386,26,476,24],[386,29,476,27,"memInfo"],[386,36,476,34],[386,37,476,35,"usedJSHeapSize"],[386,51,476,49],[387,12,477,8],[387,16,477,14,"totalMemory"],[387,27,477,25],[387,30,477,28,"memInfo"],[387,37,477,35],[387,38,477,36,"totalJSHeapSize"],[387,53,477,51],[388,12,478,8],[388,16,478,14,"memoryPercent"],[388,29,478,27],[388,32,478,31,"usedMemory"],[388,42,478,41],[388,45,478,44,"totalMemory"],[388,56,478,55],[388,59,478,59],[388,62,478,62],[389,12,480,8],[389,16,480,12],[389,17,480,13,"trackMetric"],[389,28,480,24],[389,29,480,25],[390,14,481,10,"type"],[390,18,481,14],[390,20,481,16],[390,34,481,30],[391,14,482,10,"name"],[391,18,482,14],[391,20,482,16],[391,35,482,31],[392,14,483,10,"value"],[392,19,483,15],[392,21,483,17,"usedMemory"],[392,31,483,27],[393,14,484,10,"unit"],[393,18,484,14],[393,20,484,16],[393,27,484,23],[394,14,485,10,"context"],[394,21,485,17],[394,23,485,19],[395,16,486,12,"total_memory"],[395,28,486,24],[395,30,486,26,"totalMemory"],[395,41,486,37],[396,16,487,12,"usage_percent"],[396,29,487,25],[396,31,487,27,"memoryPercent"],[396,44,487,40],[397,16,488,12,"memory_pressure"],[397,31,488,27],[397,33,488,29,"memoryPercent"],[397,46,488,42],[397,49,488,45],[397,53,488,49],[397,54,488,50,"config"],[397,60,488,56],[397,61,488,57,"alertThresholds"],[397,76,488,72],[397,77,488,73,"memoryUsagePercent"],[398,14,489,10],[399,12,490,8],[399,13,490,9],[399,14,490,10],[401,12,492,8],[402,12,493,8],[402,16,493,12,"memoryPercent"],[402,29,493,25],[402,32,493,28],[402,36,493,32],[402,37,493,33,"config"],[402,43,493,39],[402,44,493,40,"alertThresholds"],[402,59,493,55],[402,60,493,56,"memoryUsagePercent"],[402,78,493,74],[402,80,493,76],[403,14,494,10],[403,18,494,14],[403,19,494,15,"createAlert"],[403,30,494,26],[403,31,494,27],[404,16,495,12,"type"],[404,20,495,16],[404,22,495,18],[404,38,495,34],[405,16,496,12,"severity"],[405,24,496,20],[405,26,496,22,"memoryPercent"],[405,39,496,35],[405,42,496,38],[405,44,496,40],[405,47,496,43],[405,53,496,49],[405,56,496,52],[405,64,496,60],[406,16,497,12,"message"],[406,23,497,19],[406,25,497,21],[406,44,497,40,"memoryPercent"],[406,57,497,53],[406,58,497,54,"toFixed"],[406,65,497,61],[406,66,497,62],[406,67,497,63],[406,68,497,64],[406,71,497,67],[407,16,498,12,"value"],[407,21,498,17],[407,23,498,19,"memoryPercent"],[407,36,498,32],[408,16,499,12,"threshold"],[408,25,499,21],[408,27,499,23],[408,31,499,27],[408,32,499,28,"config"],[408,38,499,34],[408,39,499,35,"alertThresholds"],[408,54,499,50],[408,55,499,51,"memoryUsagePercent"],[409,14,500,10],[409,15,500,11],[409,16,500,12],[410,12,501,8],[411,10,502,6],[412,8,503,4],[412,9,503,5],[412,10,503,6],[412,17,503,13,"error"],[412,22,503,18],[412,24,503,20],[413,10,504,6,"EventLogger"],[413,34,504,17],[413,35,504,18,"error"],[413,40,504,23],[413,41,504,24],[413,61,504,44],[413,63,504,46],[413,93,504,76],[413,95,504,78,"error"],[413,100,504,92],[413,101,504,93],[414,8,505,4],[415,6,506,2],[417,6,508,2],[418,0,509,0],[419,0,510,0],[420,4,508,2],[421,6,508,2,"key"],[421,9,508,2],[422,6,508,2,"value"],[422,11,508,2],[422,13,511,2],[422,22,511,9,"trackBatteryUsage"],[422,39,511,26,"trackBatteryUsage"],[422,40,511,26],[422,42,511,35],[423,8,512,4],[423,12,512,8],[423,13,512,9],[423,17,512,13],[423,18,512,14,"shouldTrack"],[423,29,512,25],[423,30,512,26],[423,31,512,27],[423,35,512,31],[423,36,512,32],[423,40,512,36],[423,41,512,37,"config"],[423,47,512,43],[423,48,512,44,"trackingEnabled"],[423,63,512,59],[423,64,512,60,"batteryUsage"],[423,76,512,72],[423,78,512,74],[425,8,514,4],[426,8,515,4],[427,8,516,4],[428,8,517,4],[429,8,518,4],[430,8,519,4],[431,8,520,4],[432,8,521,4],[433,8,522,4],[434,8,523,4],[435,8,524,4],[436,8,525,4],[437,8,526,4],[438,8,527,4],[439,8,528,4],[440,8,529,4],[441,8,530,4],[442,8,531,4],[443,8,532,4],[444,6,533,2],[446,6,535,2],[447,0,536,0],[448,0,537,0],[449,4,535,2],[450,6,535,2,"key"],[450,9,535,2],[451,6,535,2,"value"],[451,11,535,2],[451,13,538,2],[451,22,538,9,"getPerformanceSummary"],[451,43,538,30,"getPerformanceSummary"],[451,44,538,30],[451,46,538,53],[452,8,539,4],[452,12,539,10,"summary"],[452,19,539,37],[452,22,539,40],[453,10,540,6,"app_launch_time"],[453,25,540,21],[453,27,540,23],[453,31,540,27],[453,32,540,28,"calculateStats"],[453,46,540,42],[453,47,540,43],[453,51,540,47],[453,52,540,48,"metrics"],[453,59,540,55],[453,60,540,56,"filter"],[453,66,540,62],[453,67,540,63,"m"],[453,68,540,64],[453,72,540,68,"m"],[453,73,540,69],[453,74,540,70,"name"],[453,78,540,74],[453,83,540,79],[453,100,540,96],[453,101,540,97],[453,102,540,98],[454,10,541,6,"screen_render_times"],[454,29,541,25],[454,31,541,27],[454,35,541,31],[454,36,541,32,"groupScreenRenderStats"],[454,58,541,54],[454,59,541,55],[454,60,541,56],[455,10,542,6,"api_performance"],[455,25,542,21],[455,27,542,23],[455,31,542,27],[455,32,542,28,"groupApiPerformanceStats"],[455,56,542,52],[455,57,542,53],[455,58,542,54],[456,10,543,6,"memory_usage"],[456,22,543,18],[456,24,543,20],[456,28,543,24],[456,29,543,25,"calculateMemoryStats"],[456,49,543,45],[456,50,543,46],[456,51,543,47],[457,10,544,6,"battery_impact"],[457,24,544,20],[457,26,544,22],[457,30,544,26],[457,31,544,27,"calculateBatteryStats"],[457,52,544,48],[457,53,544,49],[457,54,544,50],[458,10,545,6,"frame_rate"],[458,20,545,16],[458,22,545,18],[458,26,545,22],[458,27,545,23,"calculateFrameRateStats"],[458,50,545,46],[458,51,545,47],[459,8,546,4],[459,9,546,5],[460,8,548,4],[460,15,548,11,"summary"],[460,22,548,18],[461,6,549,2],[463,6,551,2],[464,0,552,0],[465,0,553,0],[466,4,551,2],[467,6,551,2,"key"],[467,9,551,2],[468,6,551,2,"value"],[468,11,551,2],[468,13,554,2],[468,22,554,9,"getRecentAlerts"],[468,37,554,24,"getRecentAlerts"],[468,38,554,24],[468,40,554,65],[469,8,554,65],[469,12,554,25,"limit"],[469,17,554,38],[469,20,554,38,"arguments"],[469,29,554,38],[469,30,554,38,"length"],[469,36,554,38],[469,44,554,38,"arguments"],[469,53,554,38],[469,61,554,38,"undefined"],[469,70,554,38],[469,73,554,38,"arguments"],[469,82,554,38],[469,88,554,41],[469,90,554,43],[470,8,555,4],[470,15,555,11],[470,19,555,15],[470,20,555,16,"alerts"],[470,26,555,22],[470,27,556,7,"sort"],[470,31,556,11],[470,32,556,12],[470,33,556,13,"a"],[470,34,556,14],[470,36,556,16,"b"],[470,37,556,17],[470,42,556,22],[470,46,556,26,"Date"],[470,50,556,30],[470,51,556,31,"b"],[470,52,556,32],[470,53,556,33,"timestamp"],[470,62,556,42],[470,63,556,43],[470,64,556,44,"getTime"],[470,71,556,51],[470,72,556,52],[470,73,556,53],[470,76,556,56],[470,80,556,60,"Date"],[470,84,556,64],[470,85,556,65,"a"],[470,86,556,66],[470,87,556,67,"timestamp"],[470,96,556,76],[470,97,556,77],[470,98,556,78,"getTime"],[470,105,556,85],[470,106,556,86],[470,107,556,87],[470,108,556,88],[470,109,557,7,"slice"],[470,114,557,12],[470,115,557,13],[470,116,557,14],[470,118,557,16,"limit"],[470,123,557,21],[470,124,557,22],[471,6,558,2],[473,6,560,2],[474,0,561,0],[475,0,562,0],[476,4,560,2],[477,6,560,2,"key"],[477,9,560,2],[478,6,560,2,"value"],[478,11,560,2],[478,13,563,2],[478,22,563,9,"clearData"],[478,31,563,18,"clearData"],[478,32,563,18],[478,34,563,27],[479,8,564,4],[479,12,564,8],[479,13,564,9,"metrics"],[479,20,564,16],[479,23,564,19],[479,25,564,21],[480,8,565,4],[480,12,565,8],[480,13,565,9,"alerts"],[480,19,565,15],[480,22,565,18],[480,24,565,20],[481,8,566,4,"EventLogger"],[481,32,566,15],[481,33,566,16,"info"],[481,37,566,20],[481,38,566,21],[481,58,566,41],[481,60,566,43],[481,86,566,69],[481,87,566,70],[482,6,567,2],[484,6,569,2],[485,0,570,0],[486,0,571,0],[487,4,569,2],[488,6,569,2,"key"],[488,9,569,2],[489,6,569,2,"value"],[489,11,569,2],[489,13,572,2],[489,22,572,9,"exportData"],[489,32,572,19,"exportData"],[489,33,572,19],[489,35,572,84],[490,8,573,4],[490,15,573,11],[491,10,574,6,"metrics"],[491,17,574,13],[491,19,574,15],[491,20,574,16],[491,23,574,19],[491,27,574,23],[491,28,574,24,"metrics"],[491,35,574,31],[491,36,574,32],[492,10,575,6,"alerts"],[492,16,575,12],[492,18,575,14],[492,19,575,15],[492,22,575,18],[492,26,575,22],[492,27,575,23,"alerts"],[492,33,575,29],[493,8,576,4],[493,9,576,5],[494,6,577,2],[496,6,579,2],[497,0,580,0],[498,0,581,0],[499,4,579,2],[500,6,579,2,"key"],[500,9,579,2],[501,6,579,2,"value"],[501,11,579,2],[501,13,582,2],[501,22,582,10,"trackMetric"],[501,33,582,21,"trackMetric"],[501,34,582,22,"metricData"],[501,44,582,77],[501,46,582,85],[502,8,583,4],[502,12,583,10,"metric"],[502,18,583,35],[502,21,583,38],[503,10,584,6,"id"],[503,12,584,8],[503,14,584,10],[503,18,584,14],[503,19,584,15,"generateMetricId"],[503,35,584,31],[503,36,584,32],[503,37,584,33],[504,10,585,6,"timestamp"],[504,19,585,15],[504,21,585,17],[504,25,585,21,"Date"],[504,29,585,25],[504,30,585,26],[504,31,585,27],[504,32,585,28,"toISOString"],[504,43,585,39],[504,44,585,40],[504,45,585,41],[505,10,586,6,"context"],[505,17,586,13],[505,19,586,15],[506,12,587,8,"session_id"],[506,22,587,18],[506,24,587,20],[506,28,587,24],[506,29,587,25,"sessionId"],[506,38,587,34],[507,12,588,8],[507,15,588,11,"metricData"],[507,25,588,21],[507,26,588,22,"context"],[508,10,589,6],[508,11,589,7],[509,10,590,6],[509,13,590,9,"metricData"],[510,8,591,4],[510,9,591,5],[511,8,593,4],[511,12,593,8],[511,13,593,9,"metrics"],[511,20,593,16],[511,21,593,17,"push"],[511,25,593,21],[511,26,593,22,"metric"],[511,32,593,28],[511,33,593,29],[512,8,594,4],[512,12,594,8],[512,13,594,9,"metricQueue"],[512,24,594,20],[512,25,594,21,"push"],[512,29,594,25],[512,30,594,26,"metric"],[512,36,594,32],[512,37,594,33],[514,8,596,4],[515,8,597,4],[515,12,597,8],[515,16,597,12],[515,17,597,13,"metrics"],[515,24,597,20],[515,25,597,21,"length"],[515,31,597,27],[515,34,597,30],[515,38,597,34],[515,40,597,36],[516,10,598,6],[516,14,598,10],[516,15,598,11,"metrics"],[516,22,598,18],[516,25,598,21],[516,29,598,25],[516,30,598,26,"metrics"],[516,37,598,33],[516,38,598,34,"slice"],[516,43,598,39],[516,49,598,45],[516,50,598,46],[517,8,599,4],[519,8,601,4],[520,8,602,4],[520,12,602,8],[520,16,602,12],[520,17,602,13,"metricQueue"],[520,28,602,24],[520,29,602,25,"length"],[520,35,602,31],[520,39,602,35],[520,41,602,37],[520,43,602,39],[521,10,603,6],[521,14,603,10],[521,15,603,11,"flushMetrics"],[521,27,603,23],[521,28,603,24],[521,29,603,25],[522,8,604,4],[523,6,605,2],[525,6,607,2],[526,0,608,0],[527,0,609,0],[528,4,607,2],[529,6,607,2,"key"],[529,9,607,2],[530,6,607,2,"value"],[530,11,607,2],[530,13,610,2],[530,22,610,10,"createAlert"],[530,33,610,21,"createAlert"],[530,34,610,22,"alertData"],[530,43,610,75],[530,45,610,83],[531,8,611,4],[531,12,611,10,"alert"],[531,17,611,33],[531,20,611,36],[532,10,612,6,"id"],[532,12,612,8],[532,14,612,10],[532,18,612,14],[532,19,612,15,"generateAlertId"],[532,34,612,30],[532,35,612,31],[532,36,612,32],[533,10,613,6,"timestamp"],[533,19,613,15],[533,21,613,17],[533,25,613,21,"Date"],[533,29,613,25],[533,30,613,26],[533,31,613,27],[533,32,613,28,"toISOString"],[533,43,613,39],[533,44,613,40],[533,45,613,41],[534,10,614,6],[534,13,614,9,"alertData"],[535,8,615,4],[535,9,615,5],[536,8,617,4],[536,12,617,8],[536,13,617,9,"alerts"],[536,19,617,15],[536,20,617,16,"push"],[536,24,617,20],[536,25,617,21,"alert"],[536,30,617,26],[536,31,617,27],[538,8,619,4],[539,8,620,4],[539,12,620,8],[539,16,620,12],[539,17,620,13,"alerts"],[539,23,620,19],[539,24,620,20,"length"],[539,30,620,26],[539,33,620,29],[539,36,620,32],[539,38,620,34],[540,10,621,6],[540,14,621,10],[540,15,621,11,"alerts"],[540,21,621,17],[540,24,621,20],[540,28,621,24],[540,29,621,25,"alerts"],[540,35,621,31],[540,36,621,32,"slice"],[540,41,621,37],[540,46,621,42],[540,47,621,43],[541,8,622,4],[543,8,624,4],[544,8,625,4],[544,12,625,8],[544,13,625,9],[544,17,625,13],[544,18,625,14,"databaseAvailable"],[544,35,625,31],[544,37,625,33],[545,10,626,6],[545,14,626,10],[545,15,626,11,"storeOfflineAlerts"],[545,33,626,29],[545,34,626,30],[545,35,626,31,"alert"],[545,40,626,36],[545,41,626,37],[545,42,626,38],[545,43,626,39,"catch"],[545,48,626,44],[545,49,626,45,"error"],[545,54,626,50],[545,58,626,54],[546,12,627,8,"EventLogger"],[546,36,627,19],[546,37,627,20,"error"],[546,42,627,25],[546,43,627,26],[546,63,627,46],[546,65,627,48],[546,96,627,79],[546,98,627,81,"error"],[546,103,627,95],[546,104,627,96],[547,10,628,6],[547,11,628,7],[547,12,628,8],[548,8,629,4],[549,8,631,4,"EventLogger"],[549,32,631,15],[549,33,631,16,"warn"],[549,37,631,20],[549,38,631,21],[549,58,631,41],[549,60,631,43],[549,82,631,65,"alert"],[549,87,631,70],[549,88,631,71,"message"],[549,95,631,78],[549,97,631,80],[549,99,631,82],[550,10,632,6,"type"],[550,14,632,10],[550,16,632,12,"alert"],[550,21,632,17],[550,22,632,18,"type"],[550,26,632,22],[551,10,633,6,"severity"],[551,18,633,14],[551,20,633,16,"alert"],[551,25,633,21],[551,26,633,22,"severity"],[551,34,633,30],[552,10,634,6,"value"],[552,15,634,11],[552,17,634,13,"alert"],[552,22,634,18],[552,23,634,19,"value"],[552,28,634,24],[553,10,635,6,"threshold"],[553,19,635,15],[553,21,635,17,"alert"],[553,26,635,22],[553,27,635,23,"threshold"],[554,8,636,4],[554,9,636,5],[554,10,636,6],[555,6,637,2],[557,6,639,2],[558,0,640,0],[559,0,641,0],[560,4,639,2],[561,6,639,2,"key"],[561,9,639,2],[562,6,639,2,"value"],[562,11,639,2],[562,13,642,2],[562,22,642,10,"setupMemoryMonitoring"],[562,43,642,31,"setupMemoryMonitoring"],[562,44,642,31],[562,46,642,40],[563,8,643,4],[563,12,643,8],[563,13,643,9,"memoryCheckInterval"],[563,32,643,28],[563,35,643,31,"setInterval"],[563,46,643,42],[563,47,643,43],[563,53,643,49],[564,10,644,6],[564,14,644,10],[564,15,644,11,"trackMemoryUsage"],[564,31,644,27],[564,32,644,28],[564,33,644,29],[565,8,645,4],[565,9,645,5],[565,11,645,7],[565,16,645,12],[565,17,645,13],[565,18,645,14],[565,19,645,15],[566,6,646,2],[568,6,648,2],[569,0,649,0],[570,0,650,0],[571,4,648,2],[572,6,648,2,"key"],[572,9,648,2],[573,6,648,2,"value"],[573,11,648,2],[573,13,651,2],[573,22,651,10,"setupFrameRateMonitoring"],[573,46,651,34,"setupFrameRateMonitoring"],[573,47,651,34],[573,49,651,43],[574,8,652,4],[575,8,653,4],[576,8,654,4,"EventLogger"],[576,32,654,15],[576,33,654,16,"debug"],[576,38,654,21],[576,39,654,22],[576,59,654,42],[576,61,654,44],[576,115,654,98],[576,116,654,99],[577,6,655,2],[579,6,657,2],[580,0,658,0],[581,0,659,0],[582,4,657,2],[583,6,657,2,"key"],[583,9,657,2],[584,6,657,2,"value"],[584,11,657,2],[584,13,660,2],[584,22,660,10,"setupPeriodicFlush"],[584,40,660,28,"setupPeriodicFlush"],[584,41,660,28],[584,43,660,37],[585,8,661,4],[586,8,662,4,"setTimeout"],[586,18,662,14],[586,19,662,15],[586,25,662,21],[587,10,663,6,"setInterval"],[587,21,663,17],[587,22,663,18],[587,28,663,24],[588,12,664,8],[588,16,664,12],[588,20,664,16],[588,21,664,17,"isInitialized"],[588,34,664,30],[588,38,664,34],[588,42,664,38],[588,43,664,39,"config"],[588,49,664,45],[588,50,664,46,"enabled"],[588,57,664,53],[588,61,664,57],[588,65,664,61],[588,66,664,62,"metricQueue"],[588,77,664,73],[588,78,664,74,"length"],[588,84,664,80],[588,87,664,83],[588,88,664,84],[588,90,664,86],[589,14,665,10,"EventLogger"],[589,38,665,21],[589,39,665,22,"debug"],[589,44,665,27],[589,45,665,28],[589,65,665,48],[589,67,665,50],[589,93,665,76],[589,95,665,78],[590,16,665,80,"queueLength"],[590,27,665,91],[590,29,665,93],[590,33,665,97],[590,34,665,98,"metricQueue"],[590,45,665,109],[590,46,665,110,"length"],[591,14,665,117],[591,15,665,118],[591,16,665,119],[592,14,666,10],[592,18,666,14],[592,19,666,15,"flushMetrics"],[592,31,666,27],[592,32,666,28],[592,33,666,29],[592,34,666,30,"catch"],[592,39,666,35],[592,40,666,36,"error"],[592,45,666,41],[592,49,666,45],[593,16,667,12,"EventLogger"],[593,40,667,23],[593,41,667,24,"error"],[593,46,667,29],[593,47,667,30],[593,67,667,50],[593,69,667,52],[593,92,667,75],[593,94,667,77,"error"],[593,99,667,91],[593,100,667,92],[594,14,668,10],[594,15,668,11],[594,16,668,12],[595,12,669,8],[596,10,670,6],[596,11,670,7],[596,13,670,9],[596,18,670,14],[596,19,670,15],[596,20,670,16],[596,21,670,17],[597,8,671,4],[597,9,671,5],[597,11,671,7],[597,15,671,11],[597,16,671,12],[597,17,671,13],[597,18,671,14],[598,6,672,2],[600,6,674,2],[601,0,675,0],[602,0,676,0],[603,4,674,2],[604,6,674,2,"key"],[604,9,674,2],[605,6,674,2,"value"],[605,11,674,2],[606,8,674,2],[606,12,674,2,"_flush"],[606,18,674,2],[606,25,674,2,"_asyncToGenerator2"],[606,43,674,2],[606,44,674,2,"default"],[606,51,674,2],[606,53,677,2],[606,66,677,38],[607,10,678,4],[607,14,678,8],[607,15,678,9],[607,19,678,13],[607,20,678,14,"isInitialized"],[607,33,678,27],[607,35,678,29],[608,12,679,6,"EventLogger"],[608,36,679,17],[608,37,679,18,"warn"],[608,41,679,22],[608,42,679,23],[608,62,679,43],[608,64,679,45],[608,100,679,81],[608,101,679,82],[609,12,680,6],[610,10,681,4],[611,10,682,4],[611,17,682,11],[611,21,682,15],[611,22,682,16,"flushMetrics"],[611,34,682,28],[611,35,682,29],[611,36,682,30],[612,8,683,2],[612,9,683,3],[613,8,683,3],[613,17,677,15,"flush"],[613,22,677,20,"flush"],[613,23,677,20],[614,10,677,20],[614,17,677,20,"_flush"],[614,23,677,20],[614,24,677,20,"apply"],[614,29,677,20],[614,36,677,20,"arguments"],[614,45,677,20],[615,8,677,20],[616,8,677,20],[616,15,677,15,"flush"],[616,20,677,20],[617,6,677,20],[618,6,685,2],[619,0,686,0],[620,0,687,0],[621,6,685,2],[622,4,685,2],[623,6,685,2,"key"],[623,9,685,2],[624,6,685,2,"value"],[624,11,685,2],[625,8,685,2],[625,12,685,2,"_flushMetrics"],[625,25,685,2],[625,32,685,2,"_asyncToGenerator2"],[625,50,685,2],[625,51,685,2,"default"],[625,58,685,2],[625,60,688,2],[625,73,688,46],[626,10,689,4],[626,14,689,8],[626,15,689,9],[626,19,689,13],[626,20,689,14,"config"],[626,26,689,20],[626,27,689,21,"enabled"],[626,34,689,28],[626,38,689,32],[626,39,689,33],[626,43,689,37],[626,44,689,38,"isInitialized"],[626,57,689,51],[626,61,689,55],[626,65,689,59],[626,66,689,60,"isFlushingMetrics"],[626,83,689,77],[626,87,689,81],[626,91,689,85],[626,92,689,86,"metricQueue"],[626,103,689,97],[626,104,689,98,"length"],[626,110,689,104],[626,115,689,109],[626,116,689,110],[626,118,689,112],[627,12,690,6,"EventLogger"],[627,36,690,17],[627,37,690,18,"debug"],[627,42,690,23],[627,43,690,24],[627,63,690,44],[627,65,690,46],[627,81,690,62],[627,83,690,64],[628,14,691,8,"enabled"],[628,21,691,15],[628,23,691,17],[628,27,691,21],[628,28,691,22,"config"],[628,34,691,28],[628,35,691,29,"enabled"],[628,42,691,36],[629,14,692,8,"initialized"],[629,25,692,19],[629,27,692,21],[629,31,692,25],[629,32,692,26,"isInitialized"],[629,45,692,39],[630,14,693,8,"flushing"],[630,22,693,16],[630,24,693,18],[630,28,693,22],[630,29,693,23,"isFlushingMetrics"],[630,46,693,40],[631,14,694,8,"queueLength"],[631,25,694,19],[631,27,694,21],[631,31,694,25],[631,32,694,26,"metricQueue"],[631,43,694,37],[631,44,694,38,"length"],[632,12,695,6],[632,13,695,7],[632,14,695,8],[633,12,696,6],[634,10,697,4],[636,10,699,4],[637,10,700,4],[637,14,700,8],[637,15,700,9],[637,19,700,13],[637,20,700,14,"databaseAvailable"],[637,37,700,31],[637,39,700,33],[638,12,701,6],[638,16,701,12,"metrics"],[638,24,701,19],[638,27,701,22],[638,28,701,23],[638,31,701,26],[638,35,701,30],[638,36,701,31,"metricQueue"],[638,47,701,42],[638,48,701,43],[639,12,702,6],[639,16,702,10],[639,17,702,11,"metricQueue"],[639,28,702,22],[639,31,702,25],[639,33,702,27],[640,12,703,6],[640,18,703,12],[640,22,703,16],[640,23,703,17,"storeOfflineMetrics"],[640,42,703,36],[640,43,703,37,"metrics"],[640,51,703,44],[640,52,703,45],[641,12,704,6,"EventLogger"],[641,36,704,17],[641,37,704,18,"debug"],[641,42,704,23],[641,43,704,24],[641,63,704,44],[641,65,704,46],[641,114,704,95],[641,116,704,97],[642,14,704,99,"count"],[642,19,704,104],[642,21,704,106,"metrics"],[642,29,704,113],[642,30,704,114,"length"],[643,12,704,121],[643,13,704,122],[643,14,704,123],[644,12,705,6],[645,10,706,4],[646,10,708,4],[646,14,708,8],[646,15,708,9,"isFlushingMetrics"],[646,32,708,26],[646,35,708,29],[646,39,708,33],[647,10,709,4],[647,14,709,10,"metrics"],[647,21,709,17],[647,24,709,20],[647,25,709,21],[647,28,709,24],[647,32,709,28],[647,33,709,29,"metricQueue"],[647,44,709,40],[647,45,709,41],[648,10,710,4],[648,14,710,8],[648,15,710,9,"metricQueue"],[648,26,710,20],[648,29,710,23],[648,31,710,25],[649,10,712,4],[649,14,712,8],[650,12,713,6],[650,18,713,12],[650,22,713,16],[650,23,713,17,"sendMetrics"],[650,34,713,28],[650,35,713,29,"metrics"],[650,42,713,36],[650,43,713,37],[651,12,714,6,"EventLogger"],[651,36,714,17],[651,37,714,18,"info"],[651,41,714,22],[651,42,714,23],[651,62,714,43],[651,64,714,45],[651,94,714,75],[651,96,714,77],[652,14,714,79,"count"],[652,19,714,84],[652,21,714,86,"metrics"],[652,28,714,93],[652,29,714,94,"length"],[653,12,714,101],[653,13,714,102],[653,14,714,103],[654,10,716,4],[654,11,716,5],[654,12,716,6],[654,19,716,13,"error"],[654,24,716,18],[654,26,716,20],[655,12,717,6],[656,12,718,6],[656,16,718,10],[656,17,718,11,"metricQueue"],[656,28,718,22],[656,29,718,23,"unshift"],[656,36,718,30],[656,37,718,31],[656,40,718,34,"metrics"],[656,47,718,41],[656,48,718,42],[657,12,719,6],[657,18,719,12],[657,22,719,16],[657,23,719,17,"storeOfflineMetrics"],[657,42,719,36],[657,43,719,37,"metrics"],[657,50,719,44],[657,51,719,45],[659,12,721,6],[660,12,722,6],[660,16,722,12,"errorDetails"],[660,28,722,24],[660,31,722,27],[661,14,723,8,"name"],[661,18,723,12],[661,20,723,14,"error"],[661,25,723,19],[661,37,723,31,"Error"],[661,42,723,36],[661,45,723,39,"error"],[661,50,723,44],[661,51,723,45,"name"],[661,55,723,49],[661,58,723,52],[661,72,723,66],[662,14,724,8,"message"],[662,21,724,15],[662,23,724,17,"error"],[662,28,724,22],[662,40,724,34,"Error"],[662,45,724,39],[662,48,724,42,"error"],[662,53,724,47],[662,54,724,48,"message"],[662,61,724,55],[662,64,724,58,"String"],[662,70,724,64],[662,71,724,65,"error"],[662,76,724,70],[662,77,724,71],[663,14,725,8,"stack"],[663,19,725,13],[663,21,725,15,"error"],[663,26,725,20],[663,38,725,32,"Error"],[663,43,725,37],[663,46,725,40,"error"],[663,51,725,45],[663,52,725,46,"stack"],[663,57,725,51],[663,60,725,54,"undefined"],[663,69,725,63],[664,14,726,8,"metricCount"],[664,25,726,19],[664,27,726,21,"metrics"],[664,34,726,28],[664,35,726,29,"length"],[664,41,726,35],[665,14,727,8,"isSupabaseError"],[665,29,727,23],[665,31,727,25,"error"],[665,36,727,30],[665,40,727,34],[665,47,727,41,"error"],[665,52,727,46],[665,57,727,51],[665,65,727,59],[665,69,727,63],[665,75,727,69],[665,79,727,73,"error"],[665,84,727,78],[666,14,728,8,"errorCode"],[666,23,728,17],[666,25,728,19,"error"],[666,30,728,24],[666,34,728,28],[666,41,728,35,"error"],[666,46,728,40],[666,51,728,45],[666,59,728,53],[666,63,728,57],[666,69,728,63],[666,73,728,67,"error"],[666,78,728,72],[666,81,728,76,"error"],[666,86,728,81],[666,87,728,90,"code"],[666,91,728,94],[666,94,728,97,"undefined"],[667,12,729,6],[667,13,729,7],[668,12,731,6,"EventLogger"],[668,36,731,17],[668,37,731,18,"error"],[668,42,731,23],[668,43,731,24],[668,63,731,44],[668,65,731,46],[668,107,731,88],[668,109,731,90,"errorDetails"],[668,121,731,109],[668,122,731,110],[669,10,732,4],[669,11,732,5],[669,20,732,14],[670,12,733,6],[670,16,733,10],[670,17,733,11,"isFlushingMetrics"],[670,34,733,28],[670,37,733,31],[670,42,733,36],[671,10,734,4],[672,8,735,2],[672,9,735,3],[673,8,735,3],[673,17,688,16,"flushMetrics"],[673,29,688,28,"flushMetrics"],[673,30,688,28],[674,10,688,28],[674,17,688,28,"_flushMetrics"],[674,30,688,28],[674,31,688,28,"apply"],[674,36,688,28],[674,43,688,28,"arguments"],[674,52,688,28],[675,8,688,28],[676,8,688,28],[676,15,688,16,"flushMetrics"],[676,27,688,28],[677,6,688,28],[678,6,737,2],[679,0,738,0],[680,0,739,0],[681,6,737,2],[682,4,737,2],[683,6,737,2,"key"],[683,9,737,2],[684,6,737,2,"value"],[684,11,737,2],[685,8,737,2],[685,12,737,2,"_sendMetrics"],[685,24,737,2],[685,31,737,2,"_asyncToGenerator2"],[685,49,737,2],[685,50,737,2,"default"],[685,57,737,2],[685,59,740,2],[685,70,740,28,"metrics"],[685,77,740,56],[685,79,740,73],[686,10,741,4],[687,10,742,4],[687,14,742,8],[687,15,742,9,"supabase"],[687,31,742,17],[687,33,742,19],[688,12,743,6],[688,18,743,12],[688,22,743,16,"Error"],[688,27,743,21],[688,28,743,22],[688,61,743,55],[688,62,743,56],[689,10,744,4],[691,10,746,4],[692,10,747,4],[694,10,749,4],[694,14,749,10,"errors"],[694,20,749,25],[694,23,749,28],[694,25,749,30],[695,10,750,4],[695,14,750,10,"results"],[695,21,750,17],[695,30,750,26,"Promise"],[695,37,750,33],[695,38,750,34,"allSettled"],[695,48,750,44],[695,49,750,45,"metrics"],[695,56,750,52],[695,57,750,53,"map"],[695,60,750,56],[696,12,750,56],[696,16,750,56,"_ref"],[696,20,750,56],[696,27,750,56,"_asyncToGenerator2"],[696,45,750,56],[696,46,750,56,"default"],[696,53,750,56],[696,55,750,57],[696,66,750,64,"metric"],[696,72,750,70],[696,74,750,75],[697,14,751,6],[697,18,751,10],[698,16,752,8],[698,20,752,8,"_yield$supabase$from$2"],[698,42,752,8],[698,51,752,32,"supabase"],[698,67,752,40],[698,68,753,11,"from"],[698,72,753,15],[698,73,753,16],[698,94,753,37],[698,95,753,38],[698,96,754,11,"insert"],[698,102,754,17],[698,103,754,18],[699,20,755,12,"id"],[699,22,755,14],[699,24,755,16,"metric"],[699,30,755,22],[699,31,755,23,"id"],[699,33,755,25],[700,20,756,12,"timestamp"],[700,29,756,21],[700,31,756,23,"metric"],[700,37,756,29],[700,38,756,30,"timestamp"],[700,47,756,39],[701,20,757,12,"type"],[701,24,757,16],[701,26,757,18,"metric"],[701,32,757,24],[701,33,757,25,"type"],[701,37,757,29],[702,20,758,12,"name"],[702,24,758,16],[702,26,758,18,"metric"],[702,32,758,24],[702,33,758,25,"name"],[702,37,758,29],[703,20,759,12,"value"],[703,25,759,17],[703,27,759,19,"metric"],[703,33,759,25],[703,34,759,26,"value"],[703,39,759,31],[704,20,760,12,"unit"],[704,24,760,16],[704,26,760,18,"metric"],[704,32,760,24],[704,33,760,25,"unit"],[704,37,760,29],[705,20,761,12,"context"],[705,27,761,19],[705,29,761,21,"metric"],[705,35,761,27],[705,36,761,28,"context"],[705,43,761,35],[706,20,762,12,"tags"],[706,24,762,16],[706,26,762,18,"metric"],[706,32,762,24],[706,33,762,25,"tags"],[707,18,763,10],[707,19,763,11],[707,20,763,12],[708,18,752,16,"error"],[708,23,752,21],[708,26,752,21,"_yield$supabase$from$2"],[708,48,752,21],[708,49,752,16,"error"],[708,54,752,21],[709,16,765,8],[709,20,765,12,"error"],[709,25,765,17],[709,27,765,19],[710,18,766,10,"EventLogger"],[710,42,766,21],[710,43,766,22,"error"],[710,48,766,27],[710,49,766,28],[710,69,766,48],[710,71,766,50],[710,98,766,77,"metric"],[710,104,766,83],[710,105,766,84,"id"],[710,107,766,86],[710,109,766,88],[710,111,766,90],[711,20,767,12,"supabaseError"],[711,33,767,25],[711,35,767,27,"error"],[711,40,767,32],[712,20,768,12,"errorCode"],[712,29,768,21],[712,31,768,23,"error"],[712,36,768,28],[712,37,768,29,"code"],[712,41,768,33],[713,20,769,12,"errorMessage"],[713,32,769,24],[713,34,769,26,"error"],[713,39,769,31],[713,40,769,32,"message"],[713,47,769,39],[714,20,770,12,"metricId"],[714,28,770,20],[714,30,770,22,"metric"],[714,36,770,28],[714,37,770,29,"id"],[715,18,771,10],[715,19,771,18],[715,20,771,19],[716,18,772,10],[716,24,772,16],[716,28,772,20,"Error"],[716,33,772,25],[716,34,772,26],[716,53,772,45,"error"],[716,58,772,50],[716,59,772,51,"message"],[716,66,772,58],[716,77,772,69,"error"],[716,82,772,74],[716,83,772,75,"code"],[716,87,772,79],[716,90,772,82],[716,91,772,83],[717,16,773,8],[718,16,775,8],[718,23,775,15],[719,18,775,17,"success"],[719,25,775,24],[719,27,775,26],[719,31,775,30],[720,18,775,32,"metricId"],[720,26,775,40],[720,28,775,42,"metric"],[720,34,775,48],[720,35,775,49,"id"],[721,16,775,52],[721,17,775,53],[722,14,776,6],[722,15,776,7],[722,16,776,8],[722,23,776,15,"insertError"],[722,34,776,26],[722,36,776,28],[723,16,777,8,"EventLogger"],[723,40,777,19],[723,41,777,20,"error"],[723,46,777,25],[723,47,777,26],[723,67,777,46],[723,69,777,48],[723,106,777,85,"metric"],[723,112,777,91],[723,113,777,92,"id"],[723,115,777,94],[723,117,777,96],[723,119,777,98],[724,18,778,10,"error"],[724,23,778,15],[724,25,778,17,"insertError"],[724,36,778,28],[725,18,779,10,"metricId"],[725,26,779,18],[725,28,779,20,"metric"],[725,34,779,26],[725,35,779,27,"id"],[726,16,780,8],[726,17,780,16],[726,18,780,17],[727,16,781,8],[727,22,781,14,"insertError"],[727,33,781,25],[728,14,782,6],[729,12,783,4],[729,13,783,5],[730,12,783,5],[730,29,783,5,"_x2"],[730,32,783,5],[731,14,783,5],[731,21,783,5,"_ref"],[731,25,783,5],[731,26,783,5,"apply"],[731,31,783,5],[731,38,783,5,"arguments"],[731,47,783,5],[732,12,783,5],[733,10,783,5],[733,14,783,6],[733,15,783,7],[735,10,785,4],[736,10,786,4,"results"],[736,17,786,11],[736,18,786,12,"forEach"],[736,25,786,19],[736,26,786,20],[736,27,786,21,"result"],[736,33,786,27],[736,35,786,29,"index"],[736,40,786,34],[736,45,786,39],[737,12,787,6],[737,16,787,10,"result"],[737,22,787,16],[737,23,787,17,"status"],[737,29,787,23],[737,34,787,28],[737,44,787,38],[737,46,787,40],[738,14,788,8,"errors"],[738,20,788,14],[738,21,788,15,"push"],[738,25,788,19],[738,26,788,20],[738,30,788,24,"Error"],[738,35,788,29],[738,36,788,30],[738,46,788,40,"metrics"],[738,53,788,47],[738,54,788,48,"index"],[738,59,788,53],[738,60,788,54],[738,61,788,55,"id"],[738,63,788,57],[738,68,788,62,"result"],[738,74,788,68],[738,75,788,69,"reason"],[738,81,788,75],[738,83,788,77],[738,84,788,78],[738,85,788,79],[739,12,789,6],[740,10,790,4],[740,11,790,5],[740,12,790,6],[742,10,792,4],[743,10,793,4],[743,14,793,8,"errors"],[743,20,793,14],[743,21,793,15,"length"],[743,27,793,21],[743,30,793,24],[743,31,793,25],[743,33,793,27],[744,12,794,6],[744,16,794,12,"errorMessage"],[744,28,794,24],[744,31,794,27],[744,49,794,45,"errors"],[744,55,794,51],[744,56,794,52,"length"],[744,62,794,58],[744,66,794,62,"metrics"],[744,73,794,69],[744,74,794,70,"length"],[744,80,794,76],[744,106,794,102,"errors"],[744,112,794,108],[744,113,794,109,"map"],[744,116,794,112],[744,117,794,113,"e"],[744,118,794,114],[744,122,794,118,"e"],[744,123,794,119],[744,124,794,120,"message"],[744,131,794,127],[744,132,794,128],[744,133,794,129,"join"],[744,137,794,133],[744,138,794,134],[744,142,794,138],[744,143,794,139],[744,145,794,141],[745,12,795,6,"EventLogger"],[745,36,795,17],[745,37,795,18,"error"],[745,42,795,23],[745,43,795,24],[745,63,795,44],[745,65,795,46],[745,105,795,86],[745,107,795,88],[746,14,796,8,"failedCount"],[746,25,796,19],[746,27,796,21,"errors"],[746,33,796,27],[746,34,796,28,"length"],[746,40,796,34],[747,14,797,8,"totalCount"],[747,24,797,18],[747,26,797,20,"metrics"],[747,33,797,27],[747,34,797,28,"length"],[747,40,797,34],[748,14,798,8,"errors"],[748,20,798,14],[748,22,798,16,"errors"],[748,28,798,22],[748,29,798,23,"map"],[748,32,798,26],[748,33,798,27,"e"],[748,34,798,28],[748,39,798,33],[749,16,798,35,"name"],[749,20,798,39],[749,22,798,41,"e"],[749,23,798,42],[749,24,798,43,"name"],[749,28,798,47],[750,16,798,49,"message"],[750,23,798,56],[750,25,798,58,"e"],[750,26,798,59],[750,27,798,60,"message"],[750,34,798,67],[751,16,798,69,"stack"],[751,21,798,74],[751,23,798,76,"e"],[751,24,798,77],[751,25,798,78,"stack"],[752,14,798,84],[752,15,798,85],[752,16,798,86],[753,12,799,6],[753,13,799,14],[753,14,799,15],[754,12,800,6],[754,18,800,12],[754,22,800,16,"Error"],[754,27,800,21],[754,28,800,22,"errorMessage"],[754,40,800,34],[754,41,800,35],[755,10,801,4],[756,8,802,2],[756,9,802,3],[757,8,802,3],[757,17,740,16,"sendMetrics"],[757,28,740,27,"sendMetrics"],[757,29,740,27,"_x"],[757,31,740,27],[758,10,740,27],[758,17,740,27,"_sendMetrics"],[758,29,740,27],[758,30,740,27,"apply"],[758,35,740,27],[758,42,740,27,"arguments"],[758,51,740,27],[759,8,740,27],[760,8,740,27],[760,15,740,16,"sendMetrics"],[760,26,740,27],[761,6,740,27],[762,6,804,2],[763,0,805,0],[764,0,806,0],[765,6,804,2],[766,4,804,2],[767,6,804,2,"key"],[767,9,804,2],[768,6,804,2,"value"],[768,11,804,2],[769,8,804,2],[769,12,804,2,"_loadOfflineData"],[769,28,804,2],[769,35,804,2,"_asyncToGenerator2"],[769,53,804,2],[769,54,804,2,"default"],[769,61,804,2],[769,63,807,2],[769,76,807,49],[770,10,808,4],[770,14,808,8],[771,12,809,6],[771,16,809,6,"_yield$AsyncStorage$m"],[771,37,809,6],[771,46,809,52,"AsyncStorage"],[771,67,809,64],[771,68,809,65,"multiGet"],[771,76,809,73],[771,77,809,74],[771,78,810,8,"PerformanceMonitorService"],[771,103,810,33],[771,104,810,34,"OFFLINE_METRICS_KEY"],[771,123,810,53],[771,125,811,8,"PerformanceMonitorService"],[771,150,811,33],[771,151,811,34,"OFFLINE_ALERTS_KEY"],[771,169,811,52],[771,170,812,7],[771,171,812,8],[772,14,812,8,"_yield$AsyncStorage$m2"],[772,36,812,8],[772,43,812,8,"_slicedToArray2"],[772,58,812,8],[772,59,812,8,"default"],[772,66,812,8],[772,68,812,8,"_yield$AsyncStorage$m"],[772,89,812,8],[773,14,809,13,"offlineMetrics"],[773,28,809,27],[773,31,809,27,"_yield$AsyncStorage$m2"],[773,53,809,27],[774,14,809,29,"offlineAlerts"],[774,27,809,42],[774,30,809,42,"_yield$AsyncStorage$m2"],[774,52,809,42],[775,12,814,6],[775,16,814,10,"loadedMetrics"],[775,29,814,23],[775,32,814,26],[775,33,814,27],[776,12,815,6],[776,16,815,10,"loadedAlerts"],[776,28,815,22],[776,31,815,25],[776,32,815,26],[777,12,817,6],[777,16,817,10,"offlineMetrics"],[777,30,817,24],[777,31,817,25],[777,32,817,26],[777,33,817,27],[777,35,817,29],[778,14,818,8],[778,18,818,14,"metrics"],[778,25,818,42],[778,28,818,45,"JSON"],[778,32,818,49],[778,33,818,50,"parse"],[778,38,818,55],[778,39,818,56,"offlineMetrics"],[778,53,818,70],[778,54,818,71],[778,55,818,72],[778,56,818,73],[778,57,818,74],[780,14,820,8],[781,14,821,8],[781,18,821,14,"oneDayAgo"],[781,27,821,23],[781,30,821,26,"Date"],[781,34,821,30],[781,35,821,31,"now"],[781,38,821,34],[781,39,821,35],[781,40,821,36],[781,51,821,60],[782,14,822,8],[782,18,822,14,"recentMetrics"],[782,31,822,27],[782,34,822,30,"metrics"],[782,41,822,37],[782,42,823,11,"filter"],[782,48,823,17],[782,49,823,18,"m"],[782,50,823,19],[782,54,823,23,"m"],[782,55,823,24],[782,56,823,25,"timestamp"],[782,65,823,34],[782,68,823,37,"oneDayAgo"],[782,77,823,46],[782,78,823,47],[782,79,824,11,"slice"],[782,84,824,16],[782,89,824,21],[782,90,824,22],[782,91,824,23],[782,92,824,24],[784,14,826,8],[784,18,826,12],[784,19,826,13,"metricQueue"],[784,30,826,24],[784,31,826,25,"unshift"],[784,38,826,32],[784,39,826,33],[784,42,826,36,"recentMetrics"],[784,55,826,49],[784,56,826,50],[785,14,827,8,"loadedMetrics"],[785,27,827,21],[785,30,827,24,"recentMetrics"],[785,43,827,37],[785,44,827,38,"length"],[785,50,827,44],[786,14,828,8],[786,20,828,14,"AsyncStorage"],[786,41,828,26],[786,42,828,27,"removeItem"],[786,52,828,37],[786,53,828,38,"PerformanceMonitorService"],[786,78,828,63],[786,79,828,64,"OFFLINE_METRICS_KEY"],[786,98,828,83],[786,99,828,84],[787,14,830,8],[787,18,830,12,"metrics"],[787,25,830,19],[787,26,830,20,"length"],[787,32,830,26],[787,37,830,31,"recentMetrics"],[787,50,830,44],[787,51,830,45,"length"],[787,57,830,51],[787,59,830,53],[788,16,831,10,"EventLogger"],[788,40,831,21],[788,41,831,22,"debug"],[788,46,831,27],[788,47,831,28],[788,67,831,48],[788,69,831,50],[788,83,831,64,"metrics"],[788,90,831,71],[788,91,831,72,"length"],[788,97,831,78],[788,100,831,81,"recentMetrics"],[788,113,831,94],[788,114,831,95,"length"],[788,120,831,101],[788,141,831,122],[788,142,831,123],[789,14,832,8],[790,12,833,6],[791,12,835,6],[791,16,835,10,"offlineAlerts"],[791,29,835,23],[791,30,835,24],[791,31,835,25],[791,32,835,26],[791,34,835,28],[792,14,836,8],[792,18,836,14,"alerts"],[792,24,836,40],[792,27,836,43,"JSON"],[792,31,836,47],[792,32,836,48,"parse"],[792,37,836,53],[792,38,836,54,"offlineAlerts"],[792,51,836,67],[792,52,836,68],[792,53,836,69],[792,54,836,70],[792,55,836,71],[794,14,838,8],[795,14,839,8],[795,18,839,14,"recentAlerts"],[795,30,839,26],[795,33,839,29,"alerts"],[795,39,839,35],[795,40,839,36,"slice"],[795,45,839,41],[795,49,839,45],[795,50,839,46],[796,14,841,8],[796,18,841,12],[796,19,841,13,"alerts"],[796,25,841,19],[796,26,841,20,"unshift"],[796,33,841,27],[796,34,841,28],[796,37,841,31,"recentAlerts"],[796,49,841,43],[796,50,841,44],[797,14,842,8,"loadedAlerts"],[797,26,842,20],[797,29,842,23,"recentAlerts"],[797,41,842,35],[797,42,842,36,"length"],[797,48,842,42],[798,14,843,8],[798,20,843,14,"AsyncStorage"],[798,41,843,26],[798,42,843,27,"removeItem"],[798,52,843,37],[798,53,843,38,"PerformanceMonitorService"],[798,78,843,63],[798,79,843,64,"OFFLINE_ALERTS_KEY"],[798,97,843,82],[798,98,843,83],[799,14,845,8],[799,18,845,12,"alerts"],[799,24,845,18],[799,25,845,19,"length"],[799,31,845,25],[799,36,845,30,"recentAlerts"],[799,48,845,42],[799,49,845,43,"length"],[799,55,845,49],[799,57,845,51],[800,16,846,10,"EventLogger"],[800,40,846,21],[800,41,846,22,"debug"],[800,46,846,27],[800,47,846,28],[800,67,846,48],[800,69,846,50],[800,92,846,73,"alerts"],[800,98,846,79],[800,99,846,80,"length"],[800,105,846,86],[800,112,846,93,"recentAlerts"],[800,124,846,105],[800,125,846,106,"length"],[800,131,846,112],[800,133,846,114],[800,134,846,115],[801,14,847,8],[802,12,848,6],[803,12,850,6],[803,16,850,10,"loadedMetrics"],[803,29,850,23],[803,32,850,26],[803,33,850,27],[803,37,850,31,"loadedAlerts"],[803,49,850,43],[803,52,850,46],[803,53,850,47],[803,55,850,49],[804,14,851,8,"EventLogger"],[804,38,851,19],[804,39,851,20,"info"],[804,43,851,24],[804,44,851,25],[804,64,851,45],[804,66,851,47],[804,99,851,80],[804,101,851,82],[805,16,852,10,"metricsLoaded"],[805,29,852,23],[805,31,852,25,"loadedMetrics"],[805,44,852,38],[806,16,853,10,"alertsLoaded"],[806,28,853,22],[806,30,853,24,"loadedAlerts"],[807,14,854,8],[807,15,854,9],[807,16,854,10],[809,14,856,8],[810,14,857,8],[810,18,857,12],[810,22,857,16],[810,23,857,17,"databaseAvailable"],[810,40,857,34],[810,42,857,36],[811,16,858,10],[811,20,858,14],[811,21,858,15,"syncOfflineData"],[811,36,858,30],[811,37,858,31],[811,38,858,32],[811,39,858,33,"catch"],[811,44,858,38],[811,45,858,39,"error"],[811,50,858,44],[811,54,858,48],[812,18,859,12,"EventLogger"],[812,42,859,23],[812,43,859,24,"error"],[812,48,859,29],[812,49,859,30],[812,69,859,50],[812,71,859,52],[812,112,859,93],[812,114,859,95,"error"],[812,119,859,109],[812,120,859,110],[813,16,860,10],[813,17,860,11],[813,18,860,12],[814,14,861,8],[815,12,862,6],[816,10,863,4],[816,11,863,5],[816,12,863,6],[816,19,863,13,"error"],[816,24,863,18],[816,26,863,20],[817,12,864,6],[818,12,865,6],[818,16,865,10,"error"],[818,21,865,15],[818,25,865,19],[818,32,865,26,"error"],[818,37,865,31],[818,42,865,36],[818,50,865,44],[818,54,865,48],[818,63,865,57],[818,67,865,61,"error"],[818,72,865,66],[818,76,866,10],[818,83,866,17,"error"],[818,88,866,22],[818,89,866,23,"message"],[818,96,866,30],[818,101,866,35],[818,109,866,43],[818,113,867,10,"error"],[818,118,867,15],[818,119,867,16,"message"],[818,126,867,23],[818,127,867,24,"includes"],[818,135,867,32],[818,136,867,33],[818,149,867,46],[818,150,867,47],[818,152,867,49],[819,14,868,8,"EventLogger"],[819,38,868,19],[819,39,868,20,"warn"],[819,43,868,24],[819,44,868,25],[819,64,868,45],[819,66,868,47],[819,105,868,86],[819,107,868,88],[820,16,868,90,"error"],[820,21,868,95],[820,23,868,97,"error"],[820,28,868,102],[820,29,868,103,"message"],[821,14,868,111],[821,15,868,112],[821,16,868,113],[822,14,869,8],[822,20,869,14],[822,24,869,18],[822,25,869,19,"clearOversizedOfflineData"],[822,50,869,44],[822,51,869,45],[822,52,869,46],[823,14,870,8],[823,18,870,12],[823,19,870,13,"metricQueue"],[823,30,870,24],[823,33,870,27],[823,35,870,29],[824,14,871,8],[824,18,871,12],[824,19,871,13,"alerts"],[824,25,871,19],[824,28,871,22],[824,30,871,24],[825,12,872,6],[825,13,872,7],[825,19,872,13],[826,14,873,8,"EventLogger"],[826,38,873,19],[826,39,873,20,"error"],[826,44,873,25],[826,45,873,26],[826,65,873,46],[826,67,873,48],[826,96,873,77],[826,98,873,79,"error"],[826,103,873,93],[826,104,873,94],[827,12,874,6],[828,10,875,4],[829,8,876,2],[829,9,876,3],[830,8,876,3],[830,17,807,16,"loadOfflineData"],[830,32,807,31,"loadOfflineData"],[830,33,807,31],[831,10,807,31],[831,17,807,31,"_loadOfflineData"],[831,33,807,31],[831,34,807,31,"apply"],[831,39,807,31],[831,46,807,31,"arguments"],[831,55,807,31],[832,8,807,31],[833,8,807,31],[833,15,807,16,"loadOfflineData"],[833,30,807,31],[834,6,807,31],[835,6,878,2],[836,0,879,0],[837,0,880,0],[838,6,878,2],[839,4,878,2],[840,6,878,2,"key"],[840,9,878,2],[841,6,878,2,"value"],[841,11,878,2],[842,8,878,2],[842,12,878,2,"_clearOversizedOfflineData"],[842,38,878,2],[842,45,878,2,"_asyncToGenerator2"],[842,63,878,2],[842,64,878,2,"default"],[842,71,878,2],[842,73,881,2],[842,86,881,59],[843,10,882,4],[843,14,882,8],[844,12,883,6],[844,18,883,12,"AsyncStorage"],[844,39,883,24],[844,40,883,25,"multiRemove"],[844,51,883,36],[844,52,883,37],[844,53,884,8,"PerformanceMonitorService"],[844,78,884,33],[844,79,884,34,"OFFLINE_METRICS_KEY"],[844,98,884,53],[844,100,885,8,"PerformanceMonitorService"],[844,125,885,33],[844,126,885,34,"OFFLINE_ALERTS_KEY"],[844,144,885,52],[844,145,886,7],[844,146,886,8],[845,12,887,6,"EventLogger"],[845,36,887,17],[845,37,887,18,"info"],[845,41,887,22],[845,42,887,23],[845,62,887,43],[845,64,887,45],[845,96,887,77],[845,97,887,78],[846,10,888,4],[846,11,888,5],[846,12,888,6],[846,19,888,13,"error"],[846,24,888,18],[846,26,888,20],[847,12,889,6,"EventLogger"],[847,36,889,17],[847,37,889,18,"error"],[847,42,889,23],[847,43,889,24],[847,63,889,44],[847,65,889,46],[847,95,889,76],[847,97,889,78,"error"],[847,102,889,92],[847,103,889,93],[848,10,890,4],[849,8,891,2],[849,9,891,3],[850,8,891,3],[850,17,881,16,"clearOversizedOfflineData"],[850,42,881,41,"clearOversizedOfflineData"],[850,43,881,41],[851,10,881,41],[851,17,881,41,"_clearOversizedOfflineData"],[851,43,881,41],[851,44,881,41,"apply"],[851,49,881,41],[851,56,881,41,"arguments"],[851,65,881,41],[852,8,881,41],[853,8,881,41],[853,15,881,16,"clearOversizedOfflineData"],[853,40,881,41],[854,6,881,41],[855,6,893,2],[856,0,894,0],[857,0,895,0],[858,6,893,2],[859,4,893,2],[860,6,893,2,"key"],[860,9,893,2],[861,6,893,2,"value"],[861,11,893,2],[862,8,893,2],[862,12,893,2,"_storeOfflineMetrics"],[862,32,893,2],[862,39,893,2,"_asyncToGenerator2"],[862,57,893,2],[862,58,893,2,"default"],[862,65,893,2],[862,67,896,2],[862,78,896,36,"metrics"],[862,85,896,64],[862,87,896,81],[863,10,897,4],[863,14,897,8],[864,12,898,6],[865,12,899,6],[865,16,899,12,"existingData"],[865,28,899,24],[865,37,899,33,"AsyncStorage"],[865,58,899,45],[865,59,899,46,"getItem"],[865,66,899,53],[865,67,899,54,"PerformanceMonitorService"],[865,92,899,79],[865,93,899,80,"OFFLINE_METRICS_KEY"],[865,112,899,99],[865,113,899,100],[866,12,900,6],[866,16,900,12,"existingMetrics"],[866,31,900,27],[866,34,900,30,"existingData"],[866,46,900,42],[866,49,900,45,"JSON"],[866,53,900,49],[866,54,900,50,"parse"],[866,59,900,55],[866,60,900,56,"existingData"],[866,72,900,68],[866,73,900,69],[866,76,900,72],[866,78,900,74],[868,12,902,6],[869,12,903,6],[869,16,903,12,"allMetrics"],[869,26,903,22],[869,29,903,25],[869,30,903,26],[869,33,903,29,"existingMetrics"],[869,48,903,44],[869,50,903,46],[869,53,903,49,"metrics"],[869,60,903,56],[869,61,903,57],[871,12,905,6],[872,12,906,6],[872,16,906,12,"maxOfflineMetrics"],[872,33,906,29],[872,36,906,32],[872,39,906,35],[873,12,907,6],[873,16,907,10,"allMetrics"],[873,26,907,20],[873,27,907,21,"length"],[873,33,907,27],[873,36,907,30,"maxOfflineMetrics"],[873,53,907,47],[873,55,907,49],[874,14,908,8,"allMetrics"],[874,24,908,18],[874,25,908,19,"splice"],[874,31,908,25],[874,32,908,26],[874,33,908,27],[874,35,908,29,"allMetrics"],[874,45,908,39],[874,46,908,40,"length"],[874,52,908,46],[874,55,908,49,"maxOfflineMetrics"],[874,72,908,66],[874,73,908,67],[875,14,909,8,"EventLogger"],[875,38,909,19],[875,39,909,20,"debug"],[875,44,909,25],[875,45,909,26],[875,65,909,46],[875,67,909,48],[875,97,909,78,"maxOfflineMetrics"],[875,114,909,95],[875,128,909,109],[875,129,909,110],[876,12,910,6],[878,12,912,6],[879,12,913,6],[879,16,913,12,"estimatedSize"],[879,29,913,25],[879,32,913,28,"JSON"],[879,36,913,32],[879,37,913,33,"stringify"],[879,46,913,42],[879,47,913,43,"allMetrics"],[879,57,913,53],[879,58,913,54],[879,59,913,55,"length"],[879,65,913,61],[880,12,914,6],[880,16,914,10,"estimatedSize"],[880,29,914,23],[880,32,914,26],[880,38,914,32],[880,40,914,34],[881,14,914,36],[882,14,915,8],[883,14,916,8,"allMetrics"],[883,24,916,18],[883,25,916,19,"splice"],[883,31,916,25],[883,32,916,26],[883,33,916,27],[883,35,916,29,"allMetrics"],[883,45,916,39],[883,46,916,40,"length"],[883,52,916,46],[883,55,916,49],[883,57,916,51],[883,58,916,52],[884,14,917,8,"EventLogger"],[884,38,917,19],[884,39,917,20,"warn"],[884,43,917,24],[884,44,917,25],[884,64,917,45],[884,66,917,47],[884,120,917,101],[884,121,917,102],[885,12,918,6],[886,12,920,6],[886,18,920,12,"AsyncStorage"],[886,39,920,24],[886,40,920,25,"setItem"],[886,47,920,32],[886,48,921,8,"PerformanceMonitorService"],[886,73,921,33],[886,74,921,34,"OFFLINE_METRICS_KEY"],[886,93,921,53],[886,95,922,8,"JSON"],[886,99,922,12],[886,100,922,13,"stringify"],[886,109,922,22],[886,110,922,23,"allMetrics"],[886,120,922,33],[886,121,923,6],[886,122,923,7],[887,12,925,6,"EventLogger"],[887,36,925,17],[887,37,925,18,"info"],[887,41,925,22],[887,42,925,23],[887,62,925,43],[887,64,925,45],[887,88,925,69],[887,90,925,71],[888,14,926,8,"newCount"],[888,22,926,16],[888,24,926,18,"metrics"],[888,31,926,25],[888,32,926,26,"length"],[888,38,926,32],[889,14,927,8,"totalStored"],[889,25,927,19],[889,27,927,21,"allMetrics"],[889,37,927,31],[889,38,927,32,"length"],[890,12,928,6],[890,13,928,7],[890,14,928,8],[891,10,929,4],[891,11,929,5],[891,12,929,6],[891,19,929,13,"error"],[891,24,929,18],[891,26,929,20],[892,12,930,6,"EventLogger"],[892,36,930,17],[892,37,930,18,"error"],[892,42,930,23],[892,43,930,24],[892,63,930,44],[892,65,930,46],[892,98,930,79],[892,100,930,81,"error"],[892,105,930,95],[892,106,930,96],[893,10,931,4],[894,8,932,2],[894,9,932,3],[895,8,932,3],[895,17,896,16,"storeOfflineMetrics"],[895,36,896,35,"storeOfflineMetrics"],[895,37,896,35,"_x3"],[895,40,896,35],[896,10,896,35],[896,17,896,35,"_storeOfflineMetrics"],[896,37,896,35],[896,38,896,35,"apply"],[896,43,896,35],[896,50,896,35,"arguments"],[896,59,896,35],[897,8,896,35],[898,8,896,35],[898,15,896,16,"storeOfflineMetrics"],[898,34,896,35],[899,6,896,35],[900,6,934,2],[901,0,935,0],[902,0,936,0],[903,6,934,2],[904,4,934,2],[905,6,934,2,"key"],[905,9,934,2],[906,6,934,2,"value"],[906,11,934,2],[907,8,934,2],[907,12,934,2,"_storeOfflineAlerts"],[907,31,934,2],[907,38,934,2,"_asyncToGenerator2"],[907,56,934,2],[907,57,934,2,"default"],[907,64,934,2],[907,66,937,2],[907,77,937,35,"alerts"],[907,83,937,61],[907,85,937,78],[908,10,938,4],[908,14,938,8],[909,12,939,6],[910,12,940,6],[910,16,940,12,"existingData"],[910,28,940,24],[910,37,940,33,"AsyncStorage"],[910,58,940,45],[910,59,940,46,"getItem"],[910,66,940,53],[910,67,940,54,"PerformanceMonitorService"],[910,92,940,79],[910,93,940,80,"OFFLINE_ALERTS_KEY"],[910,111,940,98],[910,112,940,99],[911,12,941,6],[911,16,941,12,"existingAlerts"],[911,30,941,26],[911,33,941,29,"existingData"],[911,45,941,41],[911,48,941,44,"JSON"],[911,52,941,48],[911,53,941,49,"parse"],[911,58,941,54],[911,59,941,55,"existingData"],[911,71,941,67],[911,72,941,68],[911,75,941,71],[911,77,941,73],[913,12,943,6],[914,12,944,6],[914,16,944,12,"allAlerts"],[914,25,944,21],[914,28,944,24],[914,29,944,25],[914,32,944,28,"existingAlerts"],[914,46,944,42],[914,48,944,44],[914,51,944,47,"alerts"],[914,57,944,53],[914,58,944,54],[916,12,946,6],[917,12,947,6],[917,16,947,12,"maxOfflineAlerts"],[917,32,947,28],[917,35,947,31],[917,37,947,33],[918,12,948,6],[918,16,948,10,"allAlerts"],[918,25,948,19],[918,26,948,20,"length"],[918,32,948,26],[918,35,948,29,"maxOfflineAlerts"],[918,51,948,45],[918,53,948,47],[919,14,949,8,"allAlerts"],[919,23,949,17],[919,24,949,18,"splice"],[919,30,949,24],[919,31,949,25],[919,32,949,26],[919,34,949,28,"allAlerts"],[919,43,949,37],[919,44,949,38,"length"],[919,50,949,44],[919,53,949,47,"maxOfflineAlerts"],[919,69,949,63],[919,70,949,64],[920,14,950,8,"EventLogger"],[920,38,950,19],[920,39,950,20,"debug"],[920,44,950,25],[920,45,950,26],[920,65,950,46],[920,67,950,48],[920,96,950,77,"maxOfflineAlerts"],[920,112,950,93],[920,126,950,107],[920,127,950,108],[921,12,951,6],[923,12,953,6],[924,12,954,6],[924,16,954,12,"estimatedSize"],[924,29,954,25],[924,32,954,28,"JSON"],[924,36,954,32],[924,37,954,33,"stringify"],[924,46,954,42],[924,47,954,43,"allAlerts"],[924,56,954,52],[924,57,954,53],[924,58,954,54,"length"],[924,64,954,60],[925,12,955,6],[925,16,955,10,"estimatedSize"],[925,29,955,23],[925,32,955,26],[925,38,955,32],[925,40,955,34],[926,14,955,36],[927,14,956,8],[928,14,957,8,"allAlerts"],[928,23,957,17],[928,24,957,18,"splice"],[928,30,957,24],[928,31,957,25],[928,32,957,26],[928,34,957,28,"allAlerts"],[928,43,957,37],[928,44,957,38,"length"],[928,50,957,44],[928,53,957,47],[928,55,957,49],[928,56,957,50],[929,14,958,8,"EventLogger"],[929,38,958,19],[929,39,958,20,"warn"],[929,43,958,24],[929,44,958,25],[929,64,958,45],[929,66,958,47],[929,119,958,100],[929,120,958,101],[930,12,959,6],[931,12,961,6],[931,18,961,12,"AsyncStorage"],[931,39,961,24],[931,40,961,25,"setItem"],[931,47,961,32],[931,48,962,8,"PerformanceMonitorService"],[931,73,962,33],[931,74,962,34,"OFFLINE_ALERTS_KEY"],[931,92,962,52],[931,94,963,8,"JSON"],[931,98,963,12],[931,99,963,13,"stringify"],[931,108,963,22],[931,109,963,23,"allAlerts"],[931,118,963,32],[931,119,964,6],[931,120,964,7],[932,12,966,6,"EventLogger"],[932,36,966,17],[932,37,966,18,"info"],[932,41,966,22],[932,42,966,23],[932,62,966,43],[932,64,966,45],[932,87,966,68],[932,89,966,70],[933,14,967,8,"newCount"],[933,22,967,16],[933,24,967,18,"alerts"],[933,30,967,24],[933,31,967,25,"length"],[933,37,967,31],[934,14,968,8,"totalStored"],[934,25,968,19],[934,27,968,21,"allAlerts"],[934,36,968,30],[934,37,968,31,"length"],[935,12,969,6],[935,13,969,7],[935,14,969,8],[936,10,970,4],[936,11,970,5],[936,12,970,6],[936,19,970,13,"error"],[936,24,970,18],[936,26,970,20],[937,12,971,6,"EventLogger"],[937,36,971,17],[937,37,971,18,"error"],[937,42,971,23],[937,43,971,24],[937,63,971,44],[937,65,971,46],[937,97,971,78],[937,99,971,80,"error"],[937,104,971,94],[937,105,971,95],[938,10,972,4],[939,8,973,2],[939,9,973,3],[940,8,973,3],[940,17,937,16,"storeOfflineAlerts"],[940,35,937,34,"storeOfflineAlerts"],[940,36,937,34,"_x4"],[940,39,937,34],[941,10,937,34],[941,17,937,34,"_storeOfflineAlerts"],[941,36,937,34],[941,37,937,34,"apply"],[941,42,937,34],[941,49,937,34,"arguments"],[941,58,937,34],[942,8,937,34],[943,8,937,34],[943,15,937,16,"storeOfflineAlerts"],[943,33,937,34],[944,6,937,34],[945,6,975,2],[946,0,976,0],[947,0,977,0],[948,6,975,2],[949,4,975,2],[950,6,975,2,"key"],[950,9,975,2],[951,6,975,2,"value"],[951,11,975,2],[952,8,975,2],[952,12,975,2,"_syncOfflineData"],[952,28,975,2],[952,35,975,2,"_asyncToGenerator2"],[952,53,975,2],[952,54,975,2,"default"],[952,61,975,2],[952,63,978,2],[952,76,978,49],[953,10,979,4],[953,14,979,8],[953,15,979,9],[953,19,979,13],[953,20,979,14,"databaseAvailable"],[953,37,979,31],[953,41,979,35],[953,42,979,36],[953,46,979,40],[953,47,979,41,"isInitialized"],[953,60,979,54],[953,62,979,56],[954,12,980,6,"EventLogger"],[954,36,980,17],[954,37,980,18,"debug"],[954,42,980,23],[954,43,980,24],[954,63,980,44],[954,65,980,46],[954,135,980,116],[954,136,980,117],[955,12,981,6],[956,10,982,4],[957,10,984,4],[957,14,984,8],[958,12,985,6],[959,12,986,6],[959,16,986,10],[959,20,986,14],[959,21,986,15,"metricQueue"],[959,32,986,26],[959,33,986,27,"length"],[959,39,986,33],[959,42,986,36],[959,43,986,37],[959,45,986,39],[960,14,987,8,"EventLogger"],[960,38,987,19],[960,39,987,20,"info"],[960,43,987,24],[960,44,987,25],[960,64,987,45],[960,66,987,47],[960,103,987,84],[960,105,987,86],[961,16,987,88,"count"],[961,21,987,93],[961,23,987,95],[961,27,987,99],[961,28,987,100,"metricQueue"],[961,39,987,111],[961,40,987,112,"length"],[962,14,987,119],[962,15,987,120],[962,16,987,121],[963,14,988,8],[963,20,988,14],[963,24,988,18],[963,25,988,19,"flushMetrics"],[963,37,988,31],[963,38,988,32],[963,39,988,33],[964,12,989,6],[966,12,991,6],[967,12,992,6],[968,12,993,6],[970,12,995,6,"EventLogger"],[970,36,995,17],[970,37,995,18,"info"],[970,41,995,22],[970,42,995,23],[970,62,995,43],[970,64,995,45],[970,93,995,74],[970,94,995,75],[971,10,996,4],[971,11,996,5],[971,12,996,6],[971,19,996,13,"error"],[971,24,996,18],[971,26,996,20],[972,12,997,6,"EventLogger"],[972,36,997,17],[972,37,997,18,"error"],[972,42,997,23],[972,43,997,24],[972,63,997,44],[972,65,997,46],[972,94,997,75],[972,96,997,77,"error"],[972,101,997,91],[972,102,997,92],[973,10,998,4],[974,8,999,2],[974,9,999,3],[975,8,999,3],[975,17,978,16,"syncOfflineData"],[975,32,978,31,"syncOfflineData"],[975,33,978,31],[976,10,978,31],[976,17,978,31,"_syncOfflineData"],[976,33,978,31],[976,34,978,31,"apply"],[976,39,978,31],[976,46,978,31,"arguments"],[976,55,978,31],[977,8,978,31],[978,8,978,31],[978,15,978,16,"syncOfflineData"],[978,30,978,31],[979,6,978,31],[980,6,1001,2],[981,0,1002,0],[982,0,1003,0],[983,6,1001,2],[984,4,1001,2],[985,6,1001,2,"key"],[985,9,1001,2],[986,6,1001,2,"value"],[986,11,1001,2],[987,8,1001,2],[987,12,1001,2,"_recheckDatabaseAvailability"],[987,40,1001,2],[987,47,1001,2,"_asyncToGenerator2"],[987,65,1001,2],[987,66,1001,2,"default"],[987,73,1001,2],[987,75,1004,2],[987,88,1004,60],[988,10,1005,4],[988,14,1005,10,"wasAvailable"],[988,26,1005,22],[988,29,1005,25],[988,33,1005,29],[988,34,1005,30,"databaseAvailable"],[988,51,1005,47],[989,10,1007,4],[989,14,1007,8],[990,12,1008,6],[990,18,1008,12],[990,22,1008,16],[990,23,1008,17,"checkDatabaseAvailability"],[990,48,1008,42],[990,49,1008,43],[990,50,1008,44],[992,12,1010,6],[993,12,1011,6],[993,16,1011,10],[993,17,1011,11,"wasAvailable"],[993,29,1011,23],[993,33,1011,27],[993,37,1011,31],[993,38,1011,32,"databaseAvailable"],[993,55,1011,49],[993,57,1011,51],[994,14,1012,8,"EventLogger"],[994,38,1012,19],[994,39,1012,20,"info"],[994,43,1012,24],[994,44,1012,25],[994,64,1012,45],[994,66,1012,47],[994,116,1012,97],[994,117,1012,98],[995,14,1013,8],[995,18,1013,12],[995,19,1013,13,"databaseUnavailableLogged"],[995,44,1013,38],[995,47,1013,41],[995,52,1013,46],[995,53,1013,47],[995,54,1013,48],[996,14,1014,8],[996,20,1014,14],[996,24,1014,18],[996,25,1014,19,"syncOfflineData"],[996,40,1014,34],[996,41,1014,35],[996,42,1014,36],[997,12,1015,6],[998,10,1016,4],[998,11,1016,5],[998,12,1016,6],[998,19,1016,13,"error"],[998,24,1016,18],[998,26,1016,20],[999,12,1017,6],[999,16,1017,10],[999,17,1017,11,"databaseAvailable"],[999,34,1017,28],[999,37,1017,31],[999,42,1017,36],[1000,12,1018,6,"EventLogger"],[1000,36,1018,17],[1000,37,1018,18,"debug"],[1000,42,1018,23],[1000,43,1018,24],[1000,63,1018,44],[1000,65,1018,46],[1000,95,1018,76],[1000,96,1018,77],[1001,10,1019,4],[1002,8,1020,2],[1002,9,1020,3],[1003,8,1020,3],[1003,17,1004,15,"recheckDatabaseAvailability"],[1003,44,1004,42,"recheckDatabaseAvailability"],[1003,45,1004,42],[1004,10,1004,42],[1004,17,1004,42,"_recheckDatabaseAvailability"],[1004,45,1004,42],[1004,46,1004,42,"apply"],[1004,51,1004,42],[1004,58,1004,42,"arguments"],[1004,67,1004,42],[1005,8,1004,42],[1006,8,1004,42],[1006,15,1004,15,"recheckDatabaseAvailability"],[1006,42,1004,42],[1007,6,1004,42],[1008,6,1022,2],[1009,0,1023,0],[1010,0,1024,0],[1011,6,1022,2],[1012,4,1022,2],[1013,6,1022,2,"key"],[1013,9,1022,2],[1014,6,1022,2,"value"],[1014,11,1022,2],[1014,13,1025,2],[1014,22,1025,10,"shouldTrack"],[1014,33,1025,21,"shouldTrack"],[1014,34,1025,21],[1014,36,1025,33],[1015,8,1026,4],[1015,12,1026,8],[1015,13,1026,9],[1015,17,1026,13],[1015,18,1026,14,"config"],[1015,24,1026,20],[1015,25,1026,21,"enabled"],[1015,32,1026,28],[1015,36,1026,32],[1015,37,1026,33],[1015,41,1026,37],[1015,42,1026,38,"isInitialized"],[1015,55,1026,51],[1015,57,1026,53],[1016,10,1027,6],[1016,17,1027,13],[1016,22,1027,18],[1017,8,1028,4],[1019,8,1030,4],[1021,8,1035,4],[1022,8,1036,4],[1022,15,1036,11,"Math"],[1022,19,1036,15],[1022,20,1036,16,"random"],[1022,26,1036,22],[1022,27,1036,23],[1022,28,1036,24],[1022,31,1036,27],[1022,35,1036,31],[1022,36,1036,32,"config"],[1022,42,1036,38],[1022,43,1036,39,"sampleRate"],[1022,53,1036,49],[1023,6,1037,2],[1025,6,1039,2],[1026,0,1040,0],[1027,0,1041,0],[1028,4,1039,2],[1029,6,1039,2,"key"],[1029,9,1039,2],[1030,6,1039,2,"value"],[1030,11,1039,2],[1030,13,1042,2],[1030,22,1042,10,"calculateStats"],[1030,36,1042,24,"calculateStats"],[1030,37,1042,25,"metrics"],[1030,44,1042,53],[1030,46,1042,60],[1031,8,1043,4],[1031,12,1043,8,"metrics"],[1031,19,1043,15],[1031,20,1043,16,"length"],[1031,26,1043,22],[1031,31,1043,27],[1031,32,1043,28],[1031,34,1043,30],[1032,10,1044,6],[1032,17,1044,13],[1033,12,1044,15,"average"],[1033,19,1044,22],[1033,21,1044,24],[1033,22,1044,25],[1034,12,1044,27,"p50"],[1034,15,1044,30],[1034,17,1044,32],[1034,18,1044,33],[1035,12,1044,35,"p90"],[1035,15,1044,38],[1035,17,1044,40],[1035,18,1044,41],[1036,12,1044,43,"p99"],[1036,15,1044,46],[1036,17,1044,48],[1036,18,1044,49],[1037,12,1044,51,"samples"],[1037,19,1044,58],[1037,21,1044,60],[1038,10,1044,62],[1038,11,1044,63],[1039,8,1045,4],[1040,8,1047,4],[1040,12,1047,10,"values"],[1040,18,1047,16],[1040,21,1047,19,"metrics"],[1040,28,1047,26],[1040,29,1047,27,"map"],[1040,32,1047,30],[1040,33,1047,31,"m"],[1040,34,1047,32],[1040,38,1047,36,"m"],[1040,39,1047,37],[1040,40,1047,38,"value"],[1040,45,1047,43],[1040,46,1047,44],[1040,47,1047,45,"sort"],[1040,51,1047,49],[1040,52,1047,50],[1040,53,1047,51,"a"],[1040,54,1047,52],[1040,56,1047,54,"b"],[1040,57,1047,55],[1040,62,1047,60,"a"],[1040,63,1047,61],[1040,66,1047,64,"b"],[1040,67,1047,65],[1040,68,1047,66],[1041,8,1048,4],[1041,12,1048,10,"len"],[1041,15,1048,13],[1041,18,1048,16,"values"],[1041,24,1048,22],[1041,25,1048,23,"length"],[1041,31,1048,29],[1042,8,1050,4],[1042,15,1050,11],[1043,10,1051,6,"average"],[1043,17,1051,13],[1043,19,1051,15,"values"],[1043,25,1051,21],[1043,26,1051,22,"reduce"],[1043,32,1051,28],[1043,33,1051,29],[1043,34,1051,30,"a"],[1043,35,1051,31],[1043,37,1051,33,"b"],[1043,38,1051,34],[1043,43,1051,39,"a"],[1043,44,1051,40],[1043,47,1051,43,"b"],[1043,48,1051,44],[1043,50,1051,46],[1043,51,1051,47],[1043,52,1051,48],[1043,55,1051,51,"len"],[1043,58,1051,54],[1044,10,1052,6,"p50"],[1044,13,1052,9],[1044,15,1052,11,"values"],[1044,21,1052,17],[1044,22,1052,18,"Math"],[1044,26,1052,22],[1044,27,1052,23,"floor"],[1044,32,1052,28],[1044,33,1052,29,"len"],[1044,36,1052,32],[1044,39,1052,35],[1044,42,1052,38],[1044,43,1052,39],[1044,44,1052,40],[1045,10,1053,6,"p90"],[1045,13,1053,9],[1045,15,1053,11,"values"],[1045,21,1053,17],[1045,22,1053,18,"Math"],[1045,26,1053,22],[1045,27,1053,23,"floor"],[1045,32,1053,28],[1045,33,1053,29,"len"],[1045,36,1053,32],[1045,39,1053,35],[1045,42,1053,38],[1045,43,1053,39],[1045,44,1053,40],[1046,10,1054,6,"p99"],[1046,13,1054,9],[1046,15,1054,11,"values"],[1046,21,1054,17],[1046,22,1054,18,"Math"],[1046,26,1054,22],[1046,27,1054,23,"floor"],[1046,32,1054,28],[1046,33,1054,29,"len"],[1046,36,1054,32],[1046,39,1054,35],[1046,43,1054,39],[1046,44,1054,40],[1046,45,1054,41],[1047,10,1055,6,"samples"],[1047,17,1055,13],[1047,19,1055,15,"len"],[1048,8,1056,4],[1048,9,1056,5],[1049,6,1057,2],[1051,6,1059,2],[1052,0,1060,0],[1053,0,1061,0],[1054,4,1059,2],[1055,6,1059,2,"key"],[1055,9,1059,2],[1056,6,1059,2,"value"],[1056,11,1059,2],[1056,13,1062,2],[1056,22,1062,10,"groupScreenRenderStats"],[1056,44,1062,32,"groupScreenRenderStats"],[1056,45,1062,32],[1056,47,1062,78],[1057,8,1063,4],[1057,12,1063,10,"screenMetrics"],[1057,25,1063,23],[1057,28,1063,26],[1057,32,1063,30],[1057,33,1063,31,"metrics"],[1057,40,1063,38],[1057,41,1063,39,"filter"],[1057,47,1063,45],[1057,48,1063,46,"m"],[1057,49,1063,47],[1057,53,1063,51,"m"],[1057,54,1063,52],[1057,55,1063,53,"type"],[1057,59,1063,57],[1057,64,1063,62],[1057,79,1063,77],[1057,80,1063,78],[1058,8,1064,4],[1058,12,1064,10,"grouped"],[1058,19,1064,54],[1058,22,1064,57],[1058,23,1064,58],[1058,24,1064,59],[1059,8,1066,4,"screenMetrics"],[1059,21,1066,17],[1059,22,1066,18,"forEach"],[1059,29,1066,25],[1059,30,1066,26,"metric"],[1059,36,1066,32],[1059,40,1066,36],[1060,10,1067,6],[1060,14,1067,12,"screenName"],[1060,24,1067,22],[1060,27,1067,25,"metric"],[1060,33,1067,31],[1060,34,1067,32,"context"],[1060,41,1067,39],[1060,43,1067,41,"screen_name"],[1060,54,1067,52],[1060,58,1067,56],[1060,67,1067,65],[1061,10,1068,6],[1061,14,1068,10],[1061,15,1068,11,"grouped"],[1061,22,1068,18],[1061,23,1068,19,"screenName"],[1061,33,1068,29],[1061,34,1068,30],[1061,36,1068,32],[1062,12,1069,8,"grouped"],[1062,19,1069,15],[1062,20,1069,16,"screenName"],[1062,30,1069,26],[1062,31,1069,27],[1062,34,1069,30],[1062,36,1069,32],[1063,10,1070,6],[1064,10,1071,6,"grouped"],[1064,17,1071,13],[1064,18,1071,14,"screenName"],[1064,28,1071,24],[1064,29,1071,25],[1064,30,1071,26,"push"],[1064,34,1071,30],[1064,35,1071,31,"metric"],[1064,41,1071,37],[1064,42,1071,38],[1065,8,1072,4],[1065,9,1072,5],[1065,10,1072,6],[1066,8,1074,4],[1066,12,1074,10,"result"],[1066,18,1074,59],[1066,21,1074,62],[1066,22,1074,63],[1066,23,1074,64],[1067,8,1075,4,"Object"],[1067,14,1075,10],[1067,15,1075,11,"entries"],[1067,22,1075,18],[1067,23,1075,19,"grouped"],[1067,30,1075,26],[1067,31,1075,27],[1067,32,1075,28,"forEach"],[1067,39,1075,35],[1067,40,1075,36,"_ref2"],[1067,45,1075,36],[1067,49,1075,63],[1068,10,1075,63],[1068,14,1075,63,"_ref3"],[1068,19,1075,63],[1068,26,1075,63,"_slicedToArray2"],[1068,41,1075,63],[1068,42,1075,63,"default"],[1068,49,1075,63],[1068,51,1075,63,"_ref2"],[1068,56,1075,63],[1069,12,1075,38,"screenName"],[1069,22,1075,48],[1069,25,1075,48,"_ref3"],[1069,30,1075,48],[1070,12,1075,50,"metrics"],[1070,19,1075,57],[1070,22,1075,57,"_ref3"],[1070,27,1075,57],[1071,10,1076,6],[1071,14,1076,12,"values"],[1071,20,1076,18],[1071,23,1076,21,"metrics"],[1071,30,1076,28],[1071,31,1076,29,"map"],[1071,34,1076,32],[1071,35,1076,33,"m"],[1071,36,1076,34],[1071,40,1076,38,"m"],[1071,41,1076,39],[1071,42,1076,40,"value"],[1071,47,1076,45],[1071,48,1076,46],[1072,10,1077,6],[1072,14,1077,12,"sortedValues"],[1072,26,1077,24],[1072,29,1077,27,"values"],[1072,35,1077,33],[1072,36,1077,34,"sort"],[1072,40,1077,38],[1072,41,1077,39],[1072,42,1077,40,"a"],[1072,43,1077,41],[1072,45,1077,43,"b"],[1072,46,1077,44],[1072,51,1077,49,"a"],[1072,52,1077,50],[1072,55,1077,53,"b"],[1072,56,1077,54],[1072,57,1077,55],[1073,10,1079,6,"result"],[1073,16,1079,12],[1073,17,1079,13,"screenName"],[1073,27,1079,23],[1073,28,1079,24],[1073,31,1079,27],[1074,12,1080,8,"average"],[1074,19,1080,15],[1074,21,1080,17,"values"],[1074,27,1080,23],[1074,28,1080,24,"reduce"],[1074,34,1080,30],[1074,35,1080,31],[1074,36,1080,32,"a"],[1074,37,1080,33],[1074,39,1080,35,"b"],[1074,40,1080,36],[1074,45,1080,41,"a"],[1074,46,1080,42],[1074,49,1080,45,"b"],[1074,50,1080,46],[1074,52,1080,48],[1074,53,1080,49],[1074,54,1080,50],[1074,57,1080,53,"values"],[1074,63,1080,59],[1074,64,1080,60,"length"],[1074,70,1080,66],[1075,12,1081,8,"p90"],[1075,15,1081,11],[1075,17,1081,13,"sortedValues"],[1075,29,1081,25],[1075,30,1081,26,"Math"],[1075,34,1081,30],[1075,35,1081,31,"floor"],[1075,40,1081,36],[1075,41,1081,37,"sortedValues"],[1075,53,1081,49],[1075,54,1081,50,"length"],[1075,60,1081,56],[1075,63,1081,59],[1075,66,1081,62],[1075,67,1081,63],[1075,68,1081,64],[1076,12,1082,8,"samples"],[1076,19,1082,15],[1076,21,1082,17,"values"],[1076,27,1082,23],[1076,28,1082,24,"length"],[1077,10,1083,6],[1077,11,1083,7],[1078,8,1084,4],[1078,9,1084,5],[1078,10,1084,6],[1079,8,1086,4],[1079,15,1086,11,"result"],[1079,21,1086,17],[1080,6,1087,2],[1082,6,1089,2],[1083,0,1090,0],[1084,0,1091,0],[1085,4,1089,2],[1086,6,1089,2,"key"],[1086,9,1089,2],[1087,6,1089,2,"value"],[1087,11,1089,2],[1087,13,1092,2],[1087,22,1092,10,"groupApiPerformanceStats"],[1087,46,1092,34,"groupApiPerformanceStats"],[1087,47,1092,34],[1087,49,1092,76],[1088,8,1093,4],[1088,12,1093,10,"apiMetrics"],[1088,22,1093,20],[1088,25,1093,23],[1088,29,1093,27],[1088,30,1093,28,"metrics"],[1088,37,1093,35],[1088,38,1093,36,"filter"],[1088,44,1093,42],[1088,45,1093,43,"m"],[1088,46,1093,44],[1088,50,1093,48,"m"],[1088,51,1093,49],[1088,52,1093,50,"type"],[1088,56,1093,54],[1088,61,1093,59],[1088,71,1093,69],[1088,72,1093,70],[1089,8,1094,4],[1089,12,1094,10,"grouped"],[1089,19,1094,54],[1089,22,1094,57],[1089,23,1094,58],[1089,24,1094,59],[1090,8,1096,4,"apiMetrics"],[1090,18,1096,14],[1090,19,1096,15,"forEach"],[1090,26,1096,22],[1090,27,1096,23,"metric"],[1090,33,1096,29],[1090,37,1096,33],[1091,10,1097,6],[1091,14,1097,12,"endpoint"],[1091,22,1097,20],[1091,25,1097,23,"metric"],[1091,31,1097,29],[1091,32,1097,30,"context"],[1091,39,1097,37],[1091,41,1097,39,"api_endpoint"],[1091,53,1097,51],[1091,57,1097,55],[1091,66,1097,64],[1092,10,1098,6],[1092,14,1098,10],[1092,15,1098,11,"grouped"],[1092,22,1098,18],[1092,23,1098,19,"endpoint"],[1092,31,1098,27],[1092,32,1098,28],[1092,34,1098,30],[1093,12,1099,8,"grouped"],[1093,19,1099,15],[1093,20,1099,16,"endpoint"],[1093,28,1099,24],[1093,29,1099,25],[1093,32,1099,28],[1093,34,1099,30],[1094,10,1100,6],[1095,10,1101,6,"grouped"],[1095,17,1101,13],[1095,18,1101,14,"endpoint"],[1095,26,1101,22],[1095,27,1101,23],[1095,28,1101,24,"push"],[1095,32,1101,28],[1095,33,1101,29,"metric"],[1095,39,1101,35],[1095,40,1101,36],[1096,8,1102,4],[1096,9,1102,5],[1096,10,1102,6],[1097,8,1104,4],[1097,12,1104,10,"result"],[1097,18,1104,55],[1097,21,1104,58],[1097,22,1104,59],[1097,23,1104,60],[1098,8,1105,4,"Object"],[1098,14,1105,10],[1098,15,1105,11,"entries"],[1098,22,1105,18],[1098,23,1105,19,"grouped"],[1098,30,1105,26],[1098,31,1105,27],[1098,32,1105,28,"forEach"],[1098,39,1105,35],[1098,40,1105,36,"_ref4"],[1098,45,1105,36],[1098,49,1105,61],[1099,10,1105,61],[1099,14,1105,61,"_ref5"],[1099,19,1105,61],[1099,26,1105,61,"_slicedToArray2"],[1099,41,1105,61],[1099,42,1105,61,"default"],[1099,49,1105,61],[1099,51,1105,61,"_ref4"],[1099,56,1105,61],[1100,12,1105,38,"endpoint"],[1100,20,1105,46],[1100,23,1105,46,"_ref5"],[1100,28,1105,46],[1101,12,1105,48,"metrics"],[1101,19,1105,55],[1101,22,1105,55,"_ref5"],[1101,27,1105,55],[1102,10,1106,6],[1102,14,1106,12,"responseTimes"],[1102,27,1106,25],[1102,30,1106,28,"metrics"],[1102,37,1106,35],[1102,38,1106,36,"map"],[1102,41,1106,39],[1102,42,1106,40,"m"],[1102,43,1106,41],[1102,47,1106,45,"m"],[1102,48,1106,46],[1102,49,1106,47,"value"],[1102,54,1106,52],[1102,55,1106,53],[1103,10,1107,6],[1103,14,1107,12,"successfulRequests"],[1103,32,1107,30],[1103,35,1107,33,"metrics"],[1103,42,1107,40],[1103,43,1107,41,"filter"],[1103,49,1107,47],[1103,50,1107,48,"m"],[1103,51,1107,49],[1103,55,1107,53,"m"],[1103,56,1107,54],[1103,57,1107,55,"context"],[1103,64,1107,62],[1103,66,1107,64,"success"],[1103,73,1107,71],[1103,78,1107,76],[1103,82,1107,80],[1103,83,1107,81],[1104,10,1108,6],[1104,14,1108,12,"errorRequests"],[1104,27,1108,25],[1104,30,1108,28,"metrics"],[1104,37,1108,35],[1104,38,1108,36,"filter"],[1104,44,1108,42],[1104,45,1108,43,"m"],[1104,46,1108,44],[1104,50,1108,48,"m"],[1104,51,1108,49],[1104,52,1108,50,"context"],[1104,59,1108,57],[1104,61,1108,59,"success"],[1104,68,1108,66],[1104,73,1108,71],[1104,78,1108,76],[1104,79,1108,77],[1105,10,1110,6,"result"],[1105,16,1110,12],[1105,17,1110,13,"endpoint"],[1105,25,1110,21],[1105,26,1110,22],[1105,29,1110,25],[1106,12,1111,8,"average_response_time"],[1106,33,1111,29],[1106,35,1111,31,"responseTimes"],[1106,48,1111,44],[1106,49,1111,45,"reduce"],[1106,55,1111,51],[1106,56,1111,52],[1106,57,1111,53,"a"],[1106,58,1111,54],[1106,60,1111,56,"b"],[1106,61,1111,57],[1106,66,1111,62,"a"],[1106,67,1111,63],[1106,70,1111,66,"b"],[1106,71,1111,67],[1106,73,1111,69],[1106,74,1111,70],[1106,75,1111,71],[1106,78,1111,74,"responseTimes"],[1106,91,1111,87],[1106,92,1111,88,"length"],[1106,98,1111,94],[1107,12,1112,8,"success_rate"],[1107,24,1112,20],[1107,26,1112,23,"successfulRequests"],[1107,44,1112,41],[1107,45,1112,42,"length"],[1107,51,1112,48],[1107,54,1112,51,"metrics"],[1107,61,1112,58],[1107,62,1112,59,"length"],[1107,68,1112,65],[1107,71,1112,69],[1107,74,1112,72],[1108,12,1113,8,"error_rate"],[1108,22,1113,18],[1108,24,1113,21,"errorRequests"],[1108,37,1113,34],[1108,38,1113,35,"length"],[1108,44,1113,41],[1108,47,1113,44,"metrics"],[1108,54,1113,51],[1108,55,1113,52,"length"],[1108,61,1113,58],[1108,64,1113,62],[1108,67,1113,65],[1109,12,1114,8,"total_requests"],[1109,26,1114,22],[1109,28,1114,24,"metrics"],[1109,35,1114,31],[1109,36,1114,32,"length"],[1110,10,1115,6],[1110,11,1115,7],[1111,8,1116,4],[1111,9,1116,5],[1111,10,1116,6],[1112,8,1118,4],[1112,15,1118,11,"result"],[1112,21,1118,17],[1113,6,1119,2],[1115,6,1121,2],[1116,0,1122,0],[1117,0,1123,0],[1118,4,1121,2],[1119,6,1121,2,"key"],[1119,9,1121,2],[1120,6,1121,2,"value"],[1120,11,1121,2],[1120,13,1124,2],[1120,22,1124,10,"calculateMemoryStats"],[1120,42,1124,30,"calculateMemoryStats"],[1120,43,1124,30],[1120,45,1124,69],[1121,8,1125,4],[1121,12,1125,10,"memoryMetrics"],[1121,25,1125,23],[1121,28,1125,26],[1121,32,1125,30],[1121,33,1125,31,"metrics"],[1121,40,1125,38],[1121,41,1125,39,"filter"],[1121,47,1125,45],[1121,48,1125,46,"m"],[1121,49,1125,47],[1121,53,1125,51,"m"],[1121,54,1125,52],[1121,55,1125,53,"type"],[1121,59,1125,57],[1121,64,1125,62],[1121,78,1125,76],[1121,79,1125,77],[1122,8,1127,4],[1122,12,1127,8,"memoryMetrics"],[1122,25,1127,21],[1122,26,1127,22,"length"],[1122,32,1127,28],[1122,37,1127,33],[1122,38,1127,34],[1122,40,1127,36],[1123,10,1128,6],[1123,17,1128,13],[1124,12,1128,15,"average"],[1124,19,1128,22],[1124,21,1128,24],[1124,22,1128,25],[1125,12,1128,27,"peak"],[1125,16,1128,31],[1125,18,1128,33],[1125,19,1128,34],[1126,12,1128,36,"warnings"],[1126,20,1128,44],[1126,22,1128,46],[1127,10,1128,48],[1127,11,1128,49],[1128,8,1129,4],[1129,8,1131,4],[1129,12,1131,10,"values"],[1129,18,1131,16],[1129,21,1131,19,"memoryMetrics"],[1129,34,1131,32],[1129,35,1131,33,"map"],[1129,38,1131,36],[1129,39,1131,37,"m"],[1129,40,1131,38],[1129,44,1131,42,"m"],[1129,45,1131,43],[1129,46,1131,44,"value"],[1129,51,1131,49],[1129,52,1131,50],[1130,8,1132,4],[1130,12,1132,10,"warnings"],[1130,20,1132,18],[1130,23,1132,21,"memoryMetrics"],[1130,36,1132,34],[1130,37,1132,35,"filter"],[1130,43,1132,41],[1130,44,1132,42,"m"],[1130,45,1132,43],[1130,49,1133,6,"m"],[1130,50,1133,7],[1130,51,1133,8,"context"],[1130,58,1133,15],[1130,60,1133,17,"memory_pressure"],[1130,75,1133,32],[1130,80,1133,37],[1130,84,1134,4],[1130,85,1134,5],[1130,86,1134,6,"length"],[1130,92,1134,12],[1131,8,1136,4],[1131,15,1136,11],[1132,10,1137,6,"average"],[1132,17,1137,13],[1132,19,1137,15,"values"],[1132,25,1137,21],[1132,26,1137,22,"reduce"],[1132,32,1137,28],[1132,33,1137,29],[1132,34,1137,30,"a"],[1132,35,1137,31],[1132,37,1137,33,"b"],[1132,38,1137,34],[1132,43,1137,39,"a"],[1132,44,1137,40],[1132,47,1137,43,"b"],[1132,48,1137,44],[1132,50,1137,46],[1132,51,1137,47],[1132,52,1137,48],[1132,55,1137,51,"values"],[1132,61,1137,57],[1132,62,1137,58,"length"],[1132,68,1137,64],[1133,10,1138,6,"peak"],[1133,14,1138,10],[1133,16,1138,12,"Math"],[1133,20,1138,16],[1133,21,1138,17,"max"],[1133,24,1138,20],[1133,25,1138,21],[1133,28,1138,24,"values"],[1133,34,1138,30],[1133,35,1138,31],[1134,10,1139,6,"warnings"],[1135,8,1140,4],[1135,9,1140,5],[1136,6,1141,2],[1138,6,1143,2],[1139,0,1144,0],[1140,0,1145,0],[1141,4,1143,2],[1142,6,1143,2,"key"],[1142,9,1143,2],[1143,6,1143,2,"value"],[1143,11,1143,2],[1143,13,1146,2],[1143,22,1146,10,"calculateBatteryStats"],[1143,43,1146,31,"calculateBatteryStats"],[1143,44,1146,31],[1143,46,1146,72],[1144,8,1147,4],[1144,12,1147,10,"batteryMetrics"],[1144,26,1147,24],[1144,29,1147,27],[1144,33,1147,31],[1144,34,1147,32,"metrics"],[1144,41,1147,39],[1144,42,1147,40,"filter"],[1144,48,1147,46],[1144,49,1147,47,"m"],[1144,50,1147,48],[1144,54,1147,52,"m"],[1144,55,1147,53],[1144,56,1147,54,"type"],[1144,60,1147,58],[1144,65,1147,63],[1144,74,1147,72],[1144,75,1147,73],[1145,8,1149,4],[1145,15,1149,11],[1146,10,1150,6,"average_drain"],[1146,23,1150,19],[1146,25,1150,21],[1146,26,1150,22],[1147,10,1150,24],[1148,10,1151,6,"high_usage_events"],[1148,27,1151,23],[1148,29,1151,25],[1148,30,1151,26],[1148,31,1151,28],[1149,8,1152,4],[1149,9,1152,5],[1150,6,1153,2],[1152,6,1155,2],[1153,0,1156,0],[1154,0,1157,0],[1155,4,1155,2],[1156,6,1155,2,"key"],[1156,9,1155,2],[1157,6,1155,2,"value"],[1157,11,1155,2],[1157,13,1158,2],[1157,22,1158,10,"calculateFrameRateStats"],[1157,45,1158,33,"calculateFrameRateStats"],[1157,46,1158,33],[1157,48,1158,70],[1158,8,1159,4],[1159,8,1160,4],[1159,15,1160,11],[1160,10,1161,6,"average_fps"],[1160,21,1161,17],[1160,23,1161,19],[1160,25,1161,21],[1161,10,1161,23],[1162,10,1162,6,"dropped_frames"],[1162,24,1162,20],[1162,26,1162,22],[1163,8,1163,4],[1163,9,1163,5],[1164,6,1164,2],[1166,6,1166,2],[1167,0,1167,0],[1168,0,1168,0],[1169,4,1166,2],[1170,6,1166,2,"key"],[1170,9,1166,2],[1171,6,1166,2,"value"],[1171,11,1166,2],[1171,13,1169,2],[1171,22,1169,10,"generateMetricId"],[1171,38,1169,26,"generateMetricId"],[1171,39,1169,26],[1171,41,1169,37],[1172,8,1170,4],[1172,15,1170,11],[1172,30,1170,26,"Date"],[1172,34,1170,30],[1172,35,1170,31,"now"],[1172,38,1170,34],[1172,39,1170,35],[1172,40,1170,36],[1172,44,1170,40,"Math"],[1172,48,1170,44],[1172,49,1170,45,"random"],[1172,55,1170,51],[1172,56,1170,52],[1172,57,1170,53],[1172,58,1170,54,"toString"],[1172,66,1170,62],[1172,67,1170,63],[1172,69,1170,65],[1172,70,1170,66],[1172,71,1170,67,"substr"],[1172,77,1170,73],[1172,78,1170,74],[1172,79,1170,75],[1172,81,1170,77],[1172,82,1170,78],[1172,83,1170,79],[1172,85,1170,81],[1173,6,1171,2],[1175,6,1173,2],[1176,0,1174,0],[1177,0,1175,0],[1178,4,1173,2],[1179,6,1173,2,"key"],[1179,9,1173,2],[1180,6,1173,2,"value"],[1180,11,1173,2],[1180,13,1176,2],[1180,22,1176,10,"generateAlertId"],[1180,37,1176,25,"generateAlertId"],[1180,38,1176,25],[1180,40,1176,36],[1181,8,1177,4],[1181,15,1177,11],[1181,29,1177,25,"Date"],[1181,33,1177,29],[1181,34,1177,30,"now"],[1181,37,1177,33],[1181,38,1177,34],[1181,39,1177,35],[1181,43,1177,39,"Math"],[1181,47,1177,43],[1181,48,1177,44,"random"],[1181,54,1177,50],[1181,55,1177,51],[1181,56,1177,52],[1181,57,1177,53,"toString"],[1181,65,1177,61],[1181,66,1177,62],[1181,68,1177,64],[1181,69,1177,65],[1181,70,1177,66,"substr"],[1181,76,1177,72],[1181,77,1177,73],[1181,78,1177,74],[1181,80,1177,76],[1181,81,1177,77],[1181,82,1177,78],[1181,84,1177,80],[1182,6,1178,2],[1184,6,1180,2],[1185,0,1181,0],[1186,0,1182,0],[1187,4,1180,2],[1188,6,1180,2,"key"],[1188,9,1180,2],[1189,6,1180,2,"value"],[1189,11,1180,2],[1189,13,1183,2],[1189,22,1183,10,"generateSessionId"],[1189,39,1183,27,"generateSessionId"],[1189,40,1183,27],[1189,42,1183,38],[1190,8,1184,4],[1190,15,1184,11],[1190,31,1184,27,"Date"],[1190,35,1184,31],[1190,36,1184,32,"now"],[1190,39,1184,35],[1190,40,1184,36],[1190,41,1184,37],[1190,45,1184,41,"Math"],[1190,49,1184,45],[1190,50,1184,46,"random"],[1190,56,1184,52],[1190,57,1184,53],[1190,58,1184,54],[1190,59,1184,55,"toString"],[1190,67,1184,63],[1190,68,1184,64],[1190,70,1184,66],[1190,71,1184,67],[1190,72,1184,68,"substr"],[1190,78,1184,74],[1190,79,1184,75],[1190,80,1184,76],[1190,82,1184,78],[1190,83,1184,79],[1190,84,1184,80],[1190,86,1184,82],[1191,6,1185,2],[1193,6,1187,2],[1194,0,1188,0],[1195,0,1189,0],[1196,4,1187,2],[1197,6,1187,2,"key"],[1197,9,1187,2],[1198,6,1187,2,"value"],[1198,11,1187,2],[1199,8,1187,2],[1199,12,1187,2,"_shutdown"],[1199,21,1187,2],[1199,28,1187,2,"_asyncToGenerator2"],[1199,46,1187,2],[1199,47,1187,2,"default"],[1199,54,1187,2],[1199,56,1190,2],[1199,69,1190,41],[1200,10,1191,4],[1200,14,1191,8],[1200,18,1191,12],[1200,19,1191,13,"memoryCheckInterval"],[1200,38,1191,32],[1200,40,1191,34],[1201,12,1192,6,"clearInterval"],[1201,25,1192,19],[1201,26,1192,20],[1201,30,1192,24],[1201,31,1192,25,"memoryCheckInterval"],[1201,50,1192,44],[1201,51,1192,45],[1202,10,1193,4],[1204,10,1195,4],[1205,10,1196,4],[1205,14,1196,8],[1205,18,1196,12],[1205,19,1196,13,"metricQueue"],[1205,30,1196,24],[1205,31,1196,25,"length"],[1205,37,1196,31],[1205,40,1196,34],[1205,41,1196,35],[1205,43,1196,37],[1206,12,1197,6],[1206,18,1197,12],[1206,22,1197,16],[1206,23,1197,17,"flushMetrics"],[1206,35,1197,29],[1206,36,1197,30],[1206,37,1197,31],[1207,10,1198,4],[1208,10,1200,4],[1208,14,1200,8],[1208,15,1200,9,"isInitialized"],[1208,28,1200,22],[1208,31,1200,25],[1208,36,1200,30],[1209,10,1201,4,"EventLogger"],[1209,34,1201,15],[1209,35,1201,16,"info"],[1209,39,1201,20],[1209,40,1201,21],[1209,60,1201,41],[1209,62,1201,43],[1209,93,1201,74],[1209,94,1201,75],[1210,8,1202,2],[1210,9,1202,3],[1211,8,1202,3],[1211,17,1190,15,"shutdown"],[1211,25,1190,23,"shutdown"],[1211,26,1190,23],[1212,10,1190,23],[1212,17,1190,23,"_shutdown"],[1212,26,1190,23],[1212,27,1190,23,"apply"],[1212,32,1190,23],[1212,39,1190,23,"arguments"],[1212,48,1190,23],[1213,8,1190,23],[1214,8,1190,23],[1214,15,1190,15,"shutdown"],[1214,23,1190,23],[1215,6,1190,23],[1216,4,1190,23],[1217,2,1190,23],[1217,7,1205,0],[1218,2,122,45],[1219,2,124,2],[1220,2,108,6,"PerformanceMonitorService"],[1220,27,108,31],[1220,28,125,26,"OFFLINE_METRICS_KEY"],[1220,47,125,45],[1220,50,125,48],[1220,79,125,77],[1221,2,108,6,"PerformanceMonitorService"],[1221,27,108,31],[1221,28,126,26,"OFFLINE_ALERTS_KEY"],[1221,46,126,44],[1221,49,126,47],[1221,77,126,75],[1222,2,1206,7],[1222,6,1206,13,"PerformanceMonitor"],[1222,24,1206,31],[1222,27,1206,31,"exports"],[1222,34,1206,31],[1222,35,1206,31,"PerformanceMonitor"],[1222,53,1206,31],[1222,56,1206,34],[1222,60,1206,38,"PerformanceMonitorService"],[1222,85,1206,63],[1222,86,1206,64],[1222,87,1206,65],[1224,2,1208,0],[1225,2,1209,7],[1225,6,1209,13,"startScreenRender"],[1225,23,1209,30],[1225,26,1209,34,"screenName"],[1225,36,1209,52],[1225,40,1209,57],[1226,4,1210,2,"PerformanceMonitor"],[1226,22,1210,20],[1226,23,1210,21,"startScreenRender"],[1226,40,1210,38],[1226,41,1210,39,"screenName"],[1226,51,1210,49],[1226,52,1210,50],[1227,2,1211,0],[1227,3,1211,1],[1228,2,1211,2,"exports"],[1228,9,1211,2],[1228,10,1211,2,"startScreenRender"],[1228,27,1211,2],[1228,30,1211,2,"startScreenRender"],[1228,47,1211,2],[1229,2,1213,7],[1229,6,1213,13,"endScreenRender"],[1229,21,1213,28],[1229,24,1213,31,"endScreenRender"],[1229,25,1213,32,"screenName"],[1229,35,1213,50],[1229,37,1213,52,"context"],[1229,44,1213,81],[1229,49,1213,86],[1230,4,1214,2,"PerformanceMonitor"],[1230,22,1214,20],[1230,23,1214,21,"endScreenRender"],[1230,38,1214,36],[1230,39,1214,37,"screenName"],[1230,49,1214,47],[1230,51,1214,49,"context"],[1230,58,1214,56],[1230,59,1214,57],[1231,2,1215,0],[1231,3,1215,1],[1232,2,1215,2,"exports"],[1232,9,1215,2],[1232,10,1215,2,"endScreenRender"],[1232,25,1215,2],[1232,28,1215,2,"endScreenRender"],[1232,43,1215,2],[1233,2,1217,7],[1233,6,1217,13,"startApiCall"],[1233,18,1217,25],[1233,21,1217,28,"startApiCall"],[1233,22,1217,29,"requestId"],[1233,31,1217,46],[1233,33,1217,48,"endpoint"],[1233,41,1217,64],[1233,43,1217,66,"method"],[1233,49,1217,80],[1233,54,1217,85],[1234,4,1218,2,"PerformanceMonitor"],[1234,22,1218,20],[1234,23,1218,21,"startApiCall"],[1234,35,1218,33],[1234,36,1218,34,"requestId"],[1234,45,1218,43],[1234,47,1218,45,"endpoint"],[1234,55,1218,53],[1234,57,1218,55,"method"],[1234,63,1218,61],[1234,64,1218,62],[1235,2,1219,0],[1235,3,1219,1],[1236,2,1219,2,"exports"],[1236,9,1219,2],[1236,10,1219,2,"startApiCall"],[1236,22,1219,2],[1236,25,1219,2,"startApiCall"],[1236,37,1219,2],[1237,2,1221,7],[1237,6,1221,13,"endApiCall"],[1237,16,1221,23],[1237,19,1221,26,"endApiCall"],[1237,20,1222,2,"requestId"],[1237,29,1222,19],[1237,31,1223,2,"endpoint"],[1237,39,1223,18],[1237,41,1224,2,"method"],[1237,47,1224,16],[1237,49,1225,2,"statusCode"],[1237,59,1225,20],[1237,61,1226,2,"error"],[1237,66,1226,15],[1237,71,1227,5],[1238,4,1228,2,"PerformanceMonitor"],[1238,22,1228,20],[1238,23,1228,21,"endApiCall"],[1238,33,1228,31],[1238,34,1228,32,"requestId"],[1238,43,1228,41],[1238,45,1228,43,"endpoint"],[1238,53,1228,51],[1238,55,1228,53,"method"],[1238,61,1228,59],[1238,63,1228,61,"statusCode"],[1238,73,1228,71],[1238,75,1228,73,"error"],[1238,80,1228,78],[1238,81,1228,79],[1239,2,1229,0],[1239,3,1229,1],[1240,2,1229,2,"exports"],[1240,9,1229,2],[1240,10,1229,2,"endApiCall"],[1240,20,1229,2],[1240,23,1229,2,"endApiCall"],[1240,33,1229,2],[1241,2,1231,7],[1241,6,1231,13,"trackCustomMetric"],[1241,23,1231,30],[1241,26,1231,33,"trackCustomMetric"],[1241,27,1232,2,"name"],[1241,31,1232,14],[1241,33,1233,2,"value"],[1241,38,1233,15],[1241,40,1234,2,"unit"],[1241,44,1234,33],[1241,46,1235,2,"context"],[1241,53,1235,31],[1241,58,1236,5],[1242,4,1237,2,"PerformanceMonitor"],[1242,22,1237,20],[1242,23,1237,21,"trackCustomMetric"],[1242,40,1237,38],[1242,41,1237,39,"name"],[1242,45,1237,43],[1242,47,1237,45,"value"],[1242,52,1237,50],[1242,54,1237,52,"unit"],[1242,58,1237,56],[1242,60,1237,58,"context"],[1242,67,1237,65],[1242,68,1237,66],[1243,2,1238,0],[1243,3,1238,1],[1245,2,1240,0],[1246,2,1240,0,"exports"],[1246,9,1240,0],[1246,10,1240,0,"trackCustomMetric"],[1246,27,1240,0],[1246,30,1240,0,"trackCustomMetric"],[1246,47,1240,0],[1247,0,1240,0],[1247,3]],"functionMap":{"names":["<global>","PerformanceMonitorService","PerformanceMonitorService#constructor","PerformanceMonitorService#initialize","Promise.resolve.then$argument_0","checkDatabaseAvailability._catch$argument_0","loadOfflineData._catch$argument_0","PerformanceMonitorService#checkDatabaseAvailability","PerformanceMonitorService#trackAppLaunchTime","InteractionManager.runAfterInteractions$argument_0","PerformanceMonitorService#startScreenRender","PerformanceMonitorService#endScreenRender","PerformanceMonitorService#startApiCall","PerformanceMonitorService#endApiCall","PerformanceMonitorService#trackCustomMetric","PerformanceMonitorService#trackMemoryUsage","PerformanceMonitorService#trackBatteryUsage","PerformanceMonitorService#getPerformanceSummary","metrics.filter$argument_0","PerformanceMonitorService#getRecentAlerts","alerts.sort$argument_0","PerformanceMonitorService#clearData","PerformanceMonitorService#exportData","PerformanceMonitorService#trackMetric","PerformanceMonitorService#createAlert","storeOfflineAlerts._catch$argument_0","PerformanceMonitorService#setupMemoryMonitoring","setInterval$argument_0","PerformanceMonitorService#setupFrameRateMonitoring","PerformanceMonitorService#setupPeriodicFlush","setTimeout$argument_0","flushMetrics._catch$argument_0","PerformanceMonitorService#flush","PerformanceMonitorService#flushMetrics","PerformanceMonitorService#sendMetrics","metrics.map$argument_0","results.forEach$argument_0","errors.map$argument_0","PerformanceMonitorService#loadOfflineData","syncOfflineData._catch$argument_0","PerformanceMonitorService#clearOversizedOfflineData","PerformanceMonitorService#storeOfflineMetrics","PerformanceMonitorService#storeOfflineAlerts","PerformanceMonitorService#syncOfflineData","PerformanceMonitorService#recheckDatabaseAvailability","PerformanceMonitorService#shouldTrack","PerformanceMonitorService#calculateStats","metrics.map.sort$argument_0","values.reduce$argument_0","PerformanceMonitorService#groupScreenRenderStats","screenMetrics.forEach$argument_0","Object.entries.forEach$argument_0","values.sort$argument_0","PerformanceMonitorService#groupApiPerformanceStats","apiMetrics.forEach$argument_0","responseTimes.reduce$argument_0","PerformanceMonitorService#calculateMemoryStats","memoryMetrics.map$argument_0","memoryMetrics.filter$argument_0","PerformanceMonitorService#calculateBatteryStats","PerformanceMonitorService#calculateFrameRateStats","PerformanceMonitorService#generateMetricId","PerformanceMonitorService#generateAlertId","PerformanceMonitorService#generateSessionId","PerformanceMonitorService#shutdown","startScreenRender","endScreenRender","startApiCall","endApiCall","trackCustomMetric"],"mappings":"AAA;AC2G;ECoB;GD0B;EEK;mCCS;ODa;6CEG;OFM;mCGG;OHE;+BCI,+BD;GFU;EMK;GN8E;EOK;4CCC;KD0B;GPC;ESK;GTO;EUK;GVoC;EWK;GXO;EYK;GZ6C;EaK;GbiB;EcK;GduC;EeK;GfsB;EgBK;+DCE,iCD;GhBS;EkBK;YCE,2ED;GlBE;EoBK;GpBI;EqBK;GrBK;EsBK;GtBuB;EuBK;6CCgB;ODE;GvBS;EyBK;2CCC;KDE;GzBC;E2BK;G3BI;E4BK;eCE;kBHC;oCIG;WJE;OGE;KDC;G5BC;E+BK;G/BM;EgCK;GhC+C;EiCK;yDCU;KDiC;oBEG;KFI;iHGI,cH;2BGI,2DH;GjCI;EqCK;kBpBgB,4BoB;uCCmC;WDE;GrCgB;EuCK;GvCU;EwCK;GxCoC;EyCK;GzCoC;E0CK;G1CqB;E2CK;G3CgB;E4CK;G5CY;E6CK;+BXK,YW,OC,eD;6BEI,eF;G7CM;EgDK;8C/BC,+B+B;0BCG;KDM;oCEG;iChBC,YgB;uCCC,eD;+BHG,eG;KFI;GhDG;EoDK;2CnCC,0BmC;uBCG;KDM;oCFG;wChBC,YgB;gDjCC,gCiC;2CjCC,iCiC;oDIG,eJ;KEK;GpDG;EuDK;8CtCC,8BsC;qCCM,YD;0CEC;yCFC;6BRI,eQ;GvDI;E0DK;+CzCC,yByC;G1DM;E2DK;G3DM;E4DK;G5DE;E6DK;G7DE;E8DK;G9DE;E+DK;G/DY;CDC;iCiEM;CjEE;+BkEE;ClEE;4BmEE;CnEE;0BoEE;CpEQ;iCqEE;CrEO"}},"type":"js/module"}]}