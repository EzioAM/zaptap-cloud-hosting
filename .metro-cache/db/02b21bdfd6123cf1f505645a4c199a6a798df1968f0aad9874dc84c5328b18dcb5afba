{"dependencies":[{"name":"./parse.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":35,"index":35}}],"key":"oIFLmnySivkJYDs32p5Nj0zvZXQ=","exportNames":["*"]}},{"name":"./compile.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":49,"index":85}}],"key":"Hw6Aisl1ZUKcYyWdELQ0BzJIta4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"compile\", {\n    enumerable: true,\n    get: function get() {\n      return _compile.compile;\n    }\n  });\n  exports.default = nthCheck;\n  Object.defineProperty(exports, \"generate\", {\n    enumerable: true,\n    get: function get() {\n      return _compile.generate;\n    }\n  });\n  Object.defineProperty(exports, \"parse\", {\n    enumerable: true,\n    get: function get() {\n      return _parse.parse;\n    }\n  });\n  exports.sequence = sequence;\n  var _parse = require(_dependencyMap[0], \"./parse.js\");\n  var _compile = require(_dependencyMap[1], \"./compile.js\");\n  /**\n   * Parses and compiles a formula to a highly optimized function.\n   * Combination of {@link parse} and {@link compile}.\n   *\n   * If the formula doesn't match any elements,\n   * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\n   * Otherwise, a function accepting an _index_ is returned, which returns\n   * whether or not the passed _index_ matches the formula.\n   *\n   * Note: The nth-rule starts counting at `1`, the returned function at `0`.\n   *\n   * @param formula The formula to compile.\n   * @example\n   * const check = nthCheck(\"2n+3\");\n   *\n   * check(0); // `false`\n   * check(1); // `false`\n   * check(2); // `true`\n   * check(3); // `false`\n   * check(4); // `true`\n   * check(5); // `false`\n   * check(6); // `true`\n   */\n  function nthCheck(formula) {\n    return (0, _compile.compile)((0, _parse.parse)(formula));\n  }\n  /**\n   * Parses and compiles a formula to a generator that produces a sequence of indices.\n   * Combination of {@link parse} and {@link generate}.\n   *\n   * @param formula The formula to compile.\n   * @returns A function that produces a sequence of indices.\n   * @example <caption>Always increasing</caption>\n   *\n   * ```js\n   * const gen = nthCheck.sequence('2n+3')\n   *\n   * gen() // `1`\n   * gen() // `3`\n   * gen() // `5`\n   * gen() // `8`\n   * gen() // `11`\n   * ```\n   *\n   * @example <caption>With end value</caption>\n   *\n   * ```js\n   *\n   * const gen = nthCheck.sequence('-2n+5');\n   *\n   * gen() // 0\n   * gen() // 2\n   * gen() // 4\n   * gen() // null\n   * ```\n   */\n  function sequence(formula) {\n    return (0, _compile.generate)((0, _parse.parse)(formula));\n  }\n});","lineCount":86,"map":[[25,2,1,0],[25,6,1,0,"_parse"],[25,12,1,0],[25,15,1,0,"require"],[25,22,1,0],[25,23,1,0,"_dependencyMap"],[25,37,1,0],[26,2,2,0],[26,6,2,0,"_compile"],[26,14,2,0],[26,17,2,0,"require"],[26,24,2,0],[26,25,2,0,"_dependencyMap"],[26,39,2,0],[27,2,4,0],[28,0,5,0],[29,0,6,0],[30,0,7,0],[31,0,8,0],[32,0,9,0],[33,0,10,0],[34,0,11,0],[35,0,12,0],[36,0,13,0],[37,0,14,0],[38,0,15,0],[39,0,16,0],[40,0,17,0],[41,0,18,0],[42,0,19,0],[43,0,20,0],[44,0,21,0],[45,0,22,0],[46,0,23,0],[47,0,24,0],[48,0,25,0],[49,0,26,0],[50,2,27,15],[50,11,27,24,"nthCheck"],[50,19,27,32,"nthCheck"],[50,20,27,33,"formula"],[50,27,27,40],[50,29,27,42],[51,4,28,4],[51,11,28,11],[51,15,28,11,"compile"],[51,31,28,18],[51,33,28,19],[51,37,28,19,"parse"],[51,49,28,24],[51,51,28,25,"formula"],[51,58,28,32],[51,59,28,33],[51,60,28,34],[52,2,29,0],[53,2,30,0],[54,0,31,0],[55,0,32,0],[56,0,33,0],[57,0,34,0],[58,0,35,0],[59,0,36,0],[60,0,37,0],[61,0,38,0],[62,0,39,0],[63,0,40,0],[64,0,41,0],[65,0,42,0],[66,0,43,0],[67,0,44,0],[68,0,45,0],[69,0,46,0],[70,0,47,0],[71,0,48,0],[72,0,49,0],[73,0,50,0],[74,0,51,0],[75,0,52,0],[76,0,53,0],[77,0,54,0],[78,0,55,0],[79,0,56,0],[80,0,57,0],[81,0,58,0],[82,0,59,0],[83,2,60,7],[83,11,60,16,"sequence"],[83,19,60,24,"sequence"],[83,20,60,25,"formula"],[83,27,60,32],[83,29,60,34],[84,4,61,4],[84,11,61,11],[84,15,61,11,"generate"],[84,32,61,19],[84,34,61,20],[84,38,61,20,"parse"],[84,50,61,25],[84,52,61,26,"formula"],[84,59,61,33],[84,60,61,34],[84,61,61,35],[85,2,62,0],[86,0,62,1],[86,3]],"functionMap":{"names":["<global>","nthCheck","sequence"],"mappings":"AAA;eC0B;CDE;OE+B;CFE"}},"type":"js/module"}]}