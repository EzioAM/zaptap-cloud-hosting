{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"axios","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":26,"index":26}}],"key":"e45rENb5cSu0Yeh6oC1uWb7lEp4=","exportNames":["*"]}},{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":27},"end":{"line":2,"column":39,"index":66}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"]}},{"name":"./LocalResearchService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":67},"end":{"line":3,"column":77,"index":144}}],"key":"05wTOXJfs/0LERL835S1HlHgBz4=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":145},"end":{"line":4,"column":54,"index":199}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CollaborativeAIResearchService = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _axios = _interopRequireDefault(require(_dependencyMap[5], \"axios\"));\n  var _expoConstants = _interopRequireDefault(require(_dependencyMap[6], \"expo-constants\"));\n  var _LocalResearchService = require(_dependencyMap[7], \"./LocalResearchService\");\n  var _EventLogger = require(_dependencyMap[8], \"../../utils/EventLogger\");\n  var CollaborativeAIResearchService = exports.CollaborativeAIResearchService = /*#__PURE__*/function () {\n    function CollaborativeAIResearchService() {\n      (0, _classCallCheck2.default)(this, CollaborativeAIResearchService);\n      this.maxRounds = 3;\n      // Get API keys from environment\n      this.claudeApiKey = this.getApiKey('claudeApiKey', 'CLAUDE_API_KEY');\n      this.openaiApiKey = this.getApiKey('openaiApiKey', 'OPENAI_API_KEY');\n      _EventLogger.EventLogger.debug('CollaborativeAIResearch', 'ü§ù Collaborative AI Service initialized:', {\n        hasClaudeKey: !!this.claudeApiKey,\n        hasOpenAIKey: !!this.openaiApiKey,\n        canCollaborate: !!(this.claudeApiKey && this.openaiApiKey)\n      });\n    }\n    return (0, _createClass2.default)(CollaborativeAIResearchService, [{\n      key: \"getApiKey\",\n      value: function getApiKey(configKey, envKey) {\n        var _Constants$expoConfig, _Constants$manifest, _Constants$manifest2;\n        return ((_Constants$expoConfig = _expoConstants.default.expoConfig) == null || (_Constants$expoConfig = _Constants$expoConfig.extra) == null ? void 0 : _Constants$expoConfig[configKey]) || ((_Constants$manifest = _expoConstants.default.manifest) == null || (_Constants$manifest = _Constants$manifest.extra) == null ? void 0 : _Constants$manifest[configKey]) || ((_Constants$manifest2 = _expoConstants.default.manifest2) == null || (_Constants$manifest2 = _Constants$manifest2.extra) == null || (_Constants$manifest2 = _Constants$manifest2.expoClient) == null || (_Constants$manifest2 = _Constants$manifest2.extra) == null ? void 0 : _Constants$manifest2[configKey]) || null;\n      }\n\n      /**\n       * Main collaborative research method where AIs bounce ideas off each other\n       */\n    }, {\n      key: \"collaborativeResearch\",\n      value: (function () {\n        var _collaborativeResearch = (0, _asyncToGenerator2.default)(function* (query) {\n          _EventLogger.EventLogger.debug('CollaborativeAIResearch', 'üß† Starting collaborative AI research for:', query.topic);\n          var rounds = [];\n          var collaborativeResult = {\n            topic: query.topic,\n            rounds: [],\n            finalInsights: [],\n            finalRecommendations: [],\n            codeExamples: [],\n            collaborationSummary: '',\n            confidence: 0\n          };\n          try {\n            var _query$focusAreas;\n            // Round 1: Initial exploration\n            var round1 = yield this.conductRound(1, `Research ${query.topic} for a React Native mobile automation app. ${query.context || ''} \n         Focus on: ${((_query$focusAreas = query.focusAreas) == null ? void 0 : _query$focusAreas.join(', ')) || 'best practices, implementation, and optimization'}`, null);\n            rounds.push(round1);\n\n            // Round 2: Build on each other's ideas\n            if (round1.claudeResponse && round1.chatgptResponse) {\n              var round2Question = this.generateRound2Question(round1, query);\n              var round2 = yield this.conductRound(2, round2Question, round1);\n              rounds.push(round2);\n\n              // Round 3: Synthesize and refine\n              if (round2.claudeResponse && round2.chatgptResponse) {\n                var round3Question = this.generateRound3Question(round2, query);\n                var round3 = yield this.conductRound(3, round3Question, round2);\n                rounds.push(round3);\n              }\n            }\n\n            // Synthesize all rounds into final results\n            collaborativeResult.rounds = rounds;\n            collaborativeResult.finalInsights = this.synthesizeInsights(rounds);\n            collaborativeResult.finalRecommendations = this.synthesizeRecommendations(rounds);\n            collaborativeResult.codeExamples = this.extractCodeExamples(rounds);\n            collaborativeResult.collaborationSummary = this.generateCollaborationSummary(rounds);\n            collaborativeResult.confidence = this.calculateConfidence(rounds);\n          } catch (error) {\n            _EventLogger.EventLogger.error('CollaborativeAIResearch', 'Collaborative research error:', error);\n            // Fallback to enhanced local research if collaboration fails\n            return this.getFallbackCollaborativeResult(query);\n          }\n          return collaborativeResult;\n        });\n        function collaborativeResearch(_x) {\n          return _collaborativeResearch.apply(this, arguments);\n        }\n        return collaborativeResearch;\n      }()\n      /**\n       * Conduct a single round of AI collaboration\n       */\n      )\n    }, {\n      key: \"conductRound\",\n      value: (function () {\n        var _conductRound = (0, _asyncToGenerator2.default)(function* (roundNumber, question, previousRound) {\n          _EventLogger.EventLogger.debug('CollaborativeAIResearch', 'üîÑ Round ${roundNumber}: ${question.substring(0, 100)}...');\n          var round = {\n            round: roundNumber,\n            question: question,\n            synthesis: []\n          };\n\n          // Get Claude's perspective\n          if (this.claudeApiKey) {\n            try {\n              var claudePrompt = previousRound ? `${question}\\n\\nBuilding on the previous discussion where ChatGPT said: \"${this.summarizeResponse(previousRound.chatgptResponse)}\"` : question;\n              round.claudeResponse = yield this.queryClaudeAPI(claudePrompt);\n            } catch (error) {\n              _EventLogger.EventLogger.error('CollaborativeAIResearch', 'Claude API error in round', roundNumber, error);\n            }\n          }\n\n          // Get ChatGPT's perspective\n          if (this.openaiApiKey) {\n            try {\n              var chatgptPrompt = previousRound && round.claudeResponse ? `${question}\\n\\nClaude just suggested: \"${this.summarizeResponse(round.claudeResponse)}\". Build upon or respectfully challenge these ideas.` : question;\n              round.chatgptResponse = yield this.queryChatGPTAPI(chatgptPrompt);\n            } catch (error) {\n              _EventLogger.EventLogger.error('CollaborativeAIResearch', 'ChatGPT API error in round', roundNumber, error);\n            }\n          }\n\n          // Synthesize the round\n          round.synthesis = this.synthesizeRound(round);\n          return round;\n        });\n        function conductRound(_x2, _x3, _x4) {\n          return _conductRound.apply(this, arguments);\n        }\n        return conductRound;\n      }()\n      /**\n       * Query Claude API\n       */\n      )\n    }, {\n      key: \"queryClaudeAPI\",\n      value: (function () {\n        var _queryClaudeAPI = (0, _asyncToGenerator2.default)(function* (prompt) {\n          var response = yield _axios.default.post('https://api.anthropic.com/v1/messages', {\n            model: 'claude-3-opus-20240229',\n            max_tokens: 1024,\n            messages: [{\n              role: 'user',\n              content: prompt\n            }]\n          }, {\n            headers: {\n              'x-api-key': this.claudeApiKey,\n              'anthropic-version': '2023-06-01',\n              'content-type': 'application/json'\n            },\n            timeout: 30000\n          });\n          var content = response.data.content[0].text;\n          return {\n            provider: 'claude',\n            content: content,\n            insights: this.extractInsights(content),\n            recommendations: this.extractRecommendations(content),\n            codeExamples: this.extractCodeExamples(content),\n            timestamp: Date.now()\n          };\n        });\n        function queryClaudeAPI(_x5) {\n          return _queryClaudeAPI.apply(this, arguments);\n        }\n        return queryClaudeAPI;\n      }()\n      /**\n       * Query ChatGPT API\n       */\n      )\n    }, {\n      key: \"queryChatGPTAPI\",\n      value: (function () {\n        var _queryChatGPTAPI = (0, _asyncToGenerator2.default)(function* (prompt) {\n          var response = yield _axios.default.post('https://api.openai.com/v1/chat/completions', {\n            model: 'gpt-4',\n            messages: [{\n              role: 'user',\n              content: prompt\n            }],\n            temperature: 0.7,\n            max_tokens: 1024\n          }, {\n            headers: {\n              'Authorization': `Bearer ${this.openaiApiKey}`,\n              'Content-Type': 'application/json'\n            },\n            timeout: 30000\n          });\n          var content = response.data.choices[0].message.content;\n          return {\n            provider: 'chatgpt',\n            content: content,\n            insights: this.extractInsights(content),\n            recommendations: this.extractRecommendations(content),\n            codeExamples: this.extractCodeExamples(content),\n            timestamp: Date.now()\n          };\n        });\n        function queryChatGPTAPI(_x6) {\n          return _queryChatGPTAPI.apply(this, arguments);\n        }\n        return queryChatGPTAPI;\n      }()\n      /**\n       * Generate question for round 2 based on round 1 responses\n       */\n      )\n    }, {\n      key: \"generateRound2Question\",\n      value: function generateRound2Question(round1, query) {\n        var _round1$claudeRespons, _round1$chatgptRespon;\n        var claudeInsights = ((_round1$claudeRespons = round1.claudeResponse) == null ? void 0 : _round1$claudeRespons.insights.slice(0, 2).join('; ')) || '';\n        var chatgptInsights = ((_round1$chatgptRespon = round1.chatgptResponse) == null ? void 0 : _round1$chatgptRespon.insights.slice(0, 2).join('; ')) || '';\n        return `Based on our initial research on ${query.topic}:\n    \nClaude highlighted: ${claudeInsights}\nChatGPT emphasized: ${chatgptInsights}\n\nLet's dive deeper into the practical implementation. What are the specific code patterns, \npotential pitfalls, and optimization strategies for implementing this in a React Native app? \nPlease provide concrete examples and address any points of disagreement.`;\n      }\n\n      /**\n       * Generate question for round 3 based on round 2 responses\n       */\n    }, {\n      key: \"generateRound3Question\",\n      value: function generateRound3Question(round2, query) {\n        return `Let's synthesize our discussion on ${query.topic}:\n\n1. What are the top 3-5 most important insights for developers?\n2. What's the recommended implementation approach considering both perspectives?\n3. What code example best demonstrates the optimal solution?\n4. What are the key trade-offs developers should consider?\n\nPlease provide a final, actionable summary.`;\n      }\n\n      /**\n       * Extract insights from AI response\n       */\n    }, {\n      key: \"extractInsights\",\n      value: function extractInsights(content) {\n        var insights = [];\n\n        // Look for bullet points, numbered lists, or key phrases\n        var lines = content.split('\\n');\n        lines.forEach(function (line) {\n          if (line.match(/^[-‚Ä¢*]\\s+(.+)/) || line.match(/^\\d+\\.\\s+(.+)/)) {\n            var insight = line.replace(/^[-‚Ä¢*\\d.]\\s+/, '').trim();\n            if (insight.length > 20 && insight.length < 200) {\n              insights.push(insight);\n            }\n          }\n        });\n\n        // Also extract from sections\n        var insightSection = content.match(/insights?:?\\s*\\n([\\s\\S]*?)(?:\\n\\n|$)/i);\n        if (insightSection) {\n          var sectionInsights = insightSection[1].split('\\n').filter(function (line) {\n            return line.trim();\n          }).map(function (line) {\n            return line.replace(/^[-‚Ä¢*\\d.]\\s+/, '').trim();\n          });\n          insights.push.apply(insights, (0, _toConsumableArray2.default)(sectionInsights));\n        }\n        return (0, _toConsumableArray2.default)(new Set(insights)).slice(0, 10);\n      }\n\n      /**\n       * Extract recommendations from AI response\n       */\n    }, {\n      key: \"extractRecommendations\",\n      value: function extractRecommendations(content) {\n        var recommendations = [];\n\n        // Look for recommendation patterns\n        var patterns = [/recommend[ation]?:?\\s*(.+)/gi, /suggest[ion]?:?\\s*(.+)/gi, /should\\s+(.+)/gi, /best practice[s]?:?\\s*(.+)/gi];\n        patterns.forEach(function (pattern) {\n          var matches = content.matchAll(pattern);\n          for (var match of matches) {\n            if (match[1] && match[1].length > 20 && match[1].length < 200) {\n              recommendations.push(match[1].trim());\n            }\n          }\n        });\n        return (0, _toConsumableArray2.default)(new Set(recommendations)).slice(0, 10);\n      }\n\n      /**\n       * Extract code examples from AI response\n       */\n    }, {\n      key: \"extractCodeExamples\",\n      value:\n      /**\n       * Extract all code examples from rounds\n       */\n      function extractCodeExamples(rounds) {\n        var allCodeExamples = [];\n        rounds.forEach(function (round) {\n          var _round$claudeResponse, _round$chatgptRespons;\n          if ((_round$claudeResponse = round.claudeResponse) != null && _round$claudeResponse.codeExamples) {\n            allCodeExamples.push.apply(allCodeExamples, (0, _toConsumableArray2.default)(round.claudeResponse.codeExamples));\n          }\n          if ((_round$chatgptRespons = round.chatgptResponse) != null && _round$chatgptRespons.codeExamples) {\n            allCodeExamples.push.apply(allCodeExamples, (0, _toConsumableArray2.default)(round.chatgptResponse.codeExamples));\n          }\n        });\n        return (0, _toConsumableArray2.default)(new Set(allCodeExamples)).slice(0, 5);\n      }\n\n      /**\n       * Generate a summary of the collaboration\n       */\n    }, {\n      key: \"summarizeResponse\",\n      value:\n      /**\n       * Summarize an AI response for context\n       */\n      function summarizeResponse(response) {\n        if (!response) return 'no previous response';\n        var topInsights = response.insights.slice(0, 2).join('; ');\n        var topRecs = response.recommendations.slice(0, 2).join('; ');\n        return `Insights: ${topInsights || 'none'}. Recommendations: ${topRecs || 'none'}.`;\n      }\n\n      /**\n       * Synthesize insights from a single round\n       */\n    }, {\n      key: \"synthesizeRound\",\n      value: function synthesizeRound(round) {\n        var synthesis = [];\n        if (round.claudeResponse && round.chatgptResponse) {\n          // Find agreements\n          var claudeInsights = new Set(round.claudeResponse.insights);\n          var commonInsights = round.chatgptResponse.insights.filter(function (i) {\n            return Array.from(claudeInsights).some(function (ci) {\n              return ci.toLowerCase().includes(i.toLowerCase().substring(0, 20)) || i.toLowerCase().includes(ci.toLowerCase().substring(0, 20));\n            });\n          });\n          if (commonInsights.length > 0) {\n            synthesis.push(`Both AIs agree: ${commonInsights[0]}`);\n          }\n\n          // Find unique perspectives\n          var uniqueClaude = round.claudeResponse.insights.find(function (i) {\n            return !round.chatgptResponse.insights.some(function (gi) {\n              return gi.toLowerCase().includes(i.toLowerCase().substring(0, 20));\n            });\n          });\n          if (uniqueClaude) {\n            synthesis.push(`Claude's unique insight: ${uniqueClaude}`);\n          }\n          var uniqueChatGPT = round.chatgptResponse.insights.find(function (i) {\n            return !round.claudeResponse.insights.some(function (ci) {\n              return ci.toLowerCase().includes(i.toLowerCase().substring(0, 20));\n            });\n          });\n          if (uniqueChatGPT) {\n            synthesis.push(`ChatGPT's unique insight: ${uniqueChatGPT}`);\n          }\n        }\n        return synthesis;\n      }\n\n      /**\n       * Synthesize all insights from all rounds\n       */\n    }, {\n      key: \"synthesizeInsights\",\n      value: function synthesizeInsights(rounds) {\n        var allInsights = [];\n        rounds.forEach(function (round) {\n          if (round.claudeResponse) {\n            allInsights.push.apply(allInsights, (0, _toConsumableArray2.default)(round.claudeResponse.insights));\n          }\n          if (round.chatgptResponse) {\n            allInsights.push.apply(allInsights, (0, _toConsumableArray2.default)(round.chatgptResponse.insights));\n          }\n          allInsights.push.apply(allInsights, (0, _toConsumableArray2.default)(round.synthesis));\n        });\n\n        // Deduplicate and prioritize\n        var uniqueInsights = (0, _toConsumableArray2.default)(new Set(allInsights));\n\n        // Sort by frequency (insights that appear in multiple rounds)\n        var insightFrequency = new Map();\n        allInsights.forEach(function (insight) {\n          insightFrequency.set(insight, (insightFrequency.get(insight) || 0) + 1);\n        });\n        return uniqueInsights.sort(function (a, b) {\n          return (insightFrequency.get(b) || 0) - (insightFrequency.get(a) || 0);\n        }).slice(0, 10);\n      }\n\n      /**\n       * Synthesize all recommendations from all rounds\n       */\n    }, {\n      key: \"synthesizeRecommendations\",\n      value: function synthesizeRecommendations(rounds) {\n        var allRecommendations = [];\n        rounds.forEach(function (round) {\n          if (round.claudeResponse) {\n            allRecommendations.push.apply(allRecommendations, (0, _toConsumableArray2.default)(round.claudeResponse.recommendations));\n          }\n          if (round.chatgptResponse) {\n            allRecommendations.push.apply(allRecommendations, (0, _toConsumableArray2.default)(round.chatgptResponse.recommendations));\n          }\n        });\n        return (0, _toConsumableArray2.default)(new Set(allRecommendations)).slice(0, 12);\n      }\n    }, {\n      key: \"generateCollaborationSummary\",\n      value: function generateCollaborationSummary(rounds) {\n        var totalResponses = rounds.reduce(function (sum, round) {\n          return sum + (round.claudeResponse ? 1 : 0) + (round.chatgptResponse ? 1 : 0);\n        }, 0);\n        var agreements = rounds.flatMap(function (r) {\n          return r.synthesis.filter(function (s) {\n            return s.includes('agree');\n          });\n        });\n        var uniqueInsights = rounds.flatMap(function (r) {\n          return r.synthesis.filter(function (s) {\n            return s.includes('unique');\n          });\n        });\n        return `Conducted ${rounds.length} rounds of AI collaboration with ${totalResponses} total responses. \n            Found ${agreements.length} points of agreement and ${uniqueInsights.length} unique perspectives. \n            The AIs built upon each other's ideas to provide comprehensive insights.`;\n      }\n\n      /**\n       * Calculate confidence score based on collaboration quality\n       */\n    }, {\n      key: \"calculateConfidence\",\n      value: function calculateConfidence(rounds) {\n        var score = 0.5; // Base score\n\n        // Add points for successful rounds\n        rounds.forEach(function (round) {\n          if (round.claudeResponse) score += 0.1;\n          if (round.chatgptResponse) score += 0.1;\n          if (round.synthesis.length > 0) score += 0.05;\n        });\n\n        // Bonus for multi-round collaboration\n        if (rounds.length >= 3) score += 0.1;\n        return Math.min(score, 1.0);\n      }\n\n      /**\n       * Generate fallback collaborative result using enhanced local data\n       */\n    }, {\n      key: \"getFallbackCollaborativeResult\",\n      value: function getFallbackCollaborativeResult(query) {\n        var localTopic = _LocalResearchService.LocalResearchService.getResearch(query.topic);\n        return {\n          topic: query.topic,\n          rounds: [{\n            round: 1,\n            question: query.topic,\n            synthesis: ['Using enhanced local research data due to API unavailability']\n          }],\n          finalInsights: (localTopic == null ? void 0 : localTopic.insights) || [`Consider implementing ${query.topic} using React Native best practices`, 'Ensure cross-platform compatibility', 'Focus on performance optimization', 'Implement proper error handling'],\n          finalRecommendations: (localTopic == null ? void 0 : localTopic.recommendations) || ['Research similar implementations in the React Native community', 'Start with a proof of concept', 'Test thoroughly on both platforms', 'Consider using established libraries'],\n          codeExamples: (localTopic == null ? void 0 : localTopic.codeExamples) || [],\n          collaborationSummary: 'Using curated local knowledge base. Enable API keys for collaborative AI research.',\n          confidence: 0.7\n        };\n      }\n\n      /**\n       * Convert collaborative result to ResearchTopic format\n       */\n    }, {\n      key: \"toResearchTopic\",\n      value: function toResearchTopic(result) {\n        return {\n          topic: result.topic,\n          insights: result.finalInsights,\n          recommendations: result.finalRecommendations,\n          codeExamples: result.codeExamples,\n          sources: ['Claude AI', 'ChatGPT', 'Collaborative Synthesis'],\n          lastUpdated: new Date().toISOString()\n        };\n      }\n    }]);\n  }();\n});","lineCount":508,"map":[[11,2,1,0],[11,6,1,0,"_axios"],[11,12,1,0],[11,15,1,0,"_interopRequireDefault"],[11,37,1,0],[11,38,1,0,"require"],[11,45,1,0],[11,46,1,0,"_dependencyMap"],[11,60,1,0],[12,2,2,0],[12,6,2,0,"_expoConstants"],[12,20,2,0],[12,23,2,0,"_interopRequireDefault"],[12,45,2,0],[12,46,2,0,"require"],[12,53,2,0],[12,54,2,0,"_dependencyMap"],[12,68,2,0],[13,2,3,0],[13,6,3,0,"_LocalResearchService"],[13,27,3,0],[13,30,3,0,"require"],[13,37,3,0],[13,38,3,0,"_dependencyMap"],[13,52,3,0],[14,2,4,0],[14,6,4,0,"_EventLogger"],[14,18,4,0],[14,21,4,0,"require"],[14,28,4,0],[14,29,4,0,"_dependencyMap"],[14,43,4,0],[15,2,4,54],[15,6,41,13,"CollaborativeAIResearchService"],[15,36,41,43],[15,39,41,43,"exports"],[15,46,41,43],[15,47,41,43,"CollaborativeAIResearchService"],[15,77,41,43],[16,4,46,2],[16,13,46,2,"CollaborativeAIResearchService"],[16,44,46,2],[16,46,46,16],[17,6,46,16],[17,10,46,16,"_classCallCheck2"],[17,26,46,16],[17,27,46,16,"default"],[17,34,46,16],[17,42,46,16,"CollaborativeAIResearchService"],[17,72,46,16],[18,6,46,16],[18,11,44,10,"maxRounds"],[18,20,44,19],[18,23,44,22],[18,24,44,23],[19,6,47,4],[20,6,48,4],[20,10,48,8],[20,11,48,9,"claudeApiKey"],[20,23,48,21],[20,26,48,24],[20,30,48,28],[20,31,48,29,"getApiKey"],[20,40,48,38],[20,41,48,39],[20,55,48,53],[20,57,48,55],[20,73,48,71],[20,74,48,72],[21,6,49,4],[21,10,49,8],[21,11,49,9,"openaiApiKey"],[21,23,49,21],[21,26,49,24],[21,30,49,28],[21,31,49,29,"getApiKey"],[21,40,49,38],[21,41,49,39],[21,55,49,53],[21,57,49,55],[21,73,49,71],[21,74,49,72],[22,6,51,4,"EventLogger"],[22,30,51,15],[22,31,51,16,"debug"],[22,36,51,21],[22,37,51,22],[22,62,51,47],[22,64,51,49],[22,106,51,91],[22,108,51,93],[23,8,52,6,"hasClaudeKey"],[23,20,52,18],[23,22,52,20],[23,23,52,21],[23,24,52,22],[23,28,52,26],[23,29,52,27,"claudeApiKey"],[23,41,52,39],[24,8,53,6,"hasOpenAIKey"],[24,20,53,18],[24,22,53,20],[24,23,53,21],[24,24,53,22],[24,28,53,26],[24,29,53,27,"openaiApiKey"],[24,41,53,39],[25,8,54,6,"canCollaborate"],[25,22,54,20],[25,24,54,22],[25,25,54,23],[25,27,54,25],[25,31,54,29],[25,32,54,30,"claudeApiKey"],[25,44,54,42],[25,48,54,46],[25,52,54,50],[25,53,54,51,"openaiApiKey"],[25,65,54,63],[26,6,55,4],[26,7,55,5],[26,8,55,6],[27,4,56,2],[28,4,56,3],[28,15,56,3,"_createClass2"],[28,28,56,3],[28,29,56,3,"default"],[28,36,56,3],[28,38,56,3,"CollaborativeAIResearchService"],[28,68,56,3],[29,6,56,3,"key"],[29,9,56,3],[30,6,56,3,"value"],[30,11,56,3],[30,13,58,2],[30,22,58,10,"getApiKey"],[30,31,58,19,"getApiKey"],[30,32,58,20,"configKey"],[30,41,58,37],[30,43,58,39,"envKey"],[30,49,58,53],[30,51,58,70],[31,8,58,70],[31,12,58,70,"_Constants$expoConfig"],[31,33,58,70],[31,35,58,70,"_Constants$manifest"],[31,54,58,70],[31,56,58,70,"_Constants$manifest2"],[31,76,58,70],[32,8,59,4],[32,15,59,11],[32,17,59,11,"_Constants$expoConfig"],[32,38,59,11],[32,41,59,11,"Constants"],[32,63,59,20],[32,64,59,21,"expoConfig"],[32,74,59,31],[32,88,59,31,"_Constants$expoConfig"],[32,109,59,31],[32,112,59,11,"_Constants$expoConfig"],[32,133,59,11],[32,134,59,33,"extra"],[32,139,59,38],[32,160,59,11,"_Constants$expoConfig"],[32,181,59,11],[32,182,59,41,"configKey"],[32,191,59,50],[32,192,59,51],[32,199,59,51,"_Constants$manifest"],[32,218,59,51],[32,221,60,11,"Constants"],[32,243,60,20],[32,244,60,21,"manifest"],[32,252,60,29],[32,266,60,29,"_Constants$manifest"],[32,285,60,29],[32,288,60,11,"_Constants$manifest"],[32,307,60,11],[32,308,60,31,"extra"],[32,313,60,36],[32,334,60,11,"_Constants$manifest"],[32,353,60,11],[32,354,60,39,"configKey"],[32,363,60,48],[32,364,60,49],[32,371,60,49,"_Constants$manifest2"],[32,391,60,49],[32,394,61,11,"Constants"],[32,416,61,20],[32,417,61,21,"manifest2"],[32,426,61,30],[32,440,61,30,"_Constants$manifest2"],[32,460,61,30],[32,463,61,11,"_Constants$manifest2"],[32,483,61,11],[32,484,61,32,"extra"],[32,489,61,37],[32,503,61,37,"_Constants$manifest2"],[32,523,61,37],[32,526,61,11,"_Constants$manifest2"],[32,546,61,11],[32,547,61,39,"expoClient"],[32,557,61,49],[32,571,61,49,"_Constants$manifest2"],[32,591,61,49],[32,594,61,11,"_Constants$manifest2"],[32,614,61,11],[32,615,61,51,"extra"],[32,620,61,56],[32,641,61,11,"_Constants$manifest2"],[32,661,61,11],[32,662,61,59,"configKey"],[32,671,61,68],[32,672,61,69],[32,677,62,11],[32,681,62,15],[33,6,63,2],[35,6,65,2],[36,0,66,0],[37,0,67,0],[38,4,65,2],[39,6,65,2,"key"],[39,9,65,2],[40,6,65,2,"value"],[40,11,65,2],[41,8,65,2],[41,12,65,2,"_collaborativeResearch"],[41,34,65,2],[41,41,65,2,"_asyncToGenerator2"],[41,59,65,2],[41,60,65,2,"default"],[41,67,65,2],[41,69,68,2],[41,80,68,30,"query"],[41,85,68,50],[41,87,68,82],[42,10,69,4,"EventLogger"],[42,34,69,15],[42,35,69,16,"debug"],[42,40,69,21],[42,41,69,22],[42,66,69,47],[42,68,69,49],[42,112,69,93],[42,114,69,95,"query"],[42,119,69,100],[42,120,69,101,"topic"],[42,125,69,106],[42,126,69,107],[43,10,71,4],[43,14,71,10,"rounds"],[43,20,71,38],[43,23,71,41],[43,25,71,43],[44,10,72,4],[44,14,72,10,"collaborativeResult"],[44,33,72,50],[44,36,72,53],[45,12,73,6,"topic"],[45,17,73,11],[45,19,73,13,"query"],[45,24,73,18],[45,25,73,19,"topic"],[45,30,73,24],[46,12,74,6,"rounds"],[46,18,74,12],[46,20,74,14],[46,22,74,16],[47,12,75,6,"finalInsights"],[47,25,75,19],[47,27,75,21],[47,29,75,23],[48,12,76,6,"finalRecommendations"],[48,32,76,26],[48,34,76,28],[48,36,76,30],[49,12,77,6,"codeExamples"],[49,24,77,18],[49,26,77,20],[49,28,77,22],[50,12,78,6,"collaborationSummary"],[50,32,78,26],[50,34,78,28],[50,36,78,30],[51,12,79,6,"confidence"],[51,22,79,16],[51,24,79,18],[52,10,80,4],[52,11,80,5],[53,10,82,4],[53,14,82,8],[54,12,82,8],[54,16,82,8,"_query$focusAreas"],[54,33,82,8],[55,12,83,6],[56,12,84,6],[56,16,84,12,"round1"],[56,22,84,18],[56,31,84,27],[56,35,84,31],[56,36,84,32,"conductRound"],[56,48,84,44],[56,49,84,45],[56,50,84,46],[56,52,85,8],[56,64,85,20,"query"],[56,69,85,25],[56,70,85,26,"topic"],[56,75,85,31],[56,121,85,77,"query"],[56,126,85,82],[56,127,85,83,"context"],[56,134,85,90],[56,138,85,94],[56,140,85,96],[57,0,86,0],[57,21,86,21],[57,23,86,21,"_query$focusAreas"],[57,40,86,21],[57,43,86,21,"query"],[57,48,86,26],[57,49,86,27,"focusAreas"],[57,59,86,37],[57,80,86,21,"_query$focusAreas"],[57,97,86,21],[57,98,86,39,"join"],[57,102,86,43],[57,103,86,44],[57,107,86,48],[57,108,86,49],[57,113,86,53],[57,163,86,103],[57,165,86,105],[57,167,87,8],[57,171,88,6],[57,172,88,7],[58,12,89,6,"rounds"],[58,18,89,12],[58,19,89,13,"push"],[58,23,89,17],[58,24,89,18,"round1"],[58,30,89,24],[58,31,89,25],[60,12,91,6],[61,12,92,6],[61,16,92,10,"round1"],[61,22,92,16],[61,23,92,17,"claudeResponse"],[61,37,92,31],[61,41,92,35,"round1"],[61,47,92,41],[61,48,92,42,"chatgptResponse"],[61,63,92,57],[61,65,92,59],[62,14,93,8],[62,18,93,14,"round2Question"],[62,32,93,28],[62,35,93,31],[62,39,93,35],[62,40,93,36,"generateRound2Question"],[62,62,93,58],[62,63,93,59,"round1"],[62,69,93,65],[62,71,93,67,"query"],[62,76,93,72],[62,77,93,73],[63,14,94,8],[63,18,94,14,"round2"],[63,24,94,20],[63,33,94,29],[63,37,94,33],[63,38,94,34,"conductRound"],[63,50,94,46],[63,51,94,47],[63,52,94,48],[63,54,94,50,"round2Question"],[63,68,94,64],[63,70,94,66,"round1"],[63,76,94,72],[63,77,94,73],[64,14,95,8,"rounds"],[64,20,95,14],[64,21,95,15,"push"],[64,25,95,19],[64,26,95,20,"round2"],[64,32,95,26],[64,33,95,27],[66,14,97,8],[67,14,98,8],[67,18,98,12,"round2"],[67,24,98,18],[67,25,98,19,"claudeResponse"],[67,39,98,33],[67,43,98,37,"round2"],[67,49,98,43],[67,50,98,44,"chatgptResponse"],[67,65,98,59],[67,67,98,61],[68,16,99,10],[68,20,99,16,"round3Question"],[68,34,99,30],[68,37,99,33],[68,41,99,37],[68,42,99,38,"generateRound3Question"],[68,64,99,60],[68,65,99,61,"round2"],[68,71,99,67],[68,73,99,69,"query"],[68,78,99,74],[68,79,99,75],[69,16,100,10],[69,20,100,16,"round3"],[69,26,100,22],[69,35,100,31],[69,39,100,35],[69,40,100,36,"conductRound"],[69,52,100,48],[69,53,100,49],[69,54,100,50],[69,56,100,52,"round3Question"],[69,70,100,66],[69,72,100,68,"round2"],[69,78,100,74],[69,79,100,75],[70,16,101,10,"rounds"],[70,22,101,16],[70,23,101,17,"push"],[70,27,101,21],[70,28,101,22,"round3"],[70,34,101,28],[70,35,101,29],[71,14,102,8],[72,12,103,6],[74,12,105,6],[75,12,106,6,"collaborativeResult"],[75,31,106,25],[75,32,106,26,"rounds"],[75,38,106,32],[75,41,106,35,"rounds"],[75,47,106,41],[76,12,107,6,"collaborativeResult"],[76,31,107,25],[76,32,107,26,"finalInsights"],[76,45,107,39],[76,48,107,42],[76,52,107,46],[76,53,107,47,"synthesizeInsights"],[76,71,107,65],[76,72,107,66,"rounds"],[76,78,107,72],[76,79,107,73],[77,12,108,6,"collaborativeResult"],[77,31,108,25],[77,32,108,26,"finalRecommendations"],[77,52,108,46],[77,55,108,49],[77,59,108,53],[77,60,108,54,"synthesizeRecommendations"],[77,85,108,79],[77,86,108,80,"rounds"],[77,92,108,86],[77,93,108,87],[78,12,109,6,"collaborativeResult"],[78,31,109,25],[78,32,109,26,"codeExamples"],[78,44,109,38],[78,47,109,41],[78,51,109,45],[78,52,109,46,"extractCodeExamples"],[78,71,109,65],[78,72,109,66,"rounds"],[78,78,109,72],[78,79,109,73],[79,12,110,6,"collaborativeResult"],[79,31,110,25],[79,32,110,26,"collaborationSummary"],[79,52,110,46],[79,55,110,49],[79,59,110,53],[79,60,110,54,"generateCollaborationSummary"],[79,88,110,82],[79,89,110,83,"rounds"],[79,95,110,89],[79,96,110,90],[80,12,111,6,"collaborativeResult"],[80,31,111,25],[80,32,111,26,"confidence"],[80,42,111,36],[80,45,111,39],[80,49,111,43],[80,50,111,44,"calculateConfidence"],[80,69,111,63],[80,70,111,64,"rounds"],[80,76,111,70],[80,77,111,71],[81,10,113,4],[81,11,113,5],[81,12,113,6],[81,19,113,13,"error"],[81,24,113,18],[81,26,113,20],[82,12,114,6,"EventLogger"],[82,36,114,17],[82,37,114,18,"error"],[82,42,114,23],[82,43,114,24],[82,68,114,49],[82,70,114,51],[82,101,114,82],[82,103,114,84,"error"],[82,108,114,98],[82,109,114,99],[83,12,115,6],[84,12,116,6],[84,19,116,13],[84,23,116,17],[84,24,116,18,"getFallbackCollaborativeResult"],[84,54,116,48],[84,55,116,49,"query"],[84,60,116,54],[84,61,116,55],[85,10,117,4],[86,10,119,4],[86,17,119,11,"collaborativeResult"],[86,36,119,30],[87,8,120,2],[87,9,120,3],[88,8,120,3],[88,17,68,8,"collaborativeResearch"],[88,38,68,29,"collaborativeResearch"],[88,39,68,29,"_x"],[88,41,68,29],[89,10,68,29],[89,17,68,29,"_collaborativeResearch"],[89,39,68,29],[89,40,68,29,"apply"],[89,45,68,29],[89,52,68,29,"arguments"],[89,61,68,29],[90,8,68,29],[91,8,68,29],[91,15,68,8,"collaborativeResearch"],[91,36,68,29],[92,6,68,29],[93,6,122,2],[94,0,123,0],[95,0,124,0],[96,6,122,2],[97,4,122,2],[98,6,122,2,"key"],[98,9,122,2],[99,6,122,2,"value"],[99,11,122,2],[100,8,122,2],[100,12,122,2,"_conductRound"],[100,25,122,2],[100,32,122,2,"_asyncToGenerator2"],[100,50,122,2],[100,51,122,2,"default"],[100,58,122,2],[100,60,125,2],[100,71,126,4,"roundNumber"],[100,82,126,23],[100,84,127,4,"question"],[100,92,127,20],[100,94,128,4,"previousRound"],[100,107,128,44],[100,109,129,33],[101,10,130,4,"EventLogger"],[101,34,130,15],[101,35,130,16,"debug"],[101,40,130,21],[101,41,130,22],[101,66,130,47],[101,68,130,49],[101,127,130,108],[101,128,130,109],[102,10,132,4],[102,14,132,10,"round"],[102,19,132,35],[102,22,132,38],[103,12,133,6,"round"],[103,17,133,11],[103,19,133,13,"roundNumber"],[103,30,133,24],[104,12,134,6,"question"],[104,20,134,14],[104,22,134,6,"question"],[104,30,134,14],[105,12,135,6,"synthesis"],[105,21,135,15],[105,23,135,17],[106,10,136,4],[106,11,136,5],[108,10,138,4],[109,10,139,4],[109,14,139,8],[109,18,139,12],[109,19,139,13,"claudeApiKey"],[109,31,139,25],[109,33,139,27],[110,12,140,6],[110,16,140,10],[111,14,141,8],[111,18,141,14,"claudePrompt"],[111,30,141,26],[111,33,141,29,"previousRound"],[111,46,141,42],[111,49,142,12],[111,52,142,15,"question"],[111,60,142,23],[111,124,142,87],[111,128,142,91],[111,129,142,92,"summarizeResponse"],[111,146,142,109],[111,147,142,110,"previousRound"],[111,160,142,123],[111,161,142,124,"chatgptResponse"],[111,176,142,139],[111,177,142,140],[111,180,142,143],[111,183,143,12,"question"],[111,191,143,20],[112,14,145,8,"round"],[112,19,145,13],[112,20,145,14,"claudeResponse"],[112,34,145,28],[112,43,145,37],[112,47,145,41],[112,48,145,42,"queryClaudeAPI"],[112,62,145,56],[112,63,145,57,"claudePrompt"],[112,75,145,69],[112,76,145,70],[113,12,146,6],[113,13,146,7],[113,14,146,8],[113,21,146,15,"error"],[113,26,146,20],[113,28,146,22],[114,14,147,8,"EventLogger"],[114,38,147,19],[114,39,147,20,"error"],[114,44,147,25],[114,45,147,26],[114,70,147,51],[114,72,147,53],[114,99,147,80],[114,101,147,82,"roundNumber"],[114,112,147,93],[114,114,147,95,"error"],[114,119,147,109],[114,120,147,110],[115,12,148,6],[116,10,149,4],[118,10,151,4],[119,10,152,4],[119,14,152,8],[119,18,152,12],[119,19,152,13,"openaiApiKey"],[119,31,152,25],[119,33,152,27],[120,12,153,6],[120,16,153,10],[121,14,154,8],[121,18,154,14,"chatgptPrompt"],[121,31,154,27],[121,34,154,30,"previousRound"],[121,47,154,43],[121,51,154,47,"round"],[121,56,154,52],[121,57,154,53,"claudeResponse"],[121,71,154,67],[121,74,155,12],[121,77,155,15,"question"],[121,85,155,23],[121,116,155,54],[121,120,155,58],[121,121,155,59,"summarizeResponse"],[121,138,155,76],[121,139,155,77,"round"],[121,144,155,82],[121,145,155,83,"claudeResponse"],[121,159,155,97],[121,160,155,98],[121,214,155,152],[121,217,156,12,"question"],[121,225,156,20],[122,14,158,8,"round"],[122,19,158,13],[122,20,158,14,"chatgptResponse"],[122,35,158,29],[122,44,158,38],[122,48,158,42],[122,49,158,43,"queryChatGPTAPI"],[122,64,158,58],[122,65,158,59,"chatgptPrompt"],[122,78,158,72],[122,79,158,73],[123,12,159,6],[123,13,159,7],[123,14,159,8],[123,21,159,15,"error"],[123,26,159,20],[123,28,159,22],[124,14,160,8,"EventLogger"],[124,38,160,19],[124,39,160,20,"error"],[124,44,160,25],[124,45,160,26],[124,70,160,51],[124,72,160,53],[124,100,160,81],[124,102,160,83,"roundNumber"],[124,113,160,94],[124,115,160,96,"error"],[124,120,160,110],[124,121,160,111],[125,12,161,6],[126,10,162,4],[128,10,164,4],[129,10,165,4,"round"],[129,15,165,9],[129,16,165,10,"synthesis"],[129,25,165,19],[129,28,165,22],[129,32,165,26],[129,33,165,27,"synthesizeRound"],[129,48,165,42],[129,49,165,43,"round"],[129,54,165,48],[129,55,165,49],[130,10,167,4],[130,17,167,11,"round"],[130,22,167,16],[131,8,168,2],[131,9,168,3],[132,8,168,3],[132,17,125,16,"conductRound"],[132,29,125,28,"conductRound"],[132,30,125,28,"_x2"],[132,33,125,28],[132,35,125,28,"_x3"],[132,38,125,28],[132,40,125,28,"_x4"],[132,43,125,28],[133,10,125,28],[133,17,125,28,"_conductRound"],[133,30,125,28],[133,31,125,28,"apply"],[133,36,125,28],[133,43,125,28,"arguments"],[133,52,125,28],[134,8,125,28],[135,8,125,28],[135,15,125,16,"conductRound"],[135,27,125,28],[136,6,125,28],[137,6,170,2],[138,0,171,0],[139,0,172,0],[140,6,170,2],[141,4,170,2],[142,6,170,2,"key"],[142,9,170,2],[143,6,170,2,"value"],[143,11,170,2],[144,8,170,2],[144,12,170,2,"_queryClaudeAPI"],[144,27,170,2],[144,34,170,2,"_asyncToGenerator2"],[144,52,170,2],[144,53,170,2,"default"],[144,60,170,2],[144,62,173,2],[144,73,173,31,"prompt"],[144,79,173,45],[144,81,173,68],[145,10,174,4],[145,14,174,10,"response"],[145,22,174,18],[145,31,174,27,"axios"],[145,45,174,32],[145,46,174,33,"post"],[145,50,174,37],[145,51,175,6],[145,90,175,45],[145,92,176,6],[146,12,177,8,"model"],[146,17,177,13],[146,19,177,15],[146,43,177,39],[147,12,178,8,"max_tokens"],[147,22,178,18],[147,24,178,20],[147,28,178,24],[148,12,179,8,"messages"],[148,20,179,16],[148,22,179,18],[148,23,179,19],[149,14,180,10,"role"],[149,18,180,14],[149,20,180,16],[149,26,180,22],[150,14,181,10,"content"],[150,21,181,17],[150,23,181,19,"prompt"],[151,12,182,8],[151,13,182,9],[152,10,183,6],[152,11,183,7],[152,13,184,6],[153,12,185,8,"headers"],[153,19,185,15],[153,21,185,17],[154,14,186,10],[154,25,186,21],[154,27,186,23],[154,31,186,27],[154,32,186,28,"claudeApiKey"],[154,44,186,41],[155,14,187,10],[155,33,187,29],[155,35,187,31],[155,47,187,43],[156,14,188,10],[156,28,188,24],[156,30,188,26],[157,12,189,8],[157,13,189,9],[158,12,190,8,"timeout"],[158,19,190,15],[158,21,190,17],[159,10,191,6],[159,11,192,4],[159,12,192,5],[160,10,194,4],[160,14,194,10,"content"],[160,21,194,17],[160,24,194,20,"response"],[160,32,194,28],[160,33,194,29,"data"],[160,37,194,33],[160,38,194,34,"content"],[160,45,194,41],[160,46,194,42],[160,47,194,43],[160,48,194,44],[160,49,194,45,"text"],[160,53,194,49],[161,10,195,4],[161,17,195,11],[162,12,196,6,"provider"],[162,20,196,14],[162,22,196,16],[162,30,196,24],[163,12,197,6,"content"],[163,19,197,13],[163,21,197,6,"content"],[163,28,197,13],[164,12,198,6,"insights"],[164,20,198,14],[164,22,198,16],[164,26,198,20],[164,27,198,21,"extractInsights"],[164,42,198,36],[164,43,198,37,"content"],[164,50,198,44],[164,51,198,45],[165,12,199,6,"recommendations"],[165,27,199,21],[165,29,199,23],[165,33,199,27],[165,34,199,28,"extractRecommendations"],[165,56,199,50],[165,57,199,51,"content"],[165,64,199,58],[165,65,199,59],[166,12,200,6,"codeExamples"],[166,24,200,18],[166,26,200,20],[166,30,200,24],[166,31,200,25,"extractCodeExamples"],[166,50,200,44],[166,51,200,45,"content"],[166,58,200,52],[166,59,200,53],[167,12,201,6,"timestamp"],[167,21,201,15],[167,23,201,17,"Date"],[167,27,201,21],[167,28,201,22,"now"],[167,31,201,25],[167,32,201,26],[168,10,202,4],[168,11,202,5],[169,8,203,2],[169,9,203,3],[170,8,203,3],[170,17,173,16,"queryClaudeAPI"],[170,31,173,30,"queryClaudeAPI"],[170,32,173,30,"_x5"],[170,35,173,30],[171,10,173,30],[171,17,173,30,"_queryClaudeAPI"],[171,32,173,30],[171,33,173,30,"apply"],[171,38,173,30],[171,45,173,30,"arguments"],[171,54,173,30],[172,8,173,30],[173,8,173,30],[173,15,173,16,"queryClaudeAPI"],[173,29,173,30],[174,6,173,30],[175,6,205,2],[176,0,206,0],[177,0,207,0],[178,6,205,2],[179,4,205,2],[180,6,205,2,"key"],[180,9,205,2],[181,6,205,2,"value"],[181,11,205,2],[182,8,205,2],[182,12,205,2,"_queryChatGPTAPI"],[182,28,205,2],[182,35,205,2,"_asyncToGenerator2"],[182,53,205,2],[182,54,205,2,"default"],[182,61,205,2],[182,63,208,2],[182,74,208,32,"prompt"],[182,80,208,46],[182,82,208,69],[183,10,209,4],[183,14,209,10,"response"],[183,22,209,18],[183,31,209,27,"axios"],[183,45,209,32],[183,46,209,33,"post"],[183,50,209,37],[183,51,210,6],[183,95,210,50],[183,97,211,6],[184,12,212,8,"model"],[184,17,212,13],[184,19,212,15],[184,26,212,22],[185,12,213,8,"messages"],[185,20,213,16],[185,22,213,18],[185,23,213,19],[186,14,214,10,"role"],[186,18,214,14],[186,20,214,16],[186,26,214,22],[187,14,215,10,"content"],[187,21,215,17],[187,23,215,19,"prompt"],[188,12,216,8],[188,13,216,9],[188,14,216,10],[189,12,217,8,"temperature"],[189,23,217,19],[189,25,217,21],[189,28,217,24],[190,12,218,8,"max_tokens"],[190,22,218,18],[190,24,218,20],[191,10,219,6],[191,11,219,7],[191,13,220,6],[192,12,221,8,"headers"],[192,19,221,15],[192,21,221,17],[193,14,222,10],[193,29,222,25],[193,31,222,27],[193,41,222,37],[193,45,222,41],[193,46,222,42,"openaiApiKey"],[193,58,222,54],[193,60,222,56],[194,14,223,10],[194,28,223,24],[194,30,223,26],[195,12,224,8],[195,13,224,9],[196,12,225,8,"timeout"],[196,19,225,15],[196,21,225,17],[197,10,226,6],[197,11,227,4],[197,12,227,5],[198,10,229,4],[198,14,229,10,"content"],[198,21,229,17],[198,24,229,20,"response"],[198,32,229,28],[198,33,229,29,"data"],[198,37,229,33],[198,38,229,34,"choices"],[198,45,229,41],[198,46,229,42],[198,47,229,43],[198,48,229,44],[198,49,229,45,"message"],[198,56,229,52],[198,57,229,53,"content"],[198,64,229,60],[199,10,230,4],[199,17,230,11],[200,12,231,6,"provider"],[200,20,231,14],[200,22,231,16],[200,31,231,25],[201,12,232,6,"content"],[201,19,232,13],[201,21,232,6,"content"],[201,28,232,13],[202,12,233,6,"insights"],[202,20,233,14],[202,22,233,16],[202,26,233,20],[202,27,233,21,"extractInsights"],[202,42,233,36],[202,43,233,37,"content"],[202,50,233,44],[202,51,233,45],[203,12,234,6,"recommendations"],[203,27,234,21],[203,29,234,23],[203,33,234,27],[203,34,234,28,"extractRecommendations"],[203,56,234,50],[203,57,234,51,"content"],[203,64,234,58],[203,65,234,59],[204,12,235,6,"codeExamples"],[204,24,235,18],[204,26,235,20],[204,30,235,24],[204,31,235,25,"extractCodeExamples"],[204,50,235,44],[204,51,235,45,"content"],[204,58,235,52],[204,59,235,53],[205,12,236,6,"timestamp"],[205,21,236,15],[205,23,236,17,"Date"],[205,27,236,21],[205,28,236,22,"now"],[205,31,236,25],[205,32,236,26],[206,10,237,4],[206,11,237,5],[207,8,238,2],[207,9,238,3],[208,8,238,3],[208,17,208,16,"queryChatGPTAPI"],[208,32,208,31,"queryChatGPTAPI"],[208,33,208,31,"_x6"],[208,36,208,31],[209,10,208,31],[209,17,208,31,"_queryChatGPTAPI"],[209,33,208,31],[209,34,208,31,"apply"],[209,39,208,31],[209,46,208,31,"arguments"],[209,55,208,31],[210,8,208,31],[211,8,208,31],[211,15,208,16,"queryChatGPTAPI"],[211,30,208,31],[212,6,208,31],[213,6,240,2],[214,0,241,0],[215,0,242,0],[216,6,240,2],[217,4,240,2],[218,6,240,2,"key"],[218,9,240,2],[219,6,240,2,"value"],[219,11,240,2],[219,13,243,2],[219,22,243,10,"generateRound2Question"],[219,44,243,32,"generateRound2Question"],[219,45,243,33,"round1"],[219,51,243,59],[219,53,243,61,"query"],[219,58,243,81],[219,60,243,91],[220,8,243,91],[220,12,243,91,"_round1$claudeRespons"],[220,33,243,91],[220,35,243,91,"_round1$chatgptRespon"],[220,56,243,91],[221,8,244,4],[221,12,244,10,"claudeInsights"],[221,26,244,24],[221,29,244,27],[221,31,244,27,"_round1$claudeRespons"],[221,52,244,27],[221,55,244,27,"round1"],[221,61,244,33],[221,62,244,34,"claudeResponse"],[221,76,244,48],[221,97,244,27,"_round1$claudeRespons"],[221,118,244,27],[221,119,244,50,"insights"],[221,127,244,58],[221,128,244,59,"slice"],[221,133,244,64],[221,134,244,65],[221,135,244,66],[221,137,244,68],[221,138,244,69],[221,139,244,70],[221,140,244,71,"join"],[221,144,244,75],[221,145,244,76],[221,149,244,80],[221,150,244,81],[221,155,244,85],[221,157,244,87],[222,8,245,4],[222,12,245,10,"chatgptInsights"],[222,27,245,25],[222,30,245,28],[222,32,245,28,"_round1$chatgptRespon"],[222,53,245,28],[222,56,245,28,"round1"],[222,62,245,34],[222,63,245,35,"chatgptResponse"],[222,78,245,50],[222,99,245,28,"_round1$chatgptRespon"],[222,120,245,28],[222,121,245,52,"insights"],[222,129,245,60],[222,130,245,61,"slice"],[222,135,245,66],[222,136,245,67],[222,137,245,68],[222,139,245,70],[222,140,245,71],[222,141,245,72],[222,142,245,73,"join"],[222,146,245,77],[222,147,245,78],[222,151,245,82],[222,152,245,83],[222,157,245,87],[222,159,245,89],[223,8,247,4],[223,15,247,11],[223,51,247,47,"query"],[223,56,247,52],[223,57,247,53,"topic"],[223,62,247,58],[224,0,248,0],[225,0,249,0],[225,22,249,22,"claudeInsights"],[225,36,249,36],[226,0,250,0],[226,22,250,22,"chatgptInsights"],[226,37,250,37],[227,0,251,0],[228,0,252,0],[229,0,253,0],[230,0,254,0],[230,73,254,73],[231,6,255,2],[233,6,257,2],[234,0,258,0],[235,0,259,0],[236,4,257,2],[237,6,257,2,"key"],[237,9,257,2],[238,6,257,2,"value"],[238,11,257,2],[238,13,260,2],[238,22,260,10,"generateRound3Question"],[238,44,260,32,"generateRound3Question"],[238,45,260,33,"round2"],[238,51,260,59],[238,53,260,61,"query"],[238,58,260,81],[238,60,260,91],[239,8,261,4],[239,15,261,11],[239,53,261,49,"query"],[239,58,261,54],[239,59,261,55,"topic"],[239,64,261,60],[240,0,262,0],[241,0,263,0],[242,0,264,0],[243,0,265,0],[244,0,266,0],[245,0,267,0],[246,0,268,0],[246,44,268,44],[247,6,269,2],[249,6,271,2],[250,0,272,0],[251,0,273,0],[252,4,271,2],[253,6,271,2,"key"],[253,9,271,2],[254,6,271,2,"value"],[254,11,271,2],[254,13,274,2],[254,22,274,10,"extractInsights"],[254,37,274,25,"extractInsights"],[254,38,274,26,"content"],[254,45,274,41],[254,47,274,53],[255,8,275,4],[255,12,275,10,"insights"],[255,20,275,28],[255,23,275,31],[255,25,275,33],[257,8,277,4],[258,8,278,4],[258,12,278,10,"lines"],[258,17,278,15],[258,20,278,18,"content"],[258,27,278,25],[258,28,278,26,"split"],[258,33,278,31],[258,34,278,32],[258,38,278,36],[258,39,278,37],[259,8,279,4,"lines"],[259,13,279,9],[259,14,279,10,"forEach"],[259,21,279,17],[259,22,279,18],[259,32,279,18,"line"],[259,36,279,22],[259,38,279,26],[260,10,280,6],[260,14,280,10,"line"],[260,18,280,14],[260,19,280,15,"match"],[260,24,280,20],[260,25,280,21],[260,40,280,36],[260,41,280,37],[260,45,280,41,"line"],[260,49,280,45],[260,50,280,46,"match"],[260,55,280,51],[260,56,280,52],[260,71,280,67],[260,72,280,68],[260,74,280,70],[261,12,281,8],[261,16,281,14,"insight"],[261,23,281,21],[261,26,281,24,"line"],[261,30,281,28],[261,31,281,29,"replace"],[261,38,281,36],[261,39,281,37],[261,53,281,51],[261,55,281,53],[261,57,281,55],[261,58,281,56],[261,59,281,57,"trim"],[261,63,281,61],[261,64,281,62],[261,65,281,63],[262,12,282,8],[262,16,282,12,"insight"],[262,23,282,19],[262,24,282,20,"length"],[262,30,282,26],[262,33,282,29],[262,35,282,31],[262,39,282,35,"insight"],[262,46,282,42],[262,47,282,43,"length"],[262,53,282,49],[262,56,282,52],[262,59,282,55],[262,61,282,57],[263,14,283,10,"insights"],[263,22,283,18],[263,23,283,19,"push"],[263,27,283,23],[263,28,283,24,"insight"],[263,35,283,31],[263,36,283,32],[264,12,284,8],[265,10,285,6],[266,8,286,4],[266,9,286,5],[266,10,286,6],[268,8,288,4],[269,8,289,4],[269,12,289,10,"insightSection"],[269,26,289,24],[269,29,289,27,"content"],[269,36,289,34],[269,37,289,35,"match"],[269,42,289,40],[269,43,289,41],[269,82,289,80],[269,83,289,81],[270,8,290,4],[270,12,290,8,"insightSection"],[270,26,290,22],[270,28,290,24],[271,10,291,6],[271,14,291,12,"sectionInsights"],[271,29,291,27],[271,32,291,30,"insightSection"],[271,46,291,44],[271,47,291,45],[271,48,291,46],[271,49,291,47],[271,50,291,48,"split"],[271,55,291,53],[271,56,291,54],[271,60,291,58],[271,61,291,59],[271,62,292,9,"filter"],[271,68,292,15],[271,69,292,16],[271,79,292,16,"line"],[271,83,292,20],[272,12,292,20],[272,19,292,24,"line"],[272,23,292,28],[272,24,292,29,"trim"],[272,28,292,33],[272,29,292,34],[272,30,292,35],[273,10,292,35],[273,12,292,36],[273,13,293,9,"map"],[273,16,293,12],[273,17,293,13],[273,27,293,13,"line"],[273,31,293,17],[274,12,293,17],[274,19,293,21,"line"],[274,23,293,25],[274,24,293,26,"replace"],[274,31,293,33],[274,32,293,34],[274,46,293,48],[274,48,293,50],[274,50,293,52],[274,51,293,53],[274,52,293,54,"trim"],[274,56,293,58],[274,57,293,59],[274,58,293,60],[275,10,293,60],[275,12,293,61],[276,10,294,6,"insights"],[276,18,294,14],[276,19,294,15,"push"],[276,23,294,19],[276,24,294,19,"apply"],[276,29,294,19],[276,30,294,6,"insights"],[276,38,294,14],[276,44,294,14,"_toConsumableArray2"],[276,63,294,14],[276,64,294,14,"default"],[276,71,294,14],[276,73,294,23,"sectionInsights"],[276,88,294,38],[276,90,294,39],[277,8,295,4],[278,8,297,4],[278,15,297,11],[278,19,297,11,"_toConsumableArray2"],[278,38,297,11],[278,39,297,11,"default"],[278,46,297,11],[278,48,297,15],[278,52,297,19,"Set"],[278,55,297,22],[278,56,297,23,"insights"],[278,64,297,31],[278,65,297,32],[278,67,297,34,"slice"],[278,72,297,39],[278,73,297,40],[278,74,297,41],[278,76,297,43],[278,78,297,45],[278,79,297,46],[279,6,298,2],[281,6,300,2],[282,0,301,0],[283,0,302,0],[284,4,300,2],[285,6,300,2,"key"],[285,9,300,2],[286,6,300,2,"value"],[286,11,300,2],[286,13,303,2],[286,22,303,10,"extractRecommendations"],[286,44,303,32,"extractRecommendations"],[286,45,303,33,"content"],[286,52,303,48],[286,54,303,60],[287,8,304,4],[287,12,304,10,"recommendations"],[287,27,304,35],[287,30,304,38],[287,32,304,40],[289,8,306,4],[290,8,307,4],[290,12,307,10,"patterns"],[290,20,307,18],[290,23,307,21],[290,24,308,6],[290,54,308,36],[290,56,309,6],[290,82,309,32],[290,84,310,6],[290,101,310,23],[290,103,311,6],[290,133,311,36],[290,134,312,5],[291,8,314,4,"patterns"],[291,16,314,12],[291,17,314,13,"forEach"],[291,24,314,20],[291,25,314,21],[291,35,314,21,"pattern"],[291,42,314,28],[291,44,314,32],[292,10,315,6],[292,14,315,12,"matches"],[292,21,315,19],[292,24,315,22,"content"],[292,31,315,29],[292,32,315,30,"matchAll"],[292,40,315,38],[292,41,315,39,"pattern"],[292,48,315,46],[292,49,315,47],[293,10,316,6],[293,15,316,11],[293,19,316,17,"match"],[293,24,316,22],[293,28,316,26,"matches"],[293,35,316,33],[293,37,316,35],[294,12,317,8],[294,16,317,12,"match"],[294,21,317,17],[294,22,317,18],[294,23,317,19],[294,24,317,20],[294,28,317,24,"match"],[294,33,317,29],[294,34,317,30],[294,35,317,31],[294,36,317,32],[294,37,317,33,"length"],[294,43,317,39],[294,46,317,42],[294,48,317,44],[294,52,317,48,"match"],[294,57,317,53],[294,58,317,54],[294,59,317,55],[294,60,317,56],[294,61,317,57,"length"],[294,67,317,63],[294,70,317,66],[294,73,317,69],[294,75,317,71],[295,14,318,10,"recommendations"],[295,29,318,25],[295,30,318,26,"push"],[295,34,318,30],[295,35,318,31,"match"],[295,40,318,36],[295,41,318,37],[295,42,318,38],[295,43,318,39],[295,44,318,40,"trim"],[295,48,318,44],[295,49,318,45],[295,50,318,46],[295,51,318,47],[296,12,319,8],[297,10,320,6],[298,8,321,4],[298,9,321,5],[298,10,321,6],[299,8,323,4],[299,15,323,11],[299,19,323,11,"_toConsumableArray2"],[299,38,323,11],[299,39,323,11,"default"],[299,46,323,11],[299,48,323,15],[299,52,323,19,"Set"],[299,55,323,22],[299,56,323,23,"recommendations"],[299,71,323,38],[299,72,323,39],[299,74,323,41,"slice"],[299,79,323,46],[299,80,323,47],[299,81,323,48],[299,83,323,50],[299,85,323,52],[299,86,323,53],[300,6,324,2],[302,6,326,2],[303,0,327,0],[304,0,328,0],[305,4,326,2],[306,6,326,2,"key"],[306,9,326,2],[307,6,326,2,"value"],[307,11,326,2],[308,6,450,2],[309,0,451,0],[310,0,452,0],[311,6,453,2],[311,15,453,10,"extractCodeExamples"],[311,34,453,29,"extractCodeExamples"],[311,35,453,30,"rounds"],[311,41,453,58],[311,43,453,70],[312,8,454,4],[312,12,454,10,"allCodeExamples"],[312,27,454,35],[312,30,454,38],[312,32,454,40],[313,8,456,4,"rounds"],[313,14,456,10],[313,15,456,11,"forEach"],[313,22,456,18],[313,23,456,19],[313,33,456,19,"round"],[313,38,456,24],[313,40,456,28],[314,10,456,28],[314,14,456,28,"_round$claudeResponse"],[314,35,456,28],[314,37,456,28,"_round$chatgptRespons"],[314,58,456,28],[315,10,457,6],[315,15,457,6,"_round$claudeResponse"],[315,36,457,6],[315,39,457,10,"round"],[315,44,457,15],[315,45,457,16,"claudeResponse"],[315,59,457,30],[315,72,457,10,"_round$claudeResponse"],[315,93,457,10],[315,94,457,32,"codeExamples"],[315,106,457,44],[315,108,457,46],[316,12,458,8,"allCodeExamples"],[316,27,458,23],[316,28,458,24,"push"],[316,32,458,28],[316,33,458,28,"apply"],[316,38,458,28],[316,39,458,8,"allCodeExamples"],[316,54,458,23],[316,60,458,23,"_toConsumableArray2"],[316,79,458,23],[316,80,458,23,"default"],[316,87,458,23],[316,89,458,32,"round"],[316,94,458,37],[316,95,458,38,"claudeResponse"],[316,109,458,52],[316,110,458,53,"codeExamples"],[316,122,458,65],[316,124,458,66],[317,10,459,6],[318,10,460,6],[318,15,460,6,"_round$chatgptRespons"],[318,36,460,6],[318,39,460,10,"round"],[318,44,460,15],[318,45,460,16,"chatgptResponse"],[318,60,460,31],[318,73,460,10,"_round$chatgptRespons"],[318,94,460,10],[318,95,460,33,"codeExamples"],[318,107,460,45],[318,109,460,47],[319,12,461,8,"allCodeExamples"],[319,27,461,23],[319,28,461,24,"push"],[319,32,461,28],[319,33,461,28,"apply"],[319,38,461,28],[319,39,461,8,"allCodeExamples"],[319,54,461,23],[319,60,461,23,"_toConsumableArray2"],[319,79,461,23],[319,80,461,23,"default"],[319,87,461,23],[319,89,461,32,"round"],[319,94,461,37],[319,95,461,38,"chatgptResponse"],[319,110,461,53],[319,111,461,54,"codeExamples"],[319,123,461,66],[319,125,461,67],[320,10,462,6],[321,8,463,4],[321,9,463,5],[321,10,463,6],[322,8,465,4],[322,15,465,11],[322,19,465,11,"_toConsumableArray2"],[322,38,465,11],[322,39,465,11,"default"],[322,46,465,11],[322,48,465,15],[322,52,465,19,"Set"],[322,55,465,22],[322,56,465,23,"allCodeExamples"],[322,71,465,38],[322,72,465,39],[322,74,465,41,"slice"],[322,79,465,46],[322,80,465,47],[322,81,465,48],[322,83,465,50],[322,84,465,51],[322,85,465,52],[323,6,466,2],[325,6,468,2],[326,0,469,0],[327,0,470,0],[328,4,468,2],[329,6,468,2,"key"],[329,9,468,2],[330,6,468,2,"value"],[330,11,468,2],[331,6,345,2],[332,0,346,0],[333,0,347,0],[334,6,348,2],[334,15,348,10,"summarizeResponse"],[334,32,348,27,"summarizeResponse"],[334,33,348,28,"response"],[334,41,348,49],[334,43,348,59],[335,8,349,4],[335,12,349,8],[335,13,349,9,"response"],[335,21,349,17],[335,23,349,19],[335,30,349,26],[335,52,349,48],[336,8,351,4],[336,12,351,10,"topInsights"],[336,23,351,21],[336,26,351,24,"response"],[336,34,351,32],[336,35,351,33,"insights"],[336,43,351,41],[336,44,351,42,"slice"],[336,49,351,47],[336,50,351,48],[336,51,351,49],[336,53,351,51],[336,54,351,52],[336,55,351,53],[336,56,351,54,"join"],[336,60,351,58],[336,61,351,59],[336,65,351,63],[336,66,351,64],[337,8,352,4],[337,12,352,10,"topRecs"],[337,19,352,17],[337,22,352,20,"response"],[337,30,352,28],[337,31,352,29,"recommendations"],[337,46,352,44],[337,47,352,45,"slice"],[337,52,352,50],[337,53,352,51],[337,54,352,52],[337,56,352,54],[337,57,352,55],[337,58,352,56],[337,59,352,57,"join"],[337,63,352,61],[337,64,352,62],[337,68,352,66],[337,69,352,67],[338,8,354,4],[338,15,354,11],[338,28,354,24,"topInsights"],[338,39,354,35],[338,43,354,39],[338,49,354,45],[338,71,354,67,"topRecs"],[338,78,354,74],[338,82,354,78],[338,88,354,84],[338,91,354,87],[339,6,355,2],[341,6,357,2],[342,0,358,0],[343,0,359,0],[344,4,357,2],[345,6,357,2,"key"],[345,9,357,2],[346,6,357,2,"value"],[346,11,357,2],[346,13,360,2],[346,22,360,10,"synthesizeRound"],[346,37,360,25,"synthesizeRound"],[346,38,360,26,"round"],[346,43,360,51],[346,45,360,63],[347,8,361,4],[347,12,361,10,"synthesis"],[347,21,361,29],[347,24,361,32],[347,26,361,34],[348,8,363,4],[348,12,363,8,"round"],[348,17,363,13],[348,18,363,14,"claudeResponse"],[348,32,363,28],[348,36,363,32,"round"],[348,41,363,37],[348,42,363,38,"chatgptResponse"],[348,57,363,53],[348,59,363,55],[349,10,364,6],[350,10,365,6],[350,14,365,12,"claudeInsights"],[350,28,365,26],[350,31,365,29],[350,35,365,33,"Set"],[350,38,365,36],[350,39,365,37,"round"],[350,44,365,42],[350,45,365,43,"claudeResponse"],[350,59,365,57],[350,60,365,58,"insights"],[350,68,365,66],[350,69,365,67],[351,10,366,6],[351,14,366,12,"commonInsights"],[351,28,366,26],[351,31,366,29,"round"],[351,36,366,34],[351,37,366,35,"chatgptResponse"],[351,52,366,50],[351,53,366,51,"insights"],[351,61,366,59],[351,62,366,60,"filter"],[351,68,366,66],[351,69,366,67],[351,79,366,67,"i"],[351,80,366,68],[352,12,366,68],[352,19,367,8,"Array"],[352,24,367,13],[352,25,367,14,"from"],[352,29,367,18],[352,30,367,19,"claudeInsights"],[352,44,367,33],[352,45,367,34],[352,46,367,35,"some"],[352,50,367,39],[352,51,367,40],[352,61,367,40,"ci"],[352,63,367,42],[353,14,367,42],[353,21,368,10,"ci"],[353,23,368,12],[353,24,368,13,"toLowerCase"],[353,35,368,24],[353,36,368,25],[353,37,368,26],[353,38,368,27,"includes"],[353,46,368,35],[353,47,368,36,"i"],[353,48,368,37],[353,49,368,38,"toLowerCase"],[353,60,368,49],[353,61,368,50],[353,62,368,51],[353,63,368,52,"substring"],[353,72,368,61],[353,73,368,62],[353,74,368,63],[353,76,368,65],[353,78,368,67],[353,79,368,68],[353,80,368,69],[353,84,369,10,"i"],[353,85,369,11],[353,86,369,12,"toLowerCase"],[353,97,369,23],[353,98,369,24],[353,99,369,25],[353,100,369,26,"includes"],[353,108,369,34],[353,109,369,35,"ci"],[353,111,369,37],[353,112,369,38,"toLowerCase"],[353,123,369,49],[353,124,369,50],[353,125,369,51],[353,126,369,52,"substring"],[353,135,369,61],[353,136,369,62],[353,137,369,63],[353,139,369,65],[353,141,369,67],[353,142,369,68],[353,143,369,69],[354,12,369,69],[354,13,370,8],[354,14,370,9],[355,10,370,9],[355,11,371,6],[355,12,371,7],[356,10,373,6],[356,14,373,10,"commonInsights"],[356,28,373,24],[356,29,373,25,"length"],[356,35,373,31],[356,38,373,34],[356,39,373,35],[356,41,373,37],[357,12,374,8,"synthesis"],[357,21,374,17],[357,22,374,18,"push"],[357,26,374,22],[357,27,374,23],[357,46,374,42,"commonInsights"],[357,60,374,56],[357,61,374,57],[357,62,374,58],[357,63,374,59],[357,65,374,61],[357,66,374,62],[358,10,375,6],[360,10,377,6],[361,10,378,6],[361,14,378,12,"uniqueClaude"],[361,26,378,24],[361,29,378,27,"round"],[361,34,378,32],[361,35,378,33,"claudeResponse"],[361,49,378,47],[361,50,378,48,"insights"],[361,58,378,56],[361,59,378,57,"find"],[361,63,378,61],[361,64,378,62],[361,74,378,62,"i"],[361,75,378,63],[362,12,378,63],[362,19,379,8],[362,20,379,9,"round"],[362,25,379,14],[362,26,379,15,"chatgptResponse"],[362,41,379,30],[362,42,379,32,"insights"],[362,50,379,40],[362,51,379,41,"some"],[362,55,379,45],[362,56,379,46],[362,66,379,46,"gi"],[362,68,379,48],[363,14,379,48],[363,21,380,10,"gi"],[363,23,380,12],[363,24,380,13,"toLowerCase"],[363,35,380,24],[363,36,380,25],[363,37,380,26],[363,38,380,27,"includes"],[363,46,380,35],[363,47,380,36,"i"],[363,48,380,37],[363,49,380,38,"toLowerCase"],[363,60,380,49],[363,61,380,50],[363,62,380,51],[363,63,380,52,"substring"],[363,72,380,61],[363,73,380,62],[363,74,380,63],[363,76,380,65],[363,78,380,67],[363,79,380,68],[363,80,380,69],[364,12,380,69],[364,13,381,8],[364,14,381,9],[365,10,381,9],[365,11,382,6],[365,12,382,7],[366,10,384,6],[366,14,384,10,"uniqueClaude"],[366,26,384,22],[366,28,384,24],[367,12,385,8,"synthesis"],[367,21,385,17],[367,22,385,18,"push"],[367,26,385,22],[367,27,385,23],[367,55,385,51,"uniqueClaude"],[367,67,385,63],[367,69,385,65],[367,70,385,66],[368,10,386,6],[369,10,388,6],[369,14,388,12,"uniqueChatGPT"],[369,27,388,25],[369,30,388,28,"round"],[369,35,388,33],[369,36,388,34,"chatgptResponse"],[369,51,388,49],[369,52,388,50,"insights"],[369,60,388,58],[369,61,388,59,"find"],[369,65,388,63],[369,66,388,64],[369,76,388,64,"i"],[369,77,388,65],[370,12,388,65],[370,19,389,8],[370,20,389,9,"round"],[370,25,389,14],[370,26,389,15,"claudeResponse"],[370,40,389,29],[370,41,389,31,"insights"],[370,49,389,39],[370,50,389,40,"some"],[370,54,389,44],[370,55,389,45],[370,65,389,45,"ci"],[370,67,389,47],[371,14,389,47],[371,21,390,10,"ci"],[371,23,390,12],[371,24,390,13,"toLowerCase"],[371,35,390,24],[371,36,390,25],[371,37,390,26],[371,38,390,27,"includes"],[371,46,390,35],[371,47,390,36,"i"],[371,48,390,37],[371,49,390,38,"toLowerCase"],[371,60,390,49],[371,61,390,50],[371,62,390,51],[371,63,390,52,"substring"],[371,72,390,61],[371,73,390,62],[371,74,390,63],[371,76,390,65],[371,78,390,67],[371,79,390,68],[371,80,390,69],[372,12,390,69],[372,13,391,8],[372,14,391,9],[373,10,391,9],[373,11,392,6],[373,12,392,7],[374,10,394,6],[374,14,394,10,"uniqueChatGPT"],[374,27,394,23],[374,29,394,25],[375,12,395,8,"synthesis"],[375,21,395,17],[375,22,395,18,"push"],[375,26,395,22],[375,27,395,23],[375,56,395,52,"uniqueChatGPT"],[375,69,395,65],[375,71,395,67],[375,72,395,68],[376,10,396,6],[377,8,397,4],[378,8,399,4],[378,15,399,11,"synthesis"],[378,24,399,20],[379,6,400,2],[381,6,402,2],[382,0,403,0],[383,0,404,0],[384,4,402,2],[385,6,402,2,"key"],[385,9,402,2],[386,6,402,2,"value"],[386,11,402,2],[386,13,405,2],[386,22,405,10,"synthesizeInsights"],[386,40,405,28,"synthesizeInsights"],[386,41,405,29,"rounds"],[386,47,405,57],[386,49,405,69],[387,8,406,4],[387,12,406,10,"allInsights"],[387,23,406,31],[387,26,406,34],[387,28,406,36],[388,8,408,4,"rounds"],[388,14,408,10],[388,15,408,11,"forEach"],[388,22,408,18],[388,23,408,19],[388,33,408,19,"round"],[388,38,408,24],[388,40,408,28],[389,10,409,6],[389,14,409,10,"round"],[389,19,409,15],[389,20,409,16,"claudeResponse"],[389,34,409,30],[389,36,409,32],[390,12,410,8,"allInsights"],[390,23,410,19],[390,24,410,20,"push"],[390,28,410,24],[390,29,410,24,"apply"],[390,34,410,24],[390,35,410,8,"allInsights"],[390,46,410,19],[390,52,410,19,"_toConsumableArray2"],[390,71,410,19],[390,72,410,19,"default"],[390,79,410,19],[390,81,410,28,"round"],[390,86,410,33],[390,87,410,34,"claudeResponse"],[390,101,410,48],[390,102,410,49,"insights"],[390,110,410,57],[390,112,410,58],[391,10,411,6],[392,10,412,6],[392,14,412,10,"round"],[392,19,412,15],[392,20,412,16,"chatgptResponse"],[392,35,412,31],[392,37,412,33],[393,12,413,8,"allInsights"],[393,23,413,19],[393,24,413,20,"push"],[393,28,413,24],[393,29,413,24,"apply"],[393,34,413,24],[393,35,413,8,"allInsights"],[393,46,413,19],[393,52,413,19,"_toConsumableArray2"],[393,71,413,19],[393,72,413,19,"default"],[393,79,413,19],[393,81,413,28,"round"],[393,86,413,33],[393,87,413,34,"chatgptResponse"],[393,102,413,49],[393,103,413,50,"insights"],[393,111,413,58],[393,113,413,59],[394,10,414,6],[395,10,415,6,"allInsights"],[395,21,415,17],[395,22,415,18,"push"],[395,26,415,22],[395,27,415,22,"apply"],[395,32,415,22],[395,33,415,6,"allInsights"],[395,44,415,17],[395,50,415,17,"_toConsumableArray2"],[395,69,415,17],[395,70,415,17,"default"],[395,77,415,17],[395,79,415,26,"round"],[395,84,415,31],[395,85,415,32,"synthesis"],[395,94,415,41],[395,96,415,42],[396,8,416,4],[396,9,416,5],[396,10,416,6],[398,8,418,4],[399,8,419,4],[399,12,419,10,"uniqueInsights"],[399,26,419,24],[399,33,419,24,"_toConsumableArray2"],[399,52,419,24],[399,53,419,24,"default"],[399,60,419,24],[399,62,419,31],[399,66,419,35,"Set"],[399,69,419,38],[399,70,419,39,"allInsights"],[399,81,419,50],[399,82,419,51],[399,83,419,52],[401,8,421,4],[402,8,422,4],[402,12,422,10,"insightFrequency"],[402,28,422,26],[402,31,422,29],[402,35,422,33,"Map"],[402,38,422,36],[402,39,422,53],[402,40,422,54],[403,8,423,4,"allInsights"],[403,19,423,15],[403,20,423,16,"forEach"],[403,27,423,23],[403,28,423,24],[403,38,423,24,"insight"],[403,45,423,31],[403,47,423,35],[404,10,424,6,"insightFrequency"],[404,26,424,22],[404,27,424,23,"set"],[404,30,424,26],[404,31,424,27,"insight"],[404,38,424,34],[404,40,424,36],[404,41,424,37,"insightFrequency"],[404,57,424,53],[404,58,424,54,"get"],[404,61,424,57],[404,62,424,58,"insight"],[404,69,424,65],[404,70,424,66],[404,74,424,70],[404,75,424,71],[404,79,424,75],[404,80,424,76],[404,81,424,77],[405,8,425,4],[405,9,425,5],[405,10,425,6],[406,8,427,4],[406,15,427,11,"uniqueInsights"],[406,29,427,25],[406,30,428,7,"sort"],[406,34,428,11],[406,35,428,12],[406,45,428,13,"a"],[406,46,428,14],[406,48,428,16,"b"],[406,49,428,17],[407,10,428,17],[407,17,428,22],[407,18,428,23,"insightFrequency"],[407,34,428,39],[407,35,428,40,"get"],[407,38,428,43],[407,39,428,44,"b"],[407,40,428,45],[407,41,428,46],[407,45,428,50],[407,46,428,51],[407,51,428,56,"insightFrequency"],[407,67,428,72],[407,68,428,73,"get"],[407,71,428,76],[407,72,428,77,"a"],[407,73,428,78],[407,74,428,79],[407,78,428,83],[407,79,428,84],[407,80,428,85],[408,8,428,85],[408,10,428,86],[408,11,429,7,"slice"],[408,16,429,12],[408,17,429,13],[408,18,429,14],[408,20,429,16],[408,22,429,18],[408,23,429,19],[409,6,430,2],[411,6,432,2],[412,0,433,0],[413,0,434,0],[414,4,432,2],[415,6,432,2,"key"],[415,9,432,2],[416,6,432,2,"value"],[416,11,432,2],[416,13,435,2],[416,22,435,10,"synthesizeRecommendations"],[416,47,435,35,"synthesizeRecommendations"],[416,48,435,36,"rounds"],[416,54,435,64],[416,56,435,76],[417,8,436,4],[417,12,436,10,"allRecommendations"],[417,30,436,38],[417,33,436,41],[417,35,436,43],[418,8,438,4,"rounds"],[418,14,438,10],[418,15,438,11,"forEach"],[418,22,438,18],[418,23,438,19],[418,33,438,19,"round"],[418,38,438,24],[418,40,438,28],[419,10,439,6],[419,14,439,10,"round"],[419,19,439,15],[419,20,439,16,"claudeResponse"],[419,34,439,30],[419,36,439,32],[420,12,440,8,"allRecommendations"],[420,30,440,26],[420,31,440,27,"push"],[420,35,440,31],[420,36,440,31,"apply"],[420,41,440,31],[420,42,440,8,"allRecommendations"],[420,60,440,26],[420,66,440,26,"_toConsumableArray2"],[420,85,440,26],[420,86,440,26,"default"],[420,93,440,26],[420,95,440,35,"round"],[420,100,440,40],[420,101,440,41,"claudeResponse"],[420,115,440,55],[420,116,440,56,"recommendations"],[420,131,440,71],[420,133,440,72],[421,10,441,6],[422,10,442,6],[422,14,442,10,"round"],[422,19,442,15],[422,20,442,16,"chatgptResponse"],[422,35,442,31],[422,37,442,33],[423,12,443,8,"allRecommendations"],[423,30,443,26],[423,31,443,27,"push"],[423,35,443,31],[423,36,443,31,"apply"],[423,41,443,31],[423,42,443,8,"allRecommendations"],[423,60,443,26],[423,66,443,26,"_toConsumableArray2"],[423,85,443,26],[423,86,443,26,"default"],[423,93,443,26],[423,95,443,35,"round"],[423,100,443,40],[423,101,443,41,"chatgptResponse"],[423,116,443,56],[423,117,443,57,"recommendations"],[423,132,443,72],[423,134,443,73],[424,10,444,6],[425,8,445,4],[425,9,445,5],[425,10,445,6],[426,8,447,4],[426,15,447,11],[426,19,447,11,"_toConsumableArray2"],[426,38,447,11],[426,39,447,11,"default"],[426,46,447,11],[426,48,447,15],[426,52,447,19,"Set"],[426,55,447,22],[426,56,447,23,"allRecommendations"],[426,74,447,41],[426,75,447,42],[426,77,447,44,"slice"],[426,82,447,49],[426,83,447,50],[426,84,447,51],[426,86,447,53],[426,88,447,55],[426,89,447,56],[427,6,448,2],[428,4,448,3],[429,6,448,3,"key"],[429,9,448,3],[430,6,448,3,"value"],[430,11,448,3],[430,13,471,2],[430,22,471,10,"generateCollaborationSummary"],[430,50,471,38,"generateCollaborationSummary"],[430,51,471,39,"rounds"],[430,57,471,67],[430,59,471,77],[431,8,472,4],[431,12,472,10,"totalResponses"],[431,26,472,24],[431,29,472,27,"rounds"],[431,35,472,33],[431,36,472,34,"reduce"],[431,42,472,40],[431,43,472,41],[431,53,472,42,"sum"],[431,56,472,45],[431,58,472,47,"round"],[431,63,472,52],[432,10,472,52],[432,17,473,6,"sum"],[432,20,473,9],[432,24,473,13,"round"],[432,29,473,18],[432,30,473,19,"claudeResponse"],[432,44,473,33],[432,47,473,36],[432,48,473,37],[432,51,473,40],[432,52,473,41],[432,53,473,42],[432,57,473,46,"round"],[432,62,473,51],[432,63,473,52,"chatgptResponse"],[432,78,473,67],[432,81,473,70],[432,82,473,71],[432,85,473,74],[432,86,473,75],[432,87,473,76],[433,8,473,76],[433,11,473,78],[433,12,474,4],[433,13,474,5],[434,8,476,4],[434,12,476,10,"agreements"],[434,22,476,20],[434,25,476,23,"rounds"],[434,31,476,29],[434,32,476,30,"flatMap"],[434,39,476,37],[434,40,476,38],[434,50,476,38,"r"],[434,51,476,39],[435,10,476,39],[435,17,476,43,"r"],[435,18,476,44],[435,19,476,45,"synthesis"],[435,28,476,54],[435,29,476,55,"filter"],[435,35,476,61],[435,36,476,62],[435,46,476,62,"s"],[435,47,476,63],[436,12,476,63],[436,19,476,67,"s"],[436,20,476,68],[436,21,476,69,"includes"],[436,29,476,77],[436,30,476,78],[436,37,476,85],[436,38,476,86],[437,10,476,86],[437,12,476,87],[438,8,476,87],[438,10,476,88],[439,8,477,4],[439,12,477,10,"uniqueInsights"],[439,26,477,24],[439,29,477,27,"rounds"],[439,35,477,33],[439,36,477,34,"flatMap"],[439,43,477,41],[439,44,477,42],[439,54,477,42,"r"],[439,55,477,43],[440,10,477,43],[440,17,477,47,"r"],[440,18,477,48],[440,19,477,49,"synthesis"],[440,28,477,58],[440,29,477,59,"filter"],[440,35,477,65],[440,36,477,66],[440,46,477,66,"s"],[440,47,477,67],[441,12,477,67],[441,19,477,71,"s"],[441,20,477,72],[441,21,477,73,"includes"],[441,29,477,81],[441,30,477,82],[441,38,477,90],[441,39,477,91],[442,10,477,91],[442,12,477,92],[443,8,477,92],[443,10,477,93],[444,8,479,4],[444,15,479,11],[444,28,479,24,"rounds"],[444,34,479,30],[444,35,479,31,"length"],[444,41,479,37],[444,77,479,73,"totalResponses"],[444,91,479,87],[445,0,480,0],[445,20,480,20,"agreements"],[445,30,480,30],[445,31,480,31,"length"],[445,37,480,37],[445,65,480,65,"uniqueInsights"],[445,79,480,79],[445,80,480,80,"length"],[445,86,480,86],[446,0,481,0],[446,85,481,85],[447,6,482,2],[449,6,484,2],[450,0,485,0],[451,0,486,0],[452,4,484,2],[453,6,484,2,"key"],[453,9,484,2],[454,6,484,2,"value"],[454,11,484,2],[454,13,487,2],[454,22,487,10,"calculateConfidence"],[454,41,487,29,"calculateConfidence"],[454,42,487,30,"rounds"],[454,48,487,58],[454,50,487,68],[455,8,488,4],[455,12,488,8,"score"],[455,17,488,13],[455,20,488,16],[455,23,488,19],[455,24,488,20],[455,25,488,21],[457,8,490,4],[458,8,491,4,"rounds"],[458,14,491,10],[458,15,491,11,"forEach"],[458,22,491,18],[458,23,491,19],[458,33,491,19,"round"],[458,38,491,24],[458,40,491,28],[459,10,492,6],[459,14,492,10,"round"],[459,19,492,15],[459,20,492,16,"claudeResponse"],[459,34,492,30],[459,36,492,32,"score"],[459,41,492,37],[459,45,492,41],[459,48,492,44],[460,10,493,6],[460,14,493,10,"round"],[460,19,493,15],[460,20,493,16,"chatgptResponse"],[460,35,493,31],[460,37,493,33,"score"],[460,42,493,38],[460,46,493,42],[460,49,493,45],[461,10,494,6],[461,14,494,10,"round"],[461,19,494,15],[461,20,494,16,"synthesis"],[461,29,494,25],[461,30,494,26,"length"],[461,36,494,32],[461,39,494,35],[461,40,494,36],[461,42,494,38,"score"],[461,47,494,43],[461,51,494,47],[461,55,494,51],[462,8,495,4],[462,9,495,5],[462,10,495,6],[464,8,497,4],[465,8,498,4],[465,12,498,8,"rounds"],[465,18,498,14],[465,19,498,15,"length"],[465,25,498,21],[465,29,498,25],[465,30,498,26],[465,32,498,28,"score"],[465,37,498,33],[465,41,498,37],[465,44,498,40],[466,8,500,4],[466,15,500,11,"Math"],[466,19,500,15],[466,20,500,16,"min"],[466,23,500,19],[466,24,500,20,"score"],[466,29,500,25],[466,31,500,27],[466,34,500,30],[466,35,500,31],[467,6,501,2],[469,6,503,2],[470,0,504,0],[471,0,505,0],[472,4,503,2],[473,6,503,2,"key"],[473,9,503,2],[474,6,503,2,"value"],[474,11,503,2],[474,13,506,2],[474,22,506,10,"getFallbackCollaborativeResult"],[474,52,506,40,"getFallbackCollaborativeResult"],[474,53,506,41,"query"],[474,58,506,61],[474,60,506,84],[475,8,507,4],[475,12,507,10,"localTopic"],[475,22,507,20],[475,25,507,23,"LocalResearchService"],[475,67,507,43],[475,68,507,44,"getResearch"],[475,79,507,55],[475,80,507,56,"query"],[475,85,507,61],[475,86,507,62,"topic"],[475,91,507,67],[475,92,507,68],[476,8,509,4],[476,15,509,11],[477,10,510,6,"topic"],[477,15,510,11],[477,17,510,13,"query"],[477,22,510,18],[477,23,510,19,"topic"],[477,28,510,24],[478,10,511,6,"rounds"],[478,16,511,12],[478,18,511,14],[478,19,511,15],[479,12,512,8,"round"],[479,17,512,13],[479,19,512,15],[479,20,512,16],[480,12,513,8,"question"],[480,20,513,16],[480,22,513,18,"query"],[480,27,513,23],[480,28,513,24,"topic"],[480,33,513,29],[481,12,514,8,"synthesis"],[481,21,514,17],[481,23,514,19],[481,24,514,20],[481,86,514,82],[482,10,515,6],[482,11,515,7],[482,12,515,8],[483,10,516,6,"finalInsights"],[483,23,516,19],[483,25,516,21],[483,26,516,21,"localTopic"],[483,36,516,31],[483,56,516,21,"localTopic"],[483,66,516,31],[483,67,516,33,"insights"],[483,75,516,41],[483,80,516,45],[483,81,517,8],[483,106,517,33,"query"],[483,111,517,38],[483,112,517,39,"topic"],[483,117,517,44],[483,153,517,80],[483,155,518,8],[483,192,518,45],[483,194,519,8],[483,229,519,43],[483,231,520,8],[483,264,520,41],[483,265,521,7],[484,10,522,6,"finalRecommendations"],[484,30,522,26],[484,32,522,28],[484,33,522,28,"localTopic"],[484,43,522,38],[484,63,522,28,"localTopic"],[484,73,522,38],[484,74,522,40,"recommendations"],[484,89,522,55],[484,94,522,59],[484,95,523,8],[484,159,523,72],[484,161,524,8],[484,192,524,39],[484,194,525,8],[484,229,525,43],[484,231,526,8],[484,269,526,46],[484,270,527,7],[485,10,528,6,"codeExamples"],[485,22,528,18],[485,24,528,20],[485,25,528,20,"localTopic"],[485,35,528,30],[485,55,528,20,"localTopic"],[485,65,528,30],[485,66,528,32,"codeExamples"],[485,78,528,44],[485,83,528,48],[485,85,528,50],[486,10,529,6,"collaborationSummary"],[486,30,529,26],[486,32,529,28],[486,116,529,112],[487,10,530,6,"confidence"],[487,20,530,16],[487,22,530,18],[488,8,531,4],[488,9,531,5],[489,6,532,2],[491,6,534,2],[492,0,535,0],[493,0,536,0],[494,4,534,2],[495,6,534,2,"key"],[495,9,534,2],[496,6,534,2,"value"],[496,11,534,2],[496,13,537,2],[496,22,537,2,"toResearchTopic"],[496,37,537,17,"toResearchTopic"],[496,38,537,18,"result"],[496,44,537,45],[496,46,537,62],[497,8,538,4],[497,15,538,11],[498,10,539,6,"topic"],[498,15,539,11],[498,17,539,13,"result"],[498,23,539,19],[498,24,539,20,"topic"],[498,29,539,25],[499,10,540,6,"insights"],[499,18,540,14],[499,20,540,16,"result"],[499,26,540,22],[499,27,540,23,"finalInsights"],[499,40,540,36],[500,10,541,6,"recommendations"],[500,25,541,21],[500,27,541,23,"result"],[500,33,541,29],[500,34,541,30,"finalRecommendations"],[500,54,541,50],[501,10,542,6,"codeExamples"],[501,22,542,18],[501,24,542,20,"result"],[501,30,542,26],[501,31,542,27,"codeExamples"],[501,43,542,39],[502,10,543,6,"sources"],[502,17,543,13],[502,19,543,15],[502,20,543,16],[502,31,543,27],[502,33,543,29],[502,42,543,38],[502,44,543,40],[502,69,543,65],[502,70,543,66],[503,10,544,6,"lastUpdated"],[503,21,544,17],[503,23,544,19],[503,27,544,23,"Date"],[503,31,544,27],[503,32,544,28],[503,33,544,29],[503,34,544,30,"toISOString"],[503,45,544,41],[503,46,544,42],[504,8,545,4],[504,9,545,5],[505,6,546,2],[506,4,546,3],[507,2,546,3],[508,0,546,3],[508,3]],"functionMap":{"names":["<global>","CollaborativeAIResearchService","constructor","getApiKey","collaborativeResearch","conductRound","queryClaudeAPI","queryChatGPTAPI","generateRound2Question","generateRound3Question","extractInsights","lines.forEach$argument_0","insightSection._.split.filter$argument_0","insightSection._.split.filter.map$argument_0","extractRecommendations","patterns.forEach$argument_0","extractCodeExamples","summarizeResponse","synthesizeRound","round.chatgptResponse.insights.filter$argument_0","Array.from.some$argument_0","round.claudeResponse.insights.find$argument_0","insights.some$argument_0","round.chatgptResponse.insights.find$argument_0","synthesizeInsights","rounds.forEach$argument_0","allInsights.forEach$argument_0","uniqueInsights.sort$argument_0","synthesizeRecommendations","generateCollaborationSummary","rounds.reduce$argument_0","rounds.flatMap$argument_0","r.synthesis.filter$argument_0","calculateConfidence","getFallbackCollaborativeResult","toResearchTopic"],"mappings":"AAA;OCwC;ECK;GDU;EEE;GFK;EGK;GHoD;EIK;GJ2C;EKK;GL8B;EMK;GN8B;EOK;GPY;EQK;GRS;ESK;kBCK;KDO;gBEM,mBF;aGC,+CH;GTK;EaK;qBCW;KDO;GbG;EeK;Gfc;EgBK;GhBO;EiBK;mECM;wCCC;qEDE;SDC;8DGQ;8CCC;qEDC;SHC;gEKO;6CDC;qECC;SLC;GjBS;EuBK;mBCG;KDQ;wBEO;KFE;YGG,yEH;GvBE;E2BK;mBHG;KGO;G3BG;EeK;mBSG;KTO;GfG;E4BK;yCCC;4EDC;sCEG,wBC,wBD,CF;0CEC,wBC,yBD,CF;G5BK;EgCK;mBRI;KQI;GhCM;EiCK;GjC0B;EkCK;GlCS"}},"type":"js/module"}]}