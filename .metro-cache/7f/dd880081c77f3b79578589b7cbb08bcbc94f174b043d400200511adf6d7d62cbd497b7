{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.splitStyles = splitStyles;\n  /**\n   * Utility function to extract styles in separate objects\n   *\n   * @param styles The style object you want to filter\n   * @param filters The filters by which you want to split the styles\n   * @returns An array of filtered style objects:\n   * - The first style object contains the properties that didn't match any filter\n   * - After that there will be a style object for each filter you passed in the same order as the matching filters\n   * - A style property will exist in a single style object, the first filter it matched\n   */\n  function splitStyles(styles) {\n    for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      filters[_key - 1] = arguments[_key];\n    }\n    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning\n    // Entries which match the given filters will be temporarily stored in `newStyles`\n    var newStyles = filters.map(() => []);\n\n    // Entries which match no filter\n    var rest = [];\n\n    // Iterate every style property\n    outer: for (var item of Object.entries(styles)) {\n      // Check each filter\n      for (var i = 0; i < filters.length; i++) {\n        // Check if filter matches\n        if (filters[i](item[0])) {\n          newStyles[i].push(item); // Push to temporary filtered entries array\n          continue outer; // Skip to checking next style property\n        }\n      }\n\n      // Adds to rest styles if not filtered\n      rest.push(item);\n    }\n\n    // Put unmatched styles in the beginning\n    newStyles.unshift(rest);\n\n    // Convert arrays of entries into objects\n    return newStyles.map(styles => Object.fromEntries(styles));\n  }\n});","lineCount":48,"map":[[6,2,12,0],[7,0,13,0],[8,0,14,0],[9,0,15,0],[10,0,16,0],[11,0,17,0],[12,0,18,0],[13,0,19,0],[14,0,20,0],[15,0,21,0],[16,2,22,7],[16,11,22,16,"splitStyles"],[16,22,22,27,"splitStyles"],[16,23,23,2,"styles"],[16,29,23,19],[16,31,25,2],[17,4,25,2],[17,13,25,2,"_len"],[17,17,25,2],[17,20,25,2,"arguments"],[17,29,25,2],[17,30,25,2,"length"],[17,36,25,2],[17,38,24,5,"filters"],[17,45,24,12],[17,52,24,12,"Array"],[17,57,24,12],[17,58,24,12,"_len"],[17,62,24,12],[17,69,24,12,"_len"],[17,73,24,12],[17,84,24,12,"_key"],[17,88,24,12],[17,94,24,12,"_key"],[17,98,24,12],[17,101,24,12,"_len"],[17,105,24,12],[17,107,24,12,"_key"],[17,111,24,12],[18,6,24,5,"filters"],[18,13,24,12],[18,14,24,12,"_key"],[18,18,24,12],[18,26,24,12,"arguments"],[18,35,24,12],[18,36,24,12,"_key"],[18,40,24,12],[19,4,24,12],[20,4,30,2],[21,4,31,2],[22,4,32,2],[22,8,32,8,"newStyles"],[22,17,32,17],[22,20,32,20,"filters"],[22,27,32,27],[22,28,32,28,"map"],[22,31,32,31],[22,32,32,32],[22,38,32,38],[22,40,32,51],[22,41,32,52],[24,4,34,2],[25,4,35,2],[25,8,35,8,"rest"],[25,12,35,21],[25,15,35,24],[25,17,35,26],[27,4,37,2],[28,4,38,2,"outer"],[28,9,38,7],[28,11,38,9],[28,16,38,14],[28,20,38,20,"item"],[28,24,38,24],[28,28,38,28,"Object"],[28,34,38,34],[28,35,38,35,"entries"],[28,42,38,42],[28,43,38,43,"styles"],[28,49,38,49],[28,50,38,50],[28,52,38,63],[29,6,39,4],[30,6,40,4],[30,11,40,9],[30,15,40,13,"i"],[30,16,40,14],[30,19,40,17],[30,20,40,18],[30,22,40,20,"i"],[30,23,40,21],[30,26,40,24,"filters"],[30,33,40,31],[30,34,40,32,"length"],[30,40,40,38],[30,42,40,40,"i"],[30,43,40,41],[30,45,40,43],[30,47,40,45],[31,8,41,6],[32,8,42,6],[32,12,42,10,"filters"],[32,19,42,17],[32,20,42,18,"i"],[32,21,42,19],[32,22,42,20],[32,23,42,21,"item"],[32,27,42,25],[32,28,42,26],[32,29,42,27],[32,30,42,28],[32,31,42,29],[32,33,42,31],[33,10,43,8,"newStyles"],[33,19,43,17],[33,20,43,18,"i"],[33,21,43,19],[33,22,43,20],[33,23,43,21,"push"],[33,27,43,25],[33,28,43,26,"item"],[33,32,43,30],[33,33,43,31],[33,34,43,32],[33,35,43,33],[34,10,44,8],[34,19,44,17,"outer"],[34,24,44,22],[34,25,44,23],[34,26,44,24],[35,8,45,6],[36,6,46,4],[38,6,48,4],[39,6,49,4,"rest"],[39,10,49,8],[39,11,49,9,"push"],[39,15,49,13],[39,16,49,14,"item"],[39,20,49,18],[39,21,49,19],[40,4,50,2],[42,4,52,2],[43,4,53,2,"newStyles"],[43,13,53,11],[43,14,53,12,"unshift"],[43,21,53,19],[43,22,53,20,"rest"],[43,26,53,24],[43,27,53,25],[45,4,55,2],[46,4,56,2],[46,11,56,9,"newStyles"],[46,20,56,18],[46,21,56,19,"map"],[46,24,56,22],[46,25,56,24,"styles"],[46,31,56,30],[46,35,56,35,"Object"],[46,41,56,41],[46,42,56,42,"fromEntries"],[46,53,56,53],[46,54,56,54,"styles"],[46,60,56,60],[46,61,56,61],[46,62,56,62],[47,2,60,0],[48,0,60,1],[48,3]],"functionMap":{"names":["<global>","splitStyles","filters.map$argument_0","newStyles.map$argument_0"],"mappings":"AAA;OCqB;gCCU,mBD;uBEwB,sCF;CDI"}},"type":"js/module"}]}