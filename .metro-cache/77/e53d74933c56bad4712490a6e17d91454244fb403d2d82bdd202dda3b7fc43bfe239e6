{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"boolbase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":32,"index":32}}],"key":"0NOX8eQTjRnr/BoMAee+Ac81wCc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.compile = compile;\n  exports.generate = generate;\n  var _boolbase = _interopRequireDefault(require(_dependencyMap[1], \"boolbase\"));\n  /**\n   * Returns a function that checks if an elements index matches the given rule\n   * highly optimized to return the fastest solution.\n   *\n   * @param parsed A tuple [a, b], as returned by `parse`.\n   * @returns A highly optimized function that returns whether an index matches the nth-check.\n   * @example\n   *\n   * ```js\n   * const check = nthCheck.compile([2, 3]);\n   *\n   * check(0); // `false`\n   * check(1); // `false`\n   * check(2); // `true`\n   * check(3); // `false`\n   * check(4); // `true`\n   * check(5); // `false`\n   * check(6); // `true`\n   * ```\n   */\n  function compile(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    /*\n     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n     * Besides, the specification states that no elements are\n     * matched when `a` and `b` are 0.\n     *\n     * `b < 0` here as we subtracted 1 from `b` above.\n     */\n    if (b < 0 && a <= 0) return _boolbase.default.falseFunc;\n    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n    if (a === -1) return function (index) {\n      return index <= b;\n    };\n    if (a === 0) return function (index) {\n      return index === b;\n    };\n    // When `b <= 0` and `a === 1`, they match any element.\n    if (a === 1) return b < 0 ? _boolbase.default.trueFunc : function (index) {\n      return index >= b;\n    };\n    /*\n     * Otherwise, modulo can be used to check if there is a match.\n     *\n     * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n     */\n    var absA = Math.abs(a);\n    // Get `b mod a`, + a if this is negative.\n    var bMod = (b % absA + absA) % absA;\n    return a > 1 ? function (index) {\n      return index >= b && index % absA === bMod;\n    } : function (index) {\n      return index <= b && index % absA === bMod;\n    };\n  }\n  /**\n   * Returns a function that produces a monotonously increasing sequence of indices.\n   *\n   * If the sequence has an end, the returned function will return `null` after\n   * the last index in the sequence.\n   *\n   * @param parsed A tuple [a, b], as returned by `parse`.\n   * @returns A function that produces a sequence of indices.\n   * @example <caption>Always increasing (2n+3)</caption>\n   *\n   * ```js\n   * const gen = nthCheck.generate([2, 3])\n   *\n   * gen() // `1`\n   * gen() // `3`\n   * gen() // `5`\n   * gen() // `8`\n   * gen() // `11`\n   * ```\n   *\n   * @example <caption>With end value (-2n+10)</caption>\n   *\n   * ```js\n   *\n   * const gen = nthCheck.generate([-2, 5]);\n   *\n   * gen() // 0\n   * gen() // 2\n   * gen() // 4\n   * gen() // null\n   * ```\n   */\n  function generate(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    var n = 0;\n    // Make sure to always return an increasing sequence\n    if (a < 0) {\n      var aPos = -a;\n      // Get `b mod a`\n      var minValue = (b % aPos + aPos) % aPos;\n      return function () {\n        var val = minValue + aPos * n++;\n        return val > b ? null : val;\n      };\n    }\n    if (a === 0) return b < 0 ?\n    // There are no result â€” always return `null`\n    function () {\n      return null;\n    } :\n    // Return `b` exactly once\n    function () {\n      return n++ === 0 ? b : null;\n    };\n    if (b < 0) {\n      b += a * Math.ceil(-b / a);\n    }\n    return function () {\n      return a * n++ + b;\n    };\n  }\n});","lineCount":129,"map":[[8,2,1,0],[8,6,1,0,"_boolbase"],[8,15,1,0],[8,18,1,0,"_interopRequireDefault"],[8,40,1,0],[8,41,1,0,"require"],[8,48,1,0],[8,49,1,0,"_dependencyMap"],[8,63,1,0],[9,2,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,2,22,7],[29,11,22,16,"compile"],[29,18,22,23,"compile"],[29,19,22,24,"parsed"],[29,25,22,30],[29,27,22,32],[30,4,23,4],[30,8,23,10,"a"],[30,9,23,11],[30,12,23,14,"parsed"],[30,18,23,20],[30,19,23,21],[30,20,23,22],[30,21,23,23],[31,4,24,4],[32,4,25,4],[32,8,25,10,"b"],[32,9,25,11],[32,12,25,14,"parsed"],[32,18,25,20],[32,19,25,21],[32,20,25,22],[32,21,25,23],[32,24,25,26],[32,25,25,27],[33,4,26,4],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,0,31,0],[39,0,32,0],[40,4,33,4],[40,8,33,8,"b"],[40,9,33,9],[40,12,33,12],[40,13,33,13],[40,17,33,17,"a"],[40,18,33,18],[40,22,33,22],[40,23,33,23],[40,25,34,8],[40,32,34,15,"boolbase"],[40,49,34,23],[40,50,34,24,"falseFunc"],[40,59,34,33],[41,4,35,4],[42,4,36,4],[42,8,36,8,"a"],[42,9,36,9],[42,14,36,14],[42,15,36,15],[42,16,36,16],[42,18,37,8],[42,25,37,15],[42,35,37,16,"index"],[42,40,37,21],[43,6,37,21],[43,13,37,26,"index"],[43,18,37,31],[43,22,37,35,"b"],[43,23,37,36],[44,4,37,36],[45,4,38,4],[45,8,38,8,"a"],[45,9,38,9],[45,14,38,14],[45,15,38,15],[45,17,39,8],[45,24,39,15],[45,34,39,16,"index"],[45,39,39,21],[46,6,39,21],[46,13,39,26,"index"],[46,18,39,31],[46,23,39,36,"b"],[46,24,39,37],[47,4,39,37],[48,4,40,4],[49,4,41,4],[49,8,41,8,"a"],[49,9,41,9],[49,14,41,14],[49,15,41,15],[49,17,42,8],[49,24,42,15,"b"],[49,25,42,16],[49,28,42,19],[49,29,42,20],[49,32,42,23,"boolbase"],[49,49,42,31],[49,50,42,32,"trueFunc"],[49,58,42,40],[49,61,42,43],[49,71,42,44,"index"],[49,76,42,49],[50,6,42,49],[50,13,42,54,"index"],[50,18,42,59],[50,22,42,63,"b"],[50,23,42,64],[51,4,42,64],[52,4,43,4],[53,0,44,0],[54,0,45,0],[55,0,46,0],[56,0,47,0],[57,4,48,4],[57,8,48,10,"absA"],[57,12,48,14],[57,15,48,17,"Math"],[57,19,48,21],[57,20,48,22,"abs"],[57,23,48,25],[57,24,48,26,"a"],[57,25,48,27],[57,26,48,28],[58,4,49,4],[59,4,50,4],[59,8,50,10,"bMod"],[59,12,50,14],[59,15,50,17],[59,16,50,19,"b"],[59,17,50,20],[59,20,50,23,"absA"],[59,24,50,27],[59,27,50,31,"absA"],[59,31,50,35],[59,35,50,39,"absA"],[59,39,50,43],[60,4,51,4],[60,11,51,11,"a"],[60,12,51,12],[60,15,51,15],[60,16,51,16],[60,19,52,10],[60,29,52,11,"index"],[60,34,52,16],[61,6,52,16],[61,13,52,21,"index"],[61,18,52,26],[61,22,52,30,"b"],[61,23,52,31],[61,27,52,35,"index"],[61,32,52,40],[61,35,52,43,"absA"],[61,39,52,47],[61,44,52,52,"bMod"],[61,48,52,56],[62,4,52,56],[62,8,53,10],[62,18,53,11,"index"],[62,23,53,16],[63,6,53,16],[63,13,53,21,"index"],[63,18,53,26],[63,22,53,30,"b"],[63,23,53,31],[63,27,53,35,"index"],[63,32,53,40],[63,35,53,43,"absA"],[63,39,53,47],[63,44,53,52,"bMod"],[63,48,53,56],[64,4,53,56],[65,2,54,0],[66,2,55,0],[67,0,56,0],[68,0,57,0],[69,0,58,0],[70,0,59,0],[71,0,60,0],[72,0,61,0],[73,0,62,0],[74,0,63,0],[75,0,64,0],[76,0,65,0],[77,0,66,0],[78,0,67,0],[79,0,68,0],[80,0,69,0],[81,0,70,0],[82,0,71,0],[83,0,72,0],[84,0,73,0],[85,0,74,0],[86,0,75,0],[87,0,76,0],[88,0,77,0],[89,0,78,0],[90,0,79,0],[91,0,80,0],[92,0,81,0],[93,0,82,0],[94,0,83,0],[95,0,84,0],[96,0,85,0],[97,0,86,0],[98,2,87,7],[98,11,87,16,"generate"],[98,19,87,24,"generate"],[98,20,87,25,"parsed"],[98,26,87,31],[98,28,87,33],[99,4,88,4],[99,8,88,10,"a"],[99,9,88,11],[99,12,88,14,"parsed"],[99,18,88,20],[99,19,88,21],[99,20,88,22],[99,21,88,23],[100,4,89,4],[101,4,90,4],[101,8,90,8,"b"],[101,9,90,9],[101,12,90,12,"parsed"],[101,18,90,18],[101,19,90,19],[101,20,90,20],[101,21,90,21],[101,24,90,24],[101,25,90,25],[102,4,91,4],[102,8,91,8,"n"],[102,9,91,9],[102,12,91,12],[102,13,91,13],[103,4,92,4],[104,4,93,4],[104,8,93,8,"a"],[104,9,93,9],[104,12,93,12],[104,13,93,13],[104,15,93,15],[105,6,94,8],[105,10,94,14,"aPos"],[105,14,94,18],[105,17,94,21],[105,18,94,22,"a"],[105,19,94,23],[106,6,95,8],[107,6,96,8],[107,10,96,14,"minValue"],[107,18,96,22],[107,21,96,25],[107,22,96,27,"b"],[107,23,96,28],[107,26,96,31,"aPos"],[107,30,96,35],[107,33,96,39,"aPos"],[107,37,96,43],[107,41,96,47,"aPos"],[107,45,96,51],[108,6,97,8],[108,13,97,15],[108,25,97,21],[109,8,98,12],[109,12,98,18,"val"],[109,15,98,21],[109,18,98,24,"minValue"],[109,26,98,32],[109,29,98,35,"aPos"],[109,33,98,39],[109,36,98,42,"n"],[109,37,98,43],[109,39,98,45],[110,8,99,12],[110,15,99,19,"val"],[110,18,99,22],[110,21,99,25,"b"],[110,22,99,26],[110,25,99,29],[110,29,99,33],[110,32,99,36,"val"],[110,35,99,39],[111,6,100,8],[111,7,100,9],[112,4,101,4],[113,4,102,4],[113,8,102,8,"a"],[113,9,102,9],[113,14,102,14],[113,15,102,15],[113,17,103,8],[113,24,103,15,"b"],[113,25,103,16],[113,28,103,19],[113,29,103,20],[114,4,104,14],[115,4,105,16],[116,6,105,16],[116,13,105,22],[116,17,105,26],[117,4,105,26],[118,4,106,14],[119,4,107,16],[120,6,107,16],[120,13,107,23,"n"],[120,14,107,24],[120,16,107,26],[120,21,107,31],[120,22,107,32],[120,25,107,35,"b"],[120,26,107,36],[120,29,107,39],[120,33,107,43],[121,4,107,43],[121,5,107,44],[122,4,108,4],[122,8,108,8,"b"],[122,9,108,9],[122,12,108,12],[122,13,108,13],[122,15,108,15],[123,6,109,8,"b"],[123,7,109,9],[123,11,109,13,"a"],[123,12,109,14],[123,15,109,17,"Math"],[123,19,109,21],[123,20,109,22,"ceil"],[123,24,109,26],[123,25,109,27],[123,26,109,28,"b"],[123,27,109,29],[123,30,109,32,"a"],[123,31,109,33],[123,32,109,34],[124,4,110,4],[125,4,111,4],[125,11,111,11],[126,6,111,11],[126,13,111,17,"a"],[126,14,111,18],[126,17,111,21,"n"],[126,18,111,22],[126,20,111,24],[126,23,111,27,"b"],[126,24,111,28],[127,4,111,28],[128,2,112,0],[129,0,112,1],[129,3]],"functionMap":{"names":["<global>","compile","<anonymous>","generate"],"mappings":"AAA;OCqB;eCe,qBD;eCE,sBD;2CCG,qBD;UCU,8CD;UCC,8CD;CDC;OGiC;eDU;SCG;gBDK,UC;gBDE,4BC;WDI,iBC;CHC"}},"type":"js/module"}]}