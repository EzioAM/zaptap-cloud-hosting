{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.restoreConsoleError = exports.resetErrorTracking = exports.initializeErrorInterceptor = exports.getErrorStats = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n  import { EventLogger } from './/EventLogger';\n   * Smart Error Interceptor\n   * \n   * This module intelligently manages console.error calls to reduce spam\n   * while maintaining visibility into real issues.\n   */\n\n  // Keep reference to original console.error\n  var originalConsoleError = console.error;\n\n  // Track errors by type and context\n\n  var errorTracker = new Map();\n\n  // Configuration\n  var ERROR_BATCH_WINDOW = 10000; // 10 seconds\n  var MAX_ERRORS_BEFORE_SUMMARY = 3; // Show first 3, then summarize\n  var SUMMARY_INTERVAL = 30000; // Show summary every 30 seconds\n\n  // Last summary time\n  var lastSummaryTime = 0;\n\n  /**\n   * Network error patterns\n   */\n  var NETWORK_ERROR_PATTERNS = ['Network request failed', 'Failed to fetch', 'NetworkError', 'AuthRetryableFetchError', 'fetch failed', 'ERR_NETWORK', 'ERR_INTERNET_DISCONNECTED', 'ECONNREFUSED', 'ETIMEDOUT', 'Unable to resolve host', 'Network is unreachable'];\n\n  /**\n   * Extract error context (like API endpoint or component)\n   */\n  var extractErrorContext = function extractErrorContext(args) {\n    var key = 'unknown_error';\n    var endpoint;\n\n    // Look for API endpoint information\n    for (var arg of args) {\n      if (typeof arg === 'string') {\n        // Check for common API patterns\n        if (arg.includes('getPublicAutomations')) {\n          key = 'api_public_automations';\n          endpoint = 'getPublicAutomations';\n        } else if (arg.includes('getTrendingAutomations')) {\n          key = 'api_trending_automations';\n          endpoint = 'getTrendingAutomations';\n        } else if (arg.includes('auth') || arg.includes('session')) {\n          key = 'auth_session';\n          endpoint = 'auth';\n        } else if (arg.includes('RPC function')) {\n          var match = arg.match(/RPC function (\\w+)/);\n          if (match) {\n            key = `rpc_${match[1]}`;\n            endpoint = match[1];\n          }\n        }\n      }\n\n      // Check error objects\n      if (arg && typeof arg === 'object' && arg.message) {\n        if (arg.message.includes('Network request failed')) {\n          if (key === 'unknown_error') {\n            key = 'network_request_failed';\n          }\n        }\n      }\n    }\n    return {\n      key: key,\n      endpoint: endpoint\n    };\n  };\n\n  /**\n   * Check if error is network-related\n   */\n  var isNetworkError = function isNetworkError(args) {\n    var _loop = function _loop(arg) {\n        if (arg instanceof Error && arg.name === 'TypeError' && arg.message && arg.message.includes('Network request failed')) {\n          return {\n            v: true\n          };\n        }\n        if (arg && typeof arg === 'object') {\n          if (arg.name === 'NetworkError' || arg.name === 'AuthRetryableFetchError' || arg.message && NETWORK_ERROR_PATTERNS.some(function (pattern) {\n            return arg.message.includes(pattern);\n          })) {\n            return {\n              v: true\n            };\n          }\n        }\n      },\n      _ret;\n    for (var arg of args) {\n      _ret = _loop(arg);\n      if (_ret) return _ret.v;\n    }\n    var errorString = args.map(function (arg) {\n      return String(arg);\n    }).join(' ');\n    return NETWORK_ERROR_PATTERNS.some(function (pattern) {\n      return errorString.includes(pattern);\n    });\n  };\n\n  /**\n   * Show error summary\n   */\n  var showErrorSummary = function showErrorSummary() {\n    var now = Date.now();\n    if (now - lastSummaryTime < SUMMARY_INTERVAL) {\n      return;\n    }\n    lastSummaryTime = now;\n    var networkErrors = Array.from(errorTracker.entries()).filter(function (_ref) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 1),\n        key = _ref2[0];\n      return key.includes('api_') || key.includes('rpc_') || key.includes('network');\n    }).filter(function (_ref3) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n        info = _ref4[1];\n      return info.suppressed > 0;\n    });\n    if (networkErrors.length > 0) {\n      EventLogger.debug('errorInterceptor', '\\nðŸ“Š Network Error Summary (last 30s):');\n      networkErrors.forEach(function (_ref5) {\n        var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),\n          key = _ref6[0],\n          info = _ref6[1];\n        var total = info.count + info.suppressed;\n        var endpoint = info.endpoint || key;\n        EventLogger.debug('errorInterceptor', '   - ${endpoint}: ${total} errors (${info.count} shown, ${info.suppressed} suppressed)');\n      });\n      EventLogger.debug('errorInterceptor', 'ðŸ’¡ Check your network connection or API availability\\n');\n    }\n  };\n\n  /**\n   * Initialize the error interceptor\n   */\n  var initializeErrorInterceptor = exports.initializeErrorInterceptor = function initializeErrorInterceptor() {\n    console.error = function () {\n      var now = Date.now();\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var _extractErrorContext = extractErrorContext(args),\n        key = _extractErrorContext.key,\n        endpoint = _extractErrorContext.endpoint;\n\n      // Get or create error info\n      var errorInfo = errorTracker.get(key);\n      if (!errorInfo) {\n        errorInfo = {\n          count: 0,\n          firstSeen: now,\n          lastSeen: now,\n          endpoint: endpoint,\n          suppressed: 0\n        };\n        errorTracker.set(key, errorInfo);\n      }\n\n      // Update last seen\n      errorInfo.lastSeen = now;\n\n      // Check if this is a network error\n      if (isNetworkError(args)) {\n        // For network errors, show first few then suppress\n        if (errorInfo.count < MAX_ERRORS_BEFORE_SUMMARY) {\n          var _args$;\n          errorInfo.count++;\n          // Show with context\n          var context = endpoint ? ` [${endpoint}]` : '';\n          EventLogger.debug('errorInterceptor', 'ðŸ”´ Network Error${context}:', ((_args$ = args[0]) == null ? void 0 : _args$.message) || args[0] || 'Network request failed');\n        } else {\n          errorInfo.suppressed++;\n\n          // Show summary periodically\n          if (errorInfo.suppressed % 10 === 0) {\n            EventLogger.debug('errorInterceptor', 'ðŸ“´ Network errors continuing for ${endpoint || key} (${errorInfo.suppressed + errorInfo.count} total)');\n          }\n        }\n\n        // Show summary if enough time has passed\n        showErrorSummary();\n        return;\n      }\n\n      // For non-network errors, always show\n      originalConsoleError.apply(console, args);\n    };\n\n    // Set up periodic summary\n    setInterval(showErrorSummary, SUMMARY_INTERVAL);\n  };\n\n  /**\n   * Restore original console.error\n   */\n  var restoreConsoleError = exports.restoreConsoleError = function restoreConsoleError() {\n    console.error = originalConsoleError;\n  };\n\n  /**\n   * Reset error tracking\n   */\n  var resetErrorTracking = exports.resetErrorTracking = function resetErrorTracking() {\n    errorTracker.clear();\n    lastSummaryTime = 0;\n  };\n\n  /**\n   * Get error statistics\n   */\n  var getErrorStats = exports.getErrorStats = function getErrorStats() {\n    var stats = {};\n    errorTracker.forEach(function (info, key) {\n      stats[key] = {\n        total: info.count + info.suppressed,\n        shown: info.count,\n        suppressed: info.suppressed,\n        endpoint: info.endpoint\n      };\n    });\n    return stats;\n  };\n});","lineCount":235,"map":[[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[16,2,9,0],[17,2,10,0],[17,6,10,6,"originalConsoleError"],[17,26,10,26],[17,29,10,29,"console"],[17,36,10,36],[17,37,10,37,"error"],[17,42,10,42],[19,2,12,0],[21,2,21,0],[21,6,21,6,"errorTracker"],[21,18,21,18],[21,21,21,21],[21,25,21,25,"Map"],[21,28,21,28],[21,29,21,48],[21,30,21,49],[23,2,23,0],[24,2,24,0],[24,6,24,6,"ERROR_BATCH_WINDOW"],[24,24,24,24],[24,27,24,27],[24,32,24,32],[24,33,24,33],[24,34,24,34],[25,2,25,0],[25,6,25,6,"MAX_ERRORS_BEFORE_SUMMARY"],[25,31,25,31],[25,34,25,34],[25,35,25,35],[25,36,25,36],[25,37,25,37],[26,2,26,0],[26,6,26,6,"SUMMARY_INTERVAL"],[26,22,26,22],[26,25,26,25],[26,30,26,30],[26,31,26,31],[26,32,26,32],[28,2,28,0],[29,2,29,0],[29,6,29,4,"lastSummaryTime"],[29,21,29,19],[29,24,29,22],[29,25,29,23],[31,2,31,0],[32,0,32,0],[33,0,33,0],[34,2,34,0],[34,6,34,6,"NETWORK_ERROR_PATTERNS"],[34,28,34,28],[34,31,34,31],[34,32,35,2],[34,56,35,26],[34,58,36,2],[34,75,36,19],[34,77,37,2],[34,91,37,16],[34,93,38,2],[34,118,38,27],[34,120,39,2],[34,134,39,16],[34,136,40,2],[34,149,40,15],[34,151,41,2],[34,178,41,29],[34,180,42,2],[34,194,42,16],[34,196,43,2],[34,207,43,13],[34,209,44,2],[34,233,44,26],[34,235,45,2],[34,259,45,26],[34,260,46,1],[36,2,48,0],[37,0,49,0],[38,0,50,0],[39,2,51,0],[39,6,51,6,"extractErrorContext"],[39,25,51,25],[39,28,51,28],[39,37,51,6,"extractErrorContext"],[39,56,51,25,"extractErrorContext"],[39,57,51,29,"args"],[39,61,51,40],[39,63,51,81],[40,4,52,2],[40,8,52,6,"key"],[40,11,52,9],[40,14,52,12],[40,29,52,27],[41,4,53,2],[41,8,53,6,"endpoint"],[41,16,53,34],[43,4,55,2],[44,4,56,2],[44,9,56,7],[44,13,56,13,"arg"],[44,16,56,16],[44,20,56,20,"args"],[44,24,56,24],[44,26,56,26],[45,6,57,4],[45,10,57,8],[45,17,57,15,"arg"],[45,20,57,18],[45,25,57,23],[45,33,57,31],[45,35,57,33],[46,8,58,6],[47,8,59,6],[47,12,59,10,"arg"],[47,15,59,13],[47,16,59,14,"includes"],[47,24,59,22],[47,25,59,23],[47,47,59,45],[47,48,59,46],[47,50,59,48],[48,10,60,8,"key"],[48,13,60,11],[48,16,60,14],[48,40,60,38],[49,10,61,8,"endpoint"],[49,18,61,16],[49,21,61,19],[49,43,61,41],[50,8,62,6],[50,9,62,7],[50,15,62,13],[50,19,62,17,"arg"],[50,22,62,20],[50,23,62,21,"includes"],[50,31,62,29],[50,32,62,30],[50,56,62,54],[50,57,62,55],[50,59,62,57],[51,10,63,8,"key"],[51,13,63,11],[51,16,63,14],[51,42,63,40],[52,10,64,8,"endpoint"],[52,18,64,16],[52,21,64,19],[52,45,64,43],[53,8,65,6],[53,9,65,7],[53,15,65,13],[53,19,65,17,"arg"],[53,22,65,20],[53,23,65,21,"includes"],[53,31,65,29],[53,32,65,30],[53,38,65,36],[53,39,65,37],[53,43,65,41,"arg"],[53,46,65,44],[53,47,65,45,"includes"],[53,55,65,53],[53,56,65,54],[53,65,65,63],[53,66,65,64],[53,68,65,66],[54,10,66,8,"key"],[54,13,66,11],[54,16,66,14],[54,30,66,28],[55,10,67,8,"endpoint"],[55,18,67,16],[55,21,67,19],[55,27,67,25],[56,8,68,6],[56,9,68,7],[56,15,68,13],[56,19,68,17,"arg"],[56,22,68,20],[56,23,68,21,"includes"],[56,31,68,29],[56,32,68,30],[56,46,68,44],[56,47,68,45],[56,49,68,47],[57,10,69,8],[57,14,69,14,"match"],[57,19,69,19],[57,22,69,22,"arg"],[57,25,69,25],[57,26,69,26,"match"],[57,31,69,31],[57,32,69,32],[57,52,69,52],[57,53,69,53],[58,10,70,8],[58,14,70,12,"match"],[58,19,70,17],[58,21,70,19],[59,12,71,10,"key"],[59,15,71,13],[59,18,71,16],[59,25,71,23,"match"],[59,30,71,28],[59,31,71,29],[59,32,71,30],[59,33,71,31],[59,35,71,33],[60,12,72,10,"endpoint"],[60,20,72,18],[60,23,72,21,"match"],[60,28,72,26],[60,29,72,27],[60,30,72,28],[60,31,72,29],[61,10,73,8],[62,8,74,6],[63,6,75,4],[65,6,77,4],[66,6,78,4],[66,10,78,8,"arg"],[66,13,78,11],[66,17,78,15],[66,24,78,22,"arg"],[66,27,78,25],[66,32,78,30],[66,40,78,38],[66,44,78,42,"arg"],[66,47,78,45],[66,48,78,46,"message"],[66,55,78,53],[66,57,78,55],[67,8,79,6],[67,12,79,10,"arg"],[67,15,79,13],[67,16,79,14,"message"],[67,23,79,21],[67,24,79,22,"includes"],[67,32,79,30],[67,33,79,31],[67,57,79,55],[67,58,79,56],[67,60,79,58],[68,10,80,8],[68,14,80,12,"key"],[68,17,80,15],[68,22,80,20],[68,37,80,35],[68,39,80,37],[69,12,81,10,"key"],[69,15,81,13],[69,18,81,16],[69,42,81,40],[70,10,82,8],[71,8,83,6],[72,6,84,4],[73,4,85,2],[74,4,87,2],[74,11,87,9],[75,6,87,11,"key"],[75,9,87,14],[75,11,87,11,"key"],[75,14,87,14],[76,6,87,16,"endpoint"],[76,14,87,24],[76,16,87,16,"endpoint"],[77,4,87,25],[77,5,87,26],[78,2,88,0],[78,3,88,1],[80,2,90,0],[81,0,91,0],[82,0,92,0],[83,2,93,0],[83,6,93,6,"isNetworkError"],[83,20,93,20],[83,23,93,23],[83,32,93,6,"isNetworkError"],[83,46,93,20,"isNetworkError"],[83,47,93,24,"args"],[83,51,93,35],[83,53,93,49],[84,4,93,49],[84,8,93,49,"_loop"],[84,13,93,49],[84,25,93,49,"_loop"],[84,31,93,49,"arg"],[84,34,93,49],[84,36,94,26],[85,8,95,4],[85,12,95,8,"arg"],[85,15,95,11],[85,27,95,23,"Error"],[85,32,95,28],[85,36,95,32,"arg"],[85,39,95,35],[85,40,95,36,"name"],[85,44,95,40],[85,49,95,45],[85,60,95,56],[85,64,96,8,"arg"],[85,67,96,11],[85,68,96,12,"message"],[85,75,96,19],[85,79,96,23,"arg"],[85,82,96,26],[85,83,96,27,"message"],[85,90,96,34],[85,91,96,35,"includes"],[85,99,96,43],[85,100,96,44],[85,124,96,68],[85,125,96,69],[85,127,96,71],[86,10,96,71],[87,12,96,71,"v"],[87,13,96,71],[87,15,97,13],[88,10,97,17],[89,8,98,4],[90,8,100,4],[90,12,100,8,"arg"],[90,15,100,11],[90,19,100,15],[90,26,100,22,"arg"],[90,29,100,25],[90,34,100,30],[90,42,100,38],[90,44,100,40],[91,10,101,6],[91,14,101,10,"arg"],[91,17,101,13],[91,18,101,14,"name"],[91,22,101,18],[91,27,101,23],[91,41,101,37],[91,45,102,10,"arg"],[91,48,102,13],[91,49,102,14,"name"],[91,53,102,18],[91,58,102,23],[91,83,102,48],[91,87,103,11,"arg"],[91,90,103,14],[91,91,103,15,"message"],[91,98,103,22],[91,102,103,26,"NETWORK_ERROR_PATTERNS"],[91,124,103,48],[91,125,103,49,"some"],[91,129,103,53],[91,130,103,54],[91,140,103,54,"pattern"],[91,147,103,61],[92,12,103,61],[92,19,103,65,"arg"],[92,22,103,68],[92,23,103,69,"message"],[92,30,103,76],[92,31,103,77,"includes"],[92,39,103,85],[92,40,103,86,"pattern"],[92,47,103,93],[92,48,103,94],[93,10,103,94],[93,12,103,96],[93,14,103,98],[94,12,103,98],[95,14,103,98,"v"],[95,15,103,98],[95,17,104,15],[96,12,104,19],[97,10,105,6],[98,8,106,4],[99,6,107,2],[99,7,107,3],[100,6,107,3,"_ret"],[100,10,107,3],[101,4,94,2],[101,9,94,7],[101,13,94,13,"arg"],[101,16,94,16],[101,20,94,20,"args"],[101,24,94,24],[102,6,94,24,"_ret"],[102,10,94,24],[102,13,94,24,"_loop"],[102,18,94,24],[102,19,94,24,"arg"],[102,22,94,24],[103,6,94,24],[103,10,94,24,"_ret"],[103,14,94,24],[103,23,94,24,"_ret"],[103,27,94,24],[103,28,94,24,"v"],[103,29,94,24],[104,4,94,24],[105,4,109,2],[105,8,109,8,"errorString"],[105,19,109,19],[105,22,109,22,"args"],[105,26,109,26],[105,27,109,27,"map"],[105,30,109,30],[105,31,109,31],[105,41,109,31,"arg"],[105,44,109,34],[106,6,109,34],[106,13,109,38,"String"],[106,19,109,44],[106,20,109,45,"arg"],[106,23,109,48],[106,24,109,49],[107,4,109,49],[107,6,109,50],[107,7,109,51,"join"],[107,11,109,55],[107,12,109,56],[107,15,109,59],[107,16,109,60],[108,4,110,2],[108,11,110,9,"NETWORK_ERROR_PATTERNS"],[108,33,110,31],[108,34,110,32,"some"],[108,38,110,36],[108,39,110,37],[108,49,110,37,"pattern"],[108,56,110,44],[109,6,110,44],[109,13,110,48,"errorString"],[109,24,110,59],[109,25,110,60,"includes"],[109,33,110,68],[109,34,110,69,"pattern"],[109,41,110,76],[109,42,110,77],[110,4,110,77],[110,6,110,78],[111,2,111,0],[111,3,111,1],[113,2,113,0],[114,0,114,0],[115,0,115,0],[116,2,116,0],[116,6,116,6,"showErrorSummary"],[116,22,116,22],[116,25,116,25],[116,34,116,6,"showErrorSummary"],[116,50,116,22,"showErrorSummary"],[116,51,116,22],[116,53,116,31],[117,4,117,2],[117,8,117,8,"now"],[117,11,117,11],[117,14,117,14,"Date"],[117,18,117,18],[117,19,117,19,"now"],[117,22,117,22],[117,23,117,23],[117,24,117,24],[118,4,118,2],[118,8,118,6,"now"],[118,11,118,9],[118,14,118,12,"lastSummaryTime"],[118,29,118,27],[118,32,118,30,"SUMMARY_INTERVAL"],[118,48,118,46],[118,50,118,48],[119,6,119,4],[120,4,120,2],[121,4,122,2,"lastSummaryTime"],[121,19,122,17],[121,22,122,20,"now"],[121,25,122,23],[122,4,124,2],[122,8,124,8,"networkErrors"],[122,21,124,21],[122,24,124,24,"Array"],[122,29,124,29],[122,30,124,30,"from"],[122,34,124,34],[122,35,124,35,"errorTracker"],[122,47,124,47],[122,48,124,48,"entries"],[122,55,124,55],[122,56,124,56],[122,57,124,57],[122,58,124,58],[122,59,125,5,"filter"],[122,65,125,11],[122,66,125,12],[122,76,125,12,"_ref"],[122,80,125,12],[123,6,125,12],[123,10,125,12,"_ref2"],[123,15,125,12],[123,22,125,12,"_slicedToArray2"],[123,37,125,12],[123,38,125,12,"default"],[123,45,125,12],[123,47,125,12,"_ref"],[123,51,125,12],[124,8,125,14,"key"],[124,11,125,17],[124,14,125,17,"_ref2"],[124,19,125,17],[125,6,125,17],[125,13,125,23,"key"],[125,16,125,26],[125,17,125,27,"includes"],[125,25,125,35],[125,26,125,36],[125,32,125,42],[125,33,125,43],[125,37,125,47,"key"],[125,40,125,50],[125,41,125,51,"includes"],[125,49,125,59],[125,50,125,60],[125,56,125,66],[125,57,125,67],[125,61,125,71,"key"],[125,64,125,74],[125,65,125,75,"includes"],[125,73,125,83],[125,74,125,84],[125,83,125,93],[125,84,125,94],[126,4,125,94],[126,6,125,95],[126,7,126,5,"filter"],[126,13,126,11],[126,14,126,12],[126,24,126,12,"_ref3"],[126,29,126,12],[127,6,126,12],[127,10,126,12,"_ref4"],[127,15,126,12],[127,22,126,12,"_slicedToArray2"],[127,37,126,12],[127,38,126,12,"default"],[127,45,126,12],[127,47,126,12,"_ref3"],[127,52,126,12],[128,8,126,16,"info"],[128,12,126,20],[128,15,126,20,"_ref4"],[128,20,126,20],[129,6,126,20],[129,13,126,26,"info"],[129,17,126,30],[129,18,126,31,"suppressed"],[129,28,126,41],[129,31,126,44],[129,32,126,45],[130,4,126,45],[130,6,126,46],[131,4,128,2],[131,8,128,6,"networkErrors"],[131,21,128,19],[131,22,128,20,"length"],[131,28,128,26],[131,31,128,29],[131,32,128,30],[131,34,128,32],[132,6,129,4,"EventLogger"],[132,17,129,15],[132,18,129,16,"debug"],[132,23,129,21],[132,24,129,22],[132,42,129,40],[132,44,129,42],[132,84,129,82],[132,85,129,83],[133,6,130,4,"networkErrors"],[133,19,130,17],[133,20,130,18,"forEach"],[133,27,130,25],[133,28,130,26],[133,38,130,26,"_ref5"],[133,43,130,26],[133,45,130,43],[134,8,130,43],[134,12,130,43,"_ref6"],[134,17,130,43],[134,24,130,43,"_slicedToArray2"],[134,39,130,43],[134,40,130,43,"default"],[134,47,130,43],[134,49,130,43,"_ref5"],[134,54,130,43],[135,10,130,28,"key"],[135,13,130,31],[135,16,130,31,"_ref6"],[135,21,130,31],[136,10,130,33,"info"],[136,14,130,37],[136,17,130,37,"_ref6"],[136,22,130,37],[137,8,131,6],[137,12,131,12,"total"],[137,17,131,17],[137,20,131,20,"info"],[137,24,131,24],[137,25,131,25,"count"],[137,30,131,30],[137,33,131,33,"info"],[137,37,131,37],[137,38,131,38,"suppressed"],[137,48,131,48],[138,8,132,6],[138,12,132,12,"endpoint"],[138,20,132,20],[138,23,132,23,"info"],[138,27,132,27],[138,28,132,28,"endpoint"],[138,36,132,36],[138,40,132,40,"key"],[138,43,132,43],[139,8,133,6,"EventLogger"],[139,19,133,17],[139,20,133,18,"debug"],[139,25,133,23],[139,26,133,24],[139,44,133,42],[139,46,133,44],[139,134,133,132],[139,135,133,133],[140,6,134,4],[140,7,134,5],[140,8,134,6],[141,6,135,4,"EventLogger"],[141,17,135,15],[141,18,135,16,"debug"],[141,23,135,21],[141,24,135,22],[141,42,135,40],[141,44,135,42],[141,100,135,98],[141,101,135,99],[142,4,136,2],[143,2,137,0],[143,3,137,1],[145,2,139,0],[146,0,140,0],[147,0,141,0],[148,2,142,7],[148,6,142,13,"initializeErrorInterceptor"],[148,32,142,39],[148,35,142,39,"exports"],[148,42,142,39],[148,43,142,39,"initializeErrorInterceptor"],[148,69,142,39],[148,72,142,42],[148,81,142,13,"initializeErrorInterceptor"],[148,107,142,39,"initializeErrorInterceptor"],[148,108,142,39],[148,110,142,48],[149,4,143,2,"console"],[149,11,143,9],[149,12,143,10,"error"],[149,17,143,15],[149,20,143,18],[149,32,143,38],[150,6,144,4],[150,10,144,10,"now"],[150,13,144,13],[150,16,144,16,"Date"],[150,20,144,20],[150,21,144,21,"now"],[150,24,144,24],[150,25,144,25],[150,26,144,26],[151,6,144,27],[151,15,144,27,"_len"],[151,19,144,27],[151,22,144,27,"arguments"],[151,31,144,27],[151,32,144,27,"length"],[151,38,144,27],[151,40,143,22,"args"],[151,44,143,26],[151,51,143,26,"Array"],[151,56,143,26],[151,57,143,26,"_len"],[151,61,143,26],[151,64,143,26,"_key"],[151,68,143,26],[151,74,143,26,"_key"],[151,78,143,26],[151,81,143,26,"_len"],[151,85,143,26],[151,87,143,26,"_key"],[151,91,143,26],[152,8,143,22,"args"],[152,12,143,26],[152,13,143,26,"_key"],[152,17,143,26],[152,21,143,26,"arguments"],[152,30,143,26],[152,31,143,26,"_key"],[152,35,143,26],[153,6,143,26],[154,6,145,4],[154,10,145,4,"_extractErrorContext"],[154,30,145,4],[154,33,145,30,"extractErrorContext"],[154,52,145,49],[154,53,145,50,"args"],[154,57,145,54],[154,58,145,55],[155,8,145,12,"key"],[155,11,145,15],[155,14,145,15,"_extractErrorContext"],[155,34,145,15],[155,35,145,12,"key"],[155,38,145,15],[156,8,145,17,"endpoint"],[156,16,145,25],[156,19,145,25,"_extractErrorContext"],[156,39,145,25],[156,40,145,17,"endpoint"],[156,48,145,25],[158,6,147,4],[159,6,148,4],[159,10,148,8,"errorInfo"],[159,19,148,17],[159,22,148,20,"errorTracker"],[159,34,148,32],[159,35,148,33,"get"],[159,38,148,36],[159,39,148,37,"key"],[159,42,148,40],[159,43,148,41],[160,6,149,4],[160,10,149,8],[160,11,149,9,"errorInfo"],[160,20,149,18],[160,22,149,20],[161,8,150,6,"errorInfo"],[161,17,150,15],[161,20,150,18],[162,10,151,8,"count"],[162,15,151,13],[162,17,151,15],[162,18,151,16],[163,10,152,8,"firstSeen"],[163,19,152,17],[163,21,152,19,"now"],[163,24,152,22],[164,10,153,8,"lastSeen"],[164,18,153,16],[164,20,153,18,"now"],[164,23,153,21],[165,10,154,8,"endpoint"],[165,18,154,16],[165,20,154,8,"endpoint"],[165,28,154,16],[166,10,155,8,"suppressed"],[166,20,155,18],[166,22,155,20],[167,8,156,6],[167,9,156,7],[168,8,157,6,"errorTracker"],[168,20,157,18],[168,21,157,19,"set"],[168,24,157,22],[168,25,157,23,"key"],[168,28,157,26],[168,30,157,28,"errorInfo"],[168,39,157,37],[168,40,157,38],[169,6,158,4],[171,6,160,4],[172,6,161,4,"errorInfo"],[172,15,161,13],[172,16,161,14,"lastSeen"],[172,24,161,22],[172,27,161,25,"now"],[172,30,161,28],[174,6,163,4],[175,6,164,4],[175,10,164,8,"isNetworkError"],[175,24,164,22],[175,25,164,23,"args"],[175,29,164,27],[175,30,164,28],[175,32,164,30],[176,8,165,6],[177,8,166,6],[177,12,166,10,"errorInfo"],[177,21,166,19],[177,22,166,20,"count"],[177,27,166,25],[177,30,166,28,"MAX_ERRORS_BEFORE_SUMMARY"],[177,55,166,53],[177,57,166,55],[178,10,166,55],[178,14,166,55,"_args$"],[178,20,166,55],[179,10,167,8,"errorInfo"],[179,19,167,17],[179,20,167,18,"count"],[179,25,167,23],[179,27,167,25],[180,10,168,8],[181,10,169,8],[181,14,169,14,"context"],[181,21,169,21],[181,24,169,24,"endpoint"],[181,32,169,32],[181,35,169,35],[181,40,169,40,"endpoint"],[181,48,169,48],[181,51,169,51],[181,54,169,54],[181,56,169,56],[182,10,170,8,"EventLogger"],[182,21,170,19],[182,22,170,20,"debug"],[182,27,170,25],[182,28,170,26],[182,46,170,44],[182,48,170,46],[182,77,170,75],[182,79,170,77],[182,81,170,77,"_args$"],[182,87,170,77],[182,90,170,77,"args"],[182,94,170,81],[182,95,170,82],[182,96,170,83],[182,97,170,84],[182,118,170,77,"_args$"],[182,124,170,77],[182,125,170,86,"message"],[182,132,170,93],[182,137,170,97,"args"],[182,141,170,101],[182,142,170,102],[182,143,170,103],[182,144,170,104],[182,148,170,108],[182,172,170,132],[182,173,170,133],[183,8,171,6],[183,9,171,7],[183,15,171,13],[184,10,172,8,"errorInfo"],[184,19,172,17],[184,20,172,18,"suppressed"],[184,30,172,28],[184,32,172,30],[186,10,174,8],[187,10,175,8],[187,14,175,12,"errorInfo"],[187,23,175,21],[187,24,175,22,"suppressed"],[187,34,175,32],[187,37,175,35],[187,39,175,37],[187,44,175,42],[187,45,175,43],[187,47,175,45],[188,12,176,10,"EventLogger"],[188,23,176,21],[188,24,176,22,"debug"],[188,29,176,27],[188,30,176,28],[188,48,176,46],[188,50,176,48],[188,153,176,151],[188,154,176,152],[189,10,177,8],[190,8,178,6],[192,8,180,6],[193,8,181,6,"showErrorSummary"],[193,24,181,22],[193,25,181,23],[193,26,181,24],[194,8,182,6],[195,6,183,4],[197,6,185,4],[198,6,186,4,"originalConsoleError"],[198,26,186,24],[198,27,186,25,"apply"],[198,32,186,30],[198,33,186,31,"console"],[198,40,186,38],[198,42,186,40,"args"],[198,46,186,44],[198,47,186,45],[199,4,187,2],[199,5,187,3],[201,4,189,2],[202,4,190,2,"setInterval"],[202,15,190,13],[202,16,190,14,"showErrorSummary"],[202,32,190,30],[202,34,190,32,"SUMMARY_INTERVAL"],[202,50,190,48],[202,51,190,49],[203,2,191,0],[203,3,191,1],[205,2,193,0],[206,0,194,0],[207,0,195,0],[208,2,196,7],[208,6,196,13,"restoreConsoleError"],[208,25,196,32],[208,28,196,32,"exports"],[208,35,196,32],[208,36,196,32,"restoreConsoleError"],[208,55,196,32],[208,58,196,35],[208,67,196,13,"restoreConsoleError"],[208,86,196,32,"restoreConsoleError"],[208,87,196,32],[208,89,196,41],[209,4,197,2,"console"],[209,11,197,9],[209,12,197,10,"error"],[209,17,197,15],[209,20,197,18,"originalConsoleError"],[209,40,197,38],[210,2,198,0],[210,3,198,1],[212,2,200,0],[213,0,201,0],[214,0,202,0],[215,2,203,7],[215,6,203,13,"resetErrorTracking"],[215,24,203,31],[215,27,203,31,"exports"],[215,34,203,31],[215,35,203,31,"resetErrorTracking"],[215,53,203,31],[215,56,203,34],[215,65,203,13,"resetErrorTracking"],[215,83,203,31,"resetErrorTracking"],[215,84,203,31],[215,86,203,40],[216,4,204,2,"errorTracker"],[216,16,204,14],[216,17,204,15,"clear"],[216,22,204,20],[216,23,204,21],[216,24,204,22],[217,4,205,2,"lastSummaryTime"],[217,19,205,17],[217,22,205,20],[217,23,205,21],[218,2,206,0],[218,3,206,1],[220,2,208,0],[221,0,209,0],[222,0,210,0],[223,2,211,7],[223,6,211,13,"getErrorStats"],[223,19,211,26],[223,22,211,26,"exports"],[223,29,211,26],[223,30,211,26,"getErrorStats"],[223,43,211,26],[223,46,211,29],[223,55,211,13,"getErrorStats"],[223,68,211,26,"getErrorStats"],[223,69,211,26],[223,71,211,35],[224,4,212,2],[224,8,212,8,"stats"],[224,13,212,34],[224,16,212,37],[224,17,212,38],[224,18,212,39],[225,4,213,2,"errorTracker"],[225,16,213,14],[225,17,213,15,"forEach"],[225,24,213,22],[225,25,213,23],[225,35,213,24,"info"],[225,39,213,28],[225,41,213,30,"key"],[225,44,213,33],[225,46,213,38],[226,6,214,4,"stats"],[226,11,214,9],[226,12,214,10,"key"],[226,15,214,13],[226,16,214,14],[226,19,214,17],[227,8,215,6,"total"],[227,13,215,11],[227,15,215,13,"info"],[227,19,215,17],[227,20,215,18,"count"],[227,25,215,23],[227,28,215,26,"info"],[227,32,215,30],[227,33,215,31,"suppressed"],[227,43,215,41],[228,8,216,6,"shown"],[228,13,216,11],[228,15,216,13,"info"],[228,19,216,17],[228,20,216,18,"count"],[228,25,216,23],[229,8,217,6,"suppressed"],[229,18,217,16],[229,20,217,18,"info"],[229,24,217,22],[229,25,217,23,"suppressed"],[229,35,217,33],[230,8,218,6,"endpoint"],[230,16,218,14],[230,18,218,16,"info"],[230,22,218,20],[230,23,218,21,"endpoint"],[231,6,219,4],[231,7,219,5],[232,4,220,2],[232,5,220,3],[232,6,220,4],[233,4,221,2],[233,11,221,9,"stats"],[233,16,221,14],[234,2,222,0],[234,3,222,1],[235,0,222,2],[235,3]],"functionMap":{"names":["<global>","extractErrorContext","isNetworkError","NETWORK_ERROR_PATTERNS.some$argument_0","args.map$argument_0","showErrorSummary","Array.from.filter$argument_0","Array.from.filter.filter$argument_0","networkErrors.forEach$argument_0","initializeErrorInterceptor","console.error","restoreConsoleError","resetErrorTracking","getErrorStats","errorTracker.forEach$argument_0"],"mappings":"AAA;4BCkD;CDqC;uBEK;sDCU,wCD;+BEM,kBF;qCCC,wCD;CFC;yBKK;YCS,kFD;YEC,iCF;0BGI;KHI;CLG;0CSK;kBCC;GD4C;CTI;mCWK;CXE;kCYK;CZG;6BaK;uBCE;GDO;CbE"}},"type":"js/module"}]}