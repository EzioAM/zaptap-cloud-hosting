{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"@react-native-community/netinfo","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":90,"index":90}}],"key":"PqZcYTlMIVnzFjdViPzMiGUu7Hg=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":92},"end":{"line":2,"column":56,"index":148}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"./OfflineQueue","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":150},"end":{"line":3,"column":63,"index":213}}],"key":"4Cru2n2CgjzCeMo25dNvktttf8w=","exportNames":["*"]}},{"name":"../analytics/AnalyticsService","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":215},"end":{"line":4,"column":55,"index":270}}],"key":"9lSExDzipJQ6FrXGqQHAvtkxQ6s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.syncManager = exports.SyncManager = void 0;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _classCallCheck2 = _interopRequireDefault(require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _netinfo = _interopRequireDefault(require(_dependencyMap[4], \"@react-native-community/netinfo\"));\n  var _reactNative = require(_dependencyMap[5], \"react-native\");\n  var _OfflineQueue = require(_dependencyMap[6], \"./OfflineQueue\");\n  var _AnalyticsService = require(_dependencyMap[7], \"../analytics/AnalyticsService\");\n  /**\r\n   * Network connection information\r\n   */\n  /**\r\n   * Sync operation progress tracking\r\n   */\n  /**\r\n   * Sync configuration\r\n   */\n  /**\r\n   * Operation processor interface - implement this for each operation type\r\n   */\n  /**\r\n   * Sync event types\r\n   */\n  /**\r\n   * Sync event data\r\n   */\n  /**\r\n   * Event listener callback\r\n   */\n  /**\r\n   * Comprehensive sync manager for handling offline/online synchronization\r\n   */\n  var SyncManager = exports.SyncManager = /*#__PURE__*/function () {\n    function SyncManager() {\n      (0, _classCallCheck2.default)(this, SyncManager);\n      this.networkInfo = null;\n      this.syncInProgress = false;\n      this.appState = 'active';\n      this.syncInterval = null;\n      this.processors = new Map();\n      this.eventListeners = new Map();\n      this.config = {\n        batchSize: 10,\n        syncInterval: 30000,\n        // 30 seconds\n        priorityOrder: ['high', 'normal', 'low'],\n        conflictResolution: 'server_wins',\n        maxConcurrentOperations: 3,\n        enableBackgroundSync: true,\n        syncOnAppForeground: true\n      };\n      this.currentSyncProgress = {\n        total: 0,\n        completed: 0,\n        failed: 0,\n        inProgress: false\n      };\n      this.initializeNetworkMonitoring();\n      this.initializeAppStateMonitoring();\n      this.startPeriodicSync();\n    }\n\n    /**\r\n     * Singleton pattern implementation\r\n     */\n    return (0, _createClass2.default)(SyncManager, [{\n      key: \"initializeNetworkMonitoring\",\n      value:\n      /**\r\n       * Initialize network monitoring\r\n       */\n      function initializeNetworkMonitoring() {\n        // Listen for network state changes\n        _netinfo.default.addEventListener(this.handleNetworkStateChange.bind(this));\n\n        // Get initial network state\n        _netinfo.default.fetch().then(this.handleNetworkStateChange.bind(this));\n      }\n\n      /**\r\n       * Handle network state changes\r\n       */\n    }, {\n      key: \"handleNetworkStateChange\",\n      value: function handleNetworkStateChange(state) {\n        var _this$networkInfo;\n        var previouslyConnected = ((_this$networkInfo = this.networkInfo) == null ? void 0 : _this$networkInfo.isConnected) || false;\n        this.networkInfo = {\n          isConnected: state.isConnected || false,\n          type: state.type,\n          isInternetReachable: state.isInternetReachable,\n          details: state.details\n        };\n        _AnalyticsService.logger.info('SyncManager: Network state changed', {\n          type: state.type,\n          isConnected: state.isConnected,\n          isInternetReachable: state.isInternetReachable\n        });\n\n        // Emit network change event\n        this.emitEvent('network_changed', this.networkInfo);\n\n        // Start sync if we just came online\n        if (!previouslyConnected && this.networkInfo.isConnected && this.networkInfo.isInternetReachable) {\n          _AnalyticsService.logger.info('SyncManager: Connection restored, starting sync');\n          this.startSync().catch(function (error) {\n            _AnalyticsService.logger.error('SyncManager: Failed to start sync after connection restored', {\n              error: error\n            });\n          });\n        }\n      }\n\n      /**\r\n       * Initialize app state monitoring for foreground/background sync\r\n       */\n    }, {\n      key: \"initializeAppStateMonitoring\",\n      value: function initializeAppStateMonitoring() {\n        _reactNative.AppState.addEventListener('change', this.handleAppStateChange.bind(this));\n        this.appState = _reactNative.AppState.currentState;\n      }\n\n      /**\r\n       * Handle app state changes\r\n       */\n    }, {\n      key: \"handleAppStateChange\",\n      value: function handleAppStateChange(nextAppState) {\n        var wasInBackground = this.appState !== 'active';\n        this.appState = nextAppState;\n\n        // Start sync when app comes to foreground\n        if (wasInBackground && nextAppState === 'active' && this.config.syncOnAppForeground) {\n          _AnalyticsService.logger.info('SyncManager: App came to foreground, starting sync');\n          this.startSync().catch(function (error) {\n            _AnalyticsService.logger.error('SyncManager: Failed to start sync on app foreground', {\n              error: error\n            });\n          });\n        }\n      }\n\n      /**\r\n       * Start periodic sync based on configuration\r\n       */\n    }, {\n      key: \"startPeriodicSync\",\n      value: function startPeriodicSync() {\n        var _this = this;\n        if (this.syncInterval) {\n          clearInterval(this.syncInterval);\n        }\n        if (this.config.syncInterval > 0) {\n          this.syncInterval = setInterval(function () {\n            if (_this.canSync() && !_this.syncInProgress) {\n              _this.startSync().catch(function (error) {\n                _AnalyticsService.logger.error('SyncManager: Periodic sync failed', {\n                  error: error\n                });\n              });\n            }\n          }, this.config.syncInterval);\n        }\n      }\n\n      /**\r\n       * Check if sync can be performed\r\n       */\n    }, {\n      key: \"canSync\",\n      value: function canSync() {\n        if (!this.networkInfo) {\n          return false;\n        }\n\n        // Check if we have internet connectivity\n        if (!this.networkInfo.isConnected || this.networkInfo.isInternetReachable === false) {\n          return false;\n        }\n\n        // Check if background sync is enabled when app is in background\n        if (this.appState !== 'active' && !this.config.enableBackgroundSync) {\n          return false;\n        }\n        return true;\n      }\n\n      /**\r\n       * Register operation processor\r\n       */\n    }, {\n      key: \"registerProcessor\",\n      value: function registerProcessor(operationType, processor) {\n        this.processors.set(operationType, processor);\n        _AnalyticsService.logger.info('SyncManager: Processor registered', {\n          operationType: operationType\n        });\n      }\n\n      /**\r\n       * Unregister operation processor\r\n       */\n    }, {\n      key: \"unregisterProcessor\",\n      value: function unregisterProcessor(operationType) {\n        this.processors.delete(operationType);\n        _AnalyticsService.logger.info('SyncManager: Processor unregistered', {\n          operationType: operationType\n        });\n      }\n\n      /**\r\n       * Start synchronization process\r\n       */\n    }, {\n      key: \"startSync\",\n      value: (function () {\n        var _startSync = (0, _asyncToGenerator2.default)(function* () {\n          if (this.syncInProgress) {\n            _AnalyticsService.logger.info('SyncManager: Sync already in progress, skipping');\n            return;\n          }\n          if (!this.canSync()) {\n            _AnalyticsService.logger.info('SyncManager: Cannot sync - network not available or app in background');\n            return;\n          }\n          this.syncInProgress = true;\n          var startTime = Date.now();\n          try {\n            _AnalyticsService.logger.info('SyncManager: Starting synchronization');\n            this.emitEvent('sync_started');\n            yield this.performSync();\n            var duration = Date.now() - startTime;\n            _AnalyticsService.logger.info('SyncManager: Synchronization completed', {\n              duration: duration,\n              completed: this.currentSyncProgress.completed,\n              failed: this.currentSyncProgress.failed\n            });\n            this.emitEvent('sync_completed', {\n              duration: duration,\n              completed: this.currentSyncProgress.completed,\n              failed: this.currentSyncProgress.failed\n            });\n          } catch (error) {\n            var _duration = Date.now() - startTime;\n            _AnalyticsService.logger.error('SyncManager: Synchronization failed', {\n              error: error,\n              duration: _duration\n            });\n            this.emitEvent('sync_failed', {\n              error: error.message,\n              duration: _duration\n            });\n          } finally {\n            this.syncInProgress = false;\n            this.resetSyncProgress();\n          }\n        });\n        function startSync() {\n          return _startSync.apply(this, arguments);\n        }\n        return startSync;\n      }()\n      /**\r\n       * Perform the actual synchronization\r\n       */\n      )\n    }, {\n      key: \"performSync\",\n      value: (function () {\n        var _performSync = (0, _asyncToGenerator2.default)(function* () {\n          var _this2 = this;\n          var readyOperations = _OfflineQueue.offlineQueue.getReadyOperations();\n          if (readyOperations.length === 0) {\n            _AnalyticsService.logger.info('SyncManager: No operations ready for sync');\n            return;\n          }\n\n          // Initialize sync progress\n          this.currentSyncProgress = {\n            total: readyOperations.length,\n            completed: 0,\n            failed: 0,\n            inProgress: true\n          };\n          _AnalyticsService.logger.info('SyncManager: Processing operations', {\n            total: readyOperations.length\n          });\n\n          // Process operations in batches by priority\n          var _loop = function* _loop(priority) {\n            var priorityOperations = readyOperations.filter(function (op) {\n              return op.priority === priority;\n            });\n            if (priorityOperations.length > 0) {\n              yield _this2.processBatch(priorityOperations);\n            }\n          };\n          for (var priority of this.config.priorityOrder) {\n            yield* _loop(priority);\n          }\n        });\n        function performSync() {\n          return _performSync.apply(this, arguments);\n        }\n        return performSync;\n      }()\n      /**\r\n       * Process a batch of operations\r\n       */\n      )\n    }, {\n      key: \"processBatch\",\n      value: (function () {\n        var _processBatch = (0, _asyncToGenerator2.default)(function* (operations) {\n          var batches = this.chunkArray(operations, this.config.batchSize);\n          for (var batch of batches) {\n            if (!this.canSync()) {\n              _AnalyticsService.logger.info('SyncManager: Network lost during batch processing, stopping');\n              break;\n            }\n            yield this.processConcurrentOperations(batch);\n          }\n        });\n        function processBatch(_x) {\n          return _processBatch.apply(this, arguments);\n        }\n        return processBatch;\n      }()\n      /**\r\n       * Process operations concurrently with limit\r\n       */\n      )\n    }, {\n      key: \"processConcurrentOperations\",\n      value: (function () {\n        var _processConcurrentOperations = (0, _asyncToGenerator2.default)(function* (operations) {\n          var _this3 = this;\n          var chunks = this.chunkArray(operations, this.config.maxConcurrentOperations);\n          for (var chunk of chunks) {\n            var promises = chunk.map(function (operation) {\n              return _this3.processOperation(operation);\n            });\n            yield Promise.allSettled(promises);\n          }\n        });\n        function processConcurrentOperations(_x2) {\n          return _processConcurrentOperations.apply(this, arguments);\n        }\n        return processConcurrentOperations;\n      }()\n      /**\r\n       * Process a single operation\r\n       */\n      )\n    }, {\n      key: \"processOperation\",\n      value: (function () {\n        var _processOperation = (0, _asyncToGenerator2.default)(function* (operation) {\n          var processor = this.processors.get(operation.type);\n          if (!processor) {\n            var error = `No processor found for operation type: ${operation.type}`;\n            _AnalyticsService.logger.error('SyncManager: Operation processing failed', {\n              operationId: operation.id,\n              type: operation.type,\n              error: error\n            });\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'failed', error);\n            yield _OfflineQueue.offlineQueue.incrementRetryCount(operation.id);\n            this.currentSyncProgress.failed++;\n            this.emitEvent('operation_failed', {\n              operationId: operation.id,\n              error: error\n            });\n            return;\n          }\n          if (!processor.canProcess(operation)) {\n            _AnalyticsService.logger.info('SyncManager: Operation cannot be processed at this time', {\n              operationId: operation.id,\n              type: operation.type\n            });\n            return;\n          }\n          try {\n            // Update operation status to processing\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'processing');\n\n            // Update sync progress\n            this.currentSyncProgress.currentOperation = `${operation.type}:${operation.id}`;\n            this.emitEvent('sync_progress', Object.assign({}, this.currentSyncProgress));\n            _AnalyticsService.logger.info('SyncManager: Processing operation', {\n              operationId: operation.id,\n              type: operation.type,\n              attempt: operation.retryCount + 1\n            });\n\n            // Process the operation\n            yield processor.process(operation);\n\n            // Mark as completed\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'completed');\n            this.currentSyncProgress.completed++;\n            this.emitEvent('operation_completed', {\n              operationId: operation.id,\n              type: operation.type\n            });\n            _AnalyticsService.logger.info('SyncManager: Operation processed successfully', {\n              operationId: operation.id,\n              type: operation.type\n            });\n          } catch (error) {\n            _AnalyticsService.logger.error('SyncManager: Operation processing failed', {\n              operationId: operation.id,\n              type: operation.type,\n              error: error.message,\n              attempt: operation.retryCount + 1\n            });\n            yield _OfflineQueue.offlineQueue.updateOperationStatus(operation.id, 'failed', error.message);\n\n            // Increment retry count if not exceeded\n            if (operation.retryCount < operation.maxRetries) {\n              yield _OfflineQueue.offlineQueue.incrementRetryCount(operation.id);\n            }\n            this.currentSyncProgress.failed++;\n            this.emitEvent('operation_failed', {\n              operationId: operation.id,\n              type: operation.type,\n              error: error.message\n            });\n          }\n        });\n        function processOperation(_x3) {\n          return _processOperation.apply(this, arguments);\n        }\n        return processOperation;\n      }()\n      /**\r\n       * Reset sync progress\r\n       */\n      )\n    }, {\n      key: \"resetSyncProgress\",\n      value: function resetSyncProgress() {\n        this.currentSyncProgress = {\n          total: 0,\n          completed: 0,\n          failed: 0,\n          inProgress: false\n        };\n      }\n\n      /**\r\n       * Get current network information\r\n       */\n    }, {\n      key: \"getNetworkInfo\",\n      value: function getNetworkInfo() {\n        return this.networkInfo;\n      }\n\n      /**\r\n       * Get current sync progress\r\n       */\n    }, {\n      key: \"getSyncProgress\",\n      value: function getSyncProgress() {\n        return Object.assign({}, this.currentSyncProgress);\n      }\n\n      /**\r\n       * Check if currently syncing\r\n       */\n    }, {\n      key: \"isSyncing\",\n      value: function isSyncing() {\n        return this.syncInProgress;\n      }\n\n      /**\r\n       * Force sync (even if conditions not met)\r\n       */\n    }, {\n      key: \"forceSync\",\n      value: (function () {\n        var _forceSync = (0, _asyncToGenerator2.default)(function* () {\n          _AnalyticsService.logger.info('SyncManager: Force sync requested');\n          this.syncInProgress = false; // Reset flag to allow force sync\n          yield this.startSync();\n        });\n        function forceSync() {\n          return _forceSync.apply(this, arguments);\n        }\n        return forceSync;\n      }()\n      /**\r\n       * Stop sync process\r\n       */\n      )\n    }, {\n      key: \"stopSync\",\n      value: function stopSync() {\n        if (this.syncInterval) {\n          clearInterval(this.syncInterval);\n          this.syncInterval = null;\n        }\n        _AnalyticsService.logger.info('SyncManager: Sync stopped');\n      }\n\n      /**\r\n       * Update sync configuration\r\n       */\n    }, {\n      key: \"updateConfig\",\n      value: function updateConfig(newConfig) {\n        Object.assign(this.config, newConfig);\n\n        // Restart periodic sync if interval changed\n        if (newConfig.syncInterval !== undefined) {\n          this.startPeriodicSync();\n        }\n        _AnalyticsService.logger.info('SyncManager: Configuration updated', newConfig);\n      }\n\n      /**\r\n       * Add event listener\r\n       */\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(eventType, listener) {\n        if (!this.eventListeners.has(eventType)) {\n          this.eventListeners.set(eventType, new Set());\n        }\n        this.eventListeners.get(eventType).add(listener);\n      }\n\n      /**\r\n       * Remove event listener\r\n       */\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(eventType, listener) {\n        var listeners = this.eventListeners.get(eventType);\n        if (listeners) {\n          listeners.delete(listener);\n        }\n      }\n\n      /**\r\n       * Emit event to listeners\r\n       */\n    }, {\n      key: \"emitEvent\",\n      value: function emitEvent(type, data) {\n        var event = {\n          type: type,\n          data: data,\n          timestamp: Date.now()\n        };\n        var listeners = this.eventListeners.get(type);\n        if (listeners) {\n          listeners.forEach(function (listener) {\n            try {\n              listener(event);\n            } catch (error) {\n              _AnalyticsService.logger.error('SyncManager: Event listener error', {\n                eventType: type,\n                error: error\n              });\n            }\n          });\n        }\n      }\n\n      /**\r\n       * Utility function to chunk array into smaller arrays\r\n       */\n    }, {\n      key: \"chunkArray\",\n      value: function chunkArray(array, chunkSize) {\n        var chunks = [];\n        for (var i = 0; i < array.length; i += chunkSize) {\n          chunks.push(array.slice(i, i + chunkSize));\n        }\n        return chunks;\n      }\n\n      /**\r\n       * Get sync statistics\r\n       */\n    }, {\n      key: \"getSyncStats\",\n      value: function getSyncStats() {\n        return {\n          queueStats: _OfflineQueue.offlineQueue.getQueueStats(),\n          networkInfo: this.networkInfo,\n          syncProgress: this.currentSyncProgress,\n          isSyncing: this.syncInProgress\n        };\n      }\n\n      /**\r\n       * Cleanup on app termination\r\n       */\n    }, {\n      key: \"cleanup\",\n      value: function cleanup() {\n        this.stopSync();\n        this.eventListeners.clear();\n        _AnalyticsService.logger.info('SyncManager: Cleanup completed');\n      }\n    }], [{\n      key: \"getInstance\",\n      value: function getInstance() {\n        if (!SyncManager.instance) {\n          SyncManager.instance = new SyncManager();\n        }\n        return SyncManager.instance;\n      }\n    }]);\n  }(); // Export singleton instance\n  var syncManager = exports.syncManager = SyncManager.getInstance();\n});","lineCount":628,"map":[[10,2,1,0],[10,6,1,0,"_netinfo"],[10,14,1,0],[10,17,1,0,"_interopRequireDefault"],[10,39,1,0],[10,40,1,0,"require"],[10,47,1,0],[10,48,1,0,"_dependencyMap"],[10,62,1,0],[11,2,2,0],[11,6,2,0,"_reactNative"],[11,18,2,0],[11,21,2,0,"require"],[11,28,2,0],[11,29,2,0,"_dependencyMap"],[11,43,2,0],[12,2,3,0],[12,6,3,0,"_OfflineQueue"],[12,19,3,0],[12,22,3,0,"require"],[12,29,3,0],[12,30,3,0,"_dependencyMap"],[12,44,3,0],[13,2,4,0],[13,6,4,0,"_AnalyticsService"],[13,23,4,0],[13,26,4,0,"require"],[13,33,4,0],[13,34,4,0,"_dependencyMap"],[13,48,4,0],[14,2,6,0],[15,0,7,0],[16,0,8,0],[17,2,16,0],[18,0,17,0],[19,0,18,0],[20,2,28,0],[21,0,29,0],[22,0,30,0],[23,2,41,0],[24,0,42,0],[25,0,43,0],[26,2,50,0],[27,0,51,0],[28,0,52,0],[29,2,62,0],[30,0,63,0],[31,0,64,0],[32,2,71,0],[33,0,72,0],[34,0,73,0],[35,2,76,0],[36,0,77,0],[37,0,78,0],[38,2,76,0],[38,6,79,13,"SyncManager"],[38,17,79,24],[38,20,79,24,"exports"],[38,27,79,24],[38,28,79,24,"SyncManager"],[38,39,79,24],[39,4,105,2],[39,13,105,2,"SyncManager"],[39,25,105,2],[39,27,105,24],[40,6,105,24],[40,10,105,24,"_classCallCheck2"],[40,26,105,24],[40,27,105,24,"default"],[40,34,105,24],[40,42,105,24,"SyncManager"],[40,53,105,24],[41,6,105,24],[41,11,81,10,"networkInfo"],[41,22,81,21],[41,25,81,44],[41,29,81,48],[42,6,81,48],[42,11,82,10,"syncInProgress"],[42,25,82,24],[42,28,82,27],[42,33,82,32],[43,6,82,32],[43,11,83,10,"appState"],[43,19,83,18],[43,22,83,37],[43,30,83,45],[44,6,83,45],[44,11,84,10,"syncInterval"],[44,23,84,22],[44,26,84,48],[44,30,84,52],[45,6,84,52],[45,11,85,10,"processors"],[45,21,85,20],[45,24,85,23],[45,28,85,27,"Map"],[45,31,85,30],[45,32,85,59],[45,33,85,60],[46,6,85,60],[46,11,86,10,"eventListeners"],[46,25,86,24],[46,28,86,27],[46,32,86,31,"Map"],[46,35,86,34],[46,36,86,67],[46,37,86,68],[47,6,86,68],[47,11,88,19,"config"],[47,17,88,25],[47,20,88,40],[48,8,89,4,"batchSize"],[48,17,89,13],[48,19,89,15],[48,21,89,17],[49,8,90,4,"syncInterval"],[49,20,90,16],[49,22,90,18],[49,27,90,23],[50,8,90,25],[51,8,91,4,"priorityOrder"],[51,21,91,17],[51,23,91,19],[51,24,91,20],[51,30,91,26],[51,32,91,28],[51,40,91,36],[51,42,91,38],[51,47,91,43],[51,48,91,44],[52,8,92,4,"conflictResolution"],[52,26,92,22],[52,28,92,24],[52,41,92,37],[53,8,93,4,"maxConcurrentOperations"],[53,31,93,27],[53,33,93,29],[53,34,93,30],[54,8,94,4,"enableBackgroundSync"],[54,28,94,24],[54,30,94,26],[54,34,94,30],[55,8,95,4,"syncOnAppForeground"],[55,27,95,23],[55,29,95,25],[56,6,96,2],[56,7,96,3],[57,6,96,3],[57,11,98,10,"currentSyncProgress"],[57,30,98,29],[57,33,98,46],[58,8,99,4,"total"],[58,13,99,9],[58,15,99,11],[58,16,99,12],[59,8,100,4,"completed"],[59,17,100,13],[59,19,100,15],[59,20,100,16],[60,8,101,4,"failed"],[60,14,101,10],[60,16,101,12],[60,17,101,13],[61,8,102,4,"inProgress"],[61,18,102,14],[61,20,102,16],[62,6,103,2],[62,7,103,3],[63,6,106,4],[63,10,106,8],[63,11,106,9,"initializeNetworkMonitoring"],[63,38,106,36],[63,39,106,37],[63,40,106,38],[64,6,107,4],[64,10,107,8],[64,11,107,9,"initializeAppStateMonitoring"],[64,39,107,37],[64,40,107,38],[64,41,107,39],[65,6,108,4],[65,10,108,8],[65,11,108,9,"startPeriodicSync"],[65,28,108,26],[65,29,108,27],[65,30,108,28],[66,4,109,2],[68,4,111,2],[69,0,112,0],[70,0,113,0],[71,4,111,2],[71,15,111,2,"_createClass2"],[71,28,111,2],[71,29,111,2,"default"],[71,36,111,2],[71,38,111,2,"SyncManager"],[71,49,111,2],[72,6,111,2,"key"],[72,9,111,2],[73,6,111,2,"value"],[73,11,111,2],[74,6,121,2],[75,0,122,0],[76,0,123,0],[77,6,124,2],[77,15,124,10,"initializeNetworkMonitoring"],[77,42,124,37,"initializeNetworkMonitoring"],[77,43,124,37],[77,45,124,46],[78,8,125,4],[79,8,126,4,"NetInfo"],[79,24,126,11],[79,25,126,12,"addEventListener"],[79,41,126,28],[79,42,126,29],[79,46,126,33],[79,47,126,34,"handleNetworkStateChange"],[79,71,126,58],[79,72,126,59,"bind"],[79,76,126,63],[79,77,126,64],[79,81,126,68],[79,82,126,69],[79,83,126,70],[81,8,128,4],[82,8,129,4,"NetInfo"],[82,24,129,11],[82,25,129,12,"fetch"],[82,30,129,17],[82,31,129,18],[82,32,129,19],[82,33,129,20,"then"],[82,37,129,24],[82,38,129,25],[82,42,129,29],[82,43,129,30,"handleNetworkStateChange"],[82,67,129,54],[82,68,129,55,"bind"],[82,72,129,59],[82,73,129,60],[82,77,129,64],[82,78,129,65],[82,79,129,66],[83,6,130,2],[85,6,132,2],[86,0,133,0],[87,0,134,0],[88,4,132,2],[89,6,132,2,"key"],[89,9,132,2],[90,6,132,2,"value"],[90,11,132,2],[90,13,135,2],[90,22,135,10,"handleNetworkStateChange"],[90,46,135,34,"handleNetworkStateChange"],[90,47,135,35,"state"],[90,52,135,54],[90,54,135,62],[91,8,135,62],[91,12,135,62,"_this$networkInfo"],[91,29,135,62],[92,8,136,4],[92,12,136,10,"previouslyConnected"],[92,31,136,29],[92,34,136,32],[92,36,136,32,"_this$networkInfo"],[92,53,136,32],[92,60,136,36],[92,61,136,37,"networkInfo"],[92,72,136,48],[92,93,136,32,"_this$networkInfo"],[92,110,136,32],[92,111,136,50,"isConnected"],[92,122,136,61],[92,127,136,65],[92,132,136,70],[93,8,138,4],[93,12,138,8],[93,13,138,9,"networkInfo"],[93,24,138,20],[93,27,138,23],[94,10,139,6,"isConnected"],[94,21,139,17],[94,23,139,19,"state"],[94,28,139,24],[94,29,139,25,"isConnected"],[94,40,139,36],[94,44,139,40],[94,49,139,45],[95,10,140,6,"type"],[95,14,140,10],[95,16,140,12,"state"],[95,21,140,17],[95,22,140,18,"type"],[95,26,140,22],[96,10,141,6,"isInternetReachable"],[96,29,141,25],[96,31,141,27,"state"],[96,36,141,32],[96,37,141,33,"isInternetReachable"],[96,56,141,52],[97,10,142,6,"details"],[97,17,142,13],[97,19,142,15,"state"],[97,24,142,20],[97,25,142,21,"details"],[98,8,143,4],[98,9,143,5],[99,8,145,4,"logger"],[99,32,145,10],[99,33,145,11,"info"],[99,37,145,15],[99,38,145,16],[99,74,145,52],[99,76,145,54],[100,10,146,6,"type"],[100,14,146,10],[100,16,146,12,"state"],[100,21,146,17],[100,22,146,18,"type"],[100,26,146,22],[101,10,147,6,"isConnected"],[101,21,147,17],[101,23,147,19,"state"],[101,28,147,24],[101,29,147,25,"isConnected"],[101,40,147,36],[102,10,148,6,"isInternetReachable"],[102,29,148,25],[102,31,148,27,"state"],[102,36,148,32],[102,37,148,33,"isInternetReachable"],[103,8,149,4],[103,9,149,5],[103,10,149,6],[105,8,151,4],[106,8,152,4],[106,12,152,8],[106,13,152,9,"emitEvent"],[106,22,152,18],[106,23,152,19],[106,40,152,36],[106,42,152,38],[106,46,152,42],[106,47,152,43,"networkInfo"],[106,58,152,54],[106,59,152,55],[108,8,154,4],[109,8,155,4],[109,12,155,8],[109,13,155,9,"previouslyConnected"],[109,32,155,28],[109,36,155,32],[109,40,155,36],[109,41,155,37,"networkInfo"],[109,52,155,48],[109,53,155,49,"isConnected"],[109,64,155,60],[109,68,155,64],[109,72,155,68],[109,73,155,69,"networkInfo"],[109,84,155,80],[109,85,155,81,"isInternetReachable"],[109,104,155,100],[109,106,155,102],[110,10,156,6,"logger"],[110,34,156,12],[110,35,156,13,"info"],[110,39,156,17],[110,40,156,18],[110,89,156,67],[110,90,156,68],[111,10,157,6],[111,14,157,10],[111,15,157,11,"startSync"],[111,24,157,20],[111,25,157,21],[111,26,157,22],[111,27,157,23,"catch"],[111,32,157,28],[111,33,157,29],[111,43,157,29,"error"],[111,48,157,34],[111,50,157,38],[112,12,158,8,"logger"],[112,36,158,14],[112,37,158,15,"error"],[112,42,158,20],[112,43,158,21],[112,104,158,82],[112,106,158,84],[113,14,158,86,"error"],[113,19,158,91],[113,21,158,86,"error"],[114,12,158,92],[114,13,158,93],[114,14,158,94],[115,10,159,6],[115,11,159,7],[115,12,159,8],[116,8,160,4],[117,6,161,2],[119,6,163,2],[120,0,164,0],[121,0,165,0],[122,4,163,2],[123,6,163,2,"key"],[123,9,163,2],[124,6,163,2,"value"],[124,11,163,2],[124,13,166,2],[124,22,166,10,"initializeAppStateMonitoring"],[124,50,166,38,"initializeAppStateMonitoring"],[124,51,166,38],[124,53,166,47],[125,8,167,4,"AppState"],[125,29,167,12],[125,30,167,13,"addEventListener"],[125,46,167,29],[125,47,167,30],[125,55,167,38],[125,57,167,40],[125,61,167,44],[125,62,167,45,"handleAppStateChange"],[125,82,167,65],[125,83,167,66,"bind"],[125,87,167,70],[125,88,167,71],[125,92,167,75],[125,93,167,76],[125,94,167,77],[126,8,168,4],[126,12,168,8],[126,13,168,9,"appState"],[126,21,168,17],[126,24,168,20,"AppState"],[126,45,168,28],[126,46,168,29,"currentState"],[126,58,168,41],[127,6,169,2],[129,6,171,2],[130,0,172,0],[131,0,173,0],[132,4,171,2],[133,6,171,2,"key"],[133,9,171,2],[134,6,171,2,"value"],[134,11,171,2],[134,13,174,2],[134,22,174,10,"handleAppStateChange"],[134,42,174,30,"handleAppStateChange"],[134,43,174,31,"nextAppState"],[134,55,174,59],[134,57,174,67],[135,8,175,4],[135,12,175,10,"wasInBackground"],[135,27,175,25],[135,30,175,28],[135,34,175,32],[135,35,175,33,"appState"],[135,43,175,41],[135,48,175,46],[135,56,175,54],[136,8,176,4],[136,12,176,8],[136,13,176,9,"appState"],[136,21,176,17],[136,24,176,20,"nextAppState"],[136,36,176,32],[138,8,178,4],[139,8,179,4],[139,12,179,8,"wasInBackground"],[139,27,179,23],[139,31,179,27,"nextAppState"],[139,43,179,39],[139,48,179,44],[139,56,179,52],[139,60,179,56],[139,64,179,60],[139,65,179,61,"config"],[139,71,179,67],[139,72,179,68,"syncOnAppForeground"],[139,91,179,87],[139,93,179,89],[140,10,180,6,"logger"],[140,34,180,12],[140,35,180,13,"info"],[140,39,180,17],[140,40,180,18],[140,92,180,70],[140,93,180,71],[141,10,181,6],[141,14,181,10],[141,15,181,11,"startSync"],[141,24,181,20],[141,25,181,21],[141,26,181,22],[141,27,181,23,"catch"],[141,32,181,28],[141,33,181,29],[141,43,181,29,"error"],[141,48,181,34],[141,50,181,38],[142,12,182,8,"logger"],[142,36,182,14],[142,37,182,15,"error"],[142,42,182,20],[142,43,182,21],[142,96,182,74],[142,98,182,76],[143,14,182,78,"error"],[143,19,182,83],[143,21,182,78,"error"],[144,12,182,84],[144,13,182,85],[144,14,182,86],[145,10,183,6],[145,11,183,7],[145,12,183,8],[146,8,184,4],[147,6,185,2],[149,6,187,2],[150,0,188,0],[151,0,189,0],[152,4,187,2],[153,6,187,2,"key"],[153,9,187,2],[154,6,187,2,"value"],[154,11,187,2],[154,13,190,2],[154,22,190,10,"startPeriodicSync"],[154,39,190,27,"startPeriodicSync"],[154,40,190,27],[154,42,190,36],[155,8,190,36],[155,12,190,36,"_this"],[155,17,190,36],[156,8,191,4],[156,12,191,8],[156,16,191,12],[156,17,191,13,"syncInterval"],[156,29,191,25],[156,31,191,27],[157,10,192,6,"clearInterval"],[157,23,192,19],[157,24,192,20],[157,28,192,24],[157,29,192,25,"syncInterval"],[157,41,192,37],[157,42,192,38],[158,8,193,4],[159,8,195,4],[159,12,195,8],[159,16,195,12],[159,17,195,13,"config"],[159,23,195,19],[159,24,195,20,"syncInterval"],[159,36,195,32],[159,39,195,35],[159,40,195,36],[159,42,195,38],[160,10,196,6],[160,14,196,10],[160,15,196,11,"syncInterval"],[160,27,196,23],[160,30,196,26,"setInterval"],[160,41,196,37],[160,42,196,38],[160,54,196,44],[161,12,197,8],[161,16,197,12,"_this"],[161,21,197,16],[161,22,197,17,"canSync"],[161,29,197,24],[161,30,197,25],[161,31,197,26],[161,35,197,30],[161,36,197,31,"_this"],[161,41,197,35],[161,42,197,36,"syncInProgress"],[161,56,197,50],[161,58,197,52],[162,14,198,10,"_this"],[162,19,198,14],[162,20,198,15,"startSync"],[162,29,198,24],[162,30,198,25],[162,31,198,26],[162,32,198,27,"catch"],[162,37,198,32],[162,38,198,33],[162,48,198,33,"error"],[162,53,198,38],[162,55,198,42],[163,16,199,12,"logger"],[163,40,199,18],[163,41,199,19,"error"],[163,46,199,24],[163,47,199,25],[163,82,199,60],[163,84,199,62],[164,18,199,64,"error"],[164,23,199,69],[164,25,199,64,"error"],[165,16,199,70],[165,17,199,71],[165,18,199,72],[166,14,200,10],[166,15,200,11],[166,16,200,12],[167,12,201,8],[168,10,202,6],[168,11,202,7],[168,13,202,9],[168,17,202,13],[168,18,202,14,"config"],[168,24,202,20],[168,25,202,21,"syncInterval"],[168,37,202,33],[168,38,202,34],[169,8,203,4],[170,6,204,2],[172,6,206,2],[173,0,207,0],[174,0,208,0],[175,4,206,2],[176,6,206,2,"key"],[176,9,206,2],[177,6,206,2,"value"],[177,11,206,2],[177,13,209,2],[177,22,209,10,"canSync"],[177,29,209,17,"canSync"],[177,30,209,17],[177,32,209,29],[178,8,210,4],[178,12,210,8],[178,13,210,9],[178,17,210,13],[178,18,210,14,"networkInfo"],[178,29,210,25],[178,31,210,27],[179,10,211,6],[179,17,211,13],[179,22,211,18],[180,8,212,4],[182,8,214,4],[183,8,215,4],[183,12,215,8],[183,13,215,9],[183,17,215,13],[183,18,215,14,"networkInfo"],[183,29,215,25],[183,30,215,26,"isConnected"],[183,41,215,37],[183,45,215,41],[183,49,215,45],[183,50,215,46,"networkInfo"],[183,61,215,57],[183,62,215,58,"isInternetReachable"],[183,81,215,77],[183,86,215,82],[183,91,215,87],[183,93,215,89],[184,10,216,6],[184,17,216,13],[184,22,216,18],[185,8,217,4],[187,8,219,4],[188,8,220,4],[188,12,220,8],[188,16,220,12],[188,17,220,13,"appState"],[188,25,220,21],[188,30,220,26],[188,38,220,34],[188,42,220,38],[188,43,220,39],[188,47,220,43],[188,48,220,44,"config"],[188,54,220,50],[188,55,220,51,"enableBackgroundSync"],[188,75,220,71],[188,77,220,73],[189,10,221,6],[189,17,221,13],[189,22,221,18],[190,8,222,4],[191,8,224,4],[191,15,224,11],[191,19,224,15],[192,6,225,2],[194,6,227,2],[195,0,228,0],[196,0,229,0],[197,4,227,2],[198,6,227,2,"key"],[198,9,227,2],[199,6,227,2,"value"],[199,11,227,2],[199,13,230,2],[199,22,230,9,"registerProcessor"],[199,39,230,26,"registerProcessor"],[199,40,230,27,"operationType"],[199,53,230,48],[199,55,230,50,"processor"],[199,64,230,79],[199,66,230,87],[200,8,231,4],[200,12,231,8],[200,13,231,9,"processors"],[200,23,231,19],[200,24,231,20,"set"],[200,27,231,23],[200,28,231,24,"operationType"],[200,41,231,37],[200,43,231,39,"processor"],[200,52,231,48],[200,53,231,49],[201,8,232,4,"logger"],[201,32,232,10],[201,33,232,11,"info"],[201,37,232,15],[201,38,232,16],[201,73,232,51],[201,75,232,53],[202,10,232,55,"operationType"],[202,23,232,68],[202,25,232,55,"operationType"],[203,8,232,69],[203,9,232,70],[203,10,232,71],[204,6,233,2],[206,6,235,2],[207,0,236,0],[208,0,237,0],[209,4,235,2],[210,6,235,2,"key"],[210,9,235,2],[211,6,235,2,"value"],[211,11,235,2],[211,13,238,2],[211,22,238,9,"unregisterProcessor"],[211,41,238,28,"unregisterProcessor"],[211,42,238,29,"operationType"],[211,55,238,50],[211,57,238,58],[212,8,239,4],[212,12,239,8],[212,13,239,9,"processors"],[212,23,239,19],[212,24,239,20,"delete"],[212,30,239,26],[212,31,239,27,"operationType"],[212,44,239,40],[212,45,239,41],[213,8,240,4,"logger"],[213,32,240,10],[213,33,240,11,"info"],[213,37,240,15],[213,38,240,16],[213,75,240,53],[213,77,240,55],[214,10,240,57,"operationType"],[214,23,240,70],[214,25,240,57,"operationType"],[215,8,240,71],[215,9,240,72],[215,10,240,73],[216,6,241,2],[218,6,243,2],[219,0,244,0],[220,0,245,0],[221,4,243,2],[222,6,243,2,"key"],[222,9,243,2],[223,6,243,2,"value"],[223,11,243,2],[224,8,243,2],[224,12,243,2,"_startSync"],[224,22,243,2],[224,29,243,2,"_asyncToGenerator2"],[224,47,243,2],[224,48,243,2,"default"],[224,55,243,2],[224,57,246,2],[224,70,246,42],[225,10,247,4],[225,14,247,8],[225,18,247,12],[225,19,247,13,"syncInProgress"],[225,33,247,27],[225,35,247,29],[226,12,248,6,"logger"],[226,36,248,12],[226,37,248,13,"info"],[226,41,248,17],[226,42,248,18],[226,91,248,67],[226,92,248,68],[227,12,249,6],[228,10,250,4],[229,10,252,4],[229,14,252,8],[229,15,252,9],[229,19,252,13],[229,20,252,14,"canSync"],[229,27,252,21],[229,28,252,22],[229,29,252,23],[229,31,252,25],[230,12,253,6,"logger"],[230,36,253,12],[230,37,253,13,"info"],[230,41,253,17],[230,42,253,18],[230,113,253,89],[230,114,253,90],[231,12,254,6],[232,10,255,4],[233,10,257,4],[233,14,257,8],[233,15,257,9,"syncInProgress"],[233,29,257,23],[233,32,257,26],[233,36,257,30],[234,10,258,4],[234,14,258,10,"startTime"],[234,23,258,19],[234,26,258,22,"Date"],[234,30,258,26],[234,31,258,27,"now"],[234,34,258,30],[234,35,258,31],[234,36,258,32],[235,10,260,4],[235,14,260,8],[236,12,261,6,"logger"],[236,36,261,12],[236,37,261,13,"info"],[236,41,261,17],[236,42,261,18],[236,81,261,57],[236,82,261,58],[237,12,262,6],[237,16,262,10],[237,17,262,11,"emitEvent"],[237,26,262,20],[237,27,262,21],[237,41,262,35],[237,42,262,36],[238,12,264,6],[238,18,264,12],[238,22,264,16],[238,23,264,17,"performSync"],[238,34,264,28],[238,35,264,29],[238,36,264,30],[239,12,266,6],[239,16,266,12,"duration"],[239,24,266,20],[239,27,266,23,"Date"],[239,31,266,27],[239,32,266,28,"now"],[239,35,266,31],[239,36,266,32],[239,37,266,33],[239,40,266,36,"startTime"],[239,49,266,45],[240,12,267,6,"logger"],[240,36,267,12],[240,37,267,13,"info"],[240,41,267,17],[240,42,267,18],[240,82,267,58],[240,84,267,60],[241,14,268,8,"duration"],[241,22,268,16],[241,24,268,8,"duration"],[241,32,268,16],[242,14,269,8,"completed"],[242,23,269,17],[242,25,269,19],[242,29,269,23],[242,30,269,24,"currentSyncProgress"],[242,49,269,43],[242,50,269,44,"completed"],[242,59,269,53],[243,14,270,8,"failed"],[243,20,270,14],[243,22,270,16],[243,26,270,20],[243,27,270,21,"currentSyncProgress"],[243,46,270,40],[243,47,270,41,"failed"],[244,12,271,6],[244,13,271,7],[244,14,271,8],[245,12,273,6],[245,16,273,10],[245,17,273,11,"emitEvent"],[245,26,273,20],[245,27,273,21],[245,43,273,37],[245,45,273,39],[246,14,274,8,"duration"],[246,22,274,16],[246,24,274,8,"duration"],[246,32,274,16],[247,14,275,8,"completed"],[247,23,275,17],[247,25,275,19],[247,29,275,23],[247,30,275,24,"currentSyncProgress"],[247,49,275,43],[247,50,275,44,"completed"],[247,59,275,53],[248,14,276,8,"failed"],[248,20,276,14],[248,22,276,16],[248,26,276,20],[248,27,276,21,"currentSyncProgress"],[248,46,276,40],[248,47,276,41,"failed"],[249,12,277,6],[249,13,277,7],[249,14,277,8],[250,10,279,4],[250,11,279,5],[250,12,279,6],[250,19,279,13,"error"],[250,24,279,18],[250,26,279,20],[251,12,280,6],[251,16,280,12,"duration"],[251,25,280,20],[251,28,280,23,"Date"],[251,32,280,27],[251,33,280,28,"now"],[251,36,280,31],[251,37,280,32],[251,38,280,33],[251,41,280,36,"startTime"],[251,50,280,45],[252,12,281,6,"logger"],[252,36,281,12],[252,37,281,13,"error"],[252,42,281,18],[252,43,281,19],[252,80,281,56],[252,82,281,58],[253,14,281,60,"error"],[253,19,281,65],[253,21,281,60,"error"],[253,26,281,65],[254,14,281,67,"duration"],[254,22,281,75],[254,24,281,67,"duration"],[255,12,281,76],[255,13,281,77],[255,14,281,78],[256,12,282,6],[256,16,282,10],[256,17,282,11,"emitEvent"],[256,26,282,20],[256,27,282,21],[256,40,282,34],[256,42,282,36],[257,14,282,38,"error"],[257,19,282,43],[257,21,282,45,"error"],[257,26,282,50],[257,27,282,51,"message"],[257,34,282,58],[258,14,282,60,"duration"],[258,22,282,68],[258,24,282,60,"duration"],[259,12,282,69],[259,13,282,70],[259,14,282,71],[260,10,283,4],[260,11,283,5],[260,20,283,14],[261,12,284,6],[261,16,284,10],[261,17,284,11,"syncInProgress"],[261,31,284,25],[261,34,284,28],[261,39,284,33],[262,12,285,6],[262,16,285,10],[262,17,285,11,"resetSyncProgress"],[262,34,285,28],[262,35,285,29],[262,36,285,30],[263,10,286,4],[264,8,287,2],[264,9,287,3],[265,8,287,3],[265,17,246,15,"startSync"],[265,26,246,24,"startSync"],[265,27,246,24],[266,10,246,24],[266,17,246,24,"_startSync"],[266,27,246,24],[266,28,246,24,"apply"],[266,33,246,24],[266,40,246,24,"arguments"],[266,49,246,24],[267,8,246,24],[268,8,246,24],[268,15,246,15,"startSync"],[268,24,246,24],[269,6,246,24],[270,6,289,2],[271,0,290,0],[272,0,291,0],[273,6,289,2],[274,4,289,2],[275,6,289,2,"key"],[275,9,289,2],[276,6,289,2,"value"],[276,11,289,2],[277,8,289,2],[277,12,289,2,"_performSync"],[277,24,289,2],[277,31,289,2,"_asyncToGenerator2"],[277,49,289,2],[277,50,289,2,"default"],[277,57,289,2],[277,59,292,2],[277,72,292,45],[278,10,292,45],[278,14,292,45,"_this2"],[278,20,292,45],[279,10,293,4],[279,14,293,10,"readyOperations"],[279,29,293,25],[279,32,293,28,"offlineQueue"],[279,58,293,40],[279,59,293,41,"getReadyOperations"],[279,77,293,59],[279,78,293,60],[279,79,293,61],[280,10,295,4],[280,14,295,8,"readyOperations"],[280,29,295,23],[280,30,295,24,"length"],[280,36,295,30],[280,41,295,35],[280,42,295,36],[280,44,295,38],[281,12,296,6,"logger"],[281,36,296,12],[281,37,296,13,"info"],[281,41,296,17],[281,42,296,18],[281,85,296,61],[281,86,296,62],[282,12,297,6],[283,10,298,4],[285,10,300,4],[286,10,301,4],[286,14,301,8],[286,15,301,9,"currentSyncProgress"],[286,34,301,28],[286,37,301,31],[287,12,302,6,"total"],[287,17,302,11],[287,19,302,13,"readyOperations"],[287,34,302,28],[287,35,302,29,"length"],[287,41,302,35],[288,12,303,6,"completed"],[288,21,303,15],[288,23,303,17],[288,24,303,18],[289,12,304,6,"failed"],[289,18,304,12],[289,20,304,14],[289,21,304,15],[290,12,305,6,"inProgress"],[290,22,305,16],[290,24,305,18],[291,10,306,4],[291,11,306,5],[292,10,308,4,"logger"],[292,34,308,10],[292,35,308,11,"info"],[292,39,308,15],[292,40,308,16],[292,76,308,52],[292,78,308,54],[293,12,308,56,"total"],[293,17,308,61],[293,19,308,63,"readyOperations"],[293,34,308,78],[293,35,308,79,"length"],[294,10,308,86],[294,11,308,87],[294,12,308,88],[296,10,310,4],[297,10,310,4],[297,14,310,4,"_loop"],[297,19,310,4],[297,32,310,4,"_loop"],[297,38,310,4,"priority"],[297,46,310,4],[297,48,311,54],[298,12,312,6],[298,16,312,12,"priorityOperations"],[298,34,312,30],[298,37,312,33,"readyOperations"],[298,52,312,48],[298,53,312,49,"filter"],[298,59,312,55],[298,60,312,56],[298,70,312,56,"op"],[298,72,312,58],[299,14,312,58],[299,21,312,62,"op"],[299,23,312,64],[299,24,312,65,"priority"],[299,32,312,73],[299,37,312,78,"priority"],[299,45,312,86],[300,12,312,86],[300,14,312,87],[301,12,314,6],[301,16,314,10,"priorityOperations"],[301,34,314,28],[301,35,314,29,"length"],[301,41,314,35],[301,44,314,38],[301,45,314,39],[301,47,314,41],[302,14,315,8],[302,20,315,14,"_this2"],[302,26,315,18],[302,27,315,19,"processBatch"],[302,39,315,31],[302,40,315,32,"priorityOperations"],[302,58,315,50],[302,59,315,51],[303,12,316,6],[304,10,317,4],[304,11,317,5],[305,10,311,4],[305,15,311,9],[305,19,311,15,"priority"],[305,27,311,23],[305,31,311,27],[305,35,311,31],[305,36,311,32,"config"],[305,42,311,38],[305,43,311,39,"priorityOrder"],[305,56,311,52],[306,12,311,52],[306,19,311,52,"_loop"],[306,24,311,52],[306,25,311,52,"priority"],[306,33,311,52],[307,10,311,52],[308,8,318,2],[308,9,318,3],[309,8,318,3],[309,17,292,16,"performSync"],[309,28,292,27,"performSync"],[309,29,292,27],[310,10,292,27],[310,17,292,27,"_performSync"],[310,29,292,27],[310,30,292,27,"apply"],[310,35,292,27],[310,42,292,27,"arguments"],[310,51,292,27],[311,8,292,27],[312,8,292,27],[312,15,292,16,"performSync"],[312,26,292,27],[313,6,292,27],[314,6,320,2],[315,0,321,0],[316,0,322,0],[317,6,320,2],[318,4,320,2],[319,6,320,2,"key"],[319,9,320,2],[320,6,320,2,"value"],[320,11,320,2],[321,8,320,2],[321,12,320,2,"_processBatch"],[321,25,320,2],[321,32,320,2,"_asyncToGenerator2"],[321,50,320,2],[321,51,320,2,"default"],[321,58,320,2],[321,60,323,2],[321,71,323,29,"operations"],[321,81,323,58],[321,83,323,75],[322,10,324,4],[322,14,324,10,"batches"],[322,21,324,17],[322,24,324,20],[322,28,324,24],[322,29,324,25,"chunkArray"],[322,39,324,35],[322,40,324,36,"operations"],[322,50,324,46],[322,52,324,48],[322,56,324,52],[322,57,324,53,"config"],[322,63,324,59],[322,64,324,60,"batchSize"],[322,73,324,69],[322,74,324,70],[323,10,326,4],[323,15,326,9],[323,19,326,15,"batch"],[323,24,326,20],[323,28,326,24,"batches"],[323,35,326,31],[323,37,326,33],[324,12,327,6],[324,16,327,10],[324,17,327,11],[324,21,327,15],[324,22,327,16,"canSync"],[324,29,327,23],[324,30,327,24],[324,31,327,25],[324,33,327,27],[325,14,328,8,"logger"],[325,38,328,14],[325,39,328,15,"info"],[325,43,328,19],[325,44,328,20],[325,105,328,81],[325,106,328,82],[326,14,329,8],[327,12,330,6],[328,12,332,6],[328,18,332,12],[328,22,332,16],[328,23,332,17,"processConcurrentOperations"],[328,50,332,44],[328,51,332,45,"batch"],[328,56,332,50],[328,57,332,51],[329,10,333,4],[330,8,334,2],[330,9,334,3],[331,8,334,3],[331,17,323,16,"processBatch"],[331,29,323,28,"processBatch"],[331,30,323,28,"_x"],[331,32,323,28],[332,10,323,28],[332,17,323,28,"_processBatch"],[332,30,323,28],[332,31,323,28,"apply"],[332,36,323,28],[332,43,323,28,"arguments"],[332,52,323,28],[333,8,323,28],[334,8,323,28],[334,15,323,16,"processBatch"],[334,27,323,28],[335,6,323,28],[336,6,336,2],[337,0,337,0],[338,0,338,0],[339,6,336,2],[340,4,336,2],[341,6,336,2,"key"],[341,9,336,2],[342,6,336,2,"value"],[342,11,336,2],[343,8,336,2],[343,12,336,2,"_processConcurrentOperations"],[343,40,336,2],[343,47,336,2,"_asyncToGenerator2"],[343,65,336,2],[343,66,336,2,"default"],[343,73,336,2],[343,75,339,2],[343,86,339,44,"operations"],[343,96,339,73],[343,98,339,90],[344,10,339,90],[344,14,339,90,"_this3"],[344,20,339,90],[345,10,340,4],[345,14,340,10,"chunks"],[345,20,340,16],[345,23,340,19],[345,27,340,23],[345,28,340,24,"chunkArray"],[345,38,340,34],[345,39,340,35,"operations"],[345,49,340,45],[345,51,340,47],[345,55,340,51],[345,56,340,52,"config"],[345,62,340,58],[345,63,340,59,"maxConcurrentOperations"],[345,86,340,82],[345,87,340,83],[346,10,342,4],[346,15,342,9],[346,19,342,15,"chunk"],[346,24,342,20],[346,28,342,24,"chunks"],[346,34,342,30],[346,36,342,32],[347,12,343,6],[347,16,343,12,"promises"],[347,24,343,20],[347,27,343,23,"chunk"],[347,32,343,28],[347,33,343,29,"map"],[347,36,343,32],[347,37,343,33],[347,47,343,33,"operation"],[347,56,343,42],[348,14,343,42],[348,21,343,46,"_this3"],[348,27,343,50],[348,28,343,51,"processOperation"],[348,44,343,67],[348,45,343,68,"operation"],[348,54,343,77],[348,55,343,78],[349,12,343,78],[349,14,343,79],[350,12,344,6],[350,18,344,12,"Promise"],[350,25,344,19],[350,26,344,20,"allSettled"],[350,36,344,30],[350,37,344,31,"promises"],[350,45,344,39],[350,46,344,40],[351,10,345,4],[352,8,346,2],[352,9,346,3],[353,8,346,3],[353,17,339,16,"processConcurrentOperations"],[353,44,339,43,"processConcurrentOperations"],[353,45,339,43,"_x2"],[353,48,339,43],[354,10,339,43],[354,17,339,43,"_processConcurrentOperations"],[354,45,339,43],[354,46,339,43,"apply"],[354,51,339,43],[354,58,339,43,"arguments"],[354,67,339,43],[355,8,339,43],[356,8,339,43],[356,15,339,16,"processConcurrentOperations"],[356,42,339,43],[357,6,339,43],[358,6,348,2],[359,0,349,0],[360,0,350,0],[361,6,348,2],[362,4,348,2],[363,6,348,2,"key"],[363,9,348,2],[364,6,348,2,"value"],[364,11,348,2],[365,8,348,2],[365,12,348,2,"_processOperation"],[365,29,348,2],[365,36,348,2,"_asyncToGenerator2"],[365,54,348,2],[365,55,348,2,"default"],[365,62,348,2],[365,64,351,2],[365,75,351,33,"operation"],[365,84,351,59],[365,86,351,76],[366,10,352,4],[366,14,352,10,"processor"],[366,23,352,19],[366,26,352,22],[366,30,352,26],[366,31,352,27,"processors"],[366,41,352,37],[366,42,352,38,"get"],[366,45,352,41],[366,46,352,42,"operation"],[366,55,352,51],[366,56,352,52,"type"],[366,60,352,56],[366,61,352,57],[367,10,354,4],[367,14,354,8],[367,15,354,9,"processor"],[367,24,354,18],[367,26,354,20],[368,12,355,6],[368,16,355,12,"error"],[368,21,355,17],[368,24,355,20],[368,66,355,62,"operation"],[368,75,355,71],[368,76,355,72,"type"],[368,80,355,76],[368,82,355,78],[369,12,356,6,"logger"],[369,36,356,12],[369,37,356,13,"error"],[369,42,356,18],[369,43,356,19],[369,85,356,61],[369,87,356,63],[370,14,357,8,"operationId"],[370,25,357,19],[370,27,357,21,"operation"],[370,36,357,30],[370,37,357,31,"id"],[370,39,357,33],[371,14,358,8,"type"],[371,18,358,12],[371,20,358,14,"operation"],[371,29,358,23],[371,30,358,24,"type"],[371,34,358,28],[372,14,359,8,"error"],[372,19,359,13],[372,21,359,8,"error"],[373,12,360,6],[373,13,360,7],[373,14,360,8],[374,12,362,6],[374,18,362,12,"offlineQueue"],[374,44,362,24],[374,45,362,25,"updateOperationStatus"],[374,66,362,46],[374,67,362,47,"operation"],[374,76,362,56],[374,77,362,57,"id"],[374,79,362,59],[374,81,362,61],[374,89,362,69],[374,91,362,71,"error"],[374,96,362,76],[374,97,362,77],[375,12,363,6],[375,18,363,12,"offlineQueue"],[375,44,363,24],[375,45,363,25,"incrementRetryCount"],[375,64,363,44],[375,65,363,45,"operation"],[375,74,363,54],[375,75,363,55,"id"],[375,77,363,57],[375,78,363,58],[376,12,365,6],[376,16,365,10],[376,17,365,11,"currentSyncProgress"],[376,36,365,30],[376,37,365,31,"failed"],[376,43,365,37],[376,45,365,39],[377,12,366,6],[377,16,366,10],[377,17,366,11,"emitEvent"],[377,26,366,20],[377,27,366,21],[377,45,366,39],[377,47,366,41],[378,14,366,43,"operationId"],[378,25,366,54],[378,27,366,56,"operation"],[378,36,366,65],[378,37,366,66,"id"],[378,39,366,68],[379,14,366,70,"error"],[379,19,366,75],[379,21,366,70,"error"],[380,12,366,76],[380,13,366,77],[380,14,366,78],[381,12,367,6],[382,10,368,4],[383,10,370,4],[383,14,370,8],[383,15,370,9,"processor"],[383,24,370,18],[383,25,370,19,"canProcess"],[383,35,370,29],[383,36,370,30,"operation"],[383,45,370,39],[383,46,370,40],[383,48,370,42],[384,12,371,6,"logger"],[384,36,371,12],[384,37,371,13,"info"],[384,41,371,17],[384,42,371,18],[384,99,371,75],[384,101,371,77],[385,14,372,8,"operationId"],[385,25,372,19],[385,27,372,21,"operation"],[385,36,372,30],[385,37,372,31,"id"],[385,39,372,33],[386,14,373,8,"type"],[386,18,373,12],[386,20,373,14,"operation"],[386,29,373,23],[386,30,373,24,"type"],[387,12,374,6],[387,13,374,7],[387,14,374,8],[388,12,375,6],[389,10,376,4],[390,10,378,4],[390,14,378,8],[391,12,379,6],[392,12,380,6],[392,18,380,12,"offlineQueue"],[392,44,380,24],[392,45,380,25,"updateOperationStatus"],[392,66,380,46],[392,67,380,47,"operation"],[392,76,380,56],[392,77,380,57,"id"],[392,79,380,59],[392,81,380,61],[392,93,380,73],[392,94,380,74],[394,12,382,6],[395,12,383,6],[395,16,383,10],[395,17,383,11,"currentSyncProgress"],[395,36,383,30],[395,37,383,31,"currentOperation"],[395,53,383,47],[395,56,383,50],[395,59,383,53,"operation"],[395,68,383,62],[395,69,383,63,"type"],[395,73,383,67],[395,77,383,71,"operation"],[395,86,383,80],[395,87,383,81,"id"],[395,89,383,83],[395,91,383,85],[396,12,384,6],[396,16,384,10],[396,17,384,11,"emitEvent"],[396,26,384,20],[396,27,384,21],[396,42,384,36],[396,44,384,36,"Object"],[396,50,384,36],[396,51,384,36,"assign"],[396,57,384,36],[396,62,384,43],[396,66,384,47],[396,67,384,48,"currentSyncProgress"],[396,86,384,67],[396,87,384,69],[396,88,384,70],[397,12,386,6,"logger"],[397,36,386,12],[397,37,386,13,"info"],[397,41,386,17],[397,42,386,18],[397,77,386,53],[397,79,386,55],[398,14,387,8,"operationId"],[398,25,387,19],[398,27,387,21,"operation"],[398,36,387,30],[398,37,387,31,"id"],[398,39,387,33],[399,14,388,8,"type"],[399,18,388,12],[399,20,388,14,"operation"],[399,29,388,23],[399,30,388,24,"type"],[399,34,388,28],[400,14,389,8,"attempt"],[400,21,389,15],[400,23,389,17,"operation"],[400,32,389,26],[400,33,389,27,"retryCount"],[400,43,389,37],[400,46,389,40],[401,12,390,6],[401,13,390,7],[401,14,390,8],[403,12,392,6],[404,12,393,6],[404,18,393,12,"processor"],[404,27,393,21],[404,28,393,22,"process"],[404,35,393,29],[404,36,393,30,"operation"],[404,45,393,39],[404,46,393,40],[406,12,395,6],[407,12,396,6],[407,18,396,12,"offlineQueue"],[407,44,396,24],[407,45,396,25,"updateOperationStatus"],[407,66,396,46],[407,67,396,47,"operation"],[407,76,396,56],[407,77,396,57,"id"],[407,79,396,59],[407,81,396,61],[407,92,396,72],[407,93,396,73],[408,12,398,6],[408,16,398,10],[408,17,398,11,"currentSyncProgress"],[408,36,398,30],[408,37,398,31,"completed"],[408,46,398,40],[408,48,398,42],[409,12,399,6],[409,16,399,10],[409,17,399,11,"emitEvent"],[409,26,399,20],[409,27,399,21],[409,48,399,42],[409,50,399,44],[410,14,400,8,"operationId"],[410,25,400,19],[410,27,400,21,"operation"],[410,36,400,30],[410,37,400,31,"id"],[410,39,400,33],[411,14,401,8,"type"],[411,18,401,12],[411,20,401,14,"operation"],[411,29,401,23],[411,30,401,24,"type"],[412,12,402,6],[412,13,402,7],[412,14,402,8],[413,12,404,6,"logger"],[413,36,404,12],[413,37,404,13,"info"],[413,41,404,17],[413,42,404,18],[413,89,404,65],[413,91,404,67],[414,14,405,8,"operationId"],[414,25,405,19],[414,27,405,21,"operation"],[414,36,405,30],[414,37,405,31,"id"],[414,39,405,33],[415,14,406,8,"type"],[415,18,406,12],[415,20,406,14,"operation"],[415,29,406,23],[415,30,406,24,"type"],[416,12,407,6],[416,13,407,7],[416,14,407,8],[417,10,409,4],[417,11,409,5],[417,12,409,6],[417,19,409,13,"error"],[417,24,409,18],[417,26,409,20],[418,12,410,6,"logger"],[418,36,410,12],[418,37,410,13,"error"],[418,42,410,18],[418,43,410,19],[418,85,410,61],[418,87,410,63],[419,14,411,8,"operationId"],[419,25,411,19],[419,27,411,21,"operation"],[419,36,411,30],[419,37,411,31,"id"],[419,39,411,33],[420,14,412,8,"type"],[420,18,412,12],[420,20,412,14,"operation"],[420,29,412,23],[420,30,412,24,"type"],[420,34,412,28],[421,14,413,8,"error"],[421,19,413,13],[421,21,413,15,"error"],[421,26,413,20],[421,27,413,21,"message"],[421,34,413,28],[422,14,414,8,"attempt"],[422,21,414,15],[422,23,414,17,"operation"],[422,32,414,26],[422,33,414,27,"retryCount"],[422,43,414,37],[422,46,414,40],[423,12,415,6],[423,13,415,7],[423,14,415,8],[424,12,417,6],[424,18,417,12,"offlineQueue"],[424,44,417,24],[424,45,417,25,"updateOperationStatus"],[424,66,417,46],[424,67,417,47,"operation"],[424,76,417,56],[424,77,417,57,"id"],[424,79,417,59],[424,81,417,61],[424,89,417,69],[424,91,417,71,"error"],[424,96,417,76],[424,97,417,77,"message"],[424,104,417,84],[424,105,417,85],[426,12,419,6],[427,12,420,6],[427,16,420,10,"operation"],[427,25,420,19],[427,26,420,20,"retryCount"],[427,36,420,30],[427,39,420,33,"operation"],[427,48,420,42],[427,49,420,43,"maxRetries"],[427,59,420,53],[427,61,420,55],[428,14,421,8],[428,20,421,14,"offlineQueue"],[428,46,421,26],[428,47,421,27,"incrementRetryCount"],[428,66,421,46],[428,67,421,47,"operation"],[428,76,421,56],[428,77,421,57,"id"],[428,79,421,59],[428,80,421,60],[429,12,422,6],[430,12,424,6],[430,16,424,10],[430,17,424,11,"currentSyncProgress"],[430,36,424,30],[430,37,424,31,"failed"],[430,43,424,37],[430,45,424,39],[431,12,425,6],[431,16,425,10],[431,17,425,11,"emitEvent"],[431,26,425,20],[431,27,425,21],[431,45,425,39],[431,47,425,41],[432,14,426,8,"operationId"],[432,25,426,19],[432,27,426,21,"operation"],[432,36,426,30],[432,37,426,31,"id"],[432,39,426,33],[433,14,427,8,"type"],[433,18,427,12],[433,20,427,14,"operation"],[433,29,427,23],[433,30,427,24,"type"],[433,34,427,28],[434,14,428,8,"error"],[434,19,428,13],[434,21,428,15,"error"],[434,26,428,20],[434,27,428,21,"message"],[435,12,429,6],[435,13,429,7],[435,14,429,8],[436,10,430,4],[437,8,431,2],[437,9,431,3],[438,8,431,3],[438,17,351,16,"processOperation"],[438,33,351,32,"processOperation"],[438,34,351,32,"_x3"],[438,37,351,32],[439,10,351,32],[439,17,351,32,"_processOperation"],[439,34,351,32],[439,35,351,32,"apply"],[439,40,351,32],[439,47,351,32,"arguments"],[439,56,351,32],[440,8,351,32],[441,8,351,32],[441,15,351,16,"processOperation"],[441,31,351,32],[442,6,351,32],[443,6,433,2],[444,0,434,0],[445,0,435,0],[446,6,433,2],[447,4,433,2],[448,6,433,2,"key"],[448,9,433,2],[449,6,433,2,"value"],[449,11,433,2],[449,13,436,2],[449,22,436,10,"resetSyncProgress"],[449,39,436,27,"resetSyncProgress"],[449,40,436,27],[449,42,436,36],[450,8,437,4],[450,12,437,8],[450,13,437,9,"currentSyncProgress"],[450,32,437,28],[450,35,437,31],[451,10,438,6,"total"],[451,15,438,11],[451,17,438,13],[451,18,438,14],[452,10,439,6,"completed"],[452,19,439,15],[452,21,439,17],[452,22,439,18],[453,10,440,6,"failed"],[453,16,440,12],[453,18,440,14],[453,19,440,15],[454,10,441,6,"inProgress"],[454,20,441,16],[454,22,441,18],[455,8,442,4],[455,9,442,5],[456,6,443,2],[458,6,445,2],[459,0,446,0],[460,0,447,0],[461,4,445,2],[462,6,445,2,"key"],[462,9,445,2],[463,6,445,2,"value"],[463,11,445,2],[463,13,448,2],[463,22,448,9,"getNetworkInfo"],[463,36,448,23,"getNetworkInfo"],[463,37,448,23],[463,39,448,46],[464,8,449,4],[464,15,449,11],[464,19,449,15],[464,20,449,16,"networkInfo"],[464,31,449,27],[465,6,450,2],[467,6,452,2],[468,0,453,0],[469,0,454,0],[470,4,452,2],[471,6,452,2,"key"],[471,9,452,2],[472,6,452,2,"value"],[472,11,452,2],[472,13,455,2],[472,22,455,9,"getSyncProgress"],[472,37,455,24,"getSyncProgress"],[472,38,455,24],[472,40,455,41],[473,8,456,4],[473,15,456,4,"Object"],[473,21,456,4],[473,22,456,4,"assign"],[473,28,456,4],[473,33,456,16],[473,37,456,20],[473,38,456,21,"currentSyncProgress"],[473,57,456,40],[474,6,457,2],[476,6,459,2],[477,0,460,0],[478,0,461,0],[479,4,459,2],[480,6,459,2,"key"],[480,9,459,2],[481,6,459,2,"value"],[481,11,459,2],[481,13,462,2],[481,22,462,9,"isSyncing"],[481,31,462,18,"isSyncing"],[481,32,462,18],[481,34,462,30],[482,8,463,4],[482,15,463,11],[482,19,463,15],[482,20,463,16,"syncInProgress"],[482,34,463,30],[483,6,464,2],[485,6,466,2],[486,0,467,0],[487,0,468,0],[488,4,466,2],[489,6,466,2,"key"],[489,9,466,2],[490,6,466,2,"value"],[490,11,466,2],[491,8,466,2],[491,12,466,2,"_forceSync"],[491,22,466,2],[491,29,466,2,"_asyncToGenerator2"],[491,47,466,2],[491,48,466,2,"default"],[491,55,466,2],[491,57,469,2],[491,70,469,42],[492,10,470,4,"logger"],[492,34,470,10],[492,35,470,11,"info"],[492,39,470,15],[492,40,470,16],[492,75,470,51],[492,76,470,52],[493,10,471,4],[493,14,471,8],[493,15,471,9,"syncInProgress"],[493,29,471,23],[493,32,471,26],[493,37,471,31],[493,38,471,32],[493,39,471,33],[494,10,472,4],[494,16,472,10],[494,20,472,14],[494,21,472,15,"startSync"],[494,30,472,24],[494,31,472,25],[494,32,472,26],[495,8,473,2],[495,9,473,3],[496,8,473,3],[496,17,469,15,"forceSync"],[496,26,469,24,"forceSync"],[496,27,469,24],[497,10,469,24],[497,17,469,24,"_forceSync"],[497,27,469,24],[497,28,469,24,"apply"],[497,33,469,24],[497,40,469,24,"arguments"],[497,49,469,24],[498,8,469,24],[499,8,469,24],[499,15,469,15,"forceSync"],[499,24,469,24],[500,6,469,24],[501,6,475,2],[502,0,476,0],[503,0,477,0],[504,6,475,2],[505,4,475,2],[506,6,475,2,"key"],[506,9,475,2],[507,6,475,2,"value"],[507,11,475,2],[507,13,478,2],[507,22,478,9,"stopSync"],[507,30,478,17,"stopSync"],[507,31,478,17],[507,33,478,26],[508,8,479,4],[508,12,479,8],[508,16,479,12],[508,17,479,13,"syncInterval"],[508,29,479,25],[508,31,479,27],[509,10,480,6,"clearInterval"],[509,23,480,19],[509,24,480,20],[509,28,480,24],[509,29,480,25,"syncInterval"],[509,41,480,37],[509,42,480,38],[510,10,481,6],[510,14,481,10],[510,15,481,11,"syncInterval"],[510,27,481,23],[510,30,481,26],[510,34,481,30],[511,8,482,4],[512,8,483,4,"logger"],[512,32,483,10],[512,33,483,11,"info"],[512,37,483,15],[512,38,483,16],[512,65,483,43],[512,66,483,44],[513,6,484,2],[515,6,486,2],[516,0,487,0],[517,0,488,0],[518,4,486,2],[519,6,486,2,"key"],[519,9,486,2],[520,6,486,2,"value"],[520,11,486,2],[520,13,489,2],[520,22,489,9,"updateConfig"],[520,34,489,21,"updateConfig"],[520,35,489,22,"newConfig"],[520,44,489,52],[520,46,489,60],[521,8,490,4,"Object"],[521,14,490,10],[521,15,490,11,"assign"],[521,21,490,17],[521,22,490,18],[521,26,490,22],[521,27,490,23,"config"],[521,33,490,29],[521,35,490,31,"newConfig"],[521,44,490,40],[521,45,490,41],[523,8,492,4],[524,8,493,4],[524,12,493,8,"newConfig"],[524,21,493,17],[524,22,493,18,"syncInterval"],[524,34,493,30],[524,39,493,35,"undefined"],[524,48,493,44],[524,50,493,46],[525,10,494,6],[525,14,494,10],[525,15,494,11,"startPeriodicSync"],[525,32,494,28],[525,33,494,29],[525,34,494,30],[526,8,495,4],[527,8,497,4,"logger"],[527,32,497,10],[527,33,497,11,"info"],[527,37,497,15],[527,38,497,16],[527,74,497,52],[527,76,497,54,"newConfig"],[527,85,497,63],[527,86,497,64],[528,6,498,2],[530,6,500,2],[531,0,501,0],[532,0,502,0],[533,4,500,2],[534,6,500,2,"key"],[534,9,500,2],[535,6,500,2,"value"],[535,11,500,2],[535,13,503,2],[535,22,503,9,"addEventListener"],[535,38,503,25,"addEventListener"],[535,39,503,26,"eventType"],[535,48,503,50],[535,50,503,52,"listener"],[535,58,503,79],[535,60,503,87],[536,8,504,4],[536,12,504,8],[536,13,504,9],[536,17,504,13],[536,18,504,14,"eventListeners"],[536,32,504,28],[536,33,504,29,"has"],[536,36,504,32],[536,37,504,33,"eventType"],[536,46,504,42],[536,47,504,43],[536,49,504,45],[537,10,505,6],[537,14,505,10],[537,15,505,11,"eventListeners"],[537,29,505,25],[537,30,505,26,"set"],[537,33,505,29],[537,34,505,30,"eventType"],[537,43,505,39],[537,45,505,41],[537,49,505,45,"Set"],[537,52,505,48],[537,53,505,49],[537,54,505,50],[537,55,505,51],[538,8,506,4],[539,8,507,4],[539,12,507,8],[539,13,507,9,"eventListeners"],[539,27,507,23],[539,28,507,24,"get"],[539,31,507,27],[539,32,507,28,"eventType"],[539,41,507,37],[539,42,507,38],[539,43,507,40,"add"],[539,46,507,43],[539,47,507,44,"listener"],[539,55,507,52],[539,56,507,53],[540,6,508,2],[542,6,510,2],[543,0,511,0],[544,0,512,0],[545,4,510,2],[546,6,510,2,"key"],[546,9,510,2],[547,6,510,2,"value"],[547,11,510,2],[547,13,513,2],[547,22,513,9,"removeEventListener"],[547,41,513,28,"removeEventListener"],[547,42,513,29,"eventType"],[547,51,513,53],[547,53,513,55,"listener"],[547,61,513,82],[547,63,513,90],[548,8,514,4],[548,12,514,10,"listeners"],[548,21,514,19],[548,24,514,22],[548,28,514,26],[548,29,514,27,"eventListeners"],[548,43,514,41],[548,44,514,42,"get"],[548,47,514,45],[548,48,514,46,"eventType"],[548,57,514,55],[548,58,514,56],[549,8,515,4],[549,12,515,8,"listeners"],[549,21,515,17],[549,23,515,19],[550,10,516,6,"listeners"],[550,19,516,15],[550,20,516,16,"delete"],[550,26,516,22],[550,27,516,23,"listener"],[550,35,516,31],[550,36,516,32],[551,8,517,4],[552,6,518,2],[554,6,520,2],[555,0,521,0],[556,0,522,0],[557,4,520,2],[558,6,520,2,"key"],[558,9,520,2],[559,6,520,2,"value"],[559,11,520,2],[559,13,523,2],[559,22,523,10,"emitEvent"],[559,31,523,19,"emitEvent"],[559,32,523,20,"type"],[559,36,523,39],[559,38,523,41,"data"],[559,42,523,51],[559,44,523,59],[560,8,524,4],[560,12,524,10,"event"],[560,17,524,26],[560,20,524,29],[561,10,525,6,"type"],[561,14,525,10],[561,16,525,6,"type"],[561,20,525,10],[562,10,526,6,"data"],[562,14,526,10],[562,16,526,6,"data"],[562,20,526,10],[563,10,527,6,"timestamp"],[563,19,527,15],[563,21,527,17,"Date"],[563,25,527,21],[563,26,527,22,"now"],[563,29,527,25],[563,30,527,26],[564,8,528,4],[564,9,528,5],[565,8,530,4],[565,12,530,10,"listeners"],[565,21,530,19],[565,24,530,22],[565,28,530,26],[565,29,530,27,"eventListeners"],[565,43,530,41],[565,44,530,42,"get"],[565,47,530,45],[565,48,530,46,"type"],[565,52,530,50],[565,53,530,51],[566,8,531,4],[566,12,531,8,"listeners"],[566,21,531,17],[566,23,531,19],[567,10,532,6,"listeners"],[567,19,532,15],[567,20,532,16,"forEach"],[567,27,532,23],[567,28,532,24],[567,38,532,24,"listener"],[567,46,532,32],[567,48,532,36],[568,12,533,8],[568,16,533,12],[569,14,534,10,"listener"],[569,22,534,18],[569,23,534,19,"event"],[569,28,534,24],[569,29,534,25],[570,12,535,8],[570,13,535,9],[570,14,535,10],[570,21,535,17,"error"],[570,26,535,22],[570,28,535,24],[571,14,536,10,"logger"],[571,38,536,16],[571,39,536,17,"error"],[571,44,536,22],[571,45,536,23],[571,80,536,58],[571,82,536,60],[572,16,536,62,"eventType"],[572,25,536,71],[572,27,536,73,"type"],[572,31,536,77],[573,16,536,79,"error"],[573,21,536,84],[573,23,536,79,"error"],[574,14,536,85],[574,15,536,86],[574,16,536,87],[575,12,537,8],[576,10,538,6],[576,11,538,7],[576,12,538,8],[577,8,539,4],[578,6,540,2],[580,6,542,2],[581,0,543,0],[582,0,544,0],[583,4,542,2],[584,6,542,2,"key"],[584,9,542,2],[585,6,542,2,"value"],[585,11,542,2],[585,13,545,2],[585,22,545,10,"chunkArray"],[585,32,545,20,"chunkArray"],[585,33,545,24,"array"],[585,38,545,34],[585,40,545,36,"chunkSize"],[585,49,545,53],[585,51,545,62],[586,8,546,4],[586,12,546,10,"chunks"],[586,18,546,23],[586,21,546,26],[586,23,546,28],[587,8,547,4],[587,13,547,9],[587,17,547,13,"i"],[587,18,547,14],[587,21,547,17],[587,22,547,18],[587,24,547,20,"i"],[587,25,547,21],[587,28,547,24,"array"],[587,33,547,29],[587,34,547,30,"length"],[587,40,547,36],[587,42,547,38,"i"],[587,43,547,39],[587,47,547,43,"chunkSize"],[587,56,547,52],[587,58,547,54],[588,10,548,6,"chunks"],[588,16,548,12],[588,17,548,13,"push"],[588,21,548,17],[588,22,548,18,"array"],[588,27,548,23],[588,28,548,24,"slice"],[588,33,548,29],[588,34,548,30,"i"],[588,35,548,31],[588,37,548,33,"i"],[588,38,548,34],[588,41,548,37,"chunkSize"],[588,50,548,46],[588,51,548,47],[588,52,548,48],[589,8,549,4],[590,8,550,4],[590,15,550,11,"chunks"],[590,21,550,17],[591,6,551,2],[593,6,553,2],[594,0,554,0],[595,0,555,0],[596,4,553,2],[597,6,553,2,"key"],[597,9,553,2],[598,6,553,2,"value"],[598,11,553,2],[598,13,556,2],[598,22,556,9,"getSyncStats"],[598,34,556,21,"getSyncStats"],[598,35,556,21],[598,37,561,4],[599,8,562,4],[599,15,562,11],[600,10,563,6,"queueStats"],[600,20,563,16],[600,22,563,18,"offlineQueue"],[600,48,563,30],[600,49,563,31,"getQueueStats"],[600,62,563,44],[600,63,563,45],[600,64,563,46],[601,10,564,6,"networkInfo"],[601,21,564,17],[601,23,564,19],[601,27,564,23],[601,28,564,24,"networkInfo"],[601,39,564,35],[602,10,565,6,"syncProgress"],[602,22,565,18],[602,24,565,20],[602,28,565,24],[602,29,565,25,"currentSyncProgress"],[602,48,565,44],[603,10,566,6,"isSyncing"],[603,19,566,15],[603,21,566,17],[603,25,566,21],[603,26,566,22,"syncInProgress"],[604,8,567,4],[604,9,567,5],[605,6,568,2],[607,6,570,2],[608,0,571,0],[609,0,572,0],[610,4,570,2],[611,6,570,2,"key"],[611,9,570,2],[612,6,570,2,"value"],[612,11,570,2],[612,13,573,2],[612,22,573,9,"cleanup"],[612,29,573,16,"cleanup"],[612,30,573,16],[612,32,573,25],[613,8,574,4],[613,12,574,8],[613,13,574,9,"stopSync"],[613,21,574,17],[613,22,574,18],[613,23,574,19],[614,8,575,4],[614,12,575,8],[614,13,575,9,"eventListeners"],[614,27,575,23],[614,28,575,24,"clear"],[614,33,575,29],[614,34,575,30],[614,35,575,31],[615,8,576,4,"logger"],[615,32,576,10],[615,33,576,11,"info"],[615,37,576,15],[615,38,576,16],[615,70,576,48],[615,71,576,49],[616,6,577,2],[617,4,577,3],[618,6,577,3,"key"],[618,9,577,3],[619,6,577,3,"value"],[619,11,577,3],[619,13,114,2],[619,22,114,16,"getInstance"],[619,33,114,27,"getInstance"],[619,34,114,27],[619,36,114,43],[620,8,115,4],[620,12,115,8],[620,13,115,9,"SyncManager"],[620,24,115,20],[620,25,115,21,"instance"],[620,33,115,29],[620,35,115,31],[621,10,116,6,"SyncManager"],[621,21,116,17],[621,22,116,18,"instance"],[621,30,116,26],[621,33,116,29],[621,37,116,33,"SyncManager"],[621,48,116,44],[621,49,116,45],[621,50,116,46],[622,8,117,4],[623,8,118,4],[623,15,118,11,"SyncManager"],[623,26,118,22],[623,27,118,23,"instance"],[623,35,118,31],[624,6,119,2],[625,4,119,3],[626,2,119,3],[626,7,580,0],[627,2,581,7],[627,6,581,13,"syncManager"],[627,17,581,24],[627,20,581,24,"exports"],[627,27,581,24],[627,28,581,24,"syncManager"],[627,39,581,24],[627,42,581,27,"SyncManager"],[627,53,581,38],[627,54,581,39,"getInstance"],[627,65,581,50],[627,66,581,51],[627,67,581,52],[628,0,581,53],[628,3]],"functionMap":{"names":["<global>","SyncManager","constructor","getInstance","initializeNetworkMonitoring","handleNetworkStateChange","startSync._catch$argument_0","initializeAppStateMonitoring","handleAppStateChange","startPeriodicSync","setInterval$argument_0","canSync","registerProcessor","unregisterProcessor","startSync","performSync","readyOperations.filter$argument_0","processBatch","processConcurrentOperations","chunk.map$argument_0","processOperation","resetSyncProgress","getNetworkInfo","getSyncProgress","isSyncing","forceSync","stopSync","updateConfig","addEventListener","removeEventListener","emitEvent","listeners.forEach$argument_0","chunkArray","getSyncStats","cleanup"],"mappings":"AAA;OC8E;EC0B;GDI;EEK;GFK;EGK;GHM;EIK;6BCsB;ODE;GJE;EMK;GNG;EOK;6BFO;OEE;GPE;EQK;sCCM;iCJE;WIE;ODE;GRE;EUK;GVgB;EWK;GXG;EYK;GZG;EaK;GbyC;EcK;wDCoB,8BD;GdM;EgBK;GhBW;EiBK;iCCI,6CD;GjBG;EmBK;GnBgF;EoBK;GpBO;EqBK;GrBE;EsBK;GtBE;EuBK;GvBE;EwBK;GxBI;EyBK;GzBM;E0BK;G1BS;E2BK;G3BK;E4BK;G5BK;E6BK;wBCS;ODM;G7BE;E+BK;G/BM;EgCK;GhCY;EiCK;GjCI;CDC"}},"type":"js/module"}]}