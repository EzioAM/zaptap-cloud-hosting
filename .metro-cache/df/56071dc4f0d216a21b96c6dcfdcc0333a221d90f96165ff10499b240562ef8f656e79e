{"dependencies":[{"name":"../gesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":61,"index":61}}],"key":"tAi+3DTq2/XlM2rT1I9X7ektuV0=","exportNames":["*"]}},{"name":"../reanimatedWrapper","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":62},"end":{"line":2,"column":50,"index":112}}],"key":"55E8XkeO+dzLnJh3bfoVrgRwD58=","exportNames":["*"]}},{"name":"../gestureStateManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":229},"end":{"line":11,"column":32,"index":320}}],"key":"6LCevhjgWrTPA6v411SOrqBFOt8=","exportNames":["*"]}},{"name":"../../../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":321},"end":{"line":12,"column":39,"index":360}}],"key":"IejmxDhiCXPiMeZAbmULeVBR7VE=","exportNames":["*"]}},{"name":"../../../TouchEventType","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":361},"end":{"line":13,"column":57,"index":418}}],"key":"PyG3b4ZwjXzi6z4zhvmBkUTmp1M=","exportNames":["*"]}},{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":419},"end":{"line":14,"column":44,"index":463}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useAnimatedGesture = useAnimatedGesture;\n  var _gesture = require(_dependencyMap[0]);\n  var _reanimatedWrapper = require(_dependencyMap[1]);\n  var _gestureStateManager = require(_dependencyMap[2]);\n  var _State = require(_dependencyMap[3]);\n  var _TouchEventType = require(_dependencyMap[4]);\n  var _utils = require(_dependencyMap[5]);\n  var _worklet_2054655450554_init_data = {\n    code: \"function getHandler_reactNativeGestureHandler_useAnimatedGestureTs1(type,gesture){const{CALLBACK_TYPE}=this.__closure;switch(type){case CALLBACK_TYPE.BEGAN:return gesture.onBegin;case CALLBACK_TYPE.START:return gesture.onStart;case CALLBACK_TYPE.UPDATE:return gesture.onUpdate;case CALLBACK_TYPE.CHANGE:return gesture.onChange;case CALLBACK_TYPE.END:return gesture.onEnd;case CALLBACK_TYPE.FINALIZE:return gesture.onFinalize;case CALLBACK_TYPE.TOUCHES_DOWN:return gesture.onTouchesDown;case CALLBACK_TYPE.TOUCHES_MOVE:return gesture.onTouchesMove;case CALLBACK_TYPE.TOUCHES_UP:return gesture.onTouchesUp;case CALLBACK_TYPE.TOUCHES_CANCELLED:return gesture.onTouchesCancelled;}}\"\n  };\n  var getHandler = function () {\n    var getHandler = function (type, gesture) {\n      switch (type) {\n        case _gesture.CALLBACK_TYPE.BEGAN:\n          return gesture.onBegin;\n        case _gesture.CALLBACK_TYPE.START:\n          return gesture.onStart;\n        case _gesture.CALLBACK_TYPE.UPDATE:\n          return gesture.onUpdate;\n        case _gesture.CALLBACK_TYPE.CHANGE:\n          return gesture.onChange;\n        case _gesture.CALLBACK_TYPE.END:\n          return gesture.onEnd;\n        case _gesture.CALLBACK_TYPE.FINALIZE:\n          return gesture.onFinalize;\n        case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:\n          return gesture.onTouchesDown;\n        case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:\n          return gesture.onTouchesMove;\n        case _gesture.CALLBACK_TYPE.TOUCHES_UP:\n          return gesture.onTouchesUp;\n        case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:\n          return gesture.onTouchesCancelled;\n      }\n    };\n    getHandler.__closure = {\n      CALLBACK_TYPE: _gesture.CALLBACK_TYPE\n    };\n    getHandler.__workletHash = 2054655450554;\n    getHandler.__initData = _worklet_2054655450554_init_data;\n    return getHandler;\n  }();\n  var _worklet_14903447069497_init_data = {\n    code: \"function touchEventTypeToCallbackType_reactNativeGestureHandler_useAnimatedGestureTs2(eventType){const{TouchEventType,CALLBACK_TYPE}=this.__closure;switch(eventType){case TouchEventType.TOUCHES_DOWN:return CALLBACK_TYPE.TOUCHES_DOWN;case TouchEventType.TOUCHES_MOVE:return CALLBACK_TYPE.TOUCHES_MOVE;case TouchEventType.TOUCHES_UP:return CALLBACK_TYPE.TOUCHES_UP;case TouchEventType.TOUCHES_CANCELLED:return CALLBACK_TYPE.TOUCHES_CANCELLED;}return CALLBACK_TYPE.UNDEFINED;}\"\n  };\n  var touchEventTypeToCallbackType = function () {\n    var touchEventTypeToCallbackType = function (eventType) {\n      switch (eventType) {\n        case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n          return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;\n        case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n          return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;\n        case _TouchEventType.TouchEventType.TOUCHES_UP:\n          return _gesture.CALLBACK_TYPE.TOUCHES_UP;\n        case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n          return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;\n      }\n      return _gesture.CALLBACK_TYPE.UNDEFINED;\n    };\n    touchEventTypeToCallbackType.__closure = {\n      TouchEventType: _TouchEventType.TouchEventType,\n      CALLBACK_TYPE: _gesture.CALLBACK_TYPE\n    };\n    touchEventTypeToCallbackType.__workletHash = 14903447069497;\n    touchEventTypeToCallbackType.__initData = _worklet_14903447069497_init_data;\n    return touchEventTypeToCallbackType;\n  }();\n  var _worklet_17530658687510_init_data = {\n    code: \"function runWorklet_reactNativeGestureHandler_useAnimatedGestureTs3(type,gesture,event,...args){const{getHandler,tagMessage}=this.__closure;const handler=getHandler(type,gesture);if(gesture.isWorklet[type]){handler===null||handler===void 0||handler(event,...args);}else if(handler){console.warn(tagMessage('Animated gesture callback must be a worklet'));}}\"\n  };\n  var runWorklet = function () {\n    var runWorklet = function (type, gesture, event) {\n      var handler = getHandler(type, gesture);\n      if (gesture.isWorklet[type]) {\n        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n          args[_key - 3] = arguments[_key];\n        }\n        // @ts-ignore Logic below makes sure the correct event is send to the\n        // correct handler.\n        handler?.(event, ...args);\n      } else if (handler) {}\n    };\n    runWorklet.__closure = {\n      getHandler,\n      tagMessage: _utils.tagMessage\n    };\n    runWorklet.__workletHash = 17530658687510;\n    runWorklet.__initData = _worklet_17530658687510_init_data;\n    return runWorklet;\n  }();\n  var _worklet_1443917263962_init_data = {\n    code: \"function isStateChangeEvent_reactNativeGestureHandler_useAnimatedGestureTs4(event){return event.oldState!=null;}\"\n  };\n  var isStateChangeEvent = function () {\n    var isStateChangeEvent = function (event) {\n      // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n      return event.oldState != null;\n    };\n    isStateChangeEvent.__closure = {};\n    isStateChangeEvent.__workletHash = 1443917263962;\n    isStateChangeEvent.__initData = _worklet_1443917263962_init_data;\n    return isStateChangeEvent;\n  }();\n  var _worklet_15574765637067_init_data = {\n    code: \"function isTouchEvent_reactNativeGestureHandler_useAnimatedGestureTs5(event){return event.eventType!=null;}\"\n  };\n  var isTouchEvent = function () {\n    var isTouchEvent = function (event) {\n      return event.eventType != null;\n    };\n    isTouchEvent.__closure = {};\n    isTouchEvent.__workletHash = 15574765637067;\n    isTouchEvent.__initData = _worklet_15574765637067_init_data;\n    return isTouchEvent;\n  }();\n  var _worklet_10458000393606_init_data = {\n    code: \"function reactNativeGestureHandler_useAnimatedGestureTs6(event){const{sharedHandlersCallbacks,isStateChangeEvent,State,runWorklet,CALLBACK_TYPE,lastUpdateEvent,isTouchEvent,stateControllers,GestureStateManager,TouchEventType,touchEventTypeToCallbackType}=this.__closure;const currentCallback=sharedHandlersCallbacks.value;if(!currentCallback){return;}for(let i=0;i<currentCallback.length;i++){const gesture=currentCallback[i];if(event.handlerTag!==gesture.handlerTag){continue;}if(isStateChangeEvent(event)){if(event.oldState===State.UNDETERMINED&&event.state===State.BEGAN){runWorklet(CALLBACK_TYPE.BEGAN,gesture,event);}else if((event.oldState===State.BEGAN||event.oldState===State.UNDETERMINED)&&event.state===State.ACTIVE){runWorklet(CALLBACK_TYPE.START,gesture,event);lastUpdateEvent.value[gesture.handlerTag]=undefined;}else if(event.oldState!==event.state&&event.state===State.END){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,true);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,true);}else if((event.state===State.FAILED||event.state===State.CANCELLED)&&event.state!==event.oldState){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,false);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,false);}}else if(isTouchEvent(event)){if(!stateControllers[i]){stateControllers[i]=GestureStateManager.create(event.handlerTag);}if(event.eventType!==TouchEventType.UNDETERMINED){runWorklet(touchEventTypeToCallbackType(event.eventType),gesture,event,stateControllers[i]);}}else{runWorklet(CALLBACK_TYPE.UPDATE,gesture,event);if(gesture.onChange&&gesture.changeEventCalculator){var _gesture$changeEventC;runWorklet(CALLBACK_TYPE.CHANGE,gesture,(_gesture$changeEventC=gesture.changeEventCalculator)===null||_gesture$changeEventC===void 0?void 0:_gesture$changeEventC.call(gesture,event,lastUpdateEvent.value[gesture.handlerTag]));lastUpdateEvent.value[gesture.handlerTag]=event;}}}}\"\n  };\n  function useAnimatedGesture(preparedGesture, needsRebuild) {\n    if (!_reanimatedWrapper.Reanimated) {\n      return;\n    }\n\n    // Hooks are called conditionally, but the condition is whether the\n    // react-native-reanimated is installed, which shouldn't change while running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);\n\n    // not every gesture needs a state controller, init them lazily\n    var stateControllers = [];\n    var callback = function () {\n      var reactNativeGestureHandler_useAnimatedGestureTs6 = function (event) {\n        var currentCallback = sharedHandlersCallbacks.value;\n        if (!currentCallback) {\n          return;\n        }\n        for (var i = 0; i < currentCallback.length; i++) {\n          var gesture = currentCallback[i];\n          if (event.handlerTag !== gesture.handlerTag) {\n            continue;\n          }\n          if (isStateChangeEvent(event)) {\n            if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n              runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);\n            } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n              runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);\n              lastUpdateEvent.value[gesture.handlerTag] = undefined;\n            } else if (event.oldState !== event.state && event.state === _State.State.END) {\n              if (event.oldState === _State.State.ACTIVE) {\n                runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);\n              }\n              runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);\n            } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {\n              if (event.oldState === _State.State.ACTIVE) {\n                runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);\n              }\n              runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);\n            }\n          } else if (isTouchEvent(event)) {\n            if (!stateControllers[i]) {\n              stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);\n            }\n            if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {\n              runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n            }\n          } else {\n            runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);\n            if (gesture.onChange && gesture.changeEventCalculator) {\n              runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, gesture.changeEventCalculator?.(event, lastUpdateEvent.value[gesture.handlerTag]));\n              lastUpdateEvent.value[gesture.handlerTag] = event;\n            }\n          }\n        }\n      };\n      reactNativeGestureHandler_useAnimatedGestureTs6.__closure = {\n        sharedHandlersCallbacks,\n        isStateChangeEvent,\n        State: _State.State,\n        runWorklet,\n        CALLBACK_TYPE: _gesture.CALLBACK_TYPE,\n        lastUpdateEvent,\n        isTouchEvent,\n        stateControllers,\n        GestureStateManager: _gestureStateManager.GestureStateManager,\n        TouchEventType: _TouchEventType.TouchEventType,\n        touchEventTypeToCallbackType\n      };\n      reactNativeGestureHandler_useAnimatedGestureTs6.__workletHash = 10458000393606;\n      reactNativeGestureHandler_useAnimatedGestureTs6.__initData = _worklet_10458000393606_init_data;\n      return reactNativeGestureHandler_useAnimatedGestureTs6;\n    }();\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var event = _reanimatedWrapper.Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);\n    preparedGesture.animatedEventHandler = event;\n    preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n  }\n});","lineCount":205,"map":[[6,2,1,0],[6,6,1,0,"_gesture"],[6,14,1,0],[6,17,1,0,"require"],[6,24,1,0],[6,25,1,0,"_dependencyMap"],[6,39,1,0],[7,2,2,0],[7,6,2,0,"_reanimatedWrapper"],[7,24,2,0],[7,27,2,0,"require"],[7,34,2,0],[7,35,2,0,"_dependencyMap"],[7,49,2,0],[8,2,8,0],[8,6,8,0,"_gestureStateManager"],[8,26,8,0],[8,29,8,0,"require"],[8,36,8,0],[8,37,8,0,"_dependencyMap"],[8,51,8,0],[9,2,12,0],[9,6,12,0,"_State"],[9,12,12,0],[9,15,12,0,"require"],[9,22,12,0],[9,23,12,0,"_dependencyMap"],[9,37,12,0],[10,2,13,0],[10,6,13,0,"_TouchEventType"],[10,21,13,0],[10,24,13,0,"require"],[10,31,13,0],[10,32,13,0,"_dependencyMap"],[10,46,13,0],[11,2,14,0],[11,6,14,0,"_utils"],[11,12,14,0],[11,15,14,0,"require"],[11,22,14,0],[11,23,14,0,"_dependencyMap"],[11,37,14,0],[12,2,14,44],[12,6,14,44,"_worklet_2054655450554_init_data"],[12,38,14,44],[13,4,14,44,"code"],[13,8,14,44],[14,2,14,44],[15,2,14,44],[15,6,14,44,"getHandler"],[15,16,14,44],[15,19,17,0],[16,4,17,0],[16,8,17,0,"getHandler"],[16,18,17,0],[16,30,17,0,"getHandler"],[16,31,18,2,"type"],[16,35,18,21],[16,37,19,2,"gesture"],[16,44,19,52],[16,46,20,2],[17,6,22,2],[17,14,22,10,"type"],[17,18,22,14],[18,8,23,4],[18,13,23,9,"CALLBACK_TYPE"],[18,35,23,22],[18,36,23,23,"BEGAN"],[18,41,23,28],[19,10,24,6],[19,17,24,13,"gesture"],[19,24,24,20],[19,25,24,21,"onBegin"],[19,32,24,28],[20,8,25,4],[20,13,25,9,"CALLBACK_TYPE"],[20,35,25,22],[20,36,25,23,"START"],[20,41,25,28],[21,10,26,6],[21,17,26,13,"gesture"],[21,24,26,20],[21,25,26,21,"onStart"],[21,32,26,28],[22,8,27,4],[22,13,27,9,"CALLBACK_TYPE"],[22,35,27,22],[22,36,27,23,"UPDATE"],[22,42,27,29],[23,10,28,6],[23,17,28,13,"gesture"],[23,24,28,20],[23,25,28,21,"onUpdate"],[23,33,28,29],[24,8,29,4],[24,13,29,9,"CALLBACK_TYPE"],[24,35,29,22],[24,36,29,23,"CHANGE"],[24,42,29,29],[25,10,30,6],[25,17,30,13,"gesture"],[25,24,30,20],[25,25,30,21,"onChange"],[25,33,30,29],[26,8,31,4],[26,13,31,9,"CALLBACK_TYPE"],[26,35,31,22],[26,36,31,23,"END"],[26,39,31,26],[27,10,32,6],[27,17,32,13,"gesture"],[27,24,32,20],[27,25,32,21,"onEnd"],[27,30,32,26],[28,8,33,4],[28,13,33,9,"CALLBACK_TYPE"],[28,35,33,22],[28,36,33,23,"FINALIZE"],[28,44,33,31],[29,10,34,6],[29,17,34,13,"gesture"],[29,24,34,20],[29,25,34,21,"onFinalize"],[29,35,34,31],[30,8,35,4],[30,13,35,9,"CALLBACK_TYPE"],[30,35,35,22],[30,36,35,23,"TOUCHES_DOWN"],[30,48,35,35],[31,10,36,6],[31,17,36,13,"gesture"],[31,24,36,20],[31,25,36,21,"onTouchesDown"],[31,38,36,34],[32,8,37,4],[32,13,37,9,"CALLBACK_TYPE"],[32,35,37,22],[32,36,37,23,"TOUCHES_MOVE"],[32,48,37,35],[33,10,38,6],[33,17,38,13,"gesture"],[33,24,38,20],[33,25,38,21,"onTouchesMove"],[33,38,38,34],[34,8,39,4],[34,13,39,9,"CALLBACK_TYPE"],[34,35,39,22],[34,36,39,23,"TOUCHES_UP"],[34,46,39,33],[35,10,40,6],[35,17,40,13,"gesture"],[35,24,40,20],[35,25,40,21,"onTouchesUp"],[35,36,40,32],[36,8,41,4],[36,13,41,9,"CALLBACK_TYPE"],[36,35,41,22],[36,36,41,23,"TOUCHES_CANCELLED"],[36,53,41,40],[37,10,42,6],[37,17,42,13,"gesture"],[37,24,42,20],[37,25,42,21,"onTouchesCancelled"],[37,43,42,39],[38,6,43,2],[39,4,44,0],[39,5,44,1],[40,4,44,1,"getHandler"],[40,14,44,1],[40,15,44,1,"__closure"],[40,24,44,1],[41,6,44,1,"CALLBACK_TYPE"],[41,19,44,1],[41,21,18,8,"CALLBACK_TYPE"],[42,4,18,21],[43,4,18,21,"getHandler"],[43,14,18,21],[43,15,18,21,"__workletHash"],[43,28,18,21],[44,4,18,21,"getHandler"],[44,14,18,21],[44,15,18,21,"__initData"],[44,25,18,21],[44,28,18,21,"_worklet_2054655450554_init_data"],[44,60,18,21],[45,4,18,21],[45,11,18,21,"getHandler"],[45,21,18,21],[46,2,18,21],[46,3,17,0],[47,2,17,0],[47,6,17,0,"_worklet_14903447069497_init_data"],[47,39,17,0],[48,4,17,0,"code"],[48,8,17,0],[49,2,17,0],[50,2,17,0],[50,6,17,0,"touchEventTypeToCallbackType"],[50,34,17,0],[50,37,46,0],[51,4,46,0],[51,8,46,0,"touchEventTypeToCallbackType"],[51,36,46,0],[51,48,46,0,"touchEventTypeToCallbackType"],[51,49,47,2,"eventType"],[51,58,47,27],[51,60,48,17],[52,6,50,2],[52,14,50,10,"eventType"],[52,23,50,19],[53,8,51,4],[53,13,51,9,"TouchEventType"],[53,43,51,23],[53,44,51,24,"TOUCHES_DOWN"],[53,56,51,36],[54,10,52,6],[54,17,52,13,"CALLBACK_TYPE"],[54,39,52,26],[54,40,52,27,"TOUCHES_DOWN"],[54,52,52,39],[55,8,53,4],[55,13,53,9,"TouchEventType"],[55,43,53,23],[55,44,53,24,"TOUCHES_MOVE"],[55,56,53,36],[56,10,54,6],[56,17,54,13,"CALLBACK_TYPE"],[56,39,54,26],[56,40,54,27,"TOUCHES_MOVE"],[56,52,54,39],[57,8,55,4],[57,13,55,9,"TouchEventType"],[57,43,55,23],[57,44,55,24,"TOUCHES_UP"],[57,54,55,34],[58,10,56,6],[58,17,56,13,"CALLBACK_TYPE"],[58,39,56,26],[58,40,56,27,"TOUCHES_UP"],[58,50,56,37],[59,8,57,4],[59,13,57,9,"TouchEventType"],[59,43,57,23],[59,44,57,24,"TOUCHES_CANCELLED"],[59,61,57,41],[60,10,58,6],[60,17,58,13,"CALLBACK_TYPE"],[60,39,58,26],[60,40,58,27,"TOUCHES_CANCELLED"],[60,57,58,44],[61,6,59,2],[62,6,60,2],[62,13,60,9,"CALLBACK_TYPE"],[62,35,60,22],[62,36,60,23,"UNDEFINED"],[62,45,60,32],[63,4,61,0],[63,5,61,1],[64,4,61,1,"touchEventTypeToCallbackType"],[64,32,61,1],[64,33,61,1,"__closure"],[64,42,61,1],[65,6,61,1,"TouchEventType"],[65,20,61,1],[65,22,47,13,"TouchEventType"],[65,52,47,27],[66,6,47,27,"CALLBACK_TYPE"],[66,19,47,27],[66,21,48,3,"CALLBACK_TYPE"],[67,4,48,16],[68,4,48,16,"touchEventTypeToCallbackType"],[68,32,48,16],[68,33,48,16,"__workletHash"],[68,46,48,16],[69,4,48,16,"touchEventTypeToCallbackType"],[69,32,48,16],[69,33,48,16,"__initData"],[69,43,48,16],[69,46,48,16,"_worklet_14903447069497_init_data"],[69,79,48,16],[70,4,48,16],[70,11,48,16,"touchEventTypeToCallbackType"],[70,39,48,16],[71,2,48,16],[71,3,46,0],[72,2,46,0],[72,6,46,0,"_worklet_17530658687510_init_data"],[72,39,46,0],[73,4,46,0,"code"],[73,8,46,0],[74,2,46,0],[75,2,46,0],[75,6,46,0,"runWorklet"],[75,16,46,0],[75,19,63,0],[76,4,63,0],[76,8,63,0,"runWorklet"],[76,18,63,0],[76,30,63,0,"runWorklet"],[76,31,64,2,"type"],[76,35,64,21],[76,37,65,2,"gesture"],[76,44,65,52],[76,46,66,2,"event"],[76,51,66,73],[76,53,68,2],[77,6,70,2],[77,10,70,8,"handler"],[77,17,70,15],[77,20,70,18,"getHandler"],[77,30,70,28],[77,31,70,29,"type"],[77,35,70,33],[77,37,70,35,"gesture"],[77,44,70,42],[77,45,70,43],[78,6,71,2],[78,10,71,6,"gesture"],[78,17,71,13],[78,18,71,14,"isWorklet"],[78,27,71,23],[78,28,71,24,"type"],[78,32,71,28],[78,33,71,29],[78,35,71,31],[79,8,71,31],[79,17,71,31,"_len"],[79,21,71,31],[79,24,71,31,"arguments"],[79,33,71,31],[79,34,71,31,"length"],[79,40,71,31],[79,42,67,5,"args"],[79,46,67,9],[79,53,67,9,"Array"],[79,58,67,9],[79,59,67,9,"_len"],[79,63,67,9],[79,70,67,9,"_len"],[79,74,67,9],[79,85,67,9,"_key"],[79,89,67,9],[79,95,67,9,"_key"],[79,99,67,9],[79,102,67,9,"_len"],[79,106,67,9],[79,108,67,9,"_key"],[79,112,67,9],[80,10,67,5,"args"],[80,14,67,9],[80,15,67,9,"_key"],[80,19,67,9],[80,27,67,9,"arguments"],[80,36,67,9],[80,37,67,9,"_key"],[80,41,67,9],[81,8,67,9],[82,8,72,4],[83,8,73,4],[84,8,74,4,"handler"],[84,15,74,11],[84,18,74,14,"event"],[84,23,74,19],[84,25,74,21],[84,28,74,24,"args"],[84,32,74,28],[84,33,74,29],[85,6,75,2],[85,7,75,3],[85,13,75,9],[85,17,75,13,"handler"],[85,24,75,20],[85,26,75,22],[85,27,77,2],[86,4,78,0],[86,5,78,1],[87,4,78,1,"runWorklet"],[87,14,78,1],[87,15,78,1,"__closure"],[87,24,78,1],[88,6,78,1,"getHandler"],[88,16,78,1],[89,6,78,1,"tagMessage"],[89,16,78,1],[89,18,76,17,"tagMessage"],[90,4,76,27],[91,4,76,27,"runWorklet"],[91,14,76,27],[91,15,76,27,"__workletHash"],[91,28,76,27],[92,4,76,27,"runWorklet"],[92,14,76,27],[92,15,76,27,"__initData"],[92,25,76,27],[92,28,76,27,"_worklet_17530658687510_init_data"],[92,61,76,27],[93,4,76,27],[93,11,76,27,"runWorklet"],[93,21,76,27],[94,2,76,27],[94,3,63,0],[95,2,63,0],[95,6,63,0,"_worklet_1443917263962_init_data"],[95,38,63,0],[96,4,63,0,"code"],[96,8,63,0],[97,2,63,0],[98,2,63,0],[98,6,63,0,"isStateChangeEvent"],[98,24,63,0],[98,27,80,0],[99,4,80,0],[99,8,80,0,"isStateChangeEvent"],[99,26,80,0],[99,38,80,0,"isStateChangeEvent"],[99,39,81,2,"event"],[99,44,81,73],[99,46,82,36],[100,6,84,2],[101,6,85,2],[101,13,85,9,"event"],[101,18,85,14],[101,19,85,15,"oldState"],[101,27,85,23],[101,31,85,27],[101,35,85,31],[102,4,86,0],[102,5,86,1],[103,4,86,1,"isStateChangeEvent"],[103,22,86,1],[103,23,86,1,"__closure"],[103,32,86,1],[104,4,86,1,"isStateChangeEvent"],[104,22,86,1],[104,23,86,1,"__workletHash"],[104,36,86,1],[105,4,86,1,"isStateChangeEvent"],[105,22,86,1],[105,23,86,1,"__initData"],[105,33,86,1],[105,36,86,1,"_worklet_1443917263962_init_data"],[105,68,86,1],[106,4,86,1],[106,11,86,1,"isStateChangeEvent"],[106,29,86,1],[107,2,86,1],[107,3,80,0],[108,2,80,0],[108,6,80,0,"_worklet_15574765637067_init_data"],[108,39,80,0],[109,4,80,0,"code"],[109,8,80,0],[110,2,80,0],[111,2,80,0],[111,6,80,0,"isTouchEvent"],[111,18,80,0],[111,21,88,0],[112,4,88,0],[112,8,88,0,"isTouchEvent"],[112,20,88,0],[112,32,88,0,"isTouchEvent"],[112,33,89,2,"event"],[112,38,89,73],[112,40,90,30],[113,6,92,2],[113,13,92,9,"event"],[113,18,92,14],[113,19,92,15,"eventType"],[113,28,92,24],[113,32,92,28],[113,36,92,32],[114,4,93,0],[114,5,93,1],[115,4,93,1,"isTouchEvent"],[115,16,93,1],[115,17,93,1,"__closure"],[115,26,93,1],[116,4,93,1,"isTouchEvent"],[116,16,93,1],[116,17,93,1,"__workletHash"],[116,30,93,1],[117,4,93,1,"isTouchEvent"],[117,16,93,1],[117,17,93,1,"__initData"],[117,27,93,1],[117,30,93,1,"_worklet_15574765637067_init_data"],[117,63,93,1],[118,4,93,1],[118,11,93,1,"isTouchEvent"],[118,23,93,1],[119,2,93,1],[119,3,88,0],[120,2,88,0],[120,6,88,0,"_worklet_10458000393606_init_data"],[120,39,88,0],[121,4,88,0,"code"],[121,8,88,0],[122,2,88,0],[123,2,95,7],[123,11,95,16,"useAnimatedGesture"],[123,29,95,34,"useAnimatedGesture"],[123,30,96,2,"preparedGesture"],[123,45,96,39],[123,47,97,2,"needsRebuild"],[123,59,97,23],[123,61,98,2],[124,4,99,2],[124,8,99,6],[124,9,99,7,"Reanimated"],[124,38,99,17],[124,40,99,19],[125,6,100,4],[126,4,101,2],[128,4,103,2],[129,4,104,2],[130,4,105,2],[131,4,106,2],[131,8,106,8,"sharedHandlersCallbacks"],[131,31,106,31],[131,34,106,34,"Reanimated"],[131,63,106,44],[131,64,106,45,"useSharedValue"],[131,78,106,59],[131,79,108,4],[131,83,108,8],[131,84,108,9],[133,4,110,2],[134,4,111,2],[134,8,111,8,"lastUpdateEvent"],[134,23,111,23],[134,26,111,26,"Reanimated"],[134,55,111,36],[134,56,111,37,"useSharedValue"],[134,70,111,51],[134,71,113,4],[134,73,113,6],[134,74,113,7],[136,4,115,2],[137,4,116,2],[137,8,116,8,"stateControllers"],[137,24,116,51],[137,27,116,54],[137,29,116,56],[138,4,118,2],[138,8,118,8,"callback"],[138,16,118,16],[138,19,118,19],[139,6,118,19],[139,10,118,19,"reactNativeGestureHandler_useAnimatedGestureTs6"],[139,57,118,19],[139,69,118,19,"reactNativeGestureHandler_useAnimatedGestureTs6"],[139,70,119,4,"event"],[139,75,119,75],[139,77,120,7],[140,8,123,4],[140,12,123,10,"currentCallback"],[140,27,123,25],[140,30,123,28,"sharedHandlersCallbacks"],[140,53,123,51],[140,54,123,52,"value"],[140,59,123,57],[141,8,124,4],[141,12,124,8],[141,13,124,9,"currentCallback"],[141,28,124,24],[141,30,124,26],[142,10,125,6],[143,8,126,4],[144,8,128,4],[144,13,128,9],[144,17,128,13,"i"],[144,18,128,14],[144,21,128,17],[144,22,128,18],[144,24,128,20,"i"],[144,25,128,21],[144,28,128,24,"currentCallback"],[144,43,128,39],[144,44,128,40,"length"],[144,50,128,46],[144,52,128,48,"i"],[144,53,128,49],[144,55,128,51],[144,57,128,53],[145,10,129,6],[145,14,129,12,"gesture"],[145,21,129,19],[145,24,129,22,"currentCallback"],[145,39,129,37],[145,40,129,38,"i"],[145,41,129,39],[145,42,129,40],[146,10,131,6],[146,14,131,10,"event"],[146,19,131,15],[146,20,131,16,"handlerTag"],[146,30,131,26],[146,35,131,31,"gesture"],[146,42,131,38],[146,43,131,39,"handlerTag"],[146,53,131,49],[146,55,131,51],[147,12,132,8],[148,10,133,6],[149,10,135,6],[149,14,135,10,"isStateChangeEvent"],[149,32,135,28],[149,33,135,29,"event"],[149,38,135,34],[149,39,135,35],[149,41,135,37],[150,12,136,8],[150,16,137,10,"event"],[150,21,137,15],[150,22,137,16,"oldState"],[150,30,137,24],[150,35,137,29,"State"],[150,47,137,34],[150,48,137,35,"UNDETERMINED"],[150,60,137,47],[150,64,138,10,"event"],[150,69,138,15],[150,70,138,16,"state"],[150,75,138,21],[150,80,138,26,"State"],[150,92,138,31],[150,93,138,32,"BEGAN"],[150,98,138,37],[150,100,139,10],[151,14,140,10,"runWorklet"],[151,24,140,20],[151,25,140,21,"CALLBACK_TYPE"],[151,47,140,34],[151,48,140,35,"BEGAN"],[151,53,140,40],[151,55,140,42,"gesture"],[151,62,140,49],[151,64,140,51,"event"],[151,69,140,56],[151,70,140,57],[152,12,141,8],[152,13,141,9],[152,19,141,15],[152,23,142,10],[152,24,142,11,"event"],[152,29,142,16],[152,30,142,17,"oldState"],[152,38,142,25],[152,43,142,30,"State"],[152,55,142,35],[152,56,142,36,"BEGAN"],[152,61,142,41],[152,65,143,12,"event"],[152,70,143,17],[152,71,143,18,"oldState"],[152,79,143,26],[152,84,143,31,"State"],[152,96,143,36],[152,97,143,37,"UNDETERMINED"],[152,109,143,49],[152,114,144,10,"event"],[152,119,144,15],[152,120,144,16,"state"],[152,125,144,21],[152,130,144,26,"State"],[152,142,144,31],[152,143,144,32,"ACTIVE"],[152,149,144,38],[152,151,145,10],[153,14,146,10,"runWorklet"],[153,24,146,20],[153,25,146,21,"CALLBACK_TYPE"],[153,47,146,34],[153,48,146,35,"START"],[153,53,146,40],[153,55,146,42,"gesture"],[153,62,146,49],[153,64,146,51,"event"],[153,69,146,56],[153,70,146,57],[154,14,147,10,"lastUpdateEvent"],[154,29,147,25],[154,30,147,26,"value"],[154,35,147,31],[154,36,147,32,"gesture"],[154,43,147,39],[154,44,147,40,"handlerTag"],[154,54,147,50],[154,55,147,51],[154,58,147,54,"undefined"],[154,67,147,63],[155,12,148,8],[155,13,148,9],[155,19,148,15],[155,23,149,10,"event"],[155,28,149,15],[155,29,149,16,"oldState"],[155,37,149,24],[155,42,149,29,"event"],[155,47,149,34],[155,48,149,35,"state"],[155,53,149,40],[155,57,150,10,"event"],[155,62,150,15],[155,63,150,16,"state"],[155,68,150,21],[155,73,150,26,"State"],[155,85,150,31],[155,86,150,32,"END"],[155,89,150,35],[155,91,151,10],[156,14,152,10],[156,18,152,14,"event"],[156,23,152,19],[156,24,152,20,"oldState"],[156,32,152,28],[156,37,152,33,"State"],[156,49,152,38],[156,50,152,39,"ACTIVE"],[156,56,152,45],[156,58,152,47],[157,16,153,12,"runWorklet"],[157,26,153,22],[157,27,153,23,"CALLBACK_TYPE"],[157,49,153,36],[157,50,153,37,"END"],[157,53,153,40],[157,55,153,42,"gesture"],[157,62,153,49],[157,64,153,51,"event"],[157,69,153,56],[157,71,153,58],[157,75,153,62],[157,76,153,63],[158,14,154,10],[159,14,155,10,"runWorklet"],[159,24,155,20],[159,25,155,21,"CALLBACK_TYPE"],[159,47,155,34],[159,48,155,35,"FINALIZE"],[159,56,155,43],[159,58,155,45,"gesture"],[159,65,155,52],[159,67,155,54,"event"],[159,72,155,59],[159,74,155,61],[159,78,155,65],[159,79,155,66],[160,12,156,8],[160,13,156,9],[160,19,156,15],[160,23,157,10],[160,24,157,11,"event"],[160,29,157,16],[160,30,157,17,"state"],[160,35,157,22],[160,40,157,27,"State"],[160,52,157,32],[160,53,157,33,"FAILED"],[160,59,157,39],[160,63,157,43,"event"],[160,68,157,48],[160,69,157,49,"state"],[160,74,157,54],[160,79,157,59,"State"],[160,91,157,64],[160,92,157,65,"CANCELLED"],[160,101,157,74],[160,106,158,10,"event"],[160,111,158,15],[160,112,158,16,"state"],[160,117,158,21],[160,122,158,26,"event"],[160,127,158,31],[160,128,158,32,"oldState"],[160,136,158,40],[160,138,159,10],[161,14,160,10],[161,18,160,14,"event"],[161,23,160,19],[161,24,160,20,"oldState"],[161,32,160,28],[161,37,160,33,"State"],[161,49,160,38],[161,50,160,39,"ACTIVE"],[161,56,160,45],[161,58,160,47],[162,16,161,12,"runWorklet"],[162,26,161,22],[162,27,161,23,"CALLBACK_TYPE"],[162,49,161,36],[162,50,161,37,"END"],[162,53,161,40],[162,55,161,42,"gesture"],[162,62,161,49],[162,64,161,51,"event"],[162,69,161,56],[162,71,161,58],[162,76,161,63],[162,77,161,64],[163,14,162,10],[164,14,163,10,"runWorklet"],[164,24,163,20],[164,25,163,21,"CALLBACK_TYPE"],[164,47,163,34],[164,48,163,35,"FINALIZE"],[164,56,163,43],[164,58,163,45,"gesture"],[164,65,163,52],[164,67,163,54,"event"],[164,72,163,59],[164,74,163,61],[164,79,163,66],[164,80,163,67],[165,12,164,8],[166,10,165,6],[166,11,165,7],[166,17,165,13],[166,21,165,17,"isTouchEvent"],[166,33,165,29],[166,34,165,30,"event"],[166,39,165,35],[166,40,165,36],[166,42,165,38],[167,12,166,8],[167,16,166,12],[167,17,166,13,"stateControllers"],[167,33,166,29],[167,34,166,30,"i"],[167,35,166,31],[167,36,166,32],[167,38,166,34],[168,14,167,10,"stateControllers"],[168,30,167,26],[168,31,167,27,"i"],[168,32,167,28],[168,33,167,29],[168,36,167,32,"GestureStateManager"],[168,76,167,51],[168,77,167,52,"create"],[168,83,167,58],[168,84,167,59,"event"],[168,89,167,64],[168,90,167,65,"handlerTag"],[168,100,167,75],[168,101,167,76],[169,12,168,8],[170,12,170,8],[170,16,170,12,"event"],[170,21,170,17],[170,22,170,18,"eventType"],[170,31,170,27],[170,36,170,32,"TouchEventType"],[170,66,170,46],[170,67,170,47,"UNDETERMINED"],[170,79,170,59],[170,81,170,61],[171,14,171,10,"runWorklet"],[171,24,171,20],[171,25,172,12,"touchEventTypeToCallbackType"],[171,53,172,40],[171,54,172,41,"event"],[171,59,172,46],[171,60,172,47,"eventType"],[171,69,172,56],[171,70,172,57],[171,72,173,12,"gesture"],[171,79,173,19],[171,81,174,12,"event"],[171,86,174,17],[171,88,175,12,"stateControllers"],[171,104,175,28],[171,105,175,29,"i"],[171,106,175,30],[171,107,176,10],[171,108,176,11],[172,12,177,8],[173,10,178,6],[173,11,178,7],[173,17,178,13],[174,12,179,8,"runWorklet"],[174,22,179,18],[174,23,179,19,"CALLBACK_TYPE"],[174,45,179,32],[174,46,179,33,"UPDATE"],[174,52,179,39],[174,54,179,41,"gesture"],[174,61,179,48],[174,63,179,50,"event"],[174,68,179,55],[174,69,179,56],[175,12,181,8],[175,16,181,12,"gesture"],[175,23,181,19],[175,24,181,20,"onChange"],[175,32,181,28],[175,36,181,32,"gesture"],[175,43,181,39],[175,44,181,40,"changeEventCalculator"],[175,65,181,61],[175,67,181,63],[176,14,182,10,"runWorklet"],[176,24,182,20],[176,25,183,12,"CALLBACK_TYPE"],[176,47,183,25],[176,48,183,26,"CHANGE"],[176,54,183,32],[176,56,184,12,"gesture"],[176,63,184,19],[176,65,185,12,"gesture"],[176,72,185,19],[176,73,185,20,"changeEventCalculator"],[176,94,185,41],[176,97,186,14,"event"],[176,102,186,19],[176,104,187,14,"lastUpdateEvent"],[176,119,187,29],[176,120,187,30,"value"],[176,125,187,35],[176,126,187,36,"gesture"],[176,133,187,43],[176,134,187,44,"handlerTag"],[176,144,187,54],[176,145,188,12],[176,146,189,10],[176,147,189,11],[177,14,191,10,"lastUpdateEvent"],[177,29,191,25],[177,30,191,26,"value"],[177,35,191,31],[177,36,191,32,"gesture"],[177,43,191,39],[177,44,191,40,"handlerTag"],[177,54,191,50],[177,55,191,51],[177,58,191,54,"event"],[177,63,191,59],[178,12,192,8],[179,10,193,6],[180,8,194,4],[181,6,195,2],[181,7,195,3],[182,6,195,3,"reactNativeGestureHandler_useAnimatedGestureTs6"],[182,53,195,3],[182,54,195,3,"__closure"],[182,63,195,3],[183,8,195,3,"sharedHandlersCallbacks"],[183,31,195,3],[184,8,195,3,"isStateChangeEvent"],[184,26,195,3],[185,8,195,3,"State"],[185,13,195,3],[185,15,137,29,"State"],[185,27,137,34],[186,8,137,34,"runWorklet"],[186,18,137,34],[187,8,137,34,"CALLBACK_TYPE"],[187,21,137,34],[187,23,140,21,"CALLBACK_TYPE"],[187,45,140,34],[188,8,140,34,"lastUpdateEvent"],[188,23,140,34],[189,8,140,34,"isTouchEvent"],[189,20,140,34],[190,8,140,34,"stateControllers"],[190,24,140,34],[191,8,140,34,"GestureStateManager"],[191,27,140,34],[191,29,167,32,"GestureStateManager"],[191,69,167,51],[192,8,167,51,"TouchEventType"],[192,22,167,51],[192,24,170,32,"TouchEventType"],[192,54,170,46],[193,8,170,46,"touchEventTypeToCallbackType"],[194,6,170,46],[195,6,170,46,"reactNativeGestureHandler_useAnimatedGestureTs6"],[195,53,170,46],[195,54,170,46,"__workletHash"],[195,67,170,46],[196,6,170,46,"reactNativeGestureHandler_useAnimatedGestureTs6"],[196,53,170,46],[196,54,170,46,"__initData"],[196,64,170,46],[196,67,170,46,"_worklet_10458000393606_init_data"],[196,100,170,46],[197,6,170,46],[197,13,170,46,"reactNativeGestureHandler_useAnimatedGestureTs6"],[197,60,170,46],[198,4,170,46],[198,5,118,19],[198,7,195,3],[200,4,197,2],[201,4,198,2],[201,8,198,8,"event"],[201,13,198,13],[201,16,198,16,"Reanimated"],[201,45,198,26],[201,46,198,27,"useEvent"],[201,54,198,35],[201,55,199,4,"callback"],[201,63,199,12],[201,65,200,4],[201,66,200,5],[201,95,200,34],[201,97,200,36],[201,120,200,59],[201,121,200,60],[201,123,201,4,"needsRebuild"],[201,135,202,2],[201,136,202,3],[202,4,204,2,"preparedGesture"],[202,19,204,17],[202,20,204,18,"animatedEventHandler"],[202,40,204,38],[202,43,204,41,"event"],[202,48,204,46],[203,4,205,2,"preparedGesture"],[203,19,205,17],[203,20,205,18,"animatedHandlers"],[203,36,205,34],[203,39,205,37,"sharedHandlersCallbacks"],[203,62,205,60],[204,2,206,0],[205,0,206,1],[205,3]],"functionMap":{"names":["<global>","getHandler","touchEventTypeToCallbackType","runWorklet","isStateChangeEvent","isTouchEvent","useAnimatedGesture","callback"],"mappings":"AAA;ACgB;CD2B;AEE;CFe;AGE;CHe;AIE;CJM;AKE;CLK;OME;mBCuB;GD6E;CNW"}},"type":"js/module"}]}