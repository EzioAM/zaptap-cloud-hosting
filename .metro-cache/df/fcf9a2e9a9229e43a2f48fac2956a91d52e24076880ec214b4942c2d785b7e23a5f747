{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"]}},{"name":"./PostgrestFilterBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":49,"index":265},"end":{"line":6,"column":84,"index":300}}],"key":"NGvdEkdD+wH/sBHVGxr/LfyZvLA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _toConsumableArray = require(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\");\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var PostgrestFilterBuilder_1 = __importDefault(require(_dependencyMap[3], \"./PostgrestFilterBuilder\"));\n  var PostgrestQueryBuilder = /*#__PURE__*/function () {\n    function PostgrestQueryBuilder(url, _ref) {\n      var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n      _classCallCheck(this, PostgrestQueryBuilder);\n      this.url = url;\n      this.headers = headers;\n      this.schema = schema;\n      this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    return _createClass(PostgrestQueryBuilder, [{\n      key: \"select\",\n      value: function select(columns) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          count = _ref2.count;\n        var method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(function (c) {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n          this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method: method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform an INSERT into the table or view.\n       *\n       * By default, inserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to insert. Pass an object to insert a single row\n       * or an array to insert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count inserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. Only applies for bulk\n       * inserts.\n       */\n    }, {\n      key: \"insert\",\n      value: function insert(values) {\n        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref3.count,\n          _ref3$defaultToNull = _ref3.defaultToNull,\n          defaultToNull = _ref3$defaultToNull === void 0 ? true : _ref3$defaultToNull;\n        var method = 'POST';\n        var prefersHeaders = [];\n        if (this.headers['Prefer']) {\n          prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n          prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n          var columns = values.reduce(function (acc, x) {\n            return acc.concat(Object.keys(x));\n          }, []);\n          if (columns.length > 0) {\n            var uniqueColumns = _toConsumableArray(new Set(columns)).map(function (column) {\n              return `\"${column}\"`;\n            });\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method: method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform an UPSERT on the table or view. Depending on the column(s) passed\n       * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n       * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n       * exist, or if it does exist, perform an alternative action depending on\n       * `ignoreDuplicates`.\n       *\n       * By default, upserted rows are not returned. To return it, chain the call\n       * with `.select()`.\n       *\n       * @param values - The values to upsert with. Pass an object to upsert a\n       * single row or an array to upsert multiple rows.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n       * duplicate rows are determined. Two rows are duplicates if all the\n       * `onConflict` columns are equal.\n       *\n       * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n       * `false`, duplicate rows are merged with existing rows.\n       *\n       * @param options.count - Count algorithm to use to count upserted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       *\n       * @param options.defaultToNull - Make missing fields default to `null`.\n       * Otherwise, use the default value for the column. This only applies when\n       * inserting new rows, not when merging with existing rows under\n       * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n       */\n    }, {\n      key: \"upsert\",\n      value: function upsert(values) {\n        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate,\n          count = _ref4.count,\n          _ref4$defaultToNull = _ref4.defaultToNull,\n          defaultToNull = _ref4$defaultToNull === void 0 ? true : _ref4$defaultToNull;\n        var method = 'POST';\n        var prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n        if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n        if (this.headers['Prefer']) {\n          prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n          prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n          var columns = values.reduce(function (acc, x) {\n            return acc.concat(Object.keys(x));\n          }, []);\n          if (columns.length > 0) {\n            var uniqueColumns = _toConsumableArray(new Set(columns)).map(function (column) {\n              return `\"${column}\"`;\n            });\n            this.url.searchParams.set('columns', uniqueColumns.join(','));\n          }\n        }\n        return new PostgrestFilterBuilder_1.default({\n          method: method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform an UPDATE on the table or view.\n       *\n       * By default, updated rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param values - The values to update with\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count updated rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"update\",\n      value: function update(values) {\n        var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref5.count;\n        var method = 'PATCH';\n        var prefersHeaders = [];\n        if (this.headers['Prefer']) {\n          prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n          method: method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          body: values,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n      /**\n       * Perform a DELETE on the table or view.\n       *\n       * By default, deleted rows are not returned. To return it, chain the call\n       * with `.select()` after filters.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.count - Count algorithm to use to count deleted rows.\n       *\n       * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n       * hood.\n       *\n       * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n       * statistics under the hood.\n       *\n       * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n       * numbers.\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete() {\n        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          count = _ref6.count;\n        var method = 'DELETE';\n        var prefersHeaders = [];\n        if (count) {\n          prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n          prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n          method: method,\n          url: this.url,\n          headers: this.headers,\n          schema: this.schema,\n          fetch: this.fetch,\n          allowEmpty: false\n        });\n      }\n    }]);\n  }();\n  exports.default = PostgrestQueryBuilder;\n});","lineCount":319,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"require"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[7,2,2,0],[7,6,2,4,"__importDefault"],[7,21,2,19],[7,24,2,23],[7,28,2,27],[7,32,2,31],[7,36,2,35],[7,37,2,36,"__importDefault"],[7,52,2,51],[7,56,2,56],[7,66,2,66,"mod"],[7,69,2,69],[7,71,2,71],[8,4,3,4],[8,11,3,12,"mod"],[8,14,3,15],[8,18,3,19,"mod"],[8,21,3,22],[8,22,3,23,"__esModule"],[8,32,3,33],[8,35,3,37,"mod"],[8,38,3,40],[8,41,3,43],[9,6,3,45],[9,15,3,54],[9,17,3,56,"mod"],[10,4,3,60],[10,5,3,61],[11,2,4,0],[11,3,4,1],[12,2,5,0,"Object"],[12,8,5,6],[12,9,5,7,"defineProperty"],[12,23,5,21],[12,24,5,22,"exports"],[12,31,5,29],[12,33,5,31],[12,45,5,43],[12,47,5,45],[13,4,5,47,"value"],[13,9,5,52],[13,11,5,54],[14,2,5,59],[14,3,5,60],[14,4,5,61],[15,2,6,0],[15,6,6,6,"PostgrestFilterBuilder_1"],[15,30,6,30],[15,33,6,33,"__importDefault"],[15,48,6,48],[15,49,6,49,"require"],[15,56,6,56],[15,57,6,56,"_dependencyMap"],[15,71,6,56],[15,102,6,83],[15,103,6,84],[15,104,6,85],[16,2,6,86],[16,6,7,6,"PostgrestQueryBuilder"],[16,27,7,27],[17,4,8,4],[17,13,8,4,"PostgrestQueryBuilder"],[17,35,8,16,"url"],[17,38,8,19],[17,40,8,19,"_ref"],[17,44,8,19],[17,46,8,55],[18,6,8,55],[18,10,8,55,"_ref$headers"],[18,22,8,55],[18,25,8,55,"_ref"],[18,29,8,55],[18,30,8,23,"headers"],[18,37,8,30],[19,8,8,23,"headers"],[19,15,8,30],[19,18,8,30,"_ref$headers"],[19,30,8,30],[19,44,8,33],[19,45,8,34],[19,46,8,35],[19,49,8,35,"_ref$headers"],[19,61,8,35],[20,8,8,37,"schema"],[20,14,8,43],[20,17,8,43,"_ref"],[20,21,8,43],[20,22,8,37,"schema"],[20,28,8,43],[21,8,8,45,"fetch"],[21,13,8,50],[21,16,8,50,"_ref"],[21,20,8,50],[21,21,8,45,"fetch"],[21,26,8,50],[22,6,8,50,"_classCallCheck"],[22,21,8,50],[22,28,8,50,"PostgrestQueryBuilder"],[22,49,8,50],[23,6,9,8],[23,10,9,12],[23,11,9,13,"url"],[23,14,9,16],[23,17,9,19,"url"],[23,20,9,22],[24,6,10,8],[24,10,10,12],[24,11,10,13,"headers"],[24,18,10,20],[24,21,10,23,"headers"],[24,28,10,30],[25,6,11,8],[25,10,11,12],[25,11,11,13,"schema"],[25,17,11,19],[25,20,11,22,"schema"],[25,26,11,28],[26,6,12,8],[26,10,12,12],[26,11,12,13,"fetch"],[26,16,12,18],[26,19,12,21,"fetch"],[26,24,12,26],[27,4,13,4],[28,4,14,4],[29,0,15,0],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,0,20,0],[35,0,21,0],[36,0,22,0],[37,0,23,0],[38,0,24,0],[39,0,25,0],[40,0,26,0],[41,0,27,0],[42,0,28,0],[43,0,29,0],[44,0,30,0],[45,0,31,0],[46,0,32,0],[47,0,33,0],[48,0,34,0],[49,4,14,4],[49,11,14,4,"_createClass"],[49,23,14,4],[49,24,14,4,"PostgrestQueryBuilder"],[49,45,14,4],[50,6,14,4,"key"],[50,9,14,4],[51,6,14,4,"value"],[51,11,14,4],[51,13,35,4],[51,22,35,4,"select"],[51,28,35,10,"select"],[51,29,35,11,"columns"],[51,36,35,18],[51,38,35,51],[52,8,35,51],[52,12,35,51,"_ref2"],[52,17,35,51],[52,20,35,51,"arguments"],[52,29,35,51],[52,30,35,51,"length"],[52,36,35,51],[52,44,35,51,"arguments"],[52,53,35,51],[52,61,35,51,"undefined"],[52,70,35,51],[52,73,35,51,"arguments"],[52,82,35,51],[52,88,35,47],[52,89,35,48],[52,90,35,49],[53,10,35,49,"_ref2$head"],[53,20,35,49],[53,23,35,49,"_ref2"],[53,28,35,49],[53,29,35,22,"head"],[53,33,35,26],[54,10,35,22,"head"],[54,14,35,26],[54,17,35,26,"_ref2$head"],[54,27,35,26],[54,41,35,29],[54,46,35,34],[54,49,35,34,"_ref2$head"],[54,59,35,34],[55,10,35,36,"count"],[55,15,35,41],[55,18,35,41,"_ref2"],[55,23,35,41],[55,24,35,36,"count"],[55,29,35,41],[56,8,36,8],[56,12,36,14,"method"],[56,18,36,20],[56,21,36,23,"head"],[56,25,36,27],[56,28,36,30],[56,34,36,36],[56,37,36,39],[56,42,36,44],[57,8,37,8],[58,8,38,8],[58,12,38,12,"quoted"],[58,18,38,18],[58,21,38,21],[58,26,38,26],[59,8,39,8],[59,12,39,14,"cleanedColumns"],[59,26,39,28],[59,29,39,31],[59,30,39,32,"columns"],[59,37,39,39],[59,42,39,44],[59,46,39,48],[59,50,39,52,"columns"],[59,57,39,59],[59,62,39,64],[59,67,39,69],[59,68,39,70],[59,71,39,73,"columns"],[59,78,39,80],[59,81,39,83],[59,84,39,86],[59,86,40,13,"split"],[59,91,40,18],[59,92,40,19],[59,94,40,21],[59,95,40,22],[59,96,41,13,"map"],[59,99,41,16],[59,100,41,17],[59,110,41,18,"c"],[59,111,41,19],[59,113,41,24],[60,10,42,12],[60,14,42,16],[60,18,42,20],[60,19,42,21,"test"],[60,23,42,25],[60,24,42,26,"c"],[60,25,42,27],[60,26,42,28],[60,30,42,32],[60,31,42,33,"quoted"],[60,37,42,39],[60,39,42,41],[61,12,43,16],[61,19,43,23],[61,21,43,25],[62,10,44,12],[63,10,45,12],[63,14,45,16,"c"],[63,15,45,17],[63,20,45,22],[63,23,45,25],[63,25,45,27],[64,12,46,16,"quoted"],[64,18,46,22],[64,21,46,25],[64,22,46,26,"quoted"],[64,28,46,32],[65,10,47,12],[66,10,48,12],[66,17,48,19,"c"],[66,18,48,20],[67,8,49,8],[67,9,49,9],[67,10,49,10],[67,11,50,13,"join"],[67,15,50,17],[67,16,50,18],[67,18,50,20],[67,19,50,21],[68,8,51,8],[68,12,51,12],[68,13,51,13,"url"],[68,16,51,16],[68,17,51,17,"searchParams"],[68,29,51,29],[68,30,51,30,"set"],[68,33,51,33],[68,34,51,34],[68,42,51,42],[68,44,51,44,"cleanedColumns"],[68,58,51,58],[68,59,51,59],[69,8,52,8],[69,12,52,12,"count"],[69,17,52,17],[69,19,52,19],[70,10,53,12],[70,14,53,16],[70,15,53,17,"headers"],[70,22,53,24],[70,23,53,25],[70,31,53,33],[70,32,53,34],[70,35,53,37],[70,44,53,46,"count"],[70,49,53,51],[70,51,53,53],[71,8,54,8],[72,8,55,8],[72,15,55,15],[72,19,55,19,"PostgrestFilterBuilder_1"],[72,43,55,43],[72,44,55,44,"default"],[72,51,55,51],[72,52,55,52],[73,10,56,12,"method"],[73,16,56,18],[73,18,56,12,"method"],[73,24,56,18],[74,10,57,12,"url"],[74,13,57,15],[74,15,57,17],[74,19,57,21],[74,20,57,22,"url"],[74,23,57,25],[75,10,58,12,"headers"],[75,17,58,19],[75,19,58,21],[75,23,58,25],[75,24,58,26,"headers"],[75,31,58,33],[76,10,59,12,"schema"],[76,16,59,18],[76,18,59,20],[76,22,59,24],[76,23,59,25,"schema"],[76,29,59,31],[77,10,60,12,"fetch"],[77,15,60,17],[77,17,60,19],[77,21,60,23],[77,22,60,24,"fetch"],[77,27,60,29],[78,10,61,12,"allowEmpty"],[78,20,61,22],[78,22,61,24],[79,8,62,8],[79,9,62,9],[79,10,62,10],[80,6,63,4],[81,6,64,4],[82,0,65,0],[83,0,66,0],[84,0,67,0],[85,0,68,0],[86,0,69,0],[87,0,70,0],[88,0,71,0],[89,0,72,0],[90,0,73,0],[91,0,74,0],[92,0,75,0],[93,0,76,0],[94,0,77,0],[95,0,78,0],[96,0,79,0],[97,0,80,0],[98,0,81,0],[99,0,82,0],[100,0,83,0],[101,0,84,0],[102,0,85,0],[103,0,86,0],[104,0,87,0],[105,0,88,0],[106,0,89,0],[107,4,64,4],[108,6,64,4,"key"],[108,9,64,4],[109,6,64,4,"value"],[109,11,64,4],[109,13,90,4],[109,22,90,4,"insert"],[109,28,90,10,"insert"],[109,29,90,11,"values"],[109,35,90,17],[109,37,90,58],[110,8,90,58],[110,12,90,58,"_ref3"],[110,17,90,58],[110,20,90,58,"arguments"],[110,29,90,58],[110,30,90,58,"length"],[110,36,90,58],[110,44,90,58,"arguments"],[110,53,90,58],[110,61,90,58,"undefined"],[110,70,90,58],[110,73,90,58,"arguments"],[110,82,90,58],[110,88,90,54],[110,89,90,55],[110,90,90,56],[111,10,90,21,"count"],[111,15,90,26],[111,18,90,26,"_ref3"],[111,23,90,26],[111,24,90,21,"count"],[111,29,90,26],[112,10,90,26,"_ref3$defaultToNull"],[112,29,90,26],[112,32,90,26,"_ref3"],[112,37,90,26],[112,38,90,28,"defaultToNull"],[112,51,90,41],[113,10,90,28,"defaultToNull"],[113,23,90,41],[113,26,90,41,"_ref3$defaultToNull"],[113,45,90,41],[113,59,90,44],[113,63,90,48],[113,66,90,48,"_ref3$defaultToNull"],[113,85,90,48],[114,8,91,8],[114,12,91,14,"method"],[114,18,91,20],[114,21,91,23],[114,27,91,29],[115,8,92,8],[115,12,92,14,"prefersHeaders"],[115,26,92,28],[115,29,92,31],[115,31,92,33],[116,8,93,8],[116,12,93,12],[116,16,93,16],[116,17,93,17,"headers"],[116,24,93,24],[116,25,93,25],[116,33,93,33],[116,34,93,34],[116,36,93,36],[117,10,94,12,"prefersHeaders"],[117,24,94,26],[117,25,94,27,"push"],[117,29,94,31],[117,30,94,32],[117,34,94,36],[117,35,94,37,"headers"],[117,42,94,44],[117,43,94,45],[117,51,94,53],[117,52,94,54],[117,53,94,55],[118,8,95,8],[119,8,96,8],[119,12,96,12,"count"],[119,17,96,17],[119,19,96,19],[120,10,97,12,"prefersHeaders"],[120,24,97,26],[120,25,97,27,"push"],[120,29,97,31],[120,30,97,32],[120,39,97,41,"count"],[120,44,97,46],[120,46,97,48],[120,47,97,49],[121,8,98,8],[122,8,99,8],[122,12,99,12],[122,13,99,13,"defaultToNull"],[122,26,99,26],[122,28,99,28],[123,10,100,12,"prefersHeaders"],[123,24,100,26],[123,25,100,27,"push"],[123,29,100,31],[123,30,100,32],[123,47,100,49],[123,48,100,50],[124,8,101,8],[125,8,102,8],[125,12,102,12],[125,13,102,13,"headers"],[125,20,102,20],[125,21,102,21],[125,29,102,29],[125,30,102,30],[125,33,102,33,"prefersHeaders"],[125,47,102,47],[125,48,102,48,"join"],[125,52,102,52],[125,53,102,53],[125,56,102,56],[125,57,102,57],[126,8,103,8],[126,12,103,12,"Array"],[126,17,103,17],[126,18,103,18,"isArray"],[126,25,103,25],[126,26,103,26,"values"],[126,32,103,32],[126,33,103,33],[126,35,103,35],[127,10,104,12],[127,14,104,18,"columns"],[127,21,104,25],[127,24,104,28,"values"],[127,30,104,34],[127,31,104,35,"reduce"],[127,37,104,41],[127,38,104,42],[127,48,104,43,"acc"],[127,51,104,46],[127,53,104,48,"x"],[127,54,104,49],[128,12,104,49],[128,19,104,54,"acc"],[128,22,104,57],[128,23,104,58,"concat"],[128,29,104,64],[128,30,104,65,"Object"],[128,36,104,71],[128,37,104,72,"keys"],[128,41,104,76],[128,42,104,77,"x"],[128,43,104,78],[128,44,104,79],[128,45,104,80],[129,10,104,80],[129,13,104,82],[129,15,104,84],[129,16,104,85],[130,10,105,12],[130,14,105,16,"columns"],[130,21,105,23],[130,22,105,24,"length"],[130,28,105,30],[130,31,105,33],[130,32,105,34],[130,34,105,36],[131,12,106,16],[131,16,106,22,"uniqueColumns"],[131,29,106,35],[131,32,106,38,"_toConsumableArray"],[131,50,106,38],[131,51,106,42],[131,55,106,46,"Set"],[131,58,106,49],[131,59,106,50,"columns"],[131,66,106,57],[131,67,106,58],[131,69,106,60,"map"],[131,72,106,63],[131,73,106,64],[131,83,106,65,"column"],[131,89,106,71],[132,14,106,71],[132,21,106,76],[132,25,106,80,"column"],[132,31,106,86],[132,34,106,89],[133,12,106,89],[133,14,106,90],[134,12,107,16],[134,16,107,20],[134,17,107,21,"url"],[134,20,107,24],[134,21,107,25,"searchParams"],[134,33,107,37],[134,34,107,38,"set"],[134,37,107,41],[134,38,107,42],[134,47,107,51],[134,49,107,53,"uniqueColumns"],[134,62,107,66],[134,63,107,67,"join"],[134,67,107,71],[134,68,107,72],[134,71,107,75],[134,72,107,76],[134,73,107,77],[135,10,108,12],[136,8,109,8],[137,8,110,8],[137,15,110,15],[137,19,110,19,"PostgrestFilterBuilder_1"],[137,43,110,43],[137,44,110,44,"default"],[137,51,110,51],[137,52,110,52],[138,10,111,12,"method"],[138,16,111,18],[138,18,111,12,"method"],[138,24,111,18],[139,10,112,12,"url"],[139,13,112,15],[139,15,112,17],[139,19,112,21],[139,20,112,22,"url"],[139,23,112,25],[140,10,113,12,"headers"],[140,17,113,19],[140,19,113,21],[140,23,113,25],[140,24,113,26,"headers"],[140,31,113,33],[141,10,114,12,"schema"],[141,16,114,18],[141,18,114,20],[141,22,114,24],[141,23,114,25,"schema"],[141,29,114,31],[142,10,115,12,"body"],[142,14,115,16],[142,16,115,18,"values"],[142,22,115,24],[143,10,116,12,"fetch"],[143,15,116,17],[143,17,116,19],[143,21,116,23],[143,22,116,24,"fetch"],[143,27,116,29],[144,10,117,12,"allowEmpty"],[144,20,117,22],[144,22,117,24],[145,8,118,8],[145,9,118,9],[145,10,118,10],[146,6,119,4],[147,6,120,4],[148,0,121,0],[149,0,122,0],[150,0,123,0],[151,0,124,0],[152,0,125,0],[153,0,126,0],[154,0,127,0],[155,0,128,0],[156,0,129,0],[157,0,130,0],[158,0,131,0],[159,0,132,0],[160,0,133,0],[161,0,134,0],[162,0,135,0],[163,0,136,0],[164,0,137,0],[165,0,138,0],[166,0,139,0],[167,0,140,0],[168,0,141,0],[169,0,142,0],[170,0,143,0],[171,0,144,0],[172,0,145,0],[173,0,146,0],[174,0,147,0],[175,0,148,0],[176,0,149,0],[177,0,150,0],[178,0,151,0],[179,0,152,0],[180,0,153,0],[181,0,154,0],[182,0,155,0],[183,0,156,0],[184,0,157,0],[185,4,120,4],[186,6,120,4,"key"],[186,9,120,4],[187,6,120,4,"value"],[187,11,120,4],[187,13,158,4],[187,22,158,4,"upsert"],[187,28,158,10,"upsert"],[187,29,158,11,"values"],[187,35,158,17],[187,37,158,96],[188,8,158,96],[188,12,158,96,"_ref4"],[188,17,158,96],[188,20,158,96,"arguments"],[188,29,158,96],[188,30,158,96,"length"],[188,36,158,96],[188,44,158,96,"arguments"],[188,53,158,96],[188,61,158,96,"undefined"],[188,70,158,96],[188,73,158,96,"arguments"],[188,82,158,96],[188,88,158,92],[188,89,158,93],[188,90,158,94],[189,10,158,21,"onConflict"],[189,20,158,31],[189,23,158,31,"_ref4"],[189,28,158,31],[189,29,158,21,"onConflict"],[189,39,158,31],[190,10,158,31,"_ref4$ignoreDuplicate"],[190,31,158,31],[190,34,158,31,"_ref4"],[190,39,158,31],[190,40,158,33,"ignoreDuplicates"],[190,56,158,49],[191,10,158,33,"ignoreDuplicates"],[191,26,158,49],[191,29,158,49,"_ref4$ignoreDuplicate"],[191,50,158,49],[191,64,158,52],[191,69,158,57],[191,72,158,57,"_ref4$ignoreDuplicate"],[191,93,158,57],[192,10,158,59,"count"],[192,15,158,64],[192,18,158,64,"_ref4"],[192,23,158,64],[192,24,158,59,"count"],[192,29,158,64],[193,10,158,64,"_ref4$defaultToNull"],[193,29,158,64],[193,32,158,64,"_ref4"],[193,37,158,64],[193,38,158,66,"defaultToNull"],[193,51,158,79],[194,10,158,66,"defaultToNull"],[194,23,158,79],[194,26,158,79,"_ref4$defaultToNull"],[194,45,158,79],[194,59,158,82],[194,63,158,86],[194,66,158,86,"_ref4$defaultToNull"],[194,85,158,86],[195,8,159,8],[195,12,159,14,"method"],[195,18,159,20],[195,21,159,23],[195,27,159,29],[196,8,160,8],[196,12,160,14,"prefersHeaders"],[196,26,160,28],[196,29,160,31],[196,30,160,32],[196,44,160,46,"ignoreDuplicates"],[196,60,160,62],[196,63,160,65],[196,71,160,73],[196,74,160,76],[196,81,160,83],[196,94,160,96],[196,95,160,97],[197,8,161,8],[197,12,161,12,"onConflict"],[197,22,161,22],[197,27,161,27,"undefined"],[197,36,161,36],[197,38,162,12],[197,42,162,16],[197,43,162,17,"url"],[197,46,162,20],[197,47,162,21,"searchParams"],[197,59,162,33],[197,60,162,34,"set"],[197,63,162,37],[197,64,162,38],[197,77,162,51],[197,79,162,53,"onConflict"],[197,89,162,63],[197,90,162,64],[198,8,163,8],[198,12,163,12],[198,16,163,16],[198,17,163,17,"headers"],[198,24,163,24],[198,25,163,25],[198,33,163,33],[198,34,163,34],[198,36,163,36],[199,10,164,12,"prefersHeaders"],[199,24,164,26],[199,25,164,27,"push"],[199,29,164,31],[199,30,164,32],[199,34,164,36],[199,35,164,37,"headers"],[199,42,164,44],[199,43,164,45],[199,51,164,53],[199,52,164,54],[199,53,164,55],[200,8,165,8],[201,8,166,8],[201,12,166,12,"count"],[201,17,166,17],[201,19,166,19],[202,10,167,12,"prefersHeaders"],[202,24,167,26],[202,25,167,27,"push"],[202,29,167,31],[202,30,167,32],[202,39,167,41,"count"],[202,44,167,46],[202,46,167,48],[202,47,167,49],[203,8,168,8],[204,8,169,8],[204,12,169,12],[204,13,169,13,"defaultToNull"],[204,26,169,26],[204,28,169,28],[205,10,170,12,"prefersHeaders"],[205,24,170,26],[205,25,170,27,"push"],[205,29,170,31],[205,30,170,32],[205,47,170,49],[205,48,170,50],[206,8,171,8],[207,8,172,8],[207,12,172,12],[207,13,172,13,"headers"],[207,20,172,20],[207,21,172,21],[207,29,172,29],[207,30,172,30],[207,33,172,33,"prefersHeaders"],[207,47,172,47],[207,48,172,48,"join"],[207,52,172,52],[207,53,172,53],[207,56,172,56],[207,57,172,57],[208,8,173,8],[208,12,173,12,"Array"],[208,17,173,17],[208,18,173,18,"isArray"],[208,25,173,25],[208,26,173,26,"values"],[208,32,173,32],[208,33,173,33],[208,35,173,35],[209,10,174,12],[209,14,174,18,"columns"],[209,21,174,25],[209,24,174,28,"values"],[209,30,174,34],[209,31,174,35,"reduce"],[209,37,174,41],[209,38,174,42],[209,48,174,43,"acc"],[209,51,174,46],[209,53,174,48,"x"],[209,54,174,49],[210,12,174,49],[210,19,174,54,"acc"],[210,22,174,57],[210,23,174,58,"concat"],[210,29,174,64],[210,30,174,65,"Object"],[210,36,174,71],[210,37,174,72,"keys"],[210,41,174,76],[210,42,174,77,"x"],[210,43,174,78],[210,44,174,79],[210,45,174,80],[211,10,174,80],[211,13,174,82],[211,15,174,84],[211,16,174,85],[212,10,175,12],[212,14,175,16,"columns"],[212,21,175,23],[212,22,175,24,"length"],[212,28,175,30],[212,31,175,33],[212,32,175,34],[212,34,175,36],[213,12,176,16],[213,16,176,22,"uniqueColumns"],[213,29,176,35],[213,32,176,38,"_toConsumableArray"],[213,50,176,38],[213,51,176,42],[213,55,176,46,"Set"],[213,58,176,49],[213,59,176,50,"columns"],[213,66,176,57],[213,67,176,58],[213,69,176,60,"map"],[213,72,176,63],[213,73,176,64],[213,83,176,65,"column"],[213,89,176,71],[214,14,176,71],[214,21,176,76],[214,25,176,80,"column"],[214,31,176,86],[214,34,176,89],[215,12,176,89],[215,14,176,90],[216,12,177,16],[216,16,177,20],[216,17,177,21,"url"],[216,20,177,24],[216,21,177,25,"searchParams"],[216,33,177,37],[216,34,177,38,"set"],[216,37,177,41],[216,38,177,42],[216,47,177,51],[216,49,177,53,"uniqueColumns"],[216,62,177,66],[216,63,177,67,"join"],[216,67,177,71],[216,68,177,72],[216,71,177,75],[216,72,177,76],[216,73,177,77],[217,10,178,12],[218,8,179,8],[219,8,180,8],[219,15,180,15],[219,19,180,19,"PostgrestFilterBuilder_1"],[219,43,180,43],[219,44,180,44,"default"],[219,51,180,51],[219,52,180,52],[220,10,181,12,"method"],[220,16,181,18],[220,18,181,12,"method"],[220,24,181,18],[221,10,182,12,"url"],[221,13,182,15],[221,15,182,17],[221,19,182,21],[221,20,182,22,"url"],[221,23,182,25],[222,10,183,12,"headers"],[222,17,183,19],[222,19,183,21],[222,23,183,25],[222,24,183,26,"headers"],[222,31,183,33],[223,10,184,12,"schema"],[223,16,184,18],[223,18,184,20],[223,22,184,24],[223,23,184,25,"schema"],[223,29,184,31],[224,10,185,12,"body"],[224,14,185,16],[224,16,185,18,"values"],[224,22,185,24],[225,10,186,12,"fetch"],[225,15,186,17],[225,17,186,19],[225,21,186,23],[225,22,186,24,"fetch"],[225,27,186,29],[226,10,187,12,"allowEmpty"],[226,20,187,22],[226,22,187,24],[227,8,188,8],[227,9,188,9],[227,10,188,10],[228,6,189,4],[229,6,190,4],[230,0,191,0],[231,0,192,0],[232,0,193,0],[233,0,194,0],[234,0,195,0],[235,0,196,0],[236,0,197,0],[237,0,198,0],[238,0,199,0],[239,0,200,0],[240,0,201,0],[241,0,202,0],[242,0,203,0],[243,0,204,0],[244,0,205,0],[245,0,206,0],[246,0,207,0],[247,0,208,0],[248,0,209,0],[249,0,210,0],[250,4,190,4],[251,6,190,4,"key"],[251,9,190,4],[252,6,190,4,"value"],[252,11,190,4],[252,13,211,4],[252,22,211,4,"update"],[252,28,211,10,"update"],[252,29,211,11,"values"],[252,35,211,17],[252,37,211,36],[253,8,211,36],[253,12,211,36,"_ref5"],[253,17,211,36],[253,20,211,36,"arguments"],[253,29,211,36],[253,30,211,36,"length"],[253,36,211,36],[253,44,211,36,"arguments"],[253,53,211,36],[253,61,211,36,"undefined"],[253,70,211,36],[253,73,211,36,"arguments"],[253,82,211,36],[253,88,211,32],[253,89,211,33],[253,90,211,34],[254,10,211,21,"count"],[254,15,211,26],[254,18,211,26,"_ref5"],[254,23,211,26],[254,24,211,21,"count"],[254,29,211,26],[255,8,212,8],[255,12,212,14,"method"],[255,18,212,20],[255,21,212,23],[255,28,212,30],[256,8,213,8],[256,12,213,14,"prefersHeaders"],[256,26,213,28],[256,29,213,31],[256,31,213,33],[257,8,214,8],[257,12,214,12],[257,16,214,16],[257,17,214,17,"headers"],[257,24,214,24],[257,25,214,25],[257,33,214,33],[257,34,214,34],[257,36,214,36],[258,10,215,12,"prefersHeaders"],[258,24,215,26],[258,25,215,27,"push"],[258,29,215,31],[258,30,215,32],[258,34,215,36],[258,35,215,37,"headers"],[258,42,215,44],[258,43,215,45],[258,51,215,53],[258,52,215,54],[258,53,215,55],[259,8,216,8],[260,8,217,8],[260,12,217,12,"count"],[260,17,217,17],[260,19,217,19],[261,10,218,12,"prefersHeaders"],[261,24,218,26],[261,25,218,27,"push"],[261,29,218,31],[261,30,218,32],[261,39,218,41,"count"],[261,44,218,46],[261,46,218,48],[261,47,218,49],[262,8,219,8],[263,8,220,8],[263,12,220,12],[263,13,220,13,"headers"],[263,20,220,20],[263,21,220,21],[263,29,220,29],[263,30,220,30],[263,33,220,33,"prefersHeaders"],[263,47,220,47],[263,48,220,48,"join"],[263,52,220,52],[263,53,220,53],[263,56,220,56],[263,57,220,57],[264,8,221,8],[264,15,221,15],[264,19,221,19,"PostgrestFilterBuilder_1"],[264,43,221,43],[264,44,221,44,"default"],[264,51,221,51],[264,52,221,52],[265,10,222,12,"method"],[265,16,222,18],[265,18,222,12,"method"],[265,24,222,18],[266,10,223,12,"url"],[266,13,223,15],[266,15,223,17],[266,19,223,21],[266,20,223,22,"url"],[266,23,223,25],[267,10,224,12,"headers"],[267,17,224,19],[267,19,224,21],[267,23,224,25],[267,24,224,26,"headers"],[267,31,224,33],[268,10,225,12,"schema"],[268,16,225,18],[268,18,225,20],[268,22,225,24],[268,23,225,25,"schema"],[268,29,225,31],[269,10,226,12,"body"],[269,14,226,16],[269,16,226,18,"values"],[269,22,226,24],[270,10,227,12,"fetch"],[270,15,227,17],[270,17,227,19],[270,21,227,23],[270,22,227,24,"fetch"],[270,27,227,29],[271,10,228,12,"allowEmpty"],[271,20,228,22],[271,22,228,24],[272,8,229,8],[272,9,229,9],[272,10,229,10],[273,6,230,4],[274,6,231,4],[275,0,232,0],[276,0,233,0],[277,0,234,0],[278,0,235,0],[279,0,236,0],[280,0,237,0],[281,0,238,0],[282,0,239,0],[283,0,240,0],[284,0,241,0],[285,0,242,0],[286,0,243,0],[287,0,244,0],[288,0,245,0],[289,0,246,0],[290,0,247,0],[291,0,248,0],[292,0,249,0],[293,4,231,4],[294,6,231,4,"key"],[294,9,231,4],[295,6,231,4,"value"],[295,11,231,4],[295,13,250,4],[295,22,250,4,"delete"],[295,29,250,10,"delete"],[295,30,250,10],[295,32,250,28],[296,8,250,28],[296,12,250,28,"_ref6"],[296,17,250,28],[296,20,250,28,"arguments"],[296,29,250,28],[296,30,250,28,"length"],[296,36,250,28],[296,44,250,28,"arguments"],[296,53,250,28],[296,61,250,28,"undefined"],[296,70,250,28],[296,73,250,28,"arguments"],[296,82,250,28],[296,88,250,24],[296,89,250,25],[296,90,250,26],[297,10,250,13,"count"],[297,15,250,18],[297,18,250,18,"_ref6"],[297,23,250,18],[297,24,250,13,"count"],[297,29,250,18],[298,8,251,8],[298,12,251,14,"method"],[298,18,251,20],[298,21,251,23],[298,29,251,31],[299,8,252,8],[299,12,252,14,"prefersHeaders"],[299,26,252,28],[299,29,252,31],[299,31,252,33],[300,8,253,8],[300,12,253,12,"count"],[300,17,253,17],[300,19,253,19],[301,10,254,12,"prefersHeaders"],[301,24,254,26],[301,25,254,27,"push"],[301,29,254,31],[301,30,254,32],[301,39,254,41,"count"],[301,44,254,46],[301,46,254,48],[301,47,254,49],[302,8,255,8],[303,8,256,8],[303,12,256,12],[303,16,256,16],[303,17,256,17,"headers"],[303,24,256,24],[303,25,256,25],[303,33,256,33],[303,34,256,34],[303,36,256,36],[304,10,257,12,"prefersHeaders"],[304,24,257,26],[304,25,257,27,"unshift"],[304,32,257,34],[304,33,257,35],[304,37,257,39],[304,38,257,40,"headers"],[304,45,257,47],[304,46,257,48],[304,54,257,56],[304,55,257,57],[304,56,257,58],[305,8,258,8],[306,8,259,8],[306,12,259,12],[306,13,259,13,"headers"],[306,20,259,20],[306,21,259,21],[306,29,259,29],[306,30,259,30],[306,33,259,33,"prefersHeaders"],[306,47,259,47],[306,48,259,48,"join"],[306,52,259,52],[306,53,259,53],[306,56,259,56],[306,57,259,57],[307,8,260,8],[307,15,260,15],[307,19,260,19,"PostgrestFilterBuilder_1"],[307,43,260,43],[307,44,260,44,"default"],[307,51,260,51],[307,52,260,52],[308,10,261,12,"method"],[308,16,261,18],[308,18,261,12,"method"],[308,24,261,18],[309,10,262,12,"url"],[309,13,262,15],[309,15,262,17],[309,19,262,21],[309,20,262,22,"url"],[309,23,262,25],[310,10,263,12,"headers"],[310,17,263,19],[310,19,263,21],[310,23,263,25],[310,24,263,26,"headers"],[310,31,263,33],[311,10,264,12,"schema"],[311,16,264,18],[311,18,264,20],[311,22,264,24],[311,23,264,25,"schema"],[311,29,264,31],[312,10,265,12,"fetch"],[312,15,265,17],[312,17,265,19],[312,21,265,23],[312,22,265,24,"fetch"],[312,27,265,29],[313,10,266,12,"allowEmpty"],[313,20,266,22],[313,22,266,24],[314,8,267,8],[314,9,267,9],[314,10,267,10],[315,6,268,4],[316,4,268,5],[317,2,268,5],[318,2,270,0,"exports"],[318,9,270,7],[318,10,270,8,"default"],[318,17,270,15],[318,20,270,18,"PostgrestQueryBuilder"],[318,41,270,39],[319,0,270,40],[319,3]],"functionMap":{"names":["<global>","<anonymous>","PostgrestQueryBuilder","constructor","select","split.map$argument_0","insert","values.reduce$argument_0","map$argument_0","upsert","update","_delete"],"mappings":"AAA;wDCC;CDE;AEG;ICC;KDK;IEsB;iBCM;SDQ;KFc;II2B;0CCc,sCD;gEEE,yBF;KJa;IOuC;0CFgB,sCE;gEDE,yBC;KPa;IQsB;KRmB;ISoB;KTkB;CFC"}},"type":"js/module"}]}