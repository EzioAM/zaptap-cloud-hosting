{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":50,"index":50}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./NotificationsEmitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":51},"end":{"line":2,"column":156,"index":207}}],"key":"Qab5cB8LewiAQY57MV0vxh0VKT8=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = useLastNotificationResponse;\n  exports.determineNextResponse = void 0;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _react = require(_dependencyMap[2], \"react\");\n  var _NotificationsEmitter = require(_dependencyMap[3], \"./NotificationsEmitter\");\n  /**\n   * A React hook which returns the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * To clear the last notification response, use [`clearLastNotificationResponseAsync()`](#notificationsclearlastnotificationresponseasync).\n   *\n   * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n   *\n   * @return The hook may return one of these three types/values:\n   * - `undefined` - until we're sure of what to return,\n   * - `null` - if no notification response has been received yet,\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n   *\n   * @example\n   * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n   * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n   * ```jsx\n   * import * as Notifications from 'expo-notifications';\n   * import { Linking } from 'react-native';\n   *\n   * export default function App() {\n   *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n   *   React.useEffect(() => {\n   *     if (\n   *       lastNotificationResponse &&\n   *       lastNotificationResponse.notification.request.content.data.url &&\n   *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n   *     ) {\n   *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n   *     }\n   *   }, [lastNotificationResponse]);\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function useLastNotificationResponse() {\n    var _useState = (0, _react.useState)(undefined),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      lastNotificationResponse = _useState2[0],\n      setLastNotificationResponse = _useState2[1];\n    // useLayoutEffect ensures the listener is registered as soon as possible\n    (0, _react.useLayoutEffect)(function () {\n      var isMounted = true;\n      // Get the last response first, in case it was set earlier (even in native code on startup)\n      (0, _NotificationsEmitter.getLastNotificationResponseAsync)().then(function (response) {\n        if (isMounted) {\n          setLastNotificationResponse(function (prevResponse) {\n            return determineNextResponse(prevResponse, response);\n          });\n        }\n      });\n      // Set up listener for responses that come in, and set the last response if needed\n      var subscription = (0, _NotificationsEmitter.addNotificationResponseReceivedListener)(function (response) {\n        return setLastNotificationResponse(function (prevResponse) {\n          return determineNextResponse(prevResponse, response);\n        });\n      });\n      var clearResponseSubscription = (0, _NotificationsEmitter.addNotificationResponseClearedListener)(function () {\n        setLastNotificationResponse(null);\n      });\n      return function () {\n        isMounted = false;\n        subscription.remove();\n        clearResponseSubscription.remove();\n      };\n    }, []);\n    return lastNotificationResponse;\n  }\n  // returns the new response if it is different from the previous,\n  // also has to return undefined until we're sure of what to return (null or a response)\n  // the transition from response to null is invalid\n  var determineNextResponse = exports.determineNextResponse = function determineNextResponse(prevResponse, newResponse) {\n    if (!newResponse) {\n      return null;\n    }\n    if (!prevResponse) {\n      return newResponse;\n    }\n    return prevResponse.notification.request.identifier !== newResponse.notification.request.identifier ? newResponse : prevResponse;\n  };\n});","lineCount":94,"map":[[9,2,1,0],[9,6,1,0,"_react"],[9,12,1,0],[9,15,1,0,"require"],[9,22,1,0],[9,23,1,0,"_dependencyMap"],[9,37,1,0],[10,2,2,0],[10,6,2,0,"_NotificationsEmitter"],[10,27,2,0],[10,30,2,0,"require"],[10,37,2,0],[10,38,2,0,"_dependencyMap"],[10,52,2,0],[11,2,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[16,0,8,0],[17,0,9,0],[18,0,10,0],[19,0,11,0],[20,0,12,0],[21,0,13,0],[22,0,14,0],[23,0,15,0],[24,0,16,0],[25,0,17,0],[26,0,18,0],[27,0,19,0],[28,0,20,0],[29,0,21,0],[30,0,22,0],[31,0,23,0],[32,0,24,0],[33,0,25,0],[34,0,26,0],[35,0,27,0],[36,0,28,0],[37,0,29,0],[38,0,30,0],[39,0,31,0],[40,0,32,0],[41,0,33,0],[42,0,34,0],[43,0,35,0],[44,0,36,0],[45,0,37,0],[46,0,38,0],[47,0,39,0],[48,0,40,0],[49,2,41,15],[49,11,41,24,"useLastNotificationResponse"],[49,38,41,51,"useLastNotificationResponse"],[49,39,41,51],[49,41,41,54],[50,4,42,4],[50,8,42,4,"_useState"],[50,17,42,4],[50,20,42,68],[50,24,42,68,"useState"],[50,39,42,76],[50,41,42,77,"undefined"],[50,50,42,86],[50,51,42,87],[51,6,42,87,"_useState2"],[51,16,42,87],[51,23,42,87,"_slicedToArray2"],[51,38,42,87],[51,39,42,87,"default"],[51,46,42,87],[51,48,42,87,"_useState"],[51,57,42,87],[52,6,42,11,"lastNotificationResponse"],[52,30,42,35],[52,33,42,35,"_useState2"],[52,43,42,35],[53,6,42,37,"setLastNotificationResponse"],[53,33,42,64],[53,36,42,64,"_useState2"],[53,46,42,64],[54,4,43,4],[55,4,44,4],[55,8,44,4,"useLayoutEffect"],[55,30,44,19],[55,32,44,20],[55,44,44,26],[56,6,45,8],[56,10,45,12,"isMounted"],[56,19,45,21],[56,22,45,24],[56,26,45,28],[57,6,46,8],[58,6,47,8],[58,10,47,8,"getLastNotificationResponseAsync"],[58,64,47,40],[58,66,47,41],[58,67,47,42],[58,68,47,43,"then"],[58,72,47,47],[58,73,47,48],[58,83,47,49,"response"],[58,91,47,57],[58,93,47,62],[59,8,48,12],[59,12,48,16,"isMounted"],[59,21,48,25],[59,23,48,27],[60,10,49,16,"setLastNotificationResponse"],[60,37,49,43],[60,38,49,44],[60,48,49,45,"prevResponse"],[60,60,49,57],[61,12,49,57],[61,19,49,62,"determineNextResponse"],[61,40,49,83],[61,41,49,84,"prevResponse"],[61,53,49,96],[61,55,49,98,"response"],[61,63,49,106],[61,64,49,107],[62,10,49,107],[62,12,49,108],[63,8,50,12],[64,6,51,8],[64,7,51,9],[64,8,51,10],[65,6,52,8],[66,6,53,8],[66,10,53,14,"subscription"],[66,22,53,26],[66,25,53,29],[66,29,53,29,"addNotificationResponseReceivedListener"],[66,90,53,68],[66,92,53,69],[66,102,53,70,"response"],[66,110,53,78],[67,8,53,78],[67,15,53,83,"setLastNotificationResponse"],[67,42,53,110],[67,43,53,111],[67,53,53,112,"prevResponse"],[67,65,53,124],[68,10,53,124],[68,17,53,129,"determineNextResponse"],[68,38,53,150],[68,39,53,151,"prevResponse"],[68,51,53,163],[68,53,53,165,"response"],[68,61,53,173],[68,62,53,174],[69,8,53,174],[69,10,53,175],[70,6,53,175],[70,8,53,176],[71,6,54,8],[71,10,54,14,"clearResponseSubscription"],[71,35,54,39],[71,38,54,42],[71,42,54,42,"addNotificationResponseClearedListener"],[71,102,54,80],[71,104,54,81],[71,116,54,87],[72,8,55,12,"setLastNotificationResponse"],[72,35,55,39],[72,36,55,40],[72,40,55,44],[72,41,55,45],[73,6,56,8],[73,7,56,9],[73,8,56,10],[74,6,57,8],[74,13,57,15],[74,25,57,21],[75,8,58,12,"isMounted"],[75,17,58,21],[75,20,58,24],[75,25,58,29],[76,8,59,12,"subscription"],[76,20,59,24],[76,21,59,25,"remove"],[76,27,59,31],[76,28,59,32],[76,29,59,33],[77,8,60,12,"clearResponseSubscription"],[77,33,60,37],[77,34,60,38,"remove"],[77,40,60,44],[77,41,60,45],[77,42,60,46],[78,6,61,8],[78,7,61,9],[79,4,62,4],[79,5,62,5],[79,7,62,7],[79,9,62,9],[79,10,62,10],[80,4,63,4],[80,11,63,11,"lastNotificationResponse"],[80,35,63,35],[81,2,64,0],[82,2,65,0],[83,2,66,0],[84,2,67,0],[85,2,68,7],[85,6,68,13,"determineNextResponse"],[85,27,68,34],[85,30,68,34,"exports"],[85,37,68,34],[85,38,68,34,"determineNextResponse"],[85,59,68,34],[85,62,68,37],[85,71,68,13,"determineNextResponse"],[85,92,68,34,"determineNextResponse"],[85,93,68,38,"prevResponse"],[85,105,68,50],[85,107,68,52,"newResponse"],[85,118,68,63],[85,120,68,68],[86,4,69,4],[86,8,69,8],[86,9,69,9,"newResponse"],[86,20,69,20],[86,22,69,22],[87,6,70,8],[87,13,70,15],[87,17,70,19],[88,4,71,4],[89,4,72,4],[89,8,72,8],[89,9,72,9,"prevResponse"],[89,21,72,21],[89,23,72,23],[90,6,73,8],[90,13,73,15,"newResponse"],[90,24,73,26],[91,4,74,4],[92,4,75,4],[92,11,75,11,"prevResponse"],[92,23,75,23],[92,24,75,24,"notification"],[92,36,75,36],[92,37,75,37,"request"],[92,44,75,44],[92,45,75,45,"identifier"],[92,55,75,55],[92,60,76,8,"newResponse"],[92,71,76,19],[92,72,76,20,"notification"],[92,84,76,32],[92,85,76,33,"request"],[92,92,76,40],[92,93,76,41,"identifier"],[92,103,76,51],[92,106,77,10,"newResponse"],[92,117,77,21],[92,120,78,10,"prevResponse"],[92,132,78,22],[93,2,79,0],[93,3,79,1],[94,0,79,2],[94,3]],"functionMap":{"names":["<global>","useLastNotificationResponse","useLayoutEffect$argument_0","getLastNotificationResponseAsync.then$argument_0","setLastNotificationResponse$argument_0","addNotificationResponseReceivedListener$argument_0","addNotificationResponseClearedListener$argument_0","<anonymous>","determineNextResponse"],"mappings":"AAA;eCwC;oBCG;gDCG;4CCE,+DD;SDE;qEGE,0CD,+DC,CH;iFIC;SJE;eKC;SLI;KDC;CDE;qCQI;CRW"}},"type":"js/module"}]}