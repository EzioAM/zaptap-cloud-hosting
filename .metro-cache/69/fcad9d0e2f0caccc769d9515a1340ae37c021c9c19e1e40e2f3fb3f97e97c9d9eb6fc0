{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"]}},{"name":"@reduxjs/toolkit/query/react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":190},"end":{"line":8,"column":57,"index":247}}],"key":"H8aYsQNJt9rS0BKlqltpEbUG6zo=","exportNames":["*"]}},{"name":"../../services/supabase/client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":248},"end":{"line":9,"column":58,"index":306}}],"key":"a99TehitYkPR4mct+ady0jxcI4I=","exportNames":["*"]}},{"name":"./baseApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":385},"end":{"line":11,"column":88,"index":473}}],"key":"Wui0qMW8IIbr/oMETWG4Kn9SQn8=","exportNames":["*"]}},{"name":"./networkAwareApi","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":474},"end":{"line":12,"column":67,"index":541}}],"key":"yZiskhRl151rW3KlB6s0s+CxO0c=","exportNames":["*"]}},{"name":"../../utils/EventLogger","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":542},"end":{"line":13,"column":54,"index":596}}],"key":"mEVtTU9mTkJ75ffab8N2nK/i6dk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0]);\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useUpdateAutomationMutation = exports.useUnlikeAutomationMutation = exports.useTrackAutomationDownloadMutation = exports.useLikeAutomationMutation = exports.useGetUserStatsQuery = exports.useGetTrendingAutomationsQuery = exports.useGetRecentExecutionsQuery = exports.useGetPublicAutomationsQuery = exports.useGetMyAutomationsQuery = exports.useGetExecutionHistoryQuery = exports.useGetAutomationQuery = exports.useGetAutomationExecutionsQuery = exports.useDeleteAutomationMutation = exports.useCreateAutomationMutation = exports.useCloneAutomationMutation = exports.useClearHistoryMutation = exports.automationApi = undefined;\n  var _asyncToGenerator2 = _interopRequireDefault(require(_dependencyMap[1]));\n  var _react = require(_dependencyMap[2]);\n  var _client = require(_dependencyMap[3]);\n  var _baseApi = require(_dependencyMap[4]);\n  var _networkAwareApi = require(_dependencyMap[5]);\n  var _EventLogger = require(_dependencyMap[6]);\n  /**\n   * Automation API - Unified and Optimized\n   * \n   * This module provides consistent API endpoints for automation management\n   * with proper error handling, caching, and authentication.\n   */\n\n  /**\n   * Enhanced automation API with unified configuration\n   */\n  var automationApi = exports.automationApi = (0, _react.createApi)({\n    reducerPath: 'automationApi',\n    ..._baseApi.baseApiConfig,\n    tagTypes: ['Automation', 'User', 'Execution'],\n    endpoints: builder => ({\n      // ===== AUTOMATION MANAGEMENT =====\n\n      /**\n       * Get user's automations with proper error handling\n       */\n      getMyAutomations: builder.query({\n        queryFn: function () {\n          var _ref2 = (0, _asyncToGenerator2.default)(function* (_, _ref) {\n            var signal = _ref.signal;\n            try {\n              var _yield$supabase$auth$ = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$.data.user;\n              if (!user) {\n                return {\n                  data: []\n                };\n              }\n              var _yield$supabase$from$ = yield _client.supabase.from('automations').select('*').eq('created_by', user.id).order('created_at', {\n                  ascending: false\n                }).abortSignal(signal),\n                data = _yield$supabase$from$.data,\n                error = _yield$supabase$from$.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching user automations:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch automations',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: data || []\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch user automations:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch automations'\n                }\n              };\n            }\n          });\n          return function queryFn(_x, _x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }(),\n        providesTags: result => result ? [...result.map(_ref3 => {\n          var id = _ref3.id;\n          return {\n            type: 'Automation',\n            id\n          };\n        }), {\n          type: 'Automation',\n          id: 'LIST'\n        }] : [{\n          type: 'Automation',\n          id: 'LIST'\n        }]\n      }),\n      /**\n       * Get single automation by ID\n       */\n      getAutomation: builder.query({\n        queryFn: function () {\n          var _ref5 = (0, _asyncToGenerator2.default)(function* (id, _ref4) {\n            var signal = _ref4.signal;\n            try {\n              // Validate ID parameter before making request\n              if (!id || typeof id !== 'string') {\n                _EventLogger.EventLogger.error('API', 'Invalid automation ID provided:', id);\n                return {\n                  error: {\n                    status: 'INVALID_REQUEST',\n                    message: 'Invalid automation ID provided',\n                    code: 'INVALID_PARAMS'\n                  }\n                };\n              }\n\n              // Check for string literals that shouldn't be passed as UUIDs\n              if (id === 'undefined' || id === 'null' || id === '') {\n                _EventLogger.EventLogger.error('API', 'Invalid automation ID value:', id);\n                return {\n                  error: {\n                    status: 'INVALID_REQUEST',\n                    message: `Invalid automation ID: \"${id}\"`,\n                    code: 'INVALID_UUID'\n                  }\n                };\n              }\n\n              // Validate UUID format (optional but recommended for better error handling)\n              var uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n              if (!uuidRegex.test(id)) {\n                _EventLogger.EventLogger.error('API', 'Invalid UUID format:', id);\n                return {\n                  error: {\n                    status: 'INVALID_REQUEST',\n                    message: `Invalid UUID format: ${id}`,\n                    code: 'INVALID_UUID_FORMAT'\n                  }\n                };\n              }\n              var _yield$supabase$from$2 = yield _client.supabase.from('automations').select('*').eq('id', id).single().abortSignal(signal),\n                data = _yield$supabase$from$2.data,\n                error = _yield$supabase$from$2.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching automation:', error);\n                return {\n                  error: {\n                    status: error.code === 'PGRST116' ? 'NOT_FOUND' : 'FETCH_ERROR',\n                    message: error.code === 'PGRST116' ? 'Automation not found' : error.message,\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch automation:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch automation'\n                }\n              };\n            }\n          });\n          return function queryFn(_x3, _x4) {\n            return _ref5.apply(this, arguments);\n          };\n        }(),\n        providesTags: (result, error, id) => [{\n          type: 'Automation',\n          id\n        }]\n      }),\n      /**\n       * Get public automations for gallery\n       */\n      getPublicAutomations: builder.query({\n        queryFn: function () {\n          var _ref8 = (0, _asyncToGenerator2.default)(function* (_ref6, _ref7) {\n            var _ref6$limit = _ref6.limit,\n              limit = _ref6$limit === undefined ? 50 : _ref6$limit;\n            var signal = _ref7.signal;\n            try {\n              // Use network-aware wrapper to prevent calls when offline\n              var data = yield (0, _networkAwareApi.networkAwareQuery)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n                var _yield$supabase$from$3 = yield _client.supabase.from('automations').select('*').eq('is_public', true).order('created_at', {\n                    ascending: false\n                  }).limit(limit).abortSignal(signal),\n                  data = _yield$supabase$from$3.data,\n                  error = _yield$supabase$from$3.error;\n                if (error) {\n                  (0, _networkAwareApi.logApiError)(error, 'getPublicAutomations');\n                  throw error;\n                }\n                return data || [];\n              }), {\n                offlineData: [] // Return empty array when offline\n              });\n              return {\n                data\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n\n              // Check if it's an offline error\n              if (error.status === 'OFFLINE' || error.code === 'NETWORK_OFFLINE') {\n                return {\n                  data: []\n                }; // Return empty data instead of error for offline\n              }\n              (0, _networkAwareApi.logApiError)(error, 'getPublicAutomations');\n              return {\n                error: {\n                  status: error.status || 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch public automations',\n                  code: error.code\n                }\n              };\n            }\n          });\n          return function queryFn(_x5, _x6) {\n            return _ref8.apply(this, arguments);\n          };\n        }(),\n        providesTags: [{\n          type: 'Automation',\n          id: 'PUBLIC'\n        }]\n      }),\n      /**\n       * Create new automation\n       */\n      createAutomation: builder.mutation({\n        queryFn: function () {\n          var _ref0 = (0, _asyncToGenerator2.default)(function* (automation) {\n            try {\n              var _yield$supabase$auth$2 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$2.data.user;\n              if (!user) {\n                return {\n                  error: {\n                    status: 'UNAUTHORIZED',\n                    message: 'Not authenticated'\n                  }\n                };\n              }\n              var automationToInsert = {\n                title: automation.title || 'Untitled Automation',\n                description: automation.description || 'Created with builder',\n                steps: automation.steps || [],\n                created_by: user.id,\n                category: automation.category || 'Productivity',\n                is_public: automation.is_public || false,\n                tags: automation.tags || ['custom']\n              };\n              var _yield$supabase$from$4 = yield _client.supabase.from('automations').insert(automationToInsert).select().single(),\n                data = _yield$supabase$from$4.data,\n                error = _yield$supabase$from$4.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error creating automation:', error);\n                return {\n                  error: {\n                    status: 'CREATE_ERROR',\n                    message: error.message || 'Failed to create automation',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to create automation:', error);\n              return {\n                error: {\n                  status: 'CREATE_ERROR',\n                  message: error.message || 'Failed to create automation'\n                }\n              };\n            }\n          });\n          return function queryFn(_x7) {\n            return _ref0.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: [{\n          type: 'Automation',\n          id: 'LIST'\n        }, {\n          type: 'User',\n          id: 'STATS'\n        }]\n      }),\n      /**\n       * Update automation\n       */\n      updateAutomation: builder.mutation({\n        queryFn: function () {\n          var _ref10 = (0, _asyncToGenerator2.default)(function* (_ref1) {\n            var id = _ref1.id,\n              updates = _ref1.updates;\n            try {\n              // Validate ID parameter\n              if (!id || id === 'undefined' || id === 'null') {\n                _EventLogger.EventLogger.error('API', 'Invalid automation ID for update:', id);\n                return {\n                  error: {\n                    status: 'INVALID_REQUEST',\n                    message: 'Invalid automation ID provided for update',\n                    code: 'INVALID_PARAMS'\n                  }\n                };\n              }\n              var _yield$supabase$from$5 = yield _client.supabase.from('automations').update(updates).eq('id', id).select().single(),\n                data = _yield$supabase$from$5.data,\n                error = _yield$supabase$from$5.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error updating automation:', error);\n                return {\n                  error: {\n                    status: 'UPDATE_ERROR',\n                    message: error.message || 'Failed to update automation',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to update automation:', error);\n              return {\n                error: {\n                  status: 'UPDATE_ERROR',\n                  message: error.message || 'Failed to update automation'\n                }\n              };\n            }\n          });\n          return function queryFn(_x8) {\n            return _ref10.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: (result, error, _ref11) => {\n          var id = _ref11.id;\n          return [{\n            type: 'Automation',\n            id\n          }, {\n            type: 'Automation',\n            id: 'LIST'\n          }, {\n            type: 'Automation',\n            id: 'PUBLIC'\n          }];\n        }\n      }),\n      /**\n       * Delete automation\n       */\n      deleteAutomation: builder.mutation({\n        queryFn: function () {\n          var _ref12 = (0, _asyncToGenerator2.default)(function* (id) {\n            try {\n              // Validate ID parameter\n              if (!id || id === 'undefined' || id === 'null') {\n                _EventLogger.EventLogger.error('API', 'Invalid automation ID for deletion:', id);\n                return {\n                  error: {\n                    status: 'INVALID_REQUEST',\n                    message: 'Invalid automation ID provided for deletion',\n                    code: 'INVALID_PARAMS'\n                  }\n                };\n              }\n              var _yield$supabase$from$6 = yield _client.supabase.from('automations').delete().eq('id', id),\n                error = _yield$supabase$from$6.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error deleting automation:', error);\n                return {\n                  error: {\n                    status: 'DELETE_ERROR',\n                    message: error.message || 'Failed to delete automation',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: null\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to delete automation:', error);\n              return {\n                error: {\n                  status: 'DELETE_ERROR',\n                  message: error.message || 'Failed to delete automation'\n                }\n              };\n            }\n          });\n          return function queryFn(_x9) {\n            return _ref12.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: (result, error, id) => [{\n          type: 'Automation',\n          id\n        }, {\n          type: 'Automation',\n          id: 'LIST'\n        }, {\n          type: 'User',\n          id: 'STATS'\n        }]\n      }),\n      /**\n       * Clone automation\n       */\n      cloneAutomation: builder.mutation({\n        queryFn: function () {\n          var _ref13 = (0, _asyncToGenerator2.default)(function* (automationId) {\n            try {\n              // Validate automationId parameter\n              if (!automationId || automationId === 'undefined' || automationId === 'null') {\n                _EventLogger.EventLogger.error('API', 'Invalid automation ID for cloning:', automationId);\n                return {\n                  error: {\n                    status: 'INVALID_REQUEST',\n                    message: 'Invalid automation ID provided for cloning',\n                    code: 'INVALID_PARAMS'\n                  }\n                };\n              }\n              var _yield$supabase$auth$3 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$3.data.user;\n              if (!user) {\n                return {\n                  error: {\n                    status: 'UNAUTHORIZED',\n                    message: 'Not authenticated'\n                  }\n                };\n              }\n\n              // Get the automation to clone\n              var _yield$supabase$from$7 = yield _client.supabase.from('automations').select('*').eq('id', automationId).single(),\n                originalAutomation = _yield$supabase$from$7.data,\n                fetchError = _yield$supabase$from$7.error;\n              if (fetchError) {\n                return {\n                  error: {\n                    status: fetchError.code === 'PGRST116' ? 'NOT_FOUND' : 'FETCH_ERROR',\n                    message: fetchError.code === 'PGRST116' ? 'Automation not found' : fetchError.message,\n                    code: fetchError.code\n                  }\n                };\n              }\n\n              // Create a new automation with the same data\n              var _yield$supabase$from$8 = yield _client.supabase.from('automations').insert({\n                  ...originalAutomation,\n                  id: undefined,\n                  title: `${originalAutomation.title} (Copy)`,\n                  created_by: user.id,\n                  created_at: undefined,\n                  updated_at: undefined,\n                  is_public: false,\n                  execution_count: 0,\n                  average_rating: null,\n                  rating_count: 0\n                }).select().single(),\n                data = _yield$supabase$from$8.data,\n                error = _yield$supabase$from$8.error;\n              if (error) {\n                return {\n                  error: {\n                    status: 'CREATE_ERROR',\n                    message: error.message || 'Failed to clone automation',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to clone automation:', error);\n              return {\n                error: {\n                  status: 'CREATE_ERROR',\n                  message: error.message || 'Failed to clone automation'\n                }\n              };\n            }\n          });\n          return function queryFn(_x0) {\n            return _ref13.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: [{\n          type: 'Automation',\n          id: 'LIST'\n        }, {\n          type: 'User',\n          id: 'STATS'\n        }]\n      }),\n      // ===== USER STATISTICS =====\n\n      /**\n       * Get user statistics with fallback handling\n       */\n      getUserStats: builder.query({\n        queryFn: function () {\n          var _ref15 = (0, _asyncToGenerator2.default)(function* (_, _ref14) {\n            var signal = _ref14.signal;\n            try {\n              var _yield$supabase$auth$4 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$4.data.user;\n              if (!user) {\n                return {\n                  data: {\n                    total_automations: 0,\n                    total_runs: 0,\n                    successful_runs: 0,\n                    failed_runs: 0,\n                    total_time_saved: 0\n                  }\n                };\n              }\n\n              // Skip RPC function to avoid download_count error, use fallback directly\n              var _yield$supabase$from$9 = yield _client.supabase.from('automations').select('id').eq('created_by', user.id).abortSignal(signal),\n                automations = _yield$supabase$from$9.data,\n                countError = _yield$supabase$from$9.error;\n              if (countError) {\n                _EventLogger.EventLogger.error('API', 'Failed to fetch automation count:', countError);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: countError.message || 'Failed to fetch user statistics',\n                    code: countError.code\n                  }\n                };\n              }\n              return {\n                data: {\n                  total_automations: automations?.length || 0,\n                  total_runs: 0,\n                  successful_runs: 0,\n                  failed_runs: 0,\n                  total_time_saved: 0\n                }\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch user stats:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch user statistics'\n                }\n              };\n            }\n          });\n          return function queryFn(_x1, _x10) {\n            return _ref15.apply(this, arguments);\n          };\n        }(),\n        providesTags: [{\n          type: 'User',\n          id: 'STATS'\n        }]\n      }),\n      // ===== EXECUTION MANAGEMENT =====\n\n      /**\n       * Get recent executions\n       */\n      getRecentExecutions: builder.query({\n        queryFn: function () {\n          var _ref18 = (0, _asyncToGenerator2.default)(function* (_ref16, _ref17) {\n            var _ref16$limit = _ref16.limit,\n              limit = _ref16$limit === undefined ? 10 : _ref16$limit;\n            var signal = _ref17.signal;\n            try {\n              var _yield$supabase$auth$5 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$5.data.user;\n              if (!user) {\n                return {\n                  data: []\n                };\n              }\n              var _yield$supabase$from$0 = yield _client.supabase.from('automation_executions').select('*').eq('user_id', user.id).order('created_at', {\n                  ascending: false\n                }).limit(limit).abortSignal(signal),\n                data = _yield$supabase$from$0.data,\n                error = _yield$supabase$from$0.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching recent executions:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch recent executions',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: data || []\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch recent executions:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch recent executions'\n                }\n              };\n            }\n          });\n          return function queryFn(_x11, _x12) {\n            return _ref18.apply(this, arguments);\n          };\n        }(),\n        providesTags: [{\n          type: 'Execution',\n          id: 'RECENT'\n        }]\n      }),\n      /**\n       * Get automation executions\n       */\n      getAutomationExecutions: builder.query({\n        queryFn: function () {\n          var _ref20 = (0, _asyncToGenerator2.default)(function* (automationId, _ref19) {\n            var signal = _ref19.signal;\n            try {\n              // Validate automationId parameter\n              if (!automationId || automationId === 'undefined' || automationId === 'null') {\n                _EventLogger.EventLogger.error('API', 'Invalid automation ID for executions:', automationId);\n                return {\n                  error: {\n                    status: 'INVALID_REQUEST',\n                    message: 'Invalid automation ID provided for executions',\n                    code: 'INVALID_PARAMS'\n                  }\n                };\n              }\n              var _yield$supabase$from$1 = yield _client.supabase.from('automation_executions').select('*').eq('automation_id', automationId).order('created_at', {\n                  ascending: false\n                }).abortSignal(signal),\n                data = _yield$supabase$from$1.data,\n                error = _yield$supabase$from$1.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching automation executions:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch automation executions',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: data || []\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch automation executions:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch automation executions'\n                }\n              };\n            }\n          });\n          return function queryFn(_x13, _x14) {\n            return _ref20.apply(this, arguments);\n          };\n        }(),\n        providesTags: (result, error, automationId) => [{\n          type: 'Execution',\n          id: automationId\n        }]\n      }),\n      /**\n       * Get execution history with enhanced data\n       */\n      getExecutionHistory: builder.query({\n        queryFn: function () {\n          var _ref23 = (0, _asyncToGenerator2.default)(function* (_ref21, _ref22) {\n            var _ref21$limit = _ref21.limit,\n              limit = _ref21$limit === undefined ? 50 : _ref21$limit;\n            var signal = _ref22.signal;\n            try {\n              var _yield$supabase$auth$6 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$6.data.user;\n              if (!user) {\n                return {\n                  data: []\n                };\n              }\n              var _yield$supabase$from$10 = yield _client.supabase.from('automation_executions').select(`\n              *,\n              automation:automations(id, name, title)\n            `).eq('user_id', user.id).order('created_at', {\n                  ascending: false\n                }).limit(limit).abortSignal(signal),\n                data = _yield$supabase$from$10.data,\n                error = _yield$supabase$from$10.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error fetching execution history:', error);\n                return {\n                  error: {\n                    status: 'FETCH_ERROR',\n                    message: error.message || 'Failed to fetch execution history',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: data || []\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n              _EventLogger.EventLogger.error('API', 'Failed to fetch execution history:', error);\n              return {\n                error: {\n                  status: 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch execution history'\n                }\n              };\n            }\n          });\n          return function queryFn(_x15, _x16) {\n            return _ref23.apply(this, arguments);\n          };\n        }(),\n        providesTags: [{\n          type: 'Execution',\n          id: 'HISTORY'\n        }]\n      }),\n      /**\n       * Clear execution history\n       */\n      clearHistory: builder.mutation({\n        queryFn: function () {\n          var _ref24 = (0, _asyncToGenerator2.default)(function* () {\n            try {\n              var _yield$supabase$auth$7 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$7.data.user;\n              if (!user) {\n                return {\n                  error: {\n                    status: 'UNAUTHORIZED',\n                    message: 'Not authenticated'\n                  }\n                };\n              }\n              var _yield$supabase$from$11 = yield _client.supabase.from('automation_executions').delete().eq('user_id', user.id),\n                error = _yield$supabase$from$11.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error clearing history:', error);\n                return {\n                  error: {\n                    status: 'DELETE_ERROR',\n                    message: error.message || 'Failed to clear history',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: null\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to clear history:', error);\n              return {\n                error: {\n                  status: 'DELETE_ERROR',\n                  message: error.message || 'Failed to clear history'\n                }\n              };\n            }\n          });\n          return function queryFn() {\n            return _ref24.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: [{\n          type: 'Execution',\n          id: 'RECENT'\n        }, {\n          type: 'Execution',\n          id: 'HISTORY'\n        }, {\n          type: 'User',\n          id: 'STATS'\n        }]\n      }),\n      // ===== TRENDING AND ENGAGEMENT =====\n\n      /**\n       * Get trending automations with fallback\n       */\n      getTrendingAutomations: builder.query({\n        queryFn: function () {\n          var _ref27 = (0, _asyncToGenerator2.default)(function* (_ref25, _ref26) {\n            var _ref25$limit = _ref25.limit,\n              limit = _ref25$limit === undefined ? 10 : _ref25$limit,\n              _ref25$timeWindow = _ref25.timeWindow,\n              timeWindow = _ref25$timeWindow === undefined ? '7 days' : _ref25$timeWindow;\n            var signal = _ref26.signal;\n            try {\n              // Use network-aware wrapper to prevent calls when offline\n              var data = yield (0, _networkAwareApi.networkAwareQuery)(/*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {\n                // Skip RPC function and use direct query to avoid download_count error\n                var _yield$supabase$from$12 = yield _client.supabase.from('automations').select('*').eq('is_public', true).order('created_at', {\n                    ascending: false\n                  }).limit(limit).abortSignal(signal),\n                  fallbackData = _yield$supabase$from$12.data,\n                  fallbackError = _yield$supabase$from$12.error;\n                if (fallbackError) {\n                  (0, _networkAwareApi.logApiError)(fallbackError, 'getTrendingAutomations');\n                  throw fallbackError;\n                }\n                return fallbackData || [];\n              }), {\n                offlineData: [] // Return empty array when offline\n              });\n              return {\n                data\n              };\n            } catch (error) {\n              if (error.name === 'AbortError') {\n                return {\n                  error: {\n                    status: 'CANCELLED',\n                    message: 'Request cancelled'\n                  }\n                };\n              }\n\n              // Check if it's an offline error\n              if (error.status === 'OFFLINE' || error.code === 'NETWORK_OFFLINE') {\n                return {\n                  data: []\n                }; // Return empty data instead of error for offline\n              }\n              (0, _networkAwareApi.logApiError)(error, 'getTrendingAutomations');\n              return {\n                error: {\n                  status: error.status || 'FETCH_ERROR',\n                  message: error.message || 'Failed to fetch trending automations',\n                  code: error.code\n                }\n              };\n            }\n          });\n          return function queryFn(_x17, _x18) {\n            return _ref27.apply(this, arguments);\n          };\n        }(),\n        providesTags: [{\n          type: 'Automation',\n          id: 'TRENDING'\n        }]\n      }),\n      // ===== ENGAGEMENT ACTIONS =====\n\n      /**\n       * Like automation\n       */\n      likeAutomation: builder.mutation({\n        queryFn: function () {\n          var _ref29 = (0, _asyncToGenerator2.default)(function* (automationId) {\n            try {\n              var _yield$supabase$auth$8 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$8.data.user;\n              if (!user) {\n                return {\n                  error: {\n                    status: 'UNAUTHORIZED',\n                    message: 'Not authenticated'\n                  }\n                };\n              }\n              var _yield$supabase$from$13 = yield _client.supabase.from('automation_likes').insert({\n                  automation_id: automationId,\n                  user_id: user.id\n                }),\n                error = _yield$supabase$from$13.error;\n              if (error && !error.message.includes('duplicate')) {\n                _EventLogger.EventLogger.error('API', 'Error liking automation:', error);\n                return {\n                  error: {\n                    status: 'ACTION_ERROR',\n                    message: error.message || 'Failed to like automation',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: null\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to like automation:', error);\n              return {\n                error: {\n                  status: 'ACTION_ERROR',\n                  message: error.message || 'Failed to like automation'\n                }\n              };\n            }\n          });\n          return function queryFn(_x19) {\n            return _ref29.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: (result, error, automationId) => [{\n          type: 'Automation',\n          id: automationId\n        }, {\n          type: 'Automation',\n          id: 'LIST'\n        }, {\n          type: 'Automation',\n          id: 'PUBLIC'\n        }]\n      }),\n      /**\n       * Unlike automation\n       */\n      unlikeAutomation: builder.mutation({\n        queryFn: function () {\n          var _ref30 = (0, _asyncToGenerator2.default)(function* (automationId) {\n            try {\n              var _yield$supabase$auth$9 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$9.data.user;\n              if (!user) {\n                return {\n                  error: {\n                    status: 'UNAUTHORIZED',\n                    message: 'Not authenticated'\n                  }\n                };\n              }\n              var _yield$supabase$from$14 = yield _client.supabase.from('automation_likes').delete().match({\n                  automation_id: automationId,\n                  user_id: user.id\n                }),\n                error = _yield$supabase$from$14.error;\n              if (error) {\n                _EventLogger.EventLogger.error('API', 'Error unliking automation:', error);\n                return {\n                  error: {\n                    status: 'ACTION_ERROR',\n                    message: error.message || 'Failed to unlike automation',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: null\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to unlike automation:', error);\n              return {\n                error: {\n                  status: 'ACTION_ERROR',\n                  message: error.message || 'Failed to unlike automation'\n                }\n              };\n            }\n          });\n          return function queryFn(_x20) {\n            return _ref30.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: (result, error, automationId) => [{\n          type: 'Automation',\n          id: automationId\n        }, {\n          type: 'Automation',\n          id: 'LIST'\n        }, {\n          type: 'Automation',\n          id: 'PUBLIC'\n        }]\n      }),\n      /**\n       * Track automation download/clone\n       */\n      trackAutomationDownload: builder.mutation({\n        queryFn: function () {\n          var _ref31 = (0, _asyncToGenerator2.default)(function* (automationId) {\n            try {\n              var _yield$supabase$auth$0 = yield _client.supabase.auth.getUser(),\n                user = _yield$supabase$auth$0.data.user;\n              if (!user) {\n                return {\n                  error: {\n                    status: 'UNAUTHORIZED',\n                    message: 'Not authenticated'\n                  }\n                };\n              }\n\n              // Insert a download/clone tracking record\n              var _yield$supabase$from$15 = yield _client.supabase.from('automation_downloads').insert({\n                  automation_id: automationId,\n                  user_id: user.id,\n                  download_type: 'clone'\n                }),\n                error = _yield$supabase$from$15.error;\n              if (error && !error.message.includes('duplicate')) {\n                _EventLogger.EventLogger.error('API', 'Error tracking download:', error);\n                return {\n                  error: {\n                    status: 'ACTION_ERROR',\n                    message: error.message || 'Failed to track download',\n                    code: error.code\n                  }\n                };\n              }\n              return {\n                data: null\n              };\n            } catch (error) {\n              _EventLogger.EventLogger.error('API', 'Failed to track download:', error);\n              return {\n                error: {\n                  status: 'ACTION_ERROR',\n                  message: error.message || 'Failed to track download'\n                }\n              };\n            }\n          });\n          return function queryFn(_x21) {\n            return _ref31.apply(this, arguments);\n          };\n        }(),\n        invalidatesTags: (result, error, automationId) => [{\n          type: 'Automation',\n          id: automationId\n        }, {\n          type: 'Automation',\n          id: 'LIST'\n        }, {\n          type: 'Automation',\n          id: 'PUBLIC'\n        }]\n      })\n    })\n  });\n\n  // Export hooks\n  var useGetMyAutomationsQuery = exports.useGetMyAutomationsQuery = automationApi.useGetMyAutomationsQuery,\n    useGetAutomationQuery = exports.useGetAutomationQuery = automationApi.useGetAutomationQuery,\n    useGetPublicAutomationsQuery = exports.useGetPublicAutomationsQuery = automationApi.useGetPublicAutomationsQuery,\n    useCreateAutomationMutation = exports.useCreateAutomationMutation = automationApi.useCreateAutomationMutation,\n    useUpdateAutomationMutation = exports.useUpdateAutomationMutation = automationApi.useUpdateAutomationMutation,\n    useDeleteAutomationMutation = exports.useDeleteAutomationMutation = automationApi.useDeleteAutomationMutation,\n    useCloneAutomationMutation = exports.useCloneAutomationMutation = automationApi.useCloneAutomationMutation,\n    useGetUserStatsQuery = exports.useGetUserStatsQuery = automationApi.useGetUserStatsQuery,\n    useGetRecentExecutionsQuery = exports.useGetRecentExecutionsQuery = automationApi.useGetRecentExecutionsQuery,\n    useGetAutomationExecutionsQuery = exports.useGetAutomationExecutionsQuery = automationApi.useGetAutomationExecutionsQuery,\n    useGetExecutionHistoryQuery = exports.useGetExecutionHistoryQuery = automationApi.useGetExecutionHistoryQuery,\n    useClearHistoryMutation = exports.useClearHistoryMutation = automationApi.useClearHistoryMutation,\n    useGetTrendingAutomationsQuery = exports.useGetTrendingAutomationsQuery = automationApi.useGetTrendingAutomationsQuery,\n    useLikeAutomationMutation = exports.useLikeAutomationMutation = automationApi.useLikeAutomationMutation,\n    useUnlikeAutomationMutation = exports.useUnlikeAutomationMutation = automationApi.useUnlikeAutomationMutation,\n    useTrackAutomationDownloadMutation = exports.useTrackAutomationDownloadMutation = automationApi.useTrackAutomationDownloadMutation;\n});","lineCount":1124,"map":[[8,2,8,0],[8,6,8,0,"_react"],[8,12,8,0],[8,15,8,0,"require"],[8,22,8,0],[8,23,8,0,"_dependencyMap"],[8,37,8,0],[9,2,9,0],[9,6,9,0,"_client"],[9,13,9,0],[9,16,9,0,"require"],[9,23,9,0],[9,24,9,0,"_dependencyMap"],[9,38,9,0],[10,2,11,0],[10,6,11,0,"_baseApi"],[10,14,11,0],[10,17,11,0,"require"],[10,24,11,0],[10,25,11,0,"_dependencyMap"],[10,39,11,0],[11,2,12,0],[11,6,12,0,"_networkAwareApi"],[11,22,12,0],[11,25,12,0,"require"],[11,32,12,0],[11,33,12,0,"_dependencyMap"],[11,47,12,0],[12,2,13,0],[12,6,13,0,"_EventLogger"],[12,18,13,0],[12,21,13,0,"require"],[12,28,13,0],[12,29,13,0,"_dependencyMap"],[12,43,13,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[20,2,15,0],[21,0,16,0],[22,0,17,0],[23,2,18,7],[23,6,18,13,"automationApi"],[23,19,18,26],[23,22,18,26,"exports"],[23,29,18,26],[23,30,18,26,"automationApi"],[23,43,18,26],[23,46,18,29],[23,50,18,29,"createApi"],[23,66,18,38],[23,68,18,39],[24,4,19,2,"reducerPath"],[24,15,19,13],[24,17,19,15],[24,32,19,30],[25,4,20,2],[25,7,20,5,"baseApiConfig"],[25,29,20,18],[26,4,21,2,"tagTypes"],[26,12,21,10],[26,14,21,12],[26,15,21,13],[26,27,21,25],[26,29,21,27],[26,35,21,33],[26,37,21,35],[26,48,21,46],[26,49,21,47],[27,4,22,2,"endpoints"],[27,13,22,11],[27,15,22,14,"builder"],[27,22,22,21],[27,27,22,27],[28,6,23,4],[30,6,25,4],[31,0,26,0],[32,0,27,0],[33,6,28,4,"getMyAutomations"],[33,22,28,20],[33,24,28,22,"builder"],[33,31,28,29],[33,32,28,30,"query"],[33,37,28,35],[33,38,28,60],[34,8,29,6,"queryFn"],[34,15,29,13],[35,10,29,13],[35,14,29,13,"_ref2"],[35,19,29,13],[35,26,29,13,"_asyncToGenerator2"],[35,44,29,13],[35,45,29,13,"default"],[35,52,29,13],[35,54,29,15],[35,65,29,22,"_"],[35,66,29,23],[35,68,29,23,"_ref"],[35,72,29,23],[35,74,29,40],[36,12,29,40],[36,16,29,27,"signal"],[36,22,29,33],[36,25,29,33,"_ref"],[36,29,29,33],[36,30,29,27,"signal"],[36,36,29,33],[37,12,30,8],[37,16,30,12],[38,14,31,10],[38,18,31,10,"_yield$supabase$auth$"],[38,39,31,10],[38,48,31,43,"supabase"],[38,64,31,51],[38,65,31,52,"auth"],[38,69,31,56],[38,70,31,57,"getUser"],[38,77,31,64],[38,78,31,65],[38,79,31,66],[39,16,31,26,"user"],[39,20,31,30],[39,23,31,30,"_yield$supabase$auth$"],[39,44,31,30],[39,45,31,18,"data"],[39,49,31,22],[39,50,31,26,"user"],[39,54,31,30],[40,14,33,10],[40,18,33,14],[40,19,33,15,"user"],[40,23,33,19],[40,25,33,21],[41,16,34,12],[41,23,34,19],[42,18,34,21,"data"],[42,22,34,25],[42,24,34,27],[43,16,34,30],[43,17,34,31],[44,14,35,10],[45,14,37,10],[45,18,37,10,"_yield$supabase$from$"],[45,39,37,10],[45,48,37,40,"supabase"],[45,64,37,48],[45,65,38,13,"from"],[45,69,38,17],[45,70,38,18],[45,83,38,31],[45,84,38,32],[45,85,39,13,"select"],[45,91,39,19],[45,92,39,20],[45,95,39,23],[45,96,39,24],[45,97,40,13,"eq"],[45,99,40,15],[45,100,40,16],[45,112,40,28],[45,114,40,30,"user"],[45,118,40,34],[45,119,40,35,"id"],[45,121,40,37],[45,122,40,38],[45,123,41,13,"order"],[45,128,41,18],[45,129,41,19],[45,141,41,31],[45,143,41,33],[46,18,41,35,"ascending"],[46,27,41,44],[46,29,41,46],[47,16,41,52],[47,17,41,53],[47,18,41,54],[47,19,42,13,"abortSignal"],[47,30,42,24],[47,31,42,25,"signal"],[47,37,42,31],[47,38,42,32],[48,16,37,18,"data"],[48,20,37,22],[48,23,37,22,"_yield$supabase$from$"],[48,44,37,22],[48,45,37,18,"data"],[48,49,37,22],[49,16,37,24,"error"],[49,21,37,29],[49,24,37,29,"_yield$supabase$from$"],[49,45,37,29],[49,46,37,24,"error"],[49,51,37,29],[50,14,44,10],[50,18,44,14,"error"],[50,23,44,19],[50,25,44,21],[51,16,45,12,"EventLogger"],[51,40,45,23],[51,41,45,24,"error"],[51,46,45,29],[51,47,45,30],[51,52,45,35],[51,54,45,37],[51,88,45,71],[51,90,45,73,"error"],[51,95,45,87],[51,96,45,88],[52,16,46,12],[52,23,46,19],[53,18,47,14,"error"],[53,23,47,19],[53,25,47,21],[54,20,48,16,"status"],[54,26,48,22],[54,28,48,24],[54,41,48,37],[55,20,49,16,"message"],[55,27,49,23],[55,29,49,25,"error"],[55,34,49,30],[55,35,49,31,"message"],[55,42,49,38],[55,46,49,42],[55,75,49,71],[56,20,50,16,"code"],[56,24,50,20],[56,26,50,22,"error"],[56,31,50,27],[56,32,50,28,"code"],[57,18,51,14],[58,16,52,12],[58,17,52,13],[59,14,53,10],[60,14,55,10],[60,21,55,17],[61,16,55,19,"data"],[61,20,55,23],[61,22,55,25,"data"],[61,26,55,29],[61,30,55,33],[62,14,55,36],[62,15,55,37],[63,12,56,8],[63,13,56,9],[63,14,56,10],[63,21,56,17,"error"],[63,26,56,27],[63,28,56,29],[64,14,57,10],[64,18,57,14,"error"],[64,23,57,19],[64,24,57,20,"name"],[64,28,57,24],[64,33,57,29],[64,45,57,41],[64,47,57,43],[65,16,58,12],[65,23,58,19],[66,18,58,21,"error"],[66,23,58,26],[66,25,58,28],[67,20,58,30,"status"],[67,26,58,36],[67,28,58,38],[67,39,58,49],[68,20,58,51,"message"],[68,27,58,58],[68,29,58,60],[69,18,58,80],[70,16,58,82],[70,17,58,83],[71,14,59,10],[72,14,61,10,"EventLogger"],[72,38,61,21],[72,39,61,22,"error"],[72,44,61,27],[72,45,61,28],[72,50,61,33],[72,52,61,35],[72,87,61,70],[72,89,61,72,"error"],[72,94,61,86],[72,95,61,87],[73,14,62,10],[73,21,62,17],[74,16,63,12,"error"],[74,21,63,17],[74,23,63,19],[75,18,64,14,"status"],[75,24,64,20],[75,26,64,22],[75,39,64,35],[76,18,65,14,"message"],[76,25,65,21],[76,27,65,23,"error"],[76,32,65,28],[76,33,65,29,"message"],[76,40,65,36],[76,44,65,40],[77,16,66,12],[78,14,67,10],[78,15,67,11],[79,12,68,8],[80,10,69,6],[80,11,69,7],[81,10,69,7],[81,26,29,6,"queryFn"],[81,33,29,13,"queryFn"],[81,34,29,13,"_x"],[81,36,29,13],[81,38,29,13,"_x2"],[81,41,29,13],[82,12,29,13],[82,19,29,13,"_ref2"],[82,24,29,13],[82,25,29,13,"apply"],[82,30,29,13],[82,37,29,13,"arguments"],[82,46,29,13],[83,10,29,13],[84,8,29,13],[84,11,69,7],[85,8,70,6,"providesTags"],[85,20,70,18],[85,22,70,21,"result"],[85,28,70,27],[85,32,71,8,"result"],[85,38,71,14],[85,41,72,12],[85,42,72,13],[85,45,72,16,"result"],[85,51,72,22],[85,52,72,23,"map"],[85,55,72,26],[85,56,72,27,"_ref3"],[85,61,72,27],[86,10,72,27],[86,14,72,30,"id"],[86,16,72,32],[86,19,72,32,"_ref3"],[86,24,72,32],[86,25,72,30,"id"],[86,27,72,32],[87,10,72,32],[87,17,72,40],[88,12,72,42,"type"],[88,16,72,46],[88,18,72,48],[88,30,72,69],[89,12,72,71,"id"],[90,10,72,74],[90,11,72,75],[91,8,72,75],[91,9,72,76],[91,10,72,77],[91,12,72,79],[92,10,72,81,"type"],[92,14,72,85],[92,16,72,87],[92,28,72,99],[93,10,72,101,"id"],[93,12,72,103],[93,14,72,105],[94,8,72,112],[94,9,72,113],[94,10,72,114],[94,13,73,12],[94,14,73,13],[95,10,73,15,"type"],[95,14,73,19],[95,16,73,21],[95,28,73,33],[96,10,73,35,"id"],[96,12,73,37],[96,14,73,39],[97,8,73,46],[97,9,73,47],[98,6,74,4],[98,7,74,5],[98,8,74,6],[99,6,76,4],[100,0,77,0],[101,0,78,0],[102,6,79,4,"getAutomation"],[102,19,79,17],[102,21,79,19,"builder"],[102,28,79,26],[102,29,79,27,"query"],[102,34,79,32],[102,35,79,57],[103,8,80,6,"queryFn"],[103,15,80,13],[104,10,80,13],[104,14,80,13,"_ref5"],[104,19,80,13],[104,26,80,13,"_asyncToGenerator2"],[104,44,80,13],[104,45,80,13,"default"],[104,52,80,13],[104,54,80,15],[104,65,80,22,"id"],[104,67,80,24],[104,69,80,24,"_ref4"],[104,74,80,24],[104,76,80,41],[105,12,80,41],[105,16,80,28,"signal"],[105,22,80,34],[105,25,80,34,"_ref4"],[105,30,80,34],[105,31,80,28,"signal"],[105,37,80,34],[106,12,81,8],[106,16,81,12],[107,14,82,10],[108,14,83,10],[108,18,83,14],[108,19,83,15,"id"],[108,21,83,17],[108,25,83,21],[108,32,83,28,"id"],[108,34,83,30],[108,39,83,35],[108,47,83,43],[108,49,83,45],[109,16,84,12,"EventLogger"],[109,40,84,23],[109,41,84,24,"error"],[109,46,84,29],[109,47,84,30],[109,52,84,35],[109,54,84,37],[109,87,84,70],[109,89,84,72,"id"],[109,91,84,83],[109,92,84,84],[110,16,85,12],[110,23,85,19],[111,18,86,14,"error"],[111,23,86,19],[111,25,86,21],[112,20,87,16,"status"],[112,26,87,22],[112,28,87,24],[112,45,87,41],[113,20,88,16,"message"],[113,27,88,23],[113,29,88,25],[113,61,88,57],[114,20,89,16,"code"],[114,24,89,20],[114,26,89,22],[115,18,90,14],[116,16,91,12],[116,17,91,13],[117,14,92,10],[119,14,94,10],[120,14,95,10],[120,18,95,14,"id"],[120,20,95,16],[120,25,95,21],[120,36,95,32],[120,40,95,36,"id"],[120,42,95,38],[120,47,95,43],[120,53,95,49],[120,57,95,53,"id"],[120,59,95,55],[120,64,95,60],[120,66,95,62],[120,68,95,64],[121,16,96,12,"EventLogger"],[121,40,96,23],[121,41,96,24,"error"],[121,46,96,29],[121,47,96,30],[121,52,96,35],[121,54,96,37],[121,84,96,67],[121,86,96,69,"id"],[121,88,96,80],[121,89,96,81],[122,16,97,12],[122,23,97,19],[123,18,98,14,"error"],[123,23,98,19],[123,25,98,21],[124,20,99,16,"status"],[124,26,99,22],[124,28,99,24],[124,45,99,41],[125,20,100,16,"message"],[125,27,100,23],[125,29,100,25],[125,56,100,52,"id"],[125,58,100,54],[125,61,100,57],[126,20,101,16,"code"],[126,24,101,20],[126,26,101,22],[127,18,102,14],[128,16,103,12],[128,17,103,13],[129,14,104,10],[131,14,106,10],[132,14,107,10],[132,18,107,16,"uuidRegex"],[132,27,107,25],[132,30,107,28],[132,95,107,93],[133,14,108,10],[133,18,108,14],[133,19,108,15,"uuidRegex"],[133,28,108,24],[133,29,108,25,"test"],[133,33,108,29],[133,34,108,30,"id"],[133,36,108,32],[133,37,108,33],[133,39,108,35],[134,16,109,12,"EventLogger"],[134,40,109,23],[134,41,109,24,"error"],[134,46,109,29],[134,47,109,30],[134,52,109,35],[134,54,109,37],[134,76,109,59],[134,78,109,61,"id"],[134,80,109,72],[134,81,109,73],[135,16,110,12],[135,23,110,19],[136,18,111,14,"error"],[136,23,111,19],[136,25,111,21],[137,20,112,16,"status"],[137,26,112,22],[137,28,112,24],[137,45,112,41],[138,20,113,16,"message"],[138,27,113,23],[138,29,113,25],[138,53,113,49,"id"],[138,55,113,51],[138,57,113,53],[139,20,114,16,"code"],[139,24,114,20],[139,26,114,22],[140,18,115,14],[141,16,116,12],[141,17,116,13],[142,14,117,10],[143,14,119,10],[143,18,119,10,"_yield$supabase$from$2"],[143,40,119,10],[143,49,119,40,"supabase"],[143,65,119,48],[143,66,120,13,"from"],[143,70,120,17],[143,71,120,18],[143,84,120,31],[143,85,120,32],[143,86,121,13,"select"],[143,92,121,19],[143,93,121,20],[143,96,121,23],[143,97,121,24],[143,98,122,13,"eq"],[143,100,122,15],[143,101,122,16],[143,105,122,20],[143,107,122,22,"id"],[143,109,122,24],[143,110,122,25],[143,111,123,13,"single"],[143,117,123,19],[143,118,123,20],[143,119,123,21],[143,120,124,13,"abortSignal"],[143,131,124,24],[143,132,124,25,"signal"],[143,138,124,31],[143,139,124,32],[144,16,119,18,"data"],[144,20,119,22],[144,23,119,22,"_yield$supabase$from$2"],[144,45,119,22],[144,46,119,18,"data"],[144,50,119,22],[145,16,119,24,"error"],[145,21,119,29],[145,24,119,29,"_yield$supabase$from$2"],[145,46,119,29],[145,47,119,24,"error"],[145,52,119,29],[146,14,126,10],[146,18,126,14,"error"],[146,23,126,19],[146,25,126,21],[147,16,127,12,"EventLogger"],[147,40,127,23],[147,41,127,24,"error"],[147,46,127,29],[147,47,127,30],[147,52,127,35],[147,54,127,37],[147,82,127,65],[147,84,127,67,"error"],[147,89,127,81],[147,90,127,82],[148,16,128,12],[148,23,128,19],[149,18,129,14,"error"],[149,23,129,19],[149,25,129,21],[150,20,130,16,"status"],[150,26,130,22],[150,28,130,24,"error"],[150,33,130,29],[150,34,130,30,"code"],[150,38,130,34],[150,43,130,39],[150,53,130,49],[150,56,130,52],[150,67,130,63],[150,70,130,66],[150,83,130,79],[151,20,131,16,"message"],[151,27,131,23],[151,29,131,25,"error"],[151,34,131,30],[151,35,131,31,"code"],[151,39,131,35],[151,44,131,40],[151,54,131,50],[151,57,131,53],[151,79,131,75],[151,82,131,78,"error"],[151,87,131,83],[151,88,131,84,"message"],[151,95,131,91],[152,20,132,16,"code"],[152,24,132,20],[152,26,132,22,"error"],[152,31,132,27],[152,32,132,28,"code"],[153,18,133,14],[154,16,134,12],[154,17,134,13],[155,14,135,10],[156,14,137,10],[156,21,137,17],[157,16,137,19,"data"],[158,14,137,24],[158,15,137,25],[159,12,138,8],[159,13,138,9],[159,14,138,10],[159,21,138,17,"error"],[159,26,138,27],[159,28,138,29],[160,14,139,10],[160,18,139,14,"error"],[160,23,139,19],[160,24,139,20,"name"],[160,28,139,24],[160,33,139,29],[160,45,139,41],[160,47,139,43],[161,16,140,12],[161,23,140,19],[162,18,140,21,"error"],[162,23,140,26],[162,25,140,28],[163,20,140,30,"status"],[163,26,140,36],[163,28,140,38],[163,39,140,49],[164,20,140,51,"message"],[164,27,140,58],[164,29,140,60],[165,18,140,80],[166,16,140,82],[166,17,140,83],[167,14,141,10],[168,14,143,10,"EventLogger"],[168,38,143,21],[168,39,143,22,"error"],[168,44,143,27],[168,45,143,28],[168,50,143,33],[168,52,143,35],[168,81,143,64],[168,83,143,66,"error"],[168,88,143,80],[168,89,143,81],[169,14,144,10],[169,21,144,17],[170,16,145,12,"error"],[170,21,145,17],[170,23,145,19],[171,18,146,14,"status"],[171,24,146,20],[171,26,146,22],[171,39,146,35],[172,18,147,14,"message"],[172,25,147,21],[172,27,147,23,"error"],[172,32,147,28],[172,33,147,29,"message"],[172,40,147,36],[172,44,147,40],[173,16,148,12],[174,14,149,10],[174,15,149,11],[175,12,150,8],[176,10,151,6],[176,11,151,7],[177,10,151,7],[177,26,80,6,"queryFn"],[177,33,80,13,"queryFn"],[177,34,80,13,"_x3"],[177,37,80,13],[177,39,80,13,"_x4"],[177,42,80,13],[178,12,80,13],[178,19,80,13,"_ref5"],[178,24,80,13],[178,25,80,13,"apply"],[178,30,80,13],[178,37,80,13,"arguments"],[178,46,80,13],[179,10,80,13],[180,8,80,13],[180,11,151,7],[181,8,152,6,"providesTags"],[181,20,152,18],[181,22,152,20,"providesTags"],[181,23,152,21,"result"],[181,29,152,27],[181,31,152,29,"error"],[181,36,152,34],[181,38,152,36,"id"],[181,40,152,38],[181,45,152,43],[181,46,152,44],[182,10,152,46,"type"],[182,14,152,50],[182,16,152,52],[182,28,152,64],[183,10,152,66,"id"],[184,8,152,69],[184,9,152,70],[185,6,153,4],[185,7,153,5],[185,8,153,6],[186,6,155,4],[187,0,156,0],[188,0,157,0],[189,6,158,4,"getPublicAutomations"],[189,26,158,24],[189,28,158,26,"builder"],[189,35,158,33],[189,36,158,34,"query"],[189,41,158,39],[189,42,158,78],[190,8,159,6,"queryFn"],[190,15,159,13],[191,10,159,13],[191,14,159,13,"_ref8"],[191,19,159,13],[191,26,159,13,"_asyncToGenerator2"],[191,44,159,13],[191,45,159,13,"default"],[191,52,159,13],[191,54,159,15],[191,65,159,15,"_ref6"],[191,70,159,15],[191,72,159,15,"_ref7"],[191,77,159,15],[191,79,159,53],[192,12,159,53],[192,16,159,53,"_ref6$limit"],[192,27,159,53],[192,30,159,53,"_ref6"],[192,35,159,53],[192,36,159,24,"limit"],[192,41,159,29],[193,14,159,24,"limit"],[193,19,159,29],[193,22,159,29,"_ref6$limit"],[193,33,159,29],[193,38,159,29,"undefined"],[193,47,159,29],[193,50,159,32],[193,52,159,34],[193,55,159,34,"_ref6$limit"],[193,66,159,34],[194,12,159,34],[194,16,159,40,"signal"],[194,22,159,46],[194,25,159,46,"_ref7"],[194,30,159,46],[194,31,159,40,"signal"],[194,37,159,46],[195,12,160,8],[195,16,160,12],[196,14,161,10],[197,14,162,10],[197,18,162,16,"data"],[197,22,162,20],[197,31,162,29],[197,35,162,29,"networkAwareQuery"],[197,69,162,46],[197,88,162,46,"_asyncToGenerator2"],[197,106,162,46],[197,107,162,46,"default"],[197,114,162,46],[197,116,163,12],[197,129,163,24],[198,16,164,14],[198,20,164,14,"_yield$supabase$from$3"],[198,42,164,14],[198,51,164,44,"supabase"],[198,67,164,52],[198,68,165,17,"from"],[198,72,165,21],[198,73,165,22],[198,86,165,35],[198,87,165,36],[198,88,166,17,"select"],[198,94,166,23],[198,95,166,24],[198,98,166,27],[198,99,166,28],[198,100,167,17,"eq"],[198,102,167,19],[198,103,167,20],[198,114,167,31],[198,116,167,33],[198,120,167,37],[198,121,167,38],[198,122,168,17,"order"],[198,127,168,22],[198,128,168,23],[198,140,168,35],[198,142,168,37],[199,20,168,39,"ascending"],[199,29,168,48],[199,31,168,50],[200,18,168,56],[200,19,168,57],[200,20,168,58],[200,21,169,17,"limit"],[200,26,169,22],[200,27,169,23,"limit"],[200,32,169,28],[200,33,169,29],[200,34,170,17,"abortSignal"],[200,45,170,28],[200,46,170,29,"signal"],[200,52,170,35],[200,53,170,36],[201,18,164,22,"data"],[201,22,164,26],[201,25,164,26,"_yield$supabase$from$3"],[201,47,164,26],[201,48,164,22,"data"],[201,52,164,26],[202,18,164,28,"error"],[202,23,164,33],[202,26,164,33,"_yield$supabase$from$3"],[202,48,164,33],[202,49,164,28,"error"],[202,54,164,33],[203,16,172,14],[203,20,172,18,"error"],[203,25,172,23],[203,27,172,25],[204,18,173,16],[204,22,173,16,"logApiError"],[204,50,173,27],[204,52,173,28,"error"],[204,57,173,33],[204,59,173,35],[204,81,173,57],[204,82,173,58],[205,18,174,16],[205,24,174,22,"error"],[205,29,174,27],[206,16,175,14],[207,16,177,14],[207,23,177,21,"data"],[207,27,177,25],[207,31,177,29],[207,33,177,31],[208,14,178,12],[208,15,178,13],[208,18,179,12],[209,16,180,14,"offlineData"],[209,27,180,25],[209,29,180,27],[209,31,180,29],[209,32,180,31],[210,14,181,12],[210,15,182,10],[210,16,182,11],[211,14,184,10],[211,21,184,17],[212,16,184,19,"data"],[213,14,184,24],[213,15,184,25],[214,12,185,8],[214,13,185,9],[214,14,185,10],[214,21,185,17,"error"],[214,26,185,27],[214,28,185,29],[215,14,186,10],[215,18,186,14,"error"],[215,23,186,19],[215,24,186,20,"name"],[215,28,186,24],[215,33,186,29],[215,45,186,41],[215,47,186,43],[216,16,187,12],[216,23,187,19],[217,18,187,21,"error"],[217,23,187,26],[217,25,187,28],[218,20,187,30,"status"],[218,26,187,36],[218,28,187,38],[218,39,187,49],[219,20,187,51,"message"],[219,27,187,58],[219,29,187,60],[220,18,187,80],[221,16,187,82],[221,17,187,83],[222,14,188,10],[224,14,190,10],[225,14,191,10],[225,18,191,14,"error"],[225,23,191,19],[225,24,191,20,"status"],[225,30,191,26],[225,35,191,31],[225,44,191,40],[225,48,191,44,"error"],[225,53,191,49],[225,54,191,50,"code"],[225,58,191,54],[225,63,191,59],[225,80,191,76],[225,82,191,78],[226,16,192,12],[226,23,192,19],[227,18,192,21,"data"],[227,22,192,25],[227,24,192,27],[228,16,192,30],[228,17,192,31],[228,18,192,32],[228,19,192,33],[229,14,193,10],[230,14,195,10],[230,18,195,10,"logApiError"],[230,46,195,21],[230,48,195,22,"error"],[230,53,195,27],[230,55,195,29],[230,77,195,51],[230,78,195,52],[231,14,196,10],[231,21,196,17],[232,16,197,12,"error"],[232,21,197,17],[232,23,197,19],[233,18,198,14,"status"],[233,24,198,20],[233,26,198,22,"error"],[233,31,198,27],[233,32,198,28,"status"],[233,38,198,34],[233,42,198,38],[233,55,198,51],[234,18,199,14,"message"],[234,25,199,21],[234,27,199,23,"error"],[234,32,199,28],[234,33,199,29,"message"],[234,40,199,36],[234,44,199,40],[234,80,199,76],[235,18,200,14,"code"],[235,22,200,18],[235,24,200,20,"error"],[235,29,200,25],[235,30,200,26,"code"],[236,16,201,12],[237,14,202,10],[237,15,202,11],[238,12,203,8],[239,10,204,6],[239,11,204,7],[240,10,204,7],[240,26,159,6,"queryFn"],[240,33,159,13,"queryFn"],[240,34,159,13,"_x5"],[240,37,159,13],[240,39,159,13,"_x6"],[240,42,159,13],[241,12,159,13],[241,19,159,13,"_ref8"],[241,24,159,13],[241,25,159,13,"apply"],[241,30,159,13],[241,37,159,13,"arguments"],[241,46,159,13],[242,10,159,13],[243,8,159,13],[243,11,204,7],[244,8,205,6,"providesTags"],[244,20,205,18],[244,22,205,20],[244,23,205,21],[245,10,205,23,"type"],[245,14,205,27],[245,16,205,29],[245,28,205,41],[246,10,205,43,"id"],[246,12,205,45],[246,14,205,47],[247,8,205,56],[247,9,205,57],[248,6,206,4],[248,7,206,5],[248,8,206,6],[249,6,208,4],[250,0,209,0],[251,0,210,0],[252,6,211,4,"createAutomation"],[252,22,211,20],[252,24,211,22,"builder"],[252,31,211,29],[252,32,211,30,"mutation"],[252,40,211,38],[252,41,211,80],[253,8,212,6,"queryFn"],[253,15,212,13],[254,10,212,13],[254,14,212,13,"_ref0"],[254,19,212,13],[254,26,212,13,"_asyncToGenerator2"],[254,44,212,13],[254,45,212,13,"default"],[254,52,212,13],[254,54,212,15],[254,65,212,22,"automation"],[254,75,212,32],[254,77,212,37],[255,12,213,8],[255,16,213,12],[256,14,214,10],[256,18,214,10,"_yield$supabase$auth$2"],[256,40,214,10],[256,49,214,43,"supabase"],[256,65,214,51],[256,66,214,52,"auth"],[256,70,214,56],[256,71,214,57,"getUser"],[256,78,214,64],[256,79,214,65],[256,80,214,66],[257,16,214,26,"user"],[257,20,214,30],[257,23,214,30,"_yield$supabase$auth$2"],[257,45,214,30],[257,46,214,18,"data"],[257,50,214,22],[257,51,214,26,"user"],[257,55,214,30],[258,14,216,10],[258,18,216,14],[258,19,216,15,"user"],[258,23,216,19],[258,25,216,21],[259,16,217,12],[259,23,217,19],[260,18,218,14,"error"],[260,23,218,19],[260,25,218,21],[261,20,219,16,"status"],[261,26,219,22],[261,28,219,24],[261,42,219,38],[262,20,220,16,"message"],[262,27,220,23],[262,29,220,25],[263,18,221,14],[264,16,222,12],[264,17,222,13],[265,14,223,10],[266,14,225,10],[266,18,225,16,"automationToInsert"],[266,36,225,34],[266,39,225,37],[267,16,226,12,"title"],[267,21,226,17],[267,23,226,19,"automation"],[267,33,226,29],[267,34,226,30,"title"],[267,39,226,35],[267,43,226,39],[267,64,226,60],[268,16,227,12,"description"],[268,27,227,23],[268,29,227,25,"automation"],[268,39,227,35],[268,40,227,36,"description"],[268,51,227,47],[268,55,227,51],[268,77,227,73],[269,16,228,12,"steps"],[269,21,228,17],[269,23,228,19,"automation"],[269,33,228,29],[269,34,228,30,"steps"],[269,39,228,35],[269,43,228,39],[269,45,228,41],[270,16,229,12,"created_by"],[270,26,229,22],[270,28,229,24,"user"],[270,32,229,28],[270,33,229,29,"id"],[270,35,229,31],[271,16,230,12,"category"],[271,24,230,20],[271,26,230,22,"automation"],[271,36,230,32],[271,37,230,33,"category"],[271,45,230,41],[271,49,230,45],[271,63,230,59],[272,16,231,12,"is_public"],[272,25,231,21],[272,27,231,23,"automation"],[272,37,231,33],[272,38,231,34,"is_public"],[272,47,231,43],[272,51,231,47],[272,56,231,52],[273,16,232,12,"tags"],[273,20,232,16],[273,22,232,18,"automation"],[273,32,232,28],[273,33,232,29,"tags"],[273,37,232,33],[273,41,232,37],[273,42,232,38],[273,50,232,46],[274,14,233,10],[274,15,233,11],[275,14,235,10],[275,18,235,10,"_yield$supabase$from$4"],[275,40,235,10],[275,49,235,40,"supabase"],[275,65,235,48],[275,66,236,13,"from"],[275,70,236,17],[275,71,236,18],[275,84,236,31],[275,85,236,32],[275,86,237,13,"insert"],[275,92,237,19],[275,93,237,20,"automationToInsert"],[275,111,237,38],[275,112,237,39],[275,113,238,13,"select"],[275,119,238,19],[275,120,238,20],[275,121,238,21],[275,122,239,13,"single"],[275,128,239,19],[275,129,239,20],[275,130,239,21],[276,16,235,18,"data"],[276,20,235,22],[276,23,235,22,"_yield$supabase$from$4"],[276,45,235,22],[276,46,235,18,"data"],[276,50,235,22],[277,16,235,24,"error"],[277,21,235,29],[277,24,235,29,"_yield$supabase$from$4"],[277,46,235,29],[277,47,235,24,"error"],[277,52,235,29],[278,14,241,10],[278,18,241,14,"error"],[278,23,241,19],[278,25,241,21],[279,16,242,12,"EventLogger"],[279,40,242,23],[279,41,242,24,"error"],[279,46,242,29],[279,47,242,30],[279,52,242,35],[279,54,242,37],[279,82,242,65],[279,84,242,67,"error"],[279,89,242,81],[279,90,242,82],[280,16,243,12],[280,23,243,19],[281,18,244,14,"error"],[281,23,244,19],[281,25,244,21],[282,20,245,16,"status"],[282,26,245,22],[282,28,245,24],[282,42,245,38],[283,20,246,16,"message"],[283,27,246,23],[283,29,246,25,"error"],[283,34,246,30],[283,35,246,31,"message"],[283,42,246,38],[283,46,246,42],[283,75,246,71],[284,20,247,16,"code"],[284,24,247,20],[284,26,247,22,"error"],[284,31,247,27],[284,32,247,28,"code"],[285,18,248,14],[286,16,249,12],[286,17,249,13],[287,14,250,10],[288,14,252,10],[288,21,252,17],[289,16,252,19,"data"],[290,14,252,24],[290,15,252,25],[291,12,253,8],[291,13,253,9],[291,14,253,10],[291,21,253,17,"error"],[291,26,253,27],[291,28,253,29],[292,14,254,10,"EventLogger"],[292,38,254,21],[292,39,254,22,"error"],[292,44,254,27],[292,45,254,28],[292,50,254,33],[292,52,254,35],[292,82,254,65],[292,84,254,67,"error"],[292,89,254,81],[292,90,254,82],[293,14,255,10],[293,21,255,17],[294,16,256,12,"error"],[294,21,256,17],[294,23,256,19],[295,18,257,14,"status"],[295,24,257,20],[295,26,257,22],[295,40,257,36],[296,18,258,14,"message"],[296,25,258,21],[296,27,258,23,"error"],[296,32,258,28],[296,33,258,29,"message"],[296,40,258,36],[296,44,258,40],[297,16,259,12],[298,14,260,10],[298,15,260,11],[299,12,261,8],[300,10,262,6],[300,11,262,7],[301,10,262,7],[301,26,212,6,"queryFn"],[301,33,212,13,"queryFn"],[301,34,212,13,"_x7"],[301,37,212,13],[302,12,212,13],[302,19,212,13,"_ref0"],[302,24,212,13],[302,25,212,13,"apply"],[302,30,212,13],[302,37,212,13,"arguments"],[302,46,212,13],[303,10,212,13],[304,8,212,13],[304,11,262,7],[305,8,263,6,"invalidatesTags"],[305,23,263,21],[305,25,263,23],[305,26,264,8],[306,10,264,10,"type"],[306,14,264,14],[306,16,264,16],[306,28,264,28],[307,10,264,30,"id"],[307,12,264,32],[307,14,264,34],[308,8,264,41],[308,9,264,42],[308,11,265,8],[309,10,265,10,"type"],[309,14,265,14],[309,16,265,16],[309,22,265,22],[310,10,265,24,"id"],[310,12,265,26],[310,14,265,28],[311,8,265,36],[311,9,265,37],[312,6,267,4],[312,7,267,5],[312,8,267,6],[313,6,269,4],[314,0,270,0],[315,0,271,0],[316,6,272,4,"updateAutomation"],[316,22,272,20],[316,24,272,22,"builder"],[316,31,272,29],[316,32,272,30,"mutation"],[316,40,272,38],[316,41,272,105],[317,8,273,6,"queryFn"],[317,15,273,13],[318,10,273,13],[318,14,273,13,"_ref10"],[318,20,273,13],[318,27,273,13,"_asyncToGenerator2"],[318,45,273,13],[318,46,273,13,"default"],[318,53,273,13],[318,55,273,15],[318,66,273,15,"_ref1"],[318,71,273,15],[318,73,273,42],[319,12,273,42],[319,16,273,24,"id"],[319,18,273,26],[319,21,273,26,"_ref1"],[319,26,273,26],[319,27,273,24,"id"],[319,29,273,26],[320,14,273,28,"updates"],[320,21,273,35],[320,24,273,35,"_ref1"],[320,29,273,35],[320,30,273,28,"updates"],[320,37,273,35],[321,12,274,8],[321,16,274,12],[322,14,275,10],[323,14,276,10],[323,18,276,14],[323,19,276,15,"id"],[323,21,276,17],[323,25,276,21,"id"],[323,27,276,23],[323,32,276,28],[323,43,276,39],[323,47,276,43,"id"],[323,49,276,45],[323,54,276,50],[323,60,276,56],[323,62,276,58],[324,16,277,12,"EventLogger"],[324,40,277,23],[324,41,277,24,"error"],[324,46,277,29],[324,47,277,30],[324,52,277,35],[324,54,277,37],[324,89,277,72],[324,91,277,74,"id"],[324,93,277,85],[324,94,277,86],[325,16,278,12],[325,23,278,19],[326,18,279,14,"error"],[326,23,279,19],[326,25,279,21],[327,20,280,16,"status"],[327,26,280,22],[327,28,280,24],[327,45,280,41],[328,20,281,16,"message"],[328,27,281,23],[328,29,281,25],[328,72,281,68],[329,20,282,16,"code"],[329,24,282,20],[329,26,282,22],[330,18,283,14],[331,16,284,12],[331,17,284,13],[332,14,285,10],[333,14,287,10],[333,18,287,10,"_yield$supabase$from$5"],[333,40,287,10],[333,49,287,40,"supabase"],[333,65,287,48],[333,66,288,13,"from"],[333,70,288,17],[333,71,288,18],[333,84,288,31],[333,85,288,32],[333,86,289,13,"update"],[333,92,289,19],[333,93,289,20,"updates"],[333,100,289,27],[333,101,289,28],[333,102,290,13,"eq"],[333,104,290,15],[333,105,290,16],[333,109,290,20],[333,111,290,22,"id"],[333,113,290,24],[333,114,290,25],[333,115,291,13,"select"],[333,121,291,19],[333,122,291,20],[333,123,291,21],[333,124,292,13,"single"],[333,130,292,19],[333,131,292,20],[333,132,292,21],[334,16,287,18,"data"],[334,20,287,22],[334,23,287,22,"_yield$supabase$from$5"],[334,45,287,22],[334,46,287,18,"data"],[334,50,287,22],[335,16,287,24,"error"],[335,21,287,29],[335,24,287,29,"_yield$supabase$from$5"],[335,46,287,29],[335,47,287,24,"error"],[335,52,287,29],[336,14,294,10],[336,18,294,14,"error"],[336,23,294,19],[336,25,294,21],[337,16,295,12,"EventLogger"],[337,40,295,23],[337,41,295,24,"error"],[337,46,295,29],[337,47,295,30],[337,52,295,35],[337,54,295,37],[337,82,295,65],[337,84,295,67,"error"],[337,89,295,81],[337,90,295,82],[338,16,296,12],[338,23,296,19],[339,18,297,14,"error"],[339,23,297,19],[339,25,297,21],[340,20,298,16,"status"],[340,26,298,22],[340,28,298,24],[340,42,298,38],[341,20,299,16,"message"],[341,27,299,23],[341,29,299,25,"error"],[341,34,299,30],[341,35,299,31,"message"],[341,42,299,38],[341,46,299,42],[341,75,299,71],[342,20,300,16,"code"],[342,24,300,20],[342,26,300,22,"error"],[342,31,300,27],[342,32,300,28,"code"],[343,18,301,14],[344,16,302,12],[344,17,302,13],[345,14,303,10],[346,14,305,10],[346,21,305,17],[347,16,305,19,"data"],[348,14,305,24],[348,15,305,25],[349,12,306,8],[349,13,306,9],[349,14,306,10],[349,21,306,17,"error"],[349,26,306,27],[349,28,306,29],[350,14,307,10,"EventLogger"],[350,38,307,21],[350,39,307,22,"error"],[350,44,307,27],[350,45,307,28],[350,50,307,33],[350,52,307,35],[350,82,307,65],[350,84,307,67,"error"],[350,89,307,81],[350,90,307,82],[351,14,308,10],[351,21,308,17],[352,16,309,12,"error"],[352,21,309,17],[352,23,309,19],[353,18,310,14,"status"],[353,24,310,20],[353,26,310,22],[353,40,310,36],[354,18,311,14,"message"],[354,25,311,21],[354,27,311,23,"error"],[354,32,311,28],[354,33,311,29,"message"],[354,40,311,36],[354,44,311,40],[355,16,312,12],[356,14,313,10],[356,15,313,11],[357,12,314,8],[358,10,315,6],[358,11,315,7],[359,10,315,7],[359,26,273,6,"queryFn"],[359,33,273,13,"queryFn"],[359,34,273,13,"_x8"],[359,37,273,13],[360,12,273,13],[360,19,273,13,"_ref10"],[360,25,273,13],[360,26,273,13,"apply"],[360,31,273,13],[360,38,273,13,"arguments"],[360,47,273,13],[361,10,273,13],[362,8,273,13],[362,11,315,7],[363,8,316,6,"invalidatesTags"],[363,23,316,21],[363,25,316,23,"invalidatesTags"],[363,26,316,24,"result"],[363,32,316,30],[363,34,316,32,"error"],[363,39,316,37],[363,41,316,37,"_ref11"],[363,47,316,37],[364,10,316,37],[364,14,316,41,"id"],[364,16,316,43],[364,19,316,43,"_ref11"],[364,25,316,43],[364,26,316,41,"id"],[364,28,316,43],[365,10,316,43],[365,17,316,50],[365,18,317,8],[366,12,317,10,"type"],[366,16,317,14],[366,18,317,16],[366,30,317,28],[367,12,317,30,"id"],[368,10,317,33],[368,11,317,34],[368,13,318,8],[369,12,318,10,"type"],[369,16,318,14],[369,18,318,16],[369,30,318,28],[370,12,318,30,"id"],[370,14,318,32],[370,16,318,34],[371,10,318,41],[371,11,318,42],[371,13,319,8],[372,12,319,10,"type"],[372,16,319,14],[372,18,319,16],[372,30,319,28],[373,12,319,30,"id"],[373,14,319,32],[373,16,319,34],[374,10,319,43],[374,11,319,44],[374,12,320,7],[375,8,320,7],[376,6,321,4],[376,7,321,5],[376,8,321,6],[377,6,323,4],[378,0,324,0],[379,0,325,0],[380,6,326,4,"deleteAutomation"],[380,22,326,20],[380,24,326,22,"builder"],[380,31,326,29],[380,32,326,30,"mutation"],[380,40,326,38],[380,41,326,53],[381,8,327,6,"queryFn"],[381,15,327,13],[382,10,327,13],[382,14,327,13,"_ref12"],[382,20,327,13],[382,27,327,13,"_asyncToGenerator2"],[382,45,327,13],[382,46,327,13,"default"],[382,53,327,13],[382,55,327,15],[382,66,327,22,"id"],[382,68,327,24],[382,70,327,29],[383,12,328,8],[383,16,328,12],[384,14,329,10],[385,14,330,10],[385,18,330,14],[385,19,330,15,"id"],[385,21,330,17],[385,25,330,21,"id"],[385,27,330,23],[385,32,330,28],[385,43,330,39],[385,47,330,43,"id"],[385,49,330,45],[385,54,330,50],[385,60,330,56],[385,62,330,58],[386,16,331,12,"EventLogger"],[386,40,331,23],[386,41,331,24,"error"],[386,46,331,29],[386,47,331,30],[386,52,331,35],[386,54,331,37],[386,91,331,74],[386,93,331,76,"id"],[386,95,331,87],[386,96,331,88],[387,16,332,12],[387,23,332,19],[388,18,333,14,"error"],[388,23,333,19],[388,25,333,21],[389,20,334,16,"status"],[389,26,334,22],[389,28,334,24],[389,45,334,41],[390,20,335,16,"message"],[390,27,335,23],[390,29,335,25],[390,74,335,70],[391,20,336,16,"code"],[391,24,336,20],[391,26,336,22],[392,18,337,14],[393,16,338,12],[393,17,338,13],[394,14,339,10],[395,14,341,10],[395,18,341,10,"_yield$supabase$from$6"],[395,40,341,10],[395,49,341,34,"supabase"],[395,65,341,42],[395,66,342,13,"from"],[395,70,342,17],[395,71,342,18],[395,84,342,31],[395,85,342,32],[395,86,343,13,"delete"],[395,92,343,19],[395,93,343,20],[395,94,343,21],[395,95,344,13,"eq"],[395,97,344,15],[395,98,344,16],[395,102,344,20],[395,104,344,22,"id"],[395,106,344,24],[395,107,344,25],[396,16,341,18,"error"],[396,21,341,23],[396,24,341,23,"_yield$supabase$from$6"],[396,46,341,23],[396,47,341,18,"error"],[396,52,341,23],[397,14,346,10],[397,18,346,14,"error"],[397,23,346,19],[397,25,346,21],[398,16,347,12,"EventLogger"],[398,40,347,23],[398,41,347,24,"error"],[398,46,347,29],[398,47,347,30],[398,52,347,35],[398,54,347,37],[398,82,347,65],[398,84,347,67,"error"],[398,89,347,81],[398,90,347,82],[399,16,348,12],[399,23,348,19],[400,18,349,14,"error"],[400,23,349,19],[400,25,349,21],[401,20,350,16,"status"],[401,26,350,22],[401,28,350,24],[401,42,350,38],[402,20,351,16,"message"],[402,27,351,23],[402,29,351,25,"error"],[402,34,351,30],[402,35,351,31,"message"],[402,42,351,38],[402,46,351,42],[402,75,351,71],[403,20,352,16,"code"],[403,24,352,20],[403,26,352,22,"error"],[403,31,352,27],[403,32,352,28,"code"],[404,18,353,14],[405,16,354,12],[405,17,354,13],[406,14,355,10],[407,14,357,10],[407,21,357,17],[408,16,357,19,"data"],[408,20,357,23],[408,22,357,25],[409,14,357,30],[409,15,357,31],[410,12,358,8],[410,13,358,9],[410,14,358,10],[410,21,358,17,"error"],[410,26,358,27],[410,28,358,29],[411,14,359,10,"EventLogger"],[411,38,359,21],[411,39,359,22,"error"],[411,44,359,27],[411,45,359,28],[411,50,359,33],[411,52,359,35],[411,82,359,65],[411,84,359,67,"error"],[411,89,359,81],[411,90,359,82],[412,14,360,10],[412,21,360,17],[413,16,361,12,"error"],[413,21,361,17],[413,23,361,19],[414,18,362,14,"status"],[414,24,362,20],[414,26,362,22],[414,40,362,36],[415,18,363,14,"message"],[415,25,363,21],[415,27,363,23,"error"],[415,32,363,28],[415,33,363,29,"message"],[415,40,363,36],[415,44,363,40],[416,16,364,12],[417,14,365,10],[417,15,365,11],[418,12,366,8],[419,10,367,6],[419,11,367,7],[420,10,367,7],[420,26,327,6,"queryFn"],[420,33,327,13,"queryFn"],[420,34,327,13,"_x9"],[420,37,327,13],[421,12,327,13],[421,19,327,13,"_ref12"],[421,25,327,13],[421,26,327,13,"apply"],[421,31,327,13],[421,38,327,13,"arguments"],[421,47,327,13],[422,10,327,13],[423,8,327,13],[423,11,367,7],[424,8,368,6,"invalidatesTags"],[424,23,368,21],[424,25,368,23,"invalidatesTags"],[424,26,368,24,"result"],[424,32,368,30],[424,34,368,32,"error"],[424,39,368,37],[424,41,368,39,"id"],[424,43,368,41],[424,48,368,46],[424,49,369,8],[425,10,369,10,"type"],[425,14,369,14],[425,16,369,16],[425,28,369,28],[426,10,369,30,"id"],[427,8,369,33],[427,9,369,34],[427,11,370,8],[428,10,370,10,"type"],[428,14,370,14],[428,16,370,16],[428,28,370,28],[429,10,370,30,"id"],[429,12,370,32],[429,14,370,34],[430,8,370,41],[430,9,370,42],[430,11,371,8],[431,10,371,10,"type"],[431,14,371,14],[431,16,371,16],[431,22,371,22],[432,10,371,24,"id"],[432,12,371,26],[432,14,371,28],[433,8,371,36],[433,9,371,37],[434,6,373,4],[434,7,373,5],[434,8,373,6],[435,6,375,4],[436,0,376,0],[437,0,377,0],[438,6,378,4,"cloneAutomation"],[438,21,378,19],[438,23,378,21,"builder"],[438,30,378,28],[438,31,378,29,"mutation"],[438,39,378,37],[438,40,378,62],[439,8,379,6,"queryFn"],[439,15,379,13],[440,10,379,13],[440,14,379,13,"_ref13"],[440,20,379,13],[440,27,379,13,"_asyncToGenerator2"],[440,45,379,13],[440,46,379,13,"default"],[440,53,379,13],[440,55,379,15],[440,66,379,22,"automationId"],[440,78,379,34],[440,80,379,39],[441,12,380,8],[441,16,380,12],[442,14,381,10],[443,14,382,10],[443,18,382,14],[443,19,382,15,"automationId"],[443,31,382,27],[443,35,382,31,"automationId"],[443,47,382,43],[443,52,382,48],[443,63,382,59],[443,67,382,63,"automationId"],[443,79,382,75],[443,84,382,80],[443,90,382,86],[443,92,382,88],[444,16,383,12,"EventLogger"],[444,40,383,23],[444,41,383,24,"error"],[444,46,383,29],[444,47,383,30],[444,52,383,35],[444,54,383,37],[444,90,383,73],[444,92,383,75,"automationId"],[444,104,383,96],[444,105,383,97],[445,16,384,12],[445,23,384,19],[446,18,385,14,"error"],[446,23,385,19],[446,25,385,21],[447,20,386,16,"status"],[447,26,386,22],[447,28,386,24],[447,45,386,41],[448,20,387,16,"message"],[448,27,387,23],[448,29,387,25],[448,73,387,69],[449,20,388,16,"code"],[449,24,388,20],[449,26,388,22],[450,18,389,14],[451,16,390,12],[451,17,390,13],[452,14,391,10],[453,14,393,10],[453,18,393,10,"_yield$supabase$auth$3"],[453,40,393,10],[453,49,393,43,"supabase"],[453,65,393,51],[453,66,393,52,"auth"],[453,70,393,56],[453,71,393,57,"getUser"],[453,78,393,64],[453,79,393,65],[453,80,393,66],[454,16,393,26,"user"],[454,20,393,30],[454,23,393,30,"_yield$supabase$auth$3"],[454,45,393,30],[454,46,393,18,"data"],[454,50,393,22],[454,51,393,26,"user"],[454,55,393,30],[455,14,395,10],[455,18,395,14],[455,19,395,15,"user"],[455,23,395,19],[455,25,395,21],[456,16,396,12],[456,23,396,19],[457,18,397,14,"error"],[457,23,397,19],[457,25,397,21],[458,20,398,16,"status"],[458,26,398,22],[458,28,398,24],[458,42,398,38],[459,20,399,16,"message"],[459,27,399,23],[459,29,399,25],[460,18,400,14],[461,16,401,12],[461,17,401,13],[462,14,402,10],[464,14,404,10],[465,14,405,10],[465,18,405,10,"_yield$supabase$from$7"],[465,40,405,10],[465,49,405,72,"supabase"],[465,65,405,80],[465,66,406,13,"from"],[465,70,406,17],[465,71,406,18],[465,84,406,31],[465,85,406,32],[465,86,407,13,"select"],[465,92,407,19],[465,93,407,20],[465,96,407,23],[465,97,407,24],[465,98,408,13,"eq"],[465,100,408,15],[465,101,408,16],[465,105,408,20],[465,107,408,22,"automationId"],[465,119,408,34],[465,120,408,35],[465,121,409,13,"single"],[465,127,409,19],[465,128,409,20],[465,129,409,21],[466,16,405,24,"originalAutomation"],[466,34,405,42],[466,37,405,42,"_yield$supabase$from$7"],[466,59,405,42],[466,60,405,18,"data"],[466,64,405,22],[467,16,405,51,"fetchError"],[467,26,405,61],[467,29,405,61,"_yield$supabase$from$7"],[467,51,405,61],[467,52,405,44,"error"],[467,57,405,49],[468,14,411,10],[468,18,411,14,"fetchError"],[468,28,411,24],[468,30,411,26],[469,16,412,12],[469,23,412,19],[470,18,413,14,"error"],[470,23,413,19],[470,25,413,21],[471,20,414,16,"status"],[471,26,414,22],[471,28,414,24,"fetchError"],[471,38,414,34],[471,39,414,35,"code"],[471,43,414,39],[471,48,414,44],[471,58,414,54],[471,61,414,57],[471,72,414,68],[471,75,414,71],[471,88,414,84],[472,20,415,16,"message"],[472,27,415,23],[472,29,415,25,"fetchError"],[472,39,415,35],[472,40,415,36,"code"],[472,44,415,40],[472,49,415,45],[472,59,415,55],[472,62,415,58],[472,84,415,80],[472,87,415,83,"fetchError"],[472,97,415,93],[472,98,415,94,"message"],[472,105,415,101],[473,20,416,16,"code"],[473,24,416,20],[473,26,416,22,"fetchError"],[473,36,416,32],[473,37,416,33,"code"],[474,18,417,14],[475,16,418,12],[475,17,418,13],[476,14,419,10],[478,14,421,10],[479,14,422,10],[479,18,422,10,"_yield$supabase$from$8"],[479,40,422,10],[479,49,422,40,"supabase"],[479,65,422,48],[479,66,423,13,"from"],[479,70,423,17],[479,71,423,18],[479,84,423,31],[479,85,423,32],[479,86,424,13,"insert"],[479,92,424,19],[479,93,424,20],[480,18,425,14],[480,21,425,17,"originalAutomation"],[480,39,425,35],[481,18,426,14,"id"],[481,20,426,16],[481,22,426,18,"undefined"],[481,31,426,27],[482,18,427,14,"title"],[482,23,427,19],[482,25,427,21],[482,28,427,24,"originalAutomation"],[482,46,427,42],[482,47,427,43,"title"],[482,52,427,48],[482,61,427,57],[483,18,428,14,"created_by"],[483,28,428,24],[483,30,428,26,"user"],[483,34,428,30],[483,35,428,31,"id"],[483,37,428,33],[484,18,429,14,"created_at"],[484,28,429,24],[484,30,429,26,"undefined"],[484,39,429,35],[485,18,430,14,"updated_at"],[485,28,430,24],[485,30,430,26,"undefined"],[485,39,430,35],[486,18,431,14,"is_public"],[486,27,431,23],[486,29,431,25],[486,34,431,30],[487,18,432,14,"execution_count"],[487,33,432,29],[487,35,432,31],[487,36,432,32],[488,18,433,14,"average_rating"],[488,32,433,28],[488,34,433,30],[488,38,433,34],[489,18,434,14,"rating_count"],[489,30,434,26],[489,32,434,28],[490,16,435,12],[490,17,435,13],[490,18,435,14],[490,19,436,13,"select"],[490,25,436,19],[490,26,436,20],[490,27,436,21],[490,28,437,13,"single"],[490,34,437,19],[490,35,437,20],[490,36,437,21],[491,16,422,18,"data"],[491,20,422,22],[491,23,422,22,"_yield$supabase$from$8"],[491,45,422,22],[491,46,422,18,"data"],[491,50,422,22],[492,16,422,24,"error"],[492,21,422,29],[492,24,422,29,"_yield$supabase$from$8"],[492,46,422,29],[492,47,422,24,"error"],[492,52,422,29],[493,14,439,10],[493,18,439,14,"error"],[493,23,439,19],[493,25,439,21],[494,16,440,12],[494,23,440,19],[495,18,441,14,"error"],[495,23,441,19],[495,25,441,21],[496,20,442,16,"status"],[496,26,442,22],[496,28,442,24],[496,42,442,38],[497,20,443,16,"message"],[497,27,443,23],[497,29,443,25,"error"],[497,34,443,30],[497,35,443,31,"message"],[497,42,443,38],[497,46,443,42],[497,74,443,70],[498,20,444,16,"code"],[498,24,444,20],[498,26,444,22,"error"],[498,31,444,27],[498,32,444,28,"code"],[499,18,445,14],[500,16,446,12],[500,17,446,13],[501,14,447,10],[502,14,449,10],[502,21,449,17],[503,16,449,19,"data"],[504,14,449,24],[504,15,449,25],[505,12,450,8],[505,13,450,9],[505,14,450,10],[505,21,450,17,"error"],[505,26,450,27],[505,28,450,29],[506,14,451,10,"EventLogger"],[506,38,451,21],[506,39,451,22,"error"],[506,44,451,27],[506,45,451,28],[506,50,451,33],[506,52,451,35],[506,81,451,64],[506,83,451,66,"error"],[506,88,451,80],[506,89,451,81],[507,14,452,10],[507,21,452,17],[508,16,453,12,"error"],[508,21,453,17],[508,23,453,19],[509,18,454,14,"status"],[509,24,454,20],[509,26,454,22],[509,40,454,36],[510,18,455,14,"message"],[510,25,455,21],[510,27,455,23,"error"],[510,32,455,28],[510,33,455,29,"message"],[510,40,455,36],[510,44,455,40],[511,16,456,12],[512,14,457,10],[512,15,457,11],[513,12,458,8],[514,10,459,6],[514,11,459,7],[515,10,459,7],[515,26,379,6,"queryFn"],[515,33,379,13,"queryFn"],[515,34,379,13,"_x0"],[515,37,379,13],[516,12,379,13],[516,19,379,13,"_ref13"],[516,25,379,13],[516,26,379,13,"apply"],[516,31,379,13],[516,38,379,13,"arguments"],[516,47,379,13],[517,10,379,13],[518,8,379,13],[518,11,459,7],[519,8,460,6,"invalidatesTags"],[519,23,460,21],[519,25,460,23],[519,26,461,8],[520,10,461,10,"type"],[520,14,461,14],[520,16,461,16],[520,28,461,28],[521,10,461,30,"id"],[521,12,461,32],[521,14,461,34],[522,8,461,41],[522,9,461,42],[522,11,462,8],[523,10,462,10,"type"],[523,14,462,14],[523,16,462,16],[523,22,462,22],[524,10,462,24,"id"],[524,12,462,26],[524,14,462,28],[525,8,462,36],[525,9,462,37],[526,6,464,4],[526,7,464,5],[526,8,464,6],[527,6,466,4],[529,6,468,4],[530,0,469,0],[531,0,470,0],[532,6,471,4,"getUserStats"],[532,18,471,16],[532,20,471,18,"builder"],[532,27,471,25],[532,28,471,26,"query"],[532,33,471,31],[532,34,471,49],[533,8,472,6,"queryFn"],[533,15,472,13],[534,10,472,13],[534,14,472,13,"_ref15"],[534,20,472,13],[534,27,472,13,"_asyncToGenerator2"],[534,45,472,13],[534,46,472,13,"default"],[534,53,472,13],[534,55,472,15],[534,66,472,22,"_"],[534,67,472,23],[534,69,472,23,"_ref14"],[534,75,472,23],[534,77,472,40],[535,12,472,40],[535,16,472,27,"signal"],[535,22,472,33],[535,25,472,33,"_ref14"],[535,31,472,33],[535,32,472,27,"signal"],[535,38,472,33],[536,12,473,8],[536,16,473,12],[537,14,474,10],[537,18,474,10,"_yield$supabase$auth$4"],[537,40,474,10],[537,49,474,43,"supabase"],[537,65,474,51],[537,66,474,52,"auth"],[537,70,474,56],[537,71,474,57,"getUser"],[537,78,474,64],[537,79,474,65],[537,80,474,66],[538,16,474,26,"user"],[538,20,474,30],[538,23,474,30,"_yield$supabase$auth$4"],[538,45,474,30],[538,46,474,18,"data"],[538,50,474,22],[538,51,474,26,"user"],[538,55,474,30],[539,14,476,10],[539,18,476,14],[539,19,476,15,"user"],[539,23,476,19],[539,25,476,21],[540,16,477,12],[540,23,477,19],[541,18,478,14,"data"],[541,22,478,18],[541,24,478,20],[542,20,479,16,"total_automations"],[542,37,479,33],[542,39,479,35],[542,40,479,36],[543,20,480,16,"total_runs"],[543,30,480,26],[543,32,480,28],[543,33,480,29],[544,20,481,16,"successful_runs"],[544,35,481,31],[544,37,481,33],[544,38,481,34],[545,20,482,16,"failed_runs"],[545,31,482,27],[545,33,482,29],[545,34,482,30],[546,20,483,16,"total_time_saved"],[546,36,483,32],[546,38,483,34],[547,18,484,14],[548,16,485,12],[548,17,485,13],[549,14,486,10],[551,14,488,10],[552,14,489,10],[552,18,489,10,"_yield$supabase$from$9"],[552,40,489,10],[552,49,489,65,"supabase"],[552,65,489,73],[552,66,490,13,"from"],[552,70,490,17],[552,71,490,18],[552,84,490,31],[552,85,490,32],[552,86,491,13,"select"],[552,92,491,19],[552,93,491,20],[552,97,491,24],[552,98,491,25],[552,99,492,13,"eq"],[552,101,492,15],[552,102,492,16],[552,114,492,28],[552,116,492,30,"user"],[552,120,492,34],[552,121,492,35,"id"],[552,123,492,37],[552,124,492,38],[552,125,493,13,"abortSignal"],[552,136,493,24],[552,137,493,25,"signal"],[552,143,493,31],[552,144,493,32],[553,16,489,24,"automations"],[553,27,489,35],[553,30,489,35,"_yield$supabase$from$9"],[553,52,489,35],[553,53,489,18,"data"],[553,57,489,22],[554,16,489,44,"countError"],[554,26,489,54],[554,29,489,54,"_yield$supabase$from$9"],[554,51,489,54],[554,52,489,37,"error"],[554,57,489,42],[555,14,495,10],[555,18,495,14,"countError"],[555,28,495,24],[555,30,495,26],[556,16,496,12,"EventLogger"],[556,40,496,23],[556,41,496,24,"error"],[556,46,496,29],[556,47,496,30],[556,52,496,35],[556,54,496,37],[556,89,496,72],[556,91,496,74,"countError"],[556,101,496,93],[556,102,496,94],[557,16,497,12],[557,23,497,19],[558,18,498,14,"error"],[558,23,498,19],[558,25,498,21],[559,20,499,16,"status"],[559,26,499,22],[559,28,499,24],[559,41,499,37],[560,20,500,16,"message"],[560,27,500,23],[560,29,500,25,"countError"],[560,39,500,35],[560,40,500,36,"message"],[560,47,500,43],[560,51,500,47],[560,84,500,80],[561,20,501,16,"code"],[561,24,501,20],[561,26,501,22,"countError"],[561,36,501,32],[561,37,501,33,"code"],[562,18,502,14],[563,16,503,12],[563,17,503,13],[564,14,504,10],[565,14,506,10],[565,21,506,17],[566,16,507,12,"data"],[566,20,507,16],[566,22,507,18],[567,18,508,14,"total_automations"],[567,35,508,31],[567,37,508,33,"automations"],[567,48,508,44],[567,50,508,46,"length"],[567,56,508,52],[567,60,508,56],[567,61,508,57],[568,18,509,14,"total_runs"],[568,28,509,24],[568,30,509,26],[568,31,509,27],[569,18,510,14,"successful_runs"],[569,33,510,29],[569,35,510,31],[569,36,510,32],[570,18,511,14,"failed_runs"],[570,29,511,25],[570,31,511,27],[570,32,511,28],[571,18,512,14,"total_time_saved"],[571,34,512,30],[571,36,512,32],[572,16,513,12],[573,14,514,10],[573,15,514,11],[574,12,515,8],[574,13,515,9],[574,14,515,10],[574,21,515,17,"error"],[574,26,515,27],[574,28,515,29],[575,14,516,10],[575,18,516,14,"error"],[575,23,516,19],[575,24,516,20,"name"],[575,28,516,24],[575,33,516,29],[575,45,516,41],[575,47,516,43],[576,16,517,12],[576,23,517,19],[577,18,517,21,"error"],[577,23,517,26],[577,25,517,28],[578,20,517,30,"status"],[578,26,517,36],[578,28,517,38],[578,39,517,49],[579,20,517,51,"message"],[579,27,517,58],[579,29,517,60],[580,18,517,80],[581,16,517,82],[581,17,517,83],[582,14,518,10],[583,14,520,10,"EventLogger"],[583,38,520,21],[583,39,520,22,"error"],[583,44,520,27],[583,45,520,28],[583,50,520,33],[583,52,520,35],[583,81,520,64],[583,83,520,66,"error"],[583,88,520,80],[583,89,520,81],[584,14,521,10],[584,21,521,17],[585,16,522,12,"error"],[585,21,522,17],[585,23,522,19],[586,18,523,14,"status"],[586,24,523,20],[586,26,523,22],[586,39,523,35],[587,18,524,14,"message"],[587,25,524,21],[587,27,524,23,"error"],[587,32,524,28],[587,33,524,29,"message"],[587,40,524,36],[587,44,524,40],[588,16,525,12],[589,14,526,10],[589,15,526,11],[590,12,527,8],[591,10,528,6],[591,11,528,7],[592,10,528,7],[592,26,472,6,"queryFn"],[592,33,472,13,"queryFn"],[592,34,472,13,"_x1"],[592,37,472,13],[592,39,472,13,"_x10"],[592,43,472,13],[593,12,472,13],[593,19,472,13,"_ref15"],[593,25,472,13],[593,26,472,13,"apply"],[593,31,472,13],[593,38,472,13,"arguments"],[593,47,472,13],[594,10,472,13],[595,8,472,13],[595,11,528,7],[596,8,529,6,"providesTags"],[596,20,529,18],[596,22,529,20],[596,23,529,21],[597,10,529,23,"type"],[597,14,529,27],[597,16,529,29],[597,22,529,35],[598,10,529,37,"id"],[598,12,529,39],[598,14,529,41],[599,8,529,49],[599,9,529,50],[600,6,530,4],[600,7,530,5],[600,8,530,6],[601,6,532,4],[603,6,534,4],[604,0,535,0],[605,0,536,0],[606,6,537,4,"getRecentExecutions"],[606,25,537,23],[606,27,537,25,"builder"],[606,34,537,32],[606,35,537,33,"query"],[606,40,537,38],[606,41,537,82],[607,8,538,6,"queryFn"],[607,15,538,13],[608,10,538,13],[608,14,538,13,"_ref18"],[608,20,538,13],[608,27,538,13,"_asyncToGenerator2"],[608,45,538,13],[608,46,538,13,"default"],[608,53,538,13],[608,55,538,15],[608,66,538,15,"_ref16"],[608,72,538,15],[608,74,538,15,"_ref17"],[608,80,538,15],[608,82,538,53],[609,12,538,53],[609,16,538,53,"_ref16$limit"],[609,28,538,53],[609,31,538,53,"_ref16"],[609,37,538,53],[609,38,538,24,"limit"],[609,43,538,29],[610,14,538,24,"limit"],[610,19,538,29],[610,22,538,29,"_ref16$limit"],[610,34,538,29],[610,39,538,29,"undefined"],[610,48,538,29],[610,51,538,32],[610,53,538,34],[610,56,538,34,"_ref16$limit"],[610,68,538,34],[611,12,538,34],[611,16,538,40,"signal"],[611,22,538,46],[611,25,538,46,"_ref17"],[611,31,538,46],[611,32,538,40,"signal"],[611,38,538,46],[612,12,539,8],[612,16,539,12],[613,14,540,10],[613,18,540,10,"_yield$supabase$auth$5"],[613,40,540,10],[613,49,540,43,"supabase"],[613,65,540,51],[613,66,540,52,"auth"],[613,70,540,56],[613,71,540,57,"getUser"],[613,78,540,64],[613,79,540,65],[613,80,540,66],[614,16,540,26,"user"],[614,20,540,30],[614,23,540,30,"_yield$supabase$auth$5"],[614,45,540,30],[614,46,540,18,"data"],[614,50,540,22],[614,51,540,26,"user"],[614,55,540,30],[615,14,542,10],[615,18,542,14],[615,19,542,15,"user"],[615,23,542,19],[615,25,542,21],[616,16,543,12],[616,23,543,19],[617,18,543,21,"data"],[617,22,543,25],[617,24,543,27],[618,16,543,30],[618,17,543,31],[619,14,544,10],[620,14,546,10],[620,18,546,10,"_yield$supabase$from$0"],[620,40,546,10],[620,49,546,40,"supabase"],[620,65,546,48],[620,66,547,13,"from"],[620,70,547,17],[620,71,547,18],[620,94,547,41],[620,95,547,42],[620,96,548,13,"select"],[620,102,548,19],[620,103,548,20],[620,106,548,23],[620,107,548,24],[620,108,549,13,"eq"],[620,110,549,15],[620,111,549,16],[620,120,549,25],[620,122,549,27,"user"],[620,126,549,31],[620,127,549,32,"id"],[620,129,549,34],[620,130,549,35],[620,131,550,13,"order"],[620,136,550,18],[620,137,550,19],[620,149,550,31],[620,151,550,33],[621,18,550,35,"ascending"],[621,27,550,44],[621,29,550,46],[622,16,550,52],[622,17,550,53],[622,18,550,54],[622,19,551,13,"limit"],[622,24,551,18],[622,25,551,19,"limit"],[622,30,551,24],[622,31,551,25],[622,32,552,13,"abortSignal"],[622,43,552,24],[622,44,552,25,"signal"],[622,50,552,31],[622,51,552,32],[623,16,546,18,"data"],[623,20,546,22],[623,23,546,22,"_yield$supabase$from$0"],[623,45,546,22],[623,46,546,18,"data"],[623,50,546,22],[624,16,546,24,"error"],[624,21,546,29],[624,24,546,29,"_yield$supabase$from$0"],[624,46,546,29],[624,47,546,24,"error"],[624,52,546,29],[625,14,554,10],[625,18,554,14,"error"],[625,23,554,19],[625,25,554,21],[626,16,555,12,"EventLogger"],[626,40,555,23],[626,41,555,24,"error"],[626,46,555,29],[626,47,555,30],[626,52,555,35],[626,54,555,37],[626,89,555,72],[626,91,555,74,"error"],[626,96,555,88],[626,97,555,89],[627,16,556,12],[627,23,556,19],[628,18,557,14,"error"],[628,23,557,19],[628,25,557,21],[629,20,558,16,"status"],[629,26,558,22],[629,28,558,24],[629,41,558,37],[630,20,559,16,"message"],[630,27,559,23],[630,29,559,25,"error"],[630,34,559,30],[630,35,559,31,"message"],[630,42,559,38],[630,46,559,42],[630,81,559,77],[631,20,560,16,"code"],[631,24,560,20],[631,26,560,22,"error"],[631,31,560,27],[631,32,560,28,"code"],[632,18,561,14],[633,16,562,12],[633,17,562,13],[634,14,563,10],[635,14,565,10],[635,21,565,17],[636,16,565,19,"data"],[636,20,565,23],[636,22,565,25,"data"],[636,26,565,29],[636,30,565,33],[637,14,565,36],[637,15,565,37],[638,12,566,8],[638,13,566,9],[638,14,566,10],[638,21,566,17,"error"],[638,26,566,27],[638,28,566,29],[639,14,567,10],[639,18,567,14,"error"],[639,23,567,19],[639,24,567,20,"name"],[639,28,567,24],[639,33,567,29],[639,45,567,41],[639,47,567,43],[640,16,568,12],[640,23,568,19],[641,18,568,21,"error"],[641,23,568,26],[641,25,568,28],[642,20,568,30,"status"],[642,26,568,36],[642,28,568,38],[642,39,568,49],[643,20,568,51,"message"],[643,27,568,58],[643,29,568,60],[644,18,568,80],[645,16,568,82],[645,17,568,83],[646,14,569,10],[647,14,571,10,"EventLogger"],[647,38,571,21],[647,39,571,22,"error"],[647,44,571,27],[647,45,571,28],[647,50,571,33],[647,52,571,35],[647,88,571,71],[647,90,571,73,"error"],[647,95,571,87],[647,96,571,88],[648,14,572,10],[648,21,572,17],[649,16,573,12,"error"],[649,21,573,17],[649,23,573,19],[650,18,574,14,"status"],[650,24,574,20],[650,26,574,22],[650,39,574,35],[651,18,575,14,"message"],[651,25,575,21],[651,27,575,23,"error"],[651,32,575,28],[651,33,575,29,"message"],[651,40,575,36],[651,44,575,40],[652,16,576,12],[653,14,577,10],[653,15,577,11],[654,12,578,8],[655,10,579,6],[655,11,579,7],[656,10,579,7],[656,26,538,6,"queryFn"],[656,33,538,13,"queryFn"],[656,34,538,13,"_x11"],[656,38,538,13],[656,40,538,13,"_x12"],[656,44,538,13],[657,12,538,13],[657,19,538,13,"_ref18"],[657,25,538,13],[657,26,538,13,"apply"],[657,31,538,13],[657,38,538,13,"arguments"],[657,47,538,13],[658,10,538,13],[659,8,538,13],[659,11,579,7],[660,8,580,6,"providesTags"],[660,20,580,18],[660,22,580,20],[660,23,580,21],[661,10,580,23,"type"],[661,14,580,27],[661,16,580,29],[661,27,580,40],[662,10,580,42,"id"],[662,12,580,44],[662,14,580,46],[663,8,580,55],[663,9,580,56],[664,6,581,4],[664,7,581,5],[664,8,581,6],[665,6,583,4],[666,0,584,0],[667,0,585,0],[668,6,586,4,"getAutomationExecutions"],[668,29,586,27],[668,31,586,29,"builder"],[668,38,586,36],[668,39,586,37,"query"],[668,44,586,42],[668,45,586,74],[669,8,587,6,"queryFn"],[669,15,587,13],[670,10,587,13],[670,14,587,13,"_ref20"],[670,20,587,13],[670,27,587,13,"_asyncToGenerator2"],[670,45,587,13],[670,46,587,13,"default"],[670,53,587,13],[670,55,587,15],[670,66,587,22,"automationId"],[670,78,587,34],[670,80,587,34,"_ref19"],[670,86,587,34],[670,88,587,51],[671,12,587,51],[671,16,587,38,"signal"],[671,22,587,44],[671,25,587,44,"_ref19"],[671,31,587,44],[671,32,587,38,"signal"],[671,38,587,44],[672,12,588,8],[672,16,588,12],[673,14,589,10],[674,14,590,10],[674,18,590,14],[674,19,590,15,"automationId"],[674,31,590,27],[674,35,590,31,"automationId"],[674,47,590,43],[674,52,590,48],[674,63,590,59],[674,67,590,63,"automationId"],[674,79,590,75],[674,84,590,80],[674,90,590,86],[674,92,590,88],[675,16,591,12,"EventLogger"],[675,40,591,23],[675,41,591,24,"error"],[675,46,591,29],[675,47,591,30],[675,52,591,35],[675,54,591,37],[675,93,591,76],[675,95,591,78,"automationId"],[675,107,591,99],[675,108,591,100],[676,16,592,12],[676,23,592,19],[677,18,593,14,"error"],[677,23,593,19],[677,25,593,21],[678,20,594,16,"status"],[678,26,594,22],[678,28,594,24],[678,45,594,41],[679,20,595,16,"message"],[679,27,595,23],[679,29,595,25],[679,76,595,72],[680,20,596,16,"code"],[680,24,596,20],[680,26,596,22],[681,18,597,14],[682,16,598,12],[682,17,598,13],[683,14,599,10],[684,14,601,10],[684,18,601,10,"_yield$supabase$from$1"],[684,40,601,10],[684,49,601,40,"supabase"],[684,65,601,48],[684,66,602,13,"from"],[684,70,602,17],[684,71,602,18],[684,94,602,41],[684,95,602,42],[684,96,603,13,"select"],[684,102,603,19],[684,103,603,20],[684,106,603,23],[684,107,603,24],[684,108,604,13,"eq"],[684,110,604,15],[684,111,604,16],[684,126,604,31],[684,128,604,33,"automationId"],[684,140,604,45],[684,141,604,46],[684,142,605,13,"order"],[684,147,605,18],[684,148,605,19],[684,160,605,31],[684,162,605,33],[685,18,605,35,"ascending"],[685,27,605,44],[685,29,605,46],[686,16,605,52],[686,17,605,53],[686,18,605,54],[686,19,606,13,"abortSignal"],[686,30,606,24],[686,31,606,25,"signal"],[686,37,606,31],[686,38,606,32],[687,16,601,18,"data"],[687,20,601,22],[687,23,601,22,"_yield$supabase$from$1"],[687,45,601,22],[687,46,601,18,"data"],[687,50,601,22],[688,16,601,24,"error"],[688,21,601,29],[688,24,601,29,"_yield$supabase$from$1"],[688,46,601,29],[688,47,601,24,"error"],[688,52,601,29],[689,14,608,10],[689,18,608,14,"error"],[689,23,608,19],[689,25,608,21],[690,16,609,12,"EventLogger"],[690,40,609,23],[690,41,609,24,"error"],[690,46,609,29],[690,47,609,30],[690,52,609,35],[690,54,609,37],[690,93,609,76],[690,95,609,78,"error"],[690,100,609,92],[690,101,609,93],[691,16,610,12],[691,23,610,19],[692,18,611,14,"error"],[692,23,611,19],[692,25,611,21],[693,20,612,16,"status"],[693,26,612,22],[693,28,612,24],[693,41,612,37],[694,20,613,16,"message"],[694,27,613,23],[694,29,613,25,"error"],[694,34,613,30],[694,35,613,31,"message"],[694,42,613,38],[694,46,613,42],[694,85,613,81],[695,20,614,16,"code"],[695,24,614,20],[695,26,614,22,"error"],[695,31,614,27],[695,32,614,28,"code"],[696,18,615,14],[697,16,616,12],[697,17,616,13],[698,14,617,10],[699,14,619,10],[699,21,619,17],[700,16,619,19,"data"],[700,20,619,23],[700,22,619,25,"data"],[700,26,619,29],[700,30,619,33],[701,14,619,36],[701,15,619,37],[702,12,620,8],[702,13,620,9],[702,14,620,10],[702,21,620,17,"error"],[702,26,620,27],[702,28,620,29],[703,14,621,10],[703,18,621,14,"error"],[703,23,621,19],[703,24,621,20,"name"],[703,28,621,24],[703,33,621,29],[703,45,621,41],[703,47,621,43],[704,16,622,12],[704,23,622,19],[705,18,622,21,"error"],[705,23,622,26],[705,25,622,28],[706,20,622,30,"status"],[706,26,622,36],[706,28,622,38],[706,39,622,49],[707,20,622,51,"message"],[707,27,622,58],[707,29,622,60],[708,18,622,80],[709,16,622,82],[709,17,622,83],[710,14,623,10],[711,14,625,10,"EventLogger"],[711,38,625,21],[711,39,625,22,"error"],[711,44,625,27],[711,45,625,28],[711,50,625,33],[711,52,625,35],[711,92,625,75],[711,94,625,77,"error"],[711,99,625,91],[711,100,625,92],[712,14,626,10],[712,21,626,17],[713,16,627,12,"error"],[713,21,627,17],[713,23,627,19],[714,18,628,14,"status"],[714,24,628,20],[714,26,628,22],[714,39,628,35],[715,18,629,14,"message"],[715,25,629,21],[715,27,629,23,"error"],[715,32,629,28],[715,33,629,29,"message"],[715,40,629,36],[715,44,629,40],[716,16,630,12],[717,14,631,10],[717,15,631,11],[718,12,632,8],[719,10,633,6],[719,11,633,7],[720,10,633,7],[720,26,587,6,"queryFn"],[720,33,587,13,"queryFn"],[720,34,587,13,"_x13"],[720,38,587,13],[720,40,587,13,"_x14"],[720,44,587,13],[721,12,587,13],[721,19,587,13,"_ref20"],[721,25,587,13],[721,26,587,13,"apply"],[721,31,587,13],[721,38,587,13,"arguments"],[721,47,587,13],[722,10,587,13],[723,8,587,13],[723,11,633,7],[724,8,634,6,"providesTags"],[724,20,634,18],[724,22,634,20,"providesTags"],[724,23,634,21,"result"],[724,29,634,27],[724,31,634,29,"error"],[724,36,634,34],[724,38,634,36,"automationId"],[724,50,634,48],[724,55,634,53],[724,56,635,8],[725,10,635,10,"type"],[725,14,635,14],[725,16,635,16],[725,27,635,27],[726,10,635,29,"id"],[726,12,635,31],[726,14,635,33,"automationId"],[727,8,635,46],[727,9,635,47],[728,6,637,4],[728,7,637,5],[728,8,637,6],[729,6,639,4],[730,0,640,0],[731,0,641,0],[732,6,642,4,"getExecutionHistory"],[732,25,642,23],[732,27,642,25,"builder"],[732,34,642,32],[732,35,642,33,"query"],[732,40,642,38],[732,41,642,82],[733,8,643,6,"queryFn"],[733,15,643,13],[734,10,643,13],[734,14,643,13,"_ref23"],[734,20,643,13],[734,27,643,13,"_asyncToGenerator2"],[734,45,643,13],[734,46,643,13,"default"],[734,53,643,13],[734,55,643,15],[734,66,643,15,"_ref21"],[734,72,643,15],[734,74,643,15,"_ref22"],[734,80,643,15],[734,82,643,53],[735,12,643,53],[735,16,643,53,"_ref21$limit"],[735,28,643,53],[735,31,643,53,"_ref21"],[735,37,643,53],[735,38,643,24,"limit"],[735,43,643,29],[736,14,643,24,"limit"],[736,19,643,29],[736,22,643,29,"_ref21$limit"],[736,34,643,29],[736,39,643,29,"undefined"],[736,48,643,29],[736,51,643,32],[736,53,643,34],[736,56,643,34,"_ref21$limit"],[736,68,643,34],[737,12,643,34],[737,16,643,40,"signal"],[737,22,643,46],[737,25,643,46,"_ref22"],[737,31,643,46],[737,32,643,40,"signal"],[737,38,643,46],[738,12,644,8],[738,16,644,12],[739,14,645,10],[739,18,645,10,"_yield$supabase$auth$6"],[739,40,645,10],[739,49,645,43,"supabase"],[739,65,645,51],[739,66,645,52,"auth"],[739,70,645,56],[739,71,645,57,"getUser"],[739,78,645,64],[739,79,645,65],[739,80,645,66],[740,16,645,26,"user"],[740,20,645,30],[740,23,645,30,"_yield$supabase$auth$6"],[740,45,645,30],[740,46,645,18,"data"],[740,50,645,22],[740,51,645,26,"user"],[740,55,645,30],[741,14,647,10],[741,18,647,14],[741,19,647,15,"user"],[741,23,647,19],[741,25,647,21],[742,16,648,12],[742,23,648,19],[743,18,648,21,"data"],[743,22,648,25],[743,24,648,27],[744,16,648,30],[744,17,648,31],[745,14,649,10],[746,14,651,10],[746,18,651,10,"_yield$supabase$from$10"],[746,41,651,10],[746,50,651,40,"supabase"],[746,66,651,48],[746,67,652,13,"from"],[746,71,652,17],[746,72,652,18],[746,95,652,41],[746,96,652,42],[746,97,653,13,"select"],[746,103,653,19],[746,104,653,20],[747,0,654,0],[748,0,655,0],[749,0,656,0],[749,13,656,13],[749,14,656,14],[749,15,657,13,"eq"],[749,17,657,15],[749,18,657,16],[749,27,657,25],[749,29,657,27,"user"],[749,33,657,31],[749,34,657,32,"id"],[749,36,657,34],[749,37,657,35],[749,38,658,13,"order"],[749,43,658,18],[749,44,658,19],[749,56,658,31],[749,58,658,33],[750,18,658,35,"ascending"],[750,27,658,44],[750,29,658,46],[751,16,658,52],[751,17,658,53],[751,18,658,54],[751,19,659,13,"limit"],[751,24,659,18],[751,25,659,19,"limit"],[751,30,659,24],[751,31,659,25],[751,32,660,13,"abortSignal"],[751,43,660,24],[751,44,660,25,"signal"],[751,50,660,31],[751,51,660,32],[752,16,651,18,"data"],[752,20,651,22],[752,23,651,22,"_yield$supabase$from$10"],[752,46,651,22],[752,47,651,18,"data"],[752,51,651,22],[753,16,651,24,"error"],[753,21,651,29],[753,24,651,29,"_yield$supabase$from$10"],[753,47,651,29],[753,48,651,24,"error"],[753,53,651,29],[754,14,662,10],[754,18,662,14,"error"],[754,23,662,19],[754,25,662,21],[755,16,663,12,"EventLogger"],[755,40,663,23],[755,41,663,24,"error"],[755,46,663,29],[755,47,663,30],[755,52,663,35],[755,54,663,37],[755,89,663,72],[755,91,663,74,"error"],[755,96,663,88],[755,97,663,89],[756,16,664,12],[756,23,664,19],[757,18,665,14,"error"],[757,23,665,19],[757,25,665,21],[758,20,666,16,"status"],[758,26,666,22],[758,28,666,24],[758,41,666,37],[759,20,667,16,"message"],[759,27,667,23],[759,29,667,25,"error"],[759,34,667,30],[759,35,667,31,"message"],[759,42,667,38],[759,46,667,42],[759,81,667,77],[760,20,668,16,"code"],[760,24,668,20],[760,26,668,22,"error"],[760,31,668,27],[760,32,668,28,"code"],[761,18,669,14],[762,16,670,12],[762,17,670,13],[763,14,671,10],[764,14,673,10],[764,21,673,17],[765,16,673,19,"data"],[765,20,673,23],[765,22,673,25,"data"],[765,26,673,29],[765,30,673,33],[766,14,673,36],[766,15,673,37],[767,12,674,8],[767,13,674,9],[767,14,674,10],[767,21,674,17,"error"],[767,26,674,27],[767,28,674,29],[768,14,675,10],[768,18,675,14,"error"],[768,23,675,19],[768,24,675,20,"name"],[768,28,675,24],[768,33,675,29],[768,45,675,41],[768,47,675,43],[769,16,676,12],[769,23,676,19],[770,18,676,21,"error"],[770,23,676,26],[770,25,676,28],[771,20,676,30,"status"],[771,26,676,36],[771,28,676,38],[771,39,676,49],[772,20,676,51,"message"],[772,27,676,58],[772,29,676,60],[773,18,676,80],[774,16,676,82],[774,17,676,83],[775,14,677,10],[776,14,679,10,"EventLogger"],[776,38,679,21],[776,39,679,22,"error"],[776,44,679,27],[776,45,679,28],[776,50,679,33],[776,52,679,35],[776,88,679,71],[776,90,679,73,"error"],[776,95,679,87],[776,96,679,88],[777,14,680,10],[777,21,680,17],[778,16,681,12,"error"],[778,21,681,17],[778,23,681,19],[779,18,682,14,"status"],[779,24,682,20],[779,26,682,22],[779,39,682,35],[780,18,683,14,"message"],[780,25,683,21],[780,27,683,23,"error"],[780,32,683,28],[780,33,683,29,"message"],[780,40,683,36],[780,44,683,40],[781,16,684,12],[782,14,685,10],[782,15,685,11],[783,12,686,8],[784,10,687,6],[784,11,687,7],[785,10,687,7],[785,26,643,6,"queryFn"],[785,33,643,13,"queryFn"],[785,34,643,13,"_x15"],[785,38,643,13],[785,40,643,13,"_x16"],[785,44,643,13],[786,12,643,13],[786,19,643,13,"_ref23"],[786,25,643,13],[786,26,643,13,"apply"],[786,31,643,13],[786,38,643,13,"arguments"],[786,47,643,13],[787,10,643,13],[788,8,643,13],[788,11,687,7],[789,8,688,6,"providesTags"],[789,20,688,18],[789,22,688,20],[789,23,688,21],[790,10,688,23,"type"],[790,14,688,27],[790,16,688,29],[790,27,688,40],[791,10,688,42,"id"],[791,12,688,44],[791,14,688,46],[792,8,688,56],[792,9,688,57],[793,6,689,4],[793,7,689,5],[793,8,689,6],[794,6,691,4],[795,0,692,0],[796,0,693,0],[797,6,694,4,"clearHistory"],[797,18,694,16],[797,20,694,18,"builder"],[797,27,694,25],[797,28,694,26,"mutation"],[797,36,694,34],[797,37,694,47],[798,8,695,6,"queryFn"],[798,15,695,13],[799,10,695,13],[799,14,695,13,"_ref24"],[799,20,695,13],[799,27,695,13,"_asyncToGenerator2"],[799,45,695,13],[799,46,695,13,"default"],[799,53,695,13],[799,55,695,15],[799,68,695,27],[800,12,696,8],[800,16,696,12],[801,14,697,10],[801,18,697,10,"_yield$supabase$auth$7"],[801,40,697,10],[801,49,697,43,"supabase"],[801,65,697,51],[801,66,697,52,"auth"],[801,70,697,56],[801,71,697,57,"getUser"],[801,78,697,64],[801,79,697,65],[801,80,697,66],[802,16,697,26,"user"],[802,20,697,30],[802,23,697,30,"_yield$supabase$auth$7"],[802,45,697,30],[802,46,697,18,"data"],[802,50,697,22],[802,51,697,26,"user"],[802,55,697,30],[803,14,699,10],[803,18,699,14],[803,19,699,15,"user"],[803,23,699,19],[803,25,699,21],[804,16,700,12],[804,23,700,19],[805,18,701,14,"error"],[805,23,701,19],[805,25,701,21],[806,20,702,16,"status"],[806,26,702,22],[806,28,702,24],[806,42,702,38],[807,20,703,16,"message"],[807,27,703,23],[807,29,703,25],[808,18,704,14],[809,16,705,12],[809,17,705,13],[810,14,706,10],[811,14,708,10],[811,18,708,10,"_yield$supabase$from$11"],[811,41,708,10],[811,50,708,34,"supabase"],[811,66,708,42],[811,67,709,13,"from"],[811,71,709,17],[811,72,709,18],[811,95,709,41],[811,96,709,42],[811,97,710,13,"delete"],[811,103,710,19],[811,104,710,20],[811,105,710,21],[811,106,711,13,"eq"],[811,108,711,15],[811,109,711,16],[811,118,711,25],[811,120,711,27,"user"],[811,124,711,31],[811,125,711,32,"id"],[811,127,711,34],[811,128,711,35],[812,16,708,18,"error"],[812,21,708,23],[812,24,708,23,"_yield$supabase$from$11"],[812,47,708,23],[812,48,708,18,"error"],[812,53,708,23],[813,14,713,10],[813,18,713,14,"error"],[813,23,713,19],[813,25,713,21],[814,16,714,12,"EventLogger"],[814,40,714,23],[814,41,714,24,"error"],[814,46,714,29],[814,47,714,30],[814,52,714,35],[814,54,714,37],[814,79,714,62],[814,81,714,64,"error"],[814,86,714,78],[814,87,714,79],[815,16,715,12],[815,23,715,19],[816,18,716,14,"error"],[816,23,716,19],[816,25,716,21],[817,20,717,16,"status"],[817,26,717,22],[817,28,717,24],[817,42,717,38],[818,20,718,16,"message"],[818,27,718,23],[818,29,718,25,"error"],[818,34,718,30],[818,35,718,31,"message"],[818,42,718,38],[818,46,718,42],[818,71,718,67],[819,20,719,16,"code"],[819,24,719,20],[819,26,719,22,"error"],[819,31,719,27],[819,32,719,28,"code"],[820,18,720,14],[821,16,721,12],[821,17,721,13],[822,14,722,10],[823,14,724,10],[823,21,724,17],[824,16,724,19,"data"],[824,20,724,23],[824,22,724,25],[825,14,724,30],[825,15,724,31],[826,12,725,8],[826,13,725,9],[826,14,725,10],[826,21,725,17,"error"],[826,26,725,27],[826,28,725,29],[827,14,726,10,"EventLogger"],[827,38,726,21],[827,39,726,22,"error"],[827,44,726,27],[827,45,726,28],[827,50,726,33],[827,52,726,35],[827,78,726,61],[827,80,726,63,"error"],[827,85,726,77],[827,86,726,78],[828,14,727,10],[828,21,727,17],[829,16,728,12,"error"],[829,21,728,17],[829,23,728,19],[830,18,729,14,"status"],[830,24,729,20],[830,26,729,22],[830,40,729,36],[831,18,730,14,"message"],[831,25,730,21],[831,27,730,23,"error"],[831,32,730,28],[831,33,730,29,"message"],[831,40,730,36],[831,44,730,40],[832,16,731,12],[833,14,732,10],[833,15,732,11],[834,12,733,8],[835,10,734,6],[835,11,734,7],[836,10,734,7],[836,26,695,6,"queryFn"],[836,33,695,13,"queryFn"],[836,34,695,13],[837,12,695,13],[837,19,695,13,"_ref24"],[837,25,695,13],[837,26,695,13,"apply"],[837,31,695,13],[837,38,695,13,"arguments"],[837,47,695,13],[838,10,695,13],[839,8,695,13],[839,11,734,7],[840,8,735,6,"invalidatesTags"],[840,23,735,21],[840,25,735,23],[840,26,736,8],[841,10,736,10,"type"],[841,14,736,14],[841,16,736,16],[841,27,736,27],[842,10,736,29,"id"],[842,12,736,31],[842,14,736,33],[843,8,736,42],[843,9,736,43],[843,11,737,8],[844,10,737,10,"type"],[844,14,737,14],[844,16,737,16],[844,27,737,27],[845,10,737,29,"id"],[845,12,737,31],[845,14,737,33],[846,8,737,43],[846,9,737,44],[846,11,738,8],[847,10,738,10,"type"],[847,14,738,14],[847,16,738,16],[847,22,738,22],[848,10,738,24,"id"],[848,12,738,26],[848,14,738,28],[849,8,738,36],[849,9,738,37],[850,6,740,4],[850,7,740,5],[850,8,740,6],[851,6,742,4],[853,6,744,4],[854,0,745,0],[855,0,746,0],[856,6,747,4,"getTrendingAutomations"],[856,28,747,26],[856,30,747,28,"builder"],[856,37,747,35],[856,38,747,36,"query"],[856,43,747,41],[856,44,747,101],[857,8,748,6,"queryFn"],[857,15,748,13],[858,10,748,13],[858,14,748,13,"_ref27"],[858,20,748,13],[858,27,748,13,"_asyncToGenerator2"],[858,45,748,13],[858,46,748,13,"default"],[858,53,748,13],[858,55,748,15],[858,66,748,15,"_ref25"],[858,72,748,15],[858,74,748,15,"_ref26"],[858,80,748,15],[858,82,748,76],[859,12,748,76],[859,16,748,76,"_ref25$limit"],[859,28,748,76],[859,31,748,76,"_ref25"],[859,37,748,76],[859,38,748,24,"limit"],[859,43,748,29],[860,14,748,24,"limit"],[860,19,748,29],[860,22,748,29,"_ref25$limit"],[860,34,748,29],[860,39,748,29,"undefined"],[860,48,748,29],[860,51,748,32],[860,53,748,34],[860,56,748,34,"_ref25$limit"],[860,68,748,34],[861,14,748,34,"_ref25$timeWindow"],[861,31,748,34],[861,34,748,34,"_ref25"],[861,40,748,34],[861,41,748,36,"timeWindow"],[861,51,748,46],[862,14,748,36,"timeWindow"],[862,24,748,46],[862,27,748,46,"_ref25$timeWindow"],[862,44,748,46],[862,49,748,46,"undefined"],[862,58,748,46],[862,61,748,49],[862,69,748,57],[862,72,748,57,"_ref25$timeWindow"],[862,89,748,57],[863,12,748,57],[863,16,748,63,"signal"],[863,22,748,69],[863,25,748,69,"_ref26"],[863,31,748,69],[863,32,748,63,"signal"],[863,38,748,69],[864,12,749,8],[864,16,749,12],[865,14,750,10],[866,14,751,10],[866,18,751,16,"data"],[866,22,751,20],[866,31,751,29],[866,35,751,29,"networkAwareQuery"],[866,69,751,46],[866,88,751,46,"_asyncToGenerator2"],[866,106,751,46],[866,107,751,46,"default"],[866,114,751,46],[866,116,752,12],[866,129,752,24],[867,16,753,14],[868,16,754,14],[868,20,754,14,"_yield$supabase$from$12"],[868,43,754,14],[868,52,754,73,"supabase"],[868,68,754,81],[868,69,755,17,"from"],[868,73,755,21],[868,74,755,22],[868,87,755,35],[868,88,755,36],[868,89,756,17,"select"],[868,95,756,23],[868,96,756,24],[868,99,756,27],[868,100,756,28],[868,101,757,17,"eq"],[868,103,757,19],[868,104,757,20],[868,115,757,31],[868,117,757,33],[868,121,757,37],[868,122,757,38],[868,123,758,17,"order"],[868,128,758,22],[868,129,758,23],[868,141,758,35],[868,143,758,37],[869,20,758,39,"ascending"],[869,29,758,48],[869,31,758,50],[870,18,758,56],[870,19,758,57],[870,20,758,58],[870,21,759,17,"limit"],[870,26,759,22],[870,27,759,23,"limit"],[870,32,759,28],[870,33,759,29],[870,34,760,17,"abortSignal"],[870,45,760,28],[870,46,760,29,"signal"],[870,52,760,35],[870,53,760,36],[871,18,754,28,"fallbackData"],[871,30,754,40],[871,33,754,40,"_yield$supabase$from$12"],[871,56,754,40],[871,57,754,22,"data"],[871,61,754,26],[872,18,754,49,"fallbackError"],[872,31,754,62],[872,34,754,62,"_yield$supabase$from$12"],[872,57,754,62],[872,58,754,42,"error"],[872,63,754,47],[873,16,762,14],[873,20,762,18,"fallbackError"],[873,33,762,31],[873,35,762,33],[874,18,763,16],[874,22,763,16,"logApiError"],[874,50,763,27],[874,52,763,28,"fallbackError"],[874,65,763,41],[874,67,763,43],[874,91,763,67],[874,92,763,68],[875,18,764,16],[875,24,764,22,"fallbackError"],[875,37,764,35],[876,16,765,14],[877,16,767,14],[877,23,767,21,"fallbackData"],[877,35,767,33],[877,39,767,37],[877,41,767,39],[878,14,768,12],[878,15,768,13],[878,18,769,12],[879,16,770,14,"offlineData"],[879,27,770,25],[879,29,770,27],[879,31,770,29],[879,32,770,31],[880,14,771,12],[880,15,772,10],[880,16,772,11],[881,14,774,10],[881,21,774,17],[882,16,774,19,"data"],[883,14,774,24],[883,15,774,25],[884,12,775,8],[884,13,775,9],[884,14,775,10],[884,21,775,17,"error"],[884,26,775,27],[884,28,775,29],[885,14,776,10],[885,18,776,14,"error"],[885,23,776,19],[885,24,776,20,"name"],[885,28,776,24],[885,33,776,29],[885,45,776,41],[885,47,776,43],[886,16,777,12],[886,23,777,19],[887,18,777,21,"error"],[887,23,777,26],[887,25,777,28],[888,20,777,30,"status"],[888,26,777,36],[888,28,777,38],[888,39,777,49],[889,20,777,51,"message"],[889,27,777,58],[889,29,777,60],[890,18,777,80],[891,16,777,82],[891,17,777,83],[892,14,778,10],[894,14,780,10],[895,14,781,10],[895,18,781,14,"error"],[895,23,781,19],[895,24,781,20,"status"],[895,30,781,26],[895,35,781,31],[895,44,781,40],[895,48,781,44,"error"],[895,53,781,49],[895,54,781,50,"code"],[895,58,781,54],[895,63,781,59],[895,80,781,76],[895,82,781,78],[896,16,782,12],[896,23,782,19],[897,18,782,21,"data"],[897,22,782,25],[897,24,782,27],[898,16,782,30],[898,17,782,31],[898,18,782,32],[898,19,782,33],[899,14,783,10],[900,14,785,10],[900,18,785,10,"logApiError"],[900,46,785,21],[900,48,785,22,"error"],[900,53,785,27],[900,55,785,29],[900,79,785,53],[900,80,785,54],[901,14,786,10],[901,21,786,17],[902,16,787,12,"error"],[902,21,787,17],[902,23,787,19],[903,18,788,14,"status"],[903,24,788,20],[903,26,788,22,"error"],[903,31,788,27],[903,32,788,28,"status"],[903,38,788,34],[903,42,788,38],[903,55,788,51],[904,18,789,14,"message"],[904,25,789,21],[904,27,789,23,"error"],[904,32,789,28],[904,33,789,29,"message"],[904,40,789,36],[904,44,789,40],[904,82,789,78],[905,18,790,14,"code"],[905,22,790,18],[905,24,790,20,"error"],[905,29,790,25],[905,30,790,26,"code"],[906,16,791,12],[907,14,792,10],[907,15,792,11],[908,12,793,8],[909,10,794,6],[909,11,794,7],[910,10,794,7],[910,26,748,6,"queryFn"],[910,33,748,13,"queryFn"],[910,34,748,13,"_x17"],[910,38,748,13],[910,40,748,13,"_x18"],[910,44,748,13],[911,12,748,13],[911,19,748,13,"_ref27"],[911,25,748,13],[911,26,748,13,"apply"],[911,31,748,13],[911,38,748,13,"arguments"],[911,47,748,13],[912,10,748,13],[913,8,748,13],[913,11,794,7],[914,8,795,6,"providesTags"],[914,20,795,18],[914,22,795,20],[914,23,795,21],[915,10,795,23,"type"],[915,14,795,27],[915,16,795,29],[915,28,795,41],[916,10,795,43,"id"],[916,12,795,45],[916,14,795,47],[917,8,795,58],[917,9,795,59],[918,6,796,4],[918,7,796,5],[918,8,796,6],[919,6,798,4],[921,6,800,4],[922,0,801,0],[923,0,802,0],[924,6,803,4,"likeAutomation"],[924,20,803,18],[924,22,803,20,"builder"],[924,29,803,27],[924,30,803,28,"mutation"],[924,38,803,36],[924,39,803,51],[925,8,804,6,"queryFn"],[925,15,804,13],[926,10,804,13],[926,14,804,13,"_ref29"],[926,20,804,13],[926,27,804,13,"_asyncToGenerator2"],[926,45,804,13],[926,46,804,13,"default"],[926,53,804,13],[926,55,804,15],[926,66,804,22,"automationId"],[926,78,804,34],[926,80,804,39],[927,12,805,8],[927,16,805,12],[928,14,806,10],[928,18,806,10,"_yield$supabase$auth$8"],[928,40,806,10],[928,49,806,43,"supabase"],[928,65,806,51],[928,66,806,52,"auth"],[928,70,806,56],[928,71,806,57,"getUser"],[928,78,806,64],[928,79,806,65],[928,80,806,66],[929,16,806,26,"user"],[929,20,806,30],[929,23,806,30,"_yield$supabase$auth$8"],[929,45,806,30],[929,46,806,18,"data"],[929,50,806,22],[929,51,806,26,"user"],[929,55,806,30],[930,14,808,10],[930,18,808,14],[930,19,808,15,"user"],[930,23,808,19],[930,25,808,21],[931,16,809,12],[931,23,809,19],[932,18,810,14,"error"],[932,23,810,19],[932,25,810,21],[933,20,811,16,"status"],[933,26,811,22],[933,28,811,24],[933,42,811,38],[934,20,812,16,"message"],[934,27,812,23],[934,29,812,25],[935,18,813,14],[936,16,814,12],[936,17,814,13],[937,14,815,10],[938,14,817,10],[938,18,817,10,"_yield$supabase$from$13"],[938,41,817,10],[938,50,817,34,"supabase"],[938,66,817,42],[938,67,818,13,"from"],[938,71,818,17],[938,72,818,18],[938,90,818,36],[938,91,818,37],[938,92,819,13,"insert"],[938,98,819,19],[938,99,819,20],[939,18,820,14,"automation_id"],[939,31,820,27],[939,33,820,29,"automationId"],[939,45,820,41],[940,18,821,14,"user_id"],[940,25,821,21],[940,27,821,23,"user"],[940,31,821,27],[940,32,821,28,"id"],[941,16,822,12],[941,17,822,13],[941,18,822,14],[942,16,817,18,"error"],[942,21,817,23],[942,24,817,23,"_yield$supabase$from$13"],[942,47,817,23],[942,48,817,18,"error"],[942,53,817,23],[943,14,824,10],[943,18,824,14,"error"],[943,23,824,19],[943,27,824,23],[943,28,824,24,"error"],[943,33,824,29],[943,34,824,30,"message"],[943,41,824,37],[943,42,824,38,"includes"],[943,50,824,46],[943,51,824,47],[943,62,824,58],[943,63,824,59],[943,65,824,61],[944,16,825,12,"EventLogger"],[944,40,825,23],[944,41,825,24,"error"],[944,46,825,29],[944,47,825,30],[944,52,825,35],[944,54,825,37],[944,80,825,63],[944,82,825,65,"error"],[944,87,825,79],[944,88,825,80],[945,16,826,12],[945,23,826,19],[946,18,827,14,"error"],[946,23,827,19],[946,25,827,21],[947,20,828,16,"status"],[947,26,828,22],[947,28,828,24],[947,42,828,38],[948,20,829,16,"message"],[948,27,829,23],[948,29,829,25,"error"],[948,34,829,30],[948,35,829,31,"message"],[948,42,829,38],[948,46,829,42],[948,73,829,69],[949,20,830,16,"code"],[949,24,830,20],[949,26,830,22,"error"],[949,31,830,27],[949,32,830,28,"code"],[950,18,831,14],[951,16,832,12],[951,17,832,13],[952,14,833,10],[953,14,835,10],[953,21,835,17],[954,16,835,19,"data"],[954,20,835,23],[954,22,835,25],[955,14,835,30],[955,15,835,31],[956,12,836,8],[956,13,836,9],[956,14,836,10],[956,21,836,17,"error"],[956,26,836,27],[956,28,836,29],[957,14,837,10,"EventLogger"],[957,38,837,21],[957,39,837,22,"error"],[957,44,837,27],[957,45,837,28],[957,50,837,33],[957,52,837,35],[957,80,837,63],[957,82,837,65,"error"],[957,87,837,79],[957,88,837,80],[958,14,838,10],[958,21,838,17],[959,16,839,12,"error"],[959,21,839,17],[959,23,839,19],[960,18,840,14,"status"],[960,24,840,20],[960,26,840,22],[960,40,840,36],[961,18,841,14,"message"],[961,25,841,21],[961,27,841,23,"error"],[961,32,841,28],[961,33,841,29,"message"],[961,40,841,36],[961,44,841,40],[962,16,842,12],[963,14,843,10],[963,15,843,11],[964,12,844,8],[965,10,845,6],[965,11,845,7],[966,10,845,7],[966,26,804,6,"queryFn"],[966,33,804,13,"queryFn"],[966,34,804,13,"_x19"],[966,38,804,13],[967,12,804,13],[967,19,804,13,"_ref29"],[967,25,804,13],[967,26,804,13,"apply"],[967,31,804,13],[967,38,804,13,"arguments"],[967,47,804,13],[968,10,804,13],[969,8,804,13],[969,11,845,7],[970,8,846,6,"invalidatesTags"],[970,23,846,21],[970,25,846,23,"invalidatesTags"],[970,26,846,24,"result"],[970,32,846,30],[970,34,846,32,"error"],[970,39,846,37],[970,41,846,39,"automationId"],[970,53,846,51],[970,58,846,56],[970,59,847,8],[971,10,847,10,"type"],[971,14,847,14],[971,16,847,16],[971,28,847,28],[972,10,847,30,"id"],[972,12,847,32],[972,14,847,34,"automationId"],[973,8,847,47],[973,9,847,48],[973,11,848,8],[974,10,848,10,"type"],[974,14,848,14],[974,16,848,16],[974,28,848,28],[975,10,848,30,"id"],[975,12,848,32],[975,14,848,34],[976,8,848,41],[976,9,848,42],[976,11,849,8],[977,10,849,10,"type"],[977,14,849,14],[977,16,849,16],[977,28,849,28],[978,10,849,30,"id"],[978,12,849,32],[978,14,849,34],[979,8,849,43],[979,9,849,44],[980,6,851,4],[980,7,851,5],[980,8,851,6],[981,6,853,4],[982,0,854,0],[983,0,855,0],[984,6,856,4,"unlikeAutomation"],[984,22,856,20],[984,24,856,22,"builder"],[984,31,856,29],[984,32,856,30,"mutation"],[984,40,856,38],[984,41,856,53],[985,8,857,6,"queryFn"],[985,15,857,13],[986,10,857,13],[986,14,857,13,"_ref30"],[986,20,857,13],[986,27,857,13,"_asyncToGenerator2"],[986,45,857,13],[986,46,857,13,"default"],[986,53,857,13],[986,55,857,15],[986,66,857,22,"automationId"],[986,78,857,34],[986,80,857,39],[987,12,858,8],[987,16,858,12],[988,14,859,10],[988,18,859,10,"_yield$supabase$auth$9"],[988,40,859,10],[988,49,859,43,"supabase"],[988,65,859,51],[988,66,859,52,"auth"],[988,70,859,56],[988,71,859,57,"getUser"],[988,78,859,64],[988,79,859,65],[988,80,859,66],[989,16,859,26,"user"],[989,20,859,30],[989,23,859,30,"_yield$supabase$auth$9"],[989,45,859,30],[989,46,859,18,"data"],[989,50,859,22],[989,51,859,26,"user"],[989,55,859,30],[990,14,861,10],[990,18,861,14],[990,19,861,15,"user"],[990,23,861,19],[990,25,861,21],[991,16,862,12],[991,23,862,19],[992,18,863,14,"error"],[992,23,863,19],[992,25,863,21],[993,20,864,16,"status"],[993,26,864,22],[993,28,864,24],[993,42,864,38],[994,20,865,16,"message"],[994,27,865,23],[994,29,865,25],[995,18,866,14],[996,16,867,12],[996,17,867,13],[997,14,868,10],[998,14,870,10],[998,18,870,10,"_yield$supabase$from$14"],[998,41,870,10],[998,50,870,34,"supabase"],[998,66,870,42],[998,67,871,13,"from"],[998,71,871,17],[998,72,871,18],[998,90,871,36],[998,91,871,37],[998,92,872,13,"delete"],[998,98,872,19],[998,99,872,20],[998,100,872,21],[998,101,873,13,"match"],[998,106,873,18],[998,107,873,19],[999,18,874,14,"automation_id"],[999,31,874,27],[999,33,874,29,"automationId"],[999,45,874,41],[1000,18,875,14,"user_id"],[1000,25,875,21],[1000,27,875,23,"user"],[1000,31,875,27],[1000,32,875,28,"id"],[1001,16,876,12],[1001,17,876,13],[1001,18,876,14],[1002,16,870,18,"error"],[1002,21,870,23],[1002,24,870,23,"_yield$supabase$from$14"],[1002,47,870,23],[1002,48,870,18,"error"],[1002,53,870,23],[1003,14,878,10],[1003,18,878,14,"error"],[1003,23,878,19],[1003,25,878,21],[1004,16,879,12,"EventLogger"],[1004,40,879,23],[1004,41,879,24,"error"],[1004,46,879,29],[1004,47,879,30],[1004,52,879,35],[1004,54,879,37],[1004,82,879,65],[1004,84,879,67,"error"],[1004,89,879,81],[1004,90,879,82],[1005,16,880,12],[1005,23,880,19],[1006,18,881,14,"error"],[1006,23,881,19],[1006,25,881,21],[1007,20,882,16,"status"],[1007,26,882,22],[1007,28,882,24],[1007,42,882,38],[1008,20,883,16,"message"],[1008,27,883,23],[1008,29,883,25,"error"],[1008,34,883,30],[1008,35,883,31,"message"],[1008,42,883,38],[1008,46,883,42],[1008,75,883,71],[1009,20,884,16,"code"],[1009,24,884,20],[1009,26,884,22,"error"],[1009,31,884,27],[1009,32,884,28,"code"],[1010,18,885,14],[1011,16,886,12],[1011,17,886,13],[1012,14,887,10],[1013,14,889,10],[1013,21,889,17],[1014,16,889,19,"data"],[1014,20,889,23],[1014,22,889,25],[1015,14,889,30],[1015,15,889,31],[1016,12,890,8],[1016,13,890,9],[1016,14,890,10],[1016,21,890,17,"error"],[1016,26,890,27],[1016,28,890,29],[1017,14,891,10,"EventLogger"],[1017,38,891,21],[1017,39,891,22,"error"],[1017,44,891,27],[1017,45,891,28],[1017,50,891,33],[1017,52,891,35],[1017,82,891,65],[1017,84,891,67,"error"],[1017,89,891,81],[1017,90,891,82],[1018,14,892,10],[1018,21,892,17],[1019,16,893,12,"error"],[1019,21,893,17],[1019,23,893,19],[1020,18,894,14,"status"],[1020,24,894,20],[1020,26,894,22],[1020,40,894,36],[1021,18,895,14,"message"],[1021,25,895,21],[1021,27,895,23,"error"],[1021,32,895,28],[1021,33,895,29,"message"],[1021,40,895,36],[1021,44,895,40],[1022,16,896,12],[1023,14,897,10],[1023,15,897,11],[1024,12,898,8],[1025,10,899,6],[1025,11,899,7],[1026,10,899,7],[1026,26,857,6,"queryFn"],[1026,33,857,13,"queryFn"],[1026,34,857,13,"_x20"],[1026,38,857,13],[1027,12,857,13],[1027,19,857,13,"_ref30"],[1027,25,857,13],[1027,26,857,13,"apply"],[1027,31,857,13],[1027,38,857,13,"arguments"],[1027,47,857,13],[1028,10,857,13],[1029,8,857,13],[1029,11,899,7],[1030,8,900,6,"invalidatesTags"],[1030,23,900,21],[1030,25,900,23,"invalidatesTags"],[1030,26,900,24,"result"],[1030,32,900,30],[1030,34,900,32,"error"],[1030,39,900,37],[1030,41,900,39,"automationId"],[1030,53,900,51],[1030,58,900,56],[1030,59,901,8],[1031,10,901,10,"type"],[1031,14,901,14],[1031,16,901,16],[1031,28,901,28],[1032,10,901,30,"id"],[1032,12,901,32],[1032,14,901,34,"automationId"],[1033,8,901,47],[1033,9,901,48],[1033,11,902,8],[1034,10,902,10,"type"],[1034,14,902,14],[1034,16,902,16],[1034,28,902,28],[1035,10,902,30,"id"],[1035,12,902,32],[1035,14,902,34],[1036,8,902,41],[1036,9,902,42],[1036,11,903,8],[1037,10,903,10,"type"],[1037,14,903,14],[1037,16,903,16],[1037,28,903,28],[1038,10,903,30,"id"],[1038,12,903,32],[1038,14,903,34],[1039,8,903,43],[1039,9,903,44],[1040,6,905,4],[1040,7,905,5],[1040,8,905,6],[1041,6,907,4],[1042,0,908,0],[1043,0,909,0],[1044,6,910,4,"trackAutomationDownload"],[1044,29,910,27],[1044,31,910,29,"builder"],[1044,38,910,36],[1044,39,910,37,"mutation"],[1044,47,910,45],[1044,48,910,60],[1045,8,911,6,"queryFn"],[1045,15,911,13],[1046,10,911,13],[1046,14,911,13,"_ref31"],[1046,20,911,13],[1046,27,911,13,"_asyncToGenerator2"],[1046,45,911,13],[1046,46,911,13,"default"],[1046,53,911,13],[1046,55,911,15],[1046,66,911,22,"automationId"],[1046,78,911,34],[1046,80,911,39],[1047,12,912,8],[1047,16,912,12],[1048,14,913,10],[1048,18,913,10,"_yield$supabase$auth$0"],[1048,40,913,10],[1048,49,913,43,"supabase"],[1048,65,913,51],[1048,66,913,52,"auth"],[1048,70,913,56],[1048,71,913,57,"getUser"],[1048,78,913,64],[1048,79,913,65],[1048,80,913,66],[1049,16,913,26,"user"],[1049,20,913,30],[1049,23,913,30,"_yield$supabase$auth$0"],[1049,45,913,30],[1049,46,913,18,"data"],[1049,50,913,22],[1049,51,913,26,"user"],[1049,55,913,30],[1050,14,915,10],[1050,18,915,14],[1050,19,915,15,"user"],[1050,23,915,19],[1050,25,915,21],[1051,16,916,12],[1051,23,916,19],[1052,18,917,14,"error"],[1052,23,917,19],[1052,25,917,21],[1053,20,918,16,"status"],[1053,26,918,22],[1053,28,918,24],[1053,42,918,38],[1054,20,919,16,"message"],[1054,27,919,23],[1054,29,919,25],[1055,18,920,14],[1056,16,921,12],[1056,17,921,13],[1057,14,922,10],[1059,14,924,10],[1060,14,925,10],[1060,18,925,10,"_yield$supabase$from$15"],[1060,41,925,10],[1060,50,925,34,"supabase"],[1060,66,925,42],[1060,67,926,13,"from"],[1060,71,926,17],[1060,72,926,18],[1060,94,926,40],[1060,95,926,41],[1060,96,927,13,"insert"],[1060,102,927,19],[1060,103,927,20],[1061,18,928,14,"automation_id"],[1061,31,928,27],[1061,33,928,29,"automationId"],[1061,45,928,41],[1062,18,929,14,"user_id"],[1062,25,929,21],[1062,27,929,23,"user"],[1062,31,929,27],[1062,32,929,28,"id"],[1062,34,929,30],[1063,18,930,14,"download_type"],[1063,31,930,27],[1063,33,930,29],[1064,16,931,12],[1064,17,931,13],[1064,18,931,14],[1065,16,925,18,"error"],[1065,21,925,23],[1065,24,925,23,"_yield$supabase$from$15"],[1065,47,925,23],[1065,48,925,18,"error"],[1065,53,925,23],[1066,14,933,10],[1066,18,933,14,"error"],[1066,23,933,19],[1066,27,933,23],[1066,28,933,24,"error"],[1066,33,933,29],[1066,34,933,30,"message"],[1066,41,933,37],[1066,42,933,38,"includes"],[1066,50,933,46],[1066,51,933,47],[1066,62,933,58],[1066,63,933,59],[1066,65,933,61],[1067,16,934,12,"EventLogger"],[1067,40,934,23],[1067,41,934,24,"error"],[1067,46,934,29],[1067,47,934,30],[1067,52,934,35],[1067,54,934,37],[1067,80,934,63],[1067,82,934,65,"error"],[1067,87,934,79],[1067,88,934,80],[1068,16,935,12],[1068,23,935,19],[1069,18,936,14,"error"],[1069,23,936,19],[1069,25,936,21],[1070,20,937,16,"status"],[1070,26,937,22],[1070,28,937,24],[1070,42,937,38],[1071,20,938,16,"message"],[1071,27,938,23],[1071,29,938,25,"error"],[1071,34,938,30],[1071,35,938,31,"message"],[1071,42,938,38],[1071,46,938,42],[1071,72,938,68],[1072,20,939,16,"code"],[1072,24,939,20],[1072,26,939,22,"error"],[1072,31,939,27],[1072,32,939,28,"code"],[1073,18,940,14],[1074,16,941,12],[1074,17,941,13],[1075,14,942,10],[1076,14,944,10],[1076,21,944,17],[1077,16,944,19,"data"],[1077,20,944,23],[1077,22,944,25],[1078,14,944,30],[1078,15,944,31],[1079,12,945,8],[1079,13,945,9],[1079,14,945,10],[1079,21,945,17,"error"],[1079,26,945,27],[1079,28,945,29],[1080,14,946,10,"EventLogger"],[1080,38,946,21],[1080,39,946,22,"error"],[1080,44,946,27],[1080,45,946,28],[1080,50,946,33],[1080,52,946,35],[1080,79,946,62],[1080,81,946,64,"error"],[1080,86,946,78],[1080,87,946,79],[1081,14,947,10],[1081,21,947,17],[1082,16,948,12,"error"],[1082,21,948,17],[1082,23,948,19],[1083,18,949,14,"status"],[1083,24,949,20],[1083,26,949,22],[1083,40,949,36],[1084,18,950,14,"message"],[1084,25,950,21],[1084,27,950,23,"error"],[1084,32,950,28],[1084,33,950,29,"message"],[1084,40,950,36],[1084,44,950,40],[1085,16,951,12],[1086,14,952,10],[1086,15,952,11],[1087,12,953,8],[1088,10,954,6],[1088,11,954,7],[1089,10,954,7],[1089,26,911,6,"queryFn"],[1089,33,911,13,"queryFn"],[1089,34,911,13,"_x21"],[1089,38,911,13],[1090,12,911,13],[1090,19,911,13,"_ref31"],[1090,25,911,13],[1090,26,911,13,"apply"],[1090,31,911,13],[1090,38,911,13,"arguments"],[1090,47,911,13],[1091,10,911,13],[1092,8,911,13],[1092,11,954,7],[1093,8,955,6,"invalidatesTags"],[1093,23,955,21],[1093,25,955,23,"invalidatesTags"],[1093,26,955,24,"result"],[1093,32,955,30],[1093,34,955,32,"error"],[1093,39,955,37],[1093,41,955,39,"automationId"],[1093,53,955,51],[1093,58,955,56],[1093,59,956,8],[1094,10,956,10,"type"],[1094,14,956,14],[1094,16,956,16],[1094,28,956,28],[1095,10,956,30,"id"],[1095,12,956,32],[1095,14,956,34,"automationId"],[1096,8,956,47],[1096,9,956,48],[1096,11,957,8],[1097,10,957,10,"type"],[1097,14,957,14],[1097,16,957,16],[1097,28,957,28],[1098,10,957,30,"id"],[1098,12,957,32],[1098,14,957,34],[1099,8,957,41],[1099,9,957,42],[1099,11,958,8],[1100,10,958,10,"type"],[1100,14,958,14],[1100,16,958,16],[1100,28,958,28],[1101,10,958,30,"id"],[1101,12,958,32],[1101,14,958,34],[1102,8,958,43],[1102,9,958,44],[1103,6,960,4],[1103,7,960,5],[1104,4,961,2],[1104,5,961,3],[1105,2,962,0],[1105,3,962,1],[1105,4,962,2],[1107,2,964,0],[1108,2,965,7],[1108,6,966,2,"useGetMyAutomationsQuery"],[1108,30,966,26],[1108,33,966,26,"exports"],[1108,40,966,26],[1108,41,966,26,"useGetMyAutomationsQuery"],[1108,65,966,26],[1108,68,982,4,"automationApi"],[1108,81,982,17],[1108,82,966,2,"useGetMyAutomationsQuery"],[1108,106,966,26],[1109,4,967,2,"useGetAutomationQuery"],[1109,25,967,23],[1109,28,967,23,"exports"],[1109,35,967,23],[1109,36,967,23,"useGetAutomationQuery"],[1109,57,967,23],[1109,60,982,4,"automationApi"],[1109,73,982,17],[1109,74,967,2,"useGetAutomationQuery"],[1109,95,967,23],[1110,4,968,2,"useGetPublicAutomationsQuery"],[1110,32,968,30],[1110,35,968,30,"exports"],[1110,42,968,30],[1110,43,968,30,"useGetPublicAutomationsQuery"],[1110,71,968,30],[1110,74,982,4,"automationApi"],[1110,87,982,17],[1110,88,968,2,"useGetPublicAutomationsQuery"],[1110,116,968,30],[1111,4,969,2,"useCreateAutomationMutation"],[1111,31,969,29],[1111,34,969,29,"exports"],[1111,41,969,29],[1111,42,969,29,"useCreateAutomationMutation"],[1111,69,969,29],[1111,72,982,4,"automationApi"],[1111,85,982,17],[1111,86,969,2,"useCreateAutomationMutation"],[1111,113,969,29],[1112,4,970,2,"useUpdateAutomationMutation"],[1112,31,970,29],[1112,34,970,29,"exports"],[1112,41,970,29],[1112,42,970,29,"useUpdateAutomationMutation"],[1112,69,970,29],[1112,72,982,4,"automationApi"],[1112,85,982,17],[1112,86,970,2,"useUpdateAutomationMutation"],[1112,113,970,29],[1113,4,971,2,"useDeleteAutomationMutation"],[1113,31,971,29],[1113,34,971,29,"exports"],[1113,41,971,29],[1113,42,971,29,"useDeleteAutomationMutation"],[1113,69,971,29],[1113,72,982,4,"automationApi"],[1113,85,982,17],[1113,86,971,2,"useDeleteAutomationMutation"],[1113,113,971,29],[1114,4,972,2,"useCloneAutomationMutation"],[1114,30,972,28],[1114,33,972,28,"exports"],[1114,40,972,28],[1114,41,972,28,"useCloneAutomationMutation"],[1114,67,972,28],[1114,70,982,4,"automationApi"],[1114,83,982,17],[1114,84,972,2,"useCloneAutomationMutation"],[1114,110,972,28],[1115,4,973,2,"useGetUserStatsQuery"],[1115,24,973,22],[1115,27,973,22,"exports"],[1115,34,973,22],[1115,35,973,22,"useGetUserStatsQuery"],[1115,55,973,22],[1115,58,982,4,"automationApi"],[1115,71,982,17],[1115,72,973,2,"useGetUserStatsQuery"],[1115,92,973,22],[1116,4,974,2,"useGetRecentExecutionsQuery"],[1116,31,974,29],[1116,34,974,29,"exports"],[1116,41,974,29],[1116,42,974,29,"useGetRecentExecutionsQuery"],[1116,69,974,29],[1116,72,982,4,"automationApi"],[1116,85,982,17],[1116,86,974,2,"useGetRecentExecutionsQuery"],[1116,113,974,29],[1117,4,975,2,"useGetAutomationExecutionsQuery"],[1117,35,975,33],[1117,38,975,33,"exports"],[1117,45,975,33],[1117,46,975,33,"useGetAutomationExecutionsQuery"],[1117,77,975,33],[1117,80,982,4,"automationApi"],[1117,93,982,17],[1117,94,975,2,"useGetAutomationExecutionsQuery"],[1117,125,975,33],[1118,4,976,2,"useGetExecutionHistoryQuery"],[1118,31,976,29],[1118,34,976,29,"exports"],[1118,41,976,29],[1118,42,976,29,"useGetExecutionHistoryQuery"],[1118,69,976,29],[1118,72,982,4,"automationApi"],[1118,85,982,17],[1118,86,976,2,"useGetExecutionHistoryQuery"],[1118,113,976,29],[1119,4,977,2,"useClearHistoryMutation"],[1119,27,977,25],[1119,30,977,25,"exports"],[1119,37,977,25],[1119,38,977,25,"useClearHistoryMutation"],[1119,61,977,25],[1119,64,982,4,"automationApi"],[1119,77,982,17],[1119,78,977,2,"useClearHistoryMutation"],[1119,101,977,25],[1120,4,978,2,"useGetTrendingAutomationsQuery"],[1120,34,978,32],[1120,37,978,32,"exports"],[1120,44,978,32],[1120,45,978,32,"useGetTrendingAutomationsQuery"],[1120,75,978,32],[1120,78,982,4,"automationApi"],[1120,91,982,17],[1120,92,978,2,"useGetTrendingAutomationsQuery"],[1120,122,978,32],[1121,4,979,2,"useLikeAutomationMutation"],[1121,29,979,27],[1121,32,979,27,"exports"],[1121,39,979,27],[1121,40,979,27,"useLikeAutomationMutation"],[1121,65,979,27],[1121,68,982,4,"automationApi"],[1121,81,982,17],[1121,82,979,2,"useLikeAutomationMutation"],[1121,107,979,27],[1122,4,980,2,"useUnlikeAutomationMutation"],[1122,31,980,29],[1122,34,980,29,"exports"],[1122,41,980,29],[1122,42,980,29,"useUnlikeAutomationMutation"],[1122,69,980,29],[1122,72,982,4,"automationApi"],[1122,85,982,17],[1122,86,980,2,"useUnlikeAutomationMutation"],[1122,113,980,29],[1123,4,981,2,"useTrackAutomationDownloadMutation"],[1123,38,981,36],[1123,41,981,36,"exports"],[1123,48,981,36],[1123,49,981,36,"useTrackAutomationDownloadMutation"],[1123,83,981,36],[1123,86,982,4,"automationApi"],[1123,99,982,17],[1123,100,981,2,"useTrackAutomationDownloadMutation"],[1123,134,981,36],[1124,0,982,18],[1124,3]],"functionMap":{"names":["<global>","createApi$argument_0.endpoints","builder.query$argument_0.queryFn","builder.query$argument_0.providesTags","result.map$argument_0","networkAwareQuery$argument_0","builder.mutation$argument_0.queryFn","builder.mutation$argument_0.invalidatesTags"],"mappings":"AAA;aCqB;eCO;ODwC;oBEC;2BCE,iDD;gDFC;eCO;ODuE;oBEC,mDF;eCO;YGI;aHe;OD0B;eKQ;OLkD;eKW;OL0C;uBMC;ONI;eKO;OLwC;uBMC;ONI;eKO;OLgF;eCa;ODwD;eCU;ODyC;eCQ;OD8C;oBEC;OFE;eCO;OD4C;eKQ;OLuC;eCc;YGI;aHgB;OD0B;eKU;OLyC;uBMC;ONI;eKO;OL0C;uBMC;ONI;eKO;OL2C;uBMC;ONI;IDE"}},"type":"js/module"}]}