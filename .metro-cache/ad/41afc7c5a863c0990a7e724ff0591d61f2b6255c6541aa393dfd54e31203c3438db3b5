{"dependencies":[{"name":"domhandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":48,"index":48}}],"key":"KYhnx5+o028X5IFQh7qGm6XZdSU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.existsOne = existsOne;\n  exports.filter = filter;\n  exports.find = find;\n  exports.findAll = findAll;\n  exports.findOne = findOne;\n  exports.findOneChild = findOneChild;\n  var _domhandler = require(_dependencyMap[0], \"domhandler\");\n  /**\n   * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param node Node to search. Will be included in the result set if it matches.\n   * @param recurse Also consider child nodes.\n   * @param limit Maximum number of nodes to return.\n   * @returns All nodes passing `test`.\n   */\n  function filter(test, node) {\n    var recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n    return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n  }\n  /**\n   * Search an array of nodes and their children for nodes passing a test function.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @param recurse Also consider child nodes.\n   * @param limit Maximum number of nodes to return.\n   * @returns All nodes passing `test`.\n   */\n  function find(test, nodes, recurse, limit) {\n    var result = [];\n    /** Stack of the arrays we are looking at. */\n    var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n    /** Stack of the indices within the arrays. */\n    var indexStack = [0];\n    for (;;) {\n      // First, check if the current array has any more elements to look at.\n      if (indexStack[0] >= nodeStack[0].length) {\n        // If we have no more arrays to look at, we are done.\n        if (indexStack.length === 1) {\n          return result;\n        }\n        // Otherwise, remove the current array from the stack.\n        nodeStack.shift();\n        indexStack.shift();\n        // Loop back to the start to continue with the next array.\n        continue;\n      }\n      var elem = nodeStack[0][indexStack[0]++];\n      if (test(elem)) {\n        result.push(elem);\n        if (--limit <= 0) return result;\n      }\n      if (recurse && (0, _domhandler.hasChildren)(elem) && elem.children.length > 0) {\n        /*\n         * Add the children to the stack. We are depth-first, so this is\n         * the next array we look at.\n         */\n        indexStack.unshift(0);\n        nodeStack.unshift(elem.children);\n      }\n    }\n  }\n  /**\n   * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns The first node in the array that passes `test`.\n   * @deprecated Use `Array.prototype.find` directly.\n   */\n  function findOneChild(test, nodes) {\n    return nodes.find(test);\n  }\n  /**\n   * Finds one element in a tree that passes a test.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Node or array of nodes to search.\n   * @param recurse Also consider child nodes.\n   * @returns The first node that passes `test`.\n   */\n  function findOne(test, nodes) {\n    var recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var searchedNodes = Array.isArray(nodes) ? nodes : [nodes];\n    for (var i = 0; i < searchedNodes.length; i++) {\n      var node = searchedNodes[i];\n      if ((0, _domhandler.isTag)(node) && test(node)) {\n        return node;\n      }\n      if (recurse && (0, _domhandler.hasChildren)(node) && node.children.length > 0) {\n        var found = findOne(test, node.children, true);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n  /**\n   * Checks if a tree of nodes contains at least one node passing a test.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns Whether a tree of nodes contains at least one node passing the test.\n   */\n  function existsOne(test, nodes) {\n    return (Array.isArray(nodes) ? nodes : [nodes]).some(function (node) {\n      return (0, _domhandler.isTag)(node) && test(node) || (0, _domhandler.hasChildren)(node) && existsOne(test, node.children);\n    });\n  }\n  /**\n   * Search an array of nodes and their children for elements passing a test function.\n   *\n   * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n   *\n   * @category Querying\n   * @param test Function to test nodes on.\n   * @param nodes Array of nodes to search.\n   * @returns All nodes passing `test`.\n   */\n  function findAll(test, nodes) {\n    var result = [];\n    var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n    var indexStack = [0];\n    for (;;) {\n      if (indexStack[0] >= nodeStack[0].length) {\n        if (nodeStack.length === 1) {\n          return result;\n        }\n        // Otherwise, remove the current array from the stack.\n        nodeStack.shift();\n        indexStack.shift();\n        // Loop back to the start to continue with the next array.\n        continue;\n      }\n      var elem = nodeStack[0][indexStack[0]++];\n      if ((0, _domhandler.isTag)(elem) && test(elem)) result.push(elem);\n      if ((0, _domhandler.hasChildren)(elem) && elem.children.length > 0) {\n        indexStack.unshift(0);\n        nodeStack.unshift(elem.children);\n      }\n    }\n  }\n});","lineCount":153,"map":[[11,2,1,0],[11,6,1,0,"_domhandler"],[11,17,1,0],[11,20,1,0,"require"],[11,27,1,0],[11,28,1,0,"_dependencyMap"],[11,42,1,0],[12,2,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,0,8,0],[19,0,9,0],[20,0,10,0],[21,0,11,0],[22,2,12,7],[22,11,12,16,"filter"],[22,17,12,22,"filter"],[22,18,12,23,"test"],[22,22,12,27],[22,24,12,29,"node"],[22,28,12,33],[22,30,12,69],[23,4,12,69],[23,8,12,35,"recurse"],[23,15,12,42],[23,18,12,42,"arguments"],[23,27,12,42],[23,28,12,42,"length"],[23,34,12,42],[23,42,12,42,"arguments"],[23,51,12,42],[23,59,12,42,"undefined"],[23,68,12,42],[23,71,12,42,"arguments"],[23,80,12,42],[23,86,12,45],[23,90,12,49],[24,4,12,49],[24,8,12,51,"limit"],[24,13,12,56],[24,16,12,56,"arguments"],[24,25,12,56],[24,26,12,56,"length"],[24,32,12,56],[24,40,12,56,"arguments"],[24,49,12,56],[24,57,12,56,"undefined"],[24,66,12,56],[24,69,12,56,"arguments"],[24,78,12,56],[24,84,12,59,"Infinity"],[24,92,12,67],[25,4,13,4],[25,11,13,11,"find"],[25,15,13,15],[25,16,13,16,"test"],[25,20,13,20],[25,22,13,22,"Array"],[25,27,13,27],[25,28,13,28,"isArray"],[25,35,13,35],[25,36,13,36,"node"],[25,40,13,40],[25,41,13,41],[25,44,13,44,"node"],[25,48,13,48],[25,51,13,51],[25,52,13,52,"node"],[25,56,13,56],[25,57,13,57],[25,59,13,59,"recurse"],[25,66,13,66],[25,68,13,68,"limit"],[25,73,13,73],[25,74,13,74],[26,2,14,0],[27,2,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,2,25,7],[37,11,25,16,"find"],[37,15,25,20,"find"],[37,16,25,21,"test"],[37,20,25,25],[37,22,25,27,"nodes"],[37,27,25,32],[37,29,25,34,"recurse"],[37,36,25,41],[37,38,25,43,"limit"],[37,43,25,48],[37,45,25,50],[38,4,26,4],[38,8,26,10,"result"],[38,14,26,16],[38,17,26,19],[38,19,26,21],[39,4,27,4],[40,4,28,4],[40,8,28,10,"nodeStack"],[40,17,28,19],[40,20,28,22],[40,21,28,23,"Array"],[40,26,28,28],[40,27,28,29,"isArray"],[40,34,28,36],[40,35,28,37,"nodes"],[40,40,28,42],[40,41,28,43],[40,44,28,46,"nodes"],[40,49,28,51],[40,52,28,54],[40,53,28,55,"nodes"],[40,58,28,60],[40,59,28,61],[40,60,28,62],[41,4,29,4],[42,4,30,4],[42,8,30,10,"indexStack"],[42,18,30,20],[42,21,30,23],[42,22,30,24],[42,23,30,25],[42,24,30,26],[43,4,31,4],[43,13,31,13],[44,6,32,8],[45,6,33,8],[45,10,33,12,"indexStack"],[45,20,33,22],[45,21,33,23],[45,22,33,24],[45,23,33,25],[45,27,33,29,"nodeStack"],[45,36,33,38],[45,37,33,39],[45,38,33,40],[45,39,33,41],[45,40,33,42,"length"],[45,46,33,48],[45,48,33,50],[46,8,34,12],[47,8,35,12],[47,12,35,16,"indexStack"],[47,22,35,26],[47,23,35,27,"length"],[47,29,35,33],[47,34,35,38],[47,35,35,39],[47,37,35,41],[48,10,36,16],[48,17,36,23,"result"],[48,23,36,29],[49,8,37,12],[50,8,38,12],[51,8,39,12,"nodeStack"],[51,17,39,21],[51,18,39,22,"shift"],[51,23,39,27],[51,24,39,28],[51,25,39,29],[52,8,40,12,"indexStack"],[52,18,40,22],[52,19,40,23,"shift"],[52,24,40,28],[52,25,40,29],[52,26,40,30],[53,8,41,12],[54,8,42,12],[55,6,43,8],[56,6,44,8],[56,10,44,14,"elem"],[56,14,44,18],[56,17,44,21,"nodeStack"],[56,26,44,30],[56,27,44,31],[56,28,44,32],[56,29,44,33],[56,30,44,34,"indexStack"],[56,40,44,44],[56,41,44,45],[56,42,44,46],[56,43,44,47],[56,45,44,49],[56,46,44,50],[57,6,45,8],[57,10,45,12,"test"],[57,14,45,16],[57,15,45,17,"elem"],[57,19,45,21],[57,20,45,22],[57,22,45,24],[58,8,46,12,"result"],[58,14,46,18],[58,15,46,19,"push"],[58,19,46,23],[58,20,46,24,"elem"],[58,24,46,28],[58,25,46,29],[59,8,47,12],[59,12,47,16],[59,14,47,18,"limit"],[59,19,47,23],[59,23,47,27],[59,24,47,28],[59,26,48,16],[59,33,48,23,"result"],[59,39,48,29],[60,6,49,8],[61,6,50,8],[61,10,50,12,"recurse"],[61,17,50,19],[61,21,50,23],[61,25,50,23,"hasChildren"],[61,48,50,34],[61,50,50,35,"elem"],[61,54,50,39],[61,55,50,40],[61,59,50,44,"elem"],[61,63,50,48],[61,64,50,49,"children"],[61,72,50,57],[61,73,50,58,"length"],[61,79,50,64],[61,82,50,67],[61,83,50,68],[61,85,50,70],[62,8,51,12],[63,0,52,0],[64,0,53,0],[65,0,54,0],[66,8,55,12,"indexStack"],[66,18,55,22],[66,19,55,23,"unshift"],[66,26,55,30],[66,27,55,31],[66,28,55,32],[66,29,55,33],[67,8,56,12,"nodeStack"],[67,17,56,21],[67,18,56,22,"unshift"],[67,25,56,29],[67,26,56,30,"elem"],[67,30,56,34],[67,31,56,35,"children"],[67,39,56,43],[67,40,56,44],[68,6,57,8],[69,4,58,4],[70,2,59,0],[71,2,60,0],[72,0,61,0],[73,0,62,0],[74,0,63,0],[75,0,64,0],[76,0,65,0],[77,0,66,0],[78,0,67,0],[79,0,68,0],[80,2,69,7],[80,11,69,16,"findOneChild"],[80,23,69,28,"findOneChild"],[80,24,69,29,"test"],[80,28,69,33],[80,30,69,35,"nodes"],[80,35,69,40],[80,37,69,42],[81,4,70,4],[81,11,70,11,"nodes"],[81,16,70,16],[81,17,70,17,"find"],[81,21,70,21],[81,22,70,22,"test"],[81,26,70,26],[81,27,70,27],[82,2,71,0],[83,2,72,0],[84,0,73,0],[85,0,74,0],[86,0,75,0],[87,0,76,0],[88,0,77,0],[89,0,78,0],[90,0,79,0],[91,0,80,0],[92,2,81,7],[92,11,81,16,"findOne"],[92,18,81,23,"findOne"],[92,19,81,24,"test"],[92,23,81,28],[92,25,81,30,"nodes"],[92,30,81,35],[92,32,81,53],[93,4,81,53],[93,8,81,37,"recurse"],[93,15,81,44],[93,18,81,44,"arguments"],[93,27,81,44],[93,28,81,44,"length"],[93,34,81,44],[93,42,81,44,"arguments"],[93,51,81,44],[93,59,81,44,"undefined"],[93,68,81,44],[93,71,81,44,"arguments"],[93,80,81,44],[93,86,81,47],[93,90,81,51],[94,4,82,4],[94,8,82,10,"searchedNodes"],[94,21,82,23],[94,24,82,26,"Array"],[94,29,82,31],[94,30,82,32,"isArray"],[94,37,82,39],[94,38,82,40,"nodes"],[94,43,82,45],[94,44,82,46],[94,47,82,49,"nodes"],[94,52,82,54],[94,55,82,57],[94,56,82,58,"nodes"],[94,61,82,63],[94,62,82,64],[95,4,83,4],[95,9,83,9],[95,13,83,13,"i"],[95,14,83,14],[95,17,83,17],[95,18,83,18],[95,20,83,20,"i"],[95,21,83,21],[95,24,83,24,"searchedNodes"],[95,37,83,37],[95,38,83,38,"length"],[95,44,83,44],[95,46,83,46,"i"],[95,47,83,47],[95,49,83,49],[95,51,83,51],[96,6,84,8],[96,10,84,14,"node"],[96,14,84,18],[96,17,84,21,"searchedNodes"],[96,30,84,34],[96,31,84,35,"i"],[96,32,84,36],[96,33,84,37],[97,6,85,8],[97,10,85,12],[97,14,85,12,"isTag"],[97,31,85,17],[97,33,85,18,"node"],[97,37,85,22],[97,38,85,23],[97,42,85,27,"test"],[97,46,85,31],[97,47,85,32,"node"],[97,51,85,36],[97,52,85,37],[97,54,85,39],[98,8,86,12],[98,15,86,19,"node"],[98,19,86,23],[99,6,87,8],[100,6,88,8],[100,10,88,12,"recurse"],[100,17,88,19],[100,21,88,23],[100,25,88,23,"hasChildren"],[100,48,88,34],[100,50,88,35,"node"],[100,54,88,39],[100,55,88,40],[100,59,88,44,"node"],[100,63,88,48],[100,64,88,49,"children"],[100,72,88,57],[100,73,88,58,"length"],[100,79,88,64],[100,82,88,67],[100,83,88,68],[100,85,88,70],[101,8,89,12],[101,12,89,18,"found"],[101,17,89,23],[101,20,89,26,"findOne"],[101,27,89,33],[101,28,89,34,"test"],[101,32,89,38],[101,34,89,40,"node"],[101,38,89,44],[101,39,89,45,"children"],[101,47,89,53],[101,49,89,55],[101,53,89,59],[101,54,89,60],[102,8,90,12],[102,12,90,16,"found"],[102,17,90,21],[102,19,91,16],[102,26,91,23,"found"],[102,31,91,28],[103,6,92,8],[104,4,93,4],[105,4,94,4],[105,11,94,11],[105,15,94,15],[106,2,95,0],[107,2,96,0],[108,0,97,0],[109,0,98,0],[110,0,99,0],[111,0,100,0],[112,0,101,0],[113,0,102,0],[114,0,103,0],[115,2,104,7],[115,11,104,16,"existsOne"],[115,20,104,25,"existsOne"],[115,21,104,26,"test"],[115,25,104,30],[115,27,104,32,"nodes"],[115,32,104,37],[115,34,104,39],[116,4,105,4],[116,11,105,11],[116,12,105,12,"Array"],[116,17,105,17],[116,18,105,18,"isArray"],[116,25,105,25],[116,26,105,26,"nodes"],[116,31,105,31],[116,32,105,32],[116,35,105,35,"nodes"],[116,40,105,40],[116,43,105,43],[116,44,105,44,"nodes"],[116,49,105,49],[116,50,105,50],[116,52,105,52,"some"],[116,56,105,56],[116,57,105,57],[116,67,105,58,"node"],[116,71,105,62],[117,6,105,62],[117,13,105,68],[117,17,105,68,"isTag"],[117,34,105,73],[117,36,105,74,"node"],[117,40,105,78],[117,41,105,79],[117,45,105,83,"test"],[117,49,105,87],[117,50,105,88,"node"],[117,54,105,92],[117,55,105,93],[117,59,106,9],[117,63,106,9,"hasChildren"],[117,86,106,20],[117,88,106,21,"node"],[117,92,106,25],[117,93,106,26],[117,97,106,30,"existsOne"],[117,106,106,39],[117,107,106,40,"test"],[117,111,106,44],[117,113,106,46,"node"],[117,117,106,50],[117,118,106,51,"children"],[117,126,106,59],[117,127,106,61],[118,4,106,61],[118,6,106,62],[119,2,107,0],[120,2,108,0],[121,0,109,0],[122,0,110,0],[123,0,111,0],[124,0,112,0],[125,0,113,0],[126,0,114,0],[127,0,115,0],[128,0,116,0],[129,0,117,0],[130,2,118,7],[130,11,118,16,"findAll"],[130,18,118,23,"findAll"],[130,19,118,24,"test"],[130,23,118,28],[130,25,118,30,"nodes"],[130,30,118,35],[130,32,118,37],[131,4,119,4],[131,8,119,10,"result"],[131,14,119,16],[131,17,119,19],[131,19,119,21],[132,4,120,4],[132,8,120,10,"nodeStack"],[132,17,120,19],[132,20,120,22],[132,21,120,23,"Array"],[132,26,120,28],[132,27,120,29,"isArray"],[132,34,120,36],[132,35,120,37,"nodes"],[132,40,120,42],[132,41,120,43],[132,44,120,46,"nodes"],[132,49,120,51],[132,52,120,54],[132,53,120,55,"nodes"],[132,58,120,60],[132,59,120,61],[132,60,120,62],[133,4,121,4],[133,8,121,10,"indexStack"],[133,18,121,20],[133,21,121,23],[133,22,121,24],[133,23,121,25],[133,24,121,26],[134,4,122,4],[134,13,122,13],[135,6,123,8],[135,10,123,12,"indexStack"],[135,20,123,22],[135,21,123,23],[135,22,123,24],[135,23,123,25],[135,27,123,29,"nodeStack"],[135,36,123,38],[135,37,123,39],[135,38,123,40],[135,39,123,41],[135,40,123,42,"length"],[135,46,123,48],[135,48,123,50],[136,8,124,12],[136,12,124,16,"nodeStack"],[136,21,124,25],[136,22,124,26,"length"],[136,28,124,32],[136,33,124,37],[136,34,124,38],[136,36,124,40],[137,10,125,16],[137,17,125,23,"result"],[137,23,125,29],[138,8,126,12],[139,8,127,12],[140,8,128,12,"nodeStack"],[140,17,128,21],[140,18,128,22,"shift"],[140,23,128,27],[140,24,128,28],[140,25,128,29],[141,8,129,12,"indexStack"],[141,18,129,22],[141,19,129,23,"shift"],[141,24,129,28],[141,25,129,29],[141,26,129,30],[142,8,130,12],[143,8,131,12],[144,6,132,8],[145,6,133,8],[145,10,133,14,"elem"],[145,14,133,18],[145,17,133,21,"nodeStack"],[145,26,133,30],[145,27,133,31],[145,28,133,32],[145,29,133,33],[145,30,133,34,"indexStack"],[145,40,133,44],[145,41,133,45],[145,42,133,46],[145,43,133,47],[145,45,133,49],[145,46,133,50],[146,6,134,8],[146,10,134,12],[146,14,134,12,"isTag"],[146,31,134,17],[146,33,134,18,"elem"],[146,37,134,22],[146,38,134,23],[146,42,134,27,"test"],[146,46,134,31],[146,47,134,32,"elem"],[146,51,134,36],[146,52,134,37],[146,54,135,12,"result"],[146,60,135,18],[146,61,135,19,"push"],[146,65,135,23],[146,66,135,24,"elem"],[146,70,135,28],[146,71,135,29],[147,6,136,8],[147,10,136,12],[147,14,136,12,"hasChildren"],[147,37,136,23],[147,39,136,24,"elem"],[147,43,136,28],[147,44,136,29],[147,48,136,33,"elem"],[147,52,136,37],[147,53,136,38,"children"],[147,61,136,46],[147,62,136,47,"length"],[147,68,136,53],[147,71,136,56],[147,72,136,57],[147,74,136,59],[148,8,137,12,"indexStack"],[148,18,137,22],[148,19,137,23,"unshift"],[148,26,137,30],[148,27,137,31],[148,28,137,32],[148,29,137,33],[149,8,138,12,"nodeStack"],[149,17,138,21],[149,18,138,22,"unshift"],[149,25,138,29],[149,26,138,30,"elem"],[149,30,138,34],[149,31,138,35,"children"],[149,39,138,43],[149,40,138,44],[150,6,139,8],[151,4,140,4],[152,2,141,0],[153,0,141,1],[153,3]],"functionMap":{"names":["<global>","filter","find","findOneChild","findOne","existsOne","some$argument_0","findAll"],"mappings":"AAA;OCW;CDE;OEW;CFkC;OGU;CHE;OIU;CJc;OKS;yDCC;6DDC;CLC;OOW;CPuB"}},"type":"js/module"}]}