{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/toArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yxbT34yjmkVZuhOKwnPlwW2nTdA=","exportNames":["*"]}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":54,"index":69}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extractPathFromURL = extractPathFromURL;\n  var _toArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/toArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[2], \"escape-string-regexp\"));\n  function extractPathFromURL(prefixes, url) {\n    for (var prefix of prefixes) {\n      var _prefix$match$, _prefix$match;\n      var protocol = (_prefix$match$ = (_prefix$match = prefix.match(/^[^:]+:/)) == null ? void 0 : _prefix$match[0]) != null ? _prefix$match$ : '';\n      var host = prefix.replace(new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}`), '').replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n      var prefixRegex = new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}(/)*${host.split('.').map(function (it) {\n        return it === '*' ? '[^/]+' : (0, _escapeStringRegexp.default)(it);\n      }).join('\\\\.')}`);\n      var _url$split = url.split('?'),\n        _url$split2 = (0, _toArray2.default)(_url$split),\n        originAndPath = _url$split2[0],\n        searchParams = _url$split2.slice(1);\n      var normalizedURL = originAndPath.replace(/\\/+/g, '/').concat(searchParams.length ? `?${searchParams.join('?')}` : '');\n      if (prefixRegex.test(normalizedURL)) {\n        return normalizedURL.replace(prefixRegex, '');\n      }\n    }\n    return undefined;\n  }\n});","lineCount":32,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"extractPathFromURL"],[8,28,1,13],[8,31,1,13,"extractPathFromURL"],[8,49,1,13],[9,2,1,13],[9,6,1,13,"_toArray2"],[9,15,1,13],[9,18,1,13,"_interopRequireDefault"],[9,40,1,13],[9,41,1,13,"require"],[9,48,1,13],[9,49,1,13,"_dependencyMap"],[9,63,1,13],[10,2,3,0],[10,6,3,0,"_escapeStringRegexp"],[10,25,3,0],[10,28,3,0,"_interopRequireDefault"],[10,50,3,0],[10,51,3,0,"require"],[10,58,3,0],[10,59,3,0,"_dependencyMap"],[10,73,3,0],[11,2,4,7],[11,11,4,16,"extractPathFromURL"],[11,29,4,34,"extractPathFromURL"],[11,30,4,35,"prefixes"],[11,38,4,43],[11,40,4,45,"url"],[11,43,4,48],[11,45,4,50],[12,4,5,2],[12,9,5,7],[12,13,5,13,"prefix"],[12,19,5,19],[12,23,5,23,"prefixes"],[12,31,5,31],[12,33,5,33],[13,6,5,33],[13,10,5,33,"_prefix$match$"],[13,24,5,33],[13,26,5,33,"_prefix$match"],[13,39,5,33],[14,6,6,4],[14,10,6,10,"protocol"],[14,18,6,18],[14,22,6,18,"_prefix$match$"],[14,36,6,18],[14,40,6,18,"_prefix$match"],[14,53,6,18],[14,56,6,21,"prefix"],[14,62,6,27],[14,63,6,28,"match"],[14,68,6,33],[14,69,6,34],[14,78,6,43],[14,79,6,44],[14,100,6,21,"_prefix$match"],[14,113,6,21],[14,114,6,47],[14,115,6,48],[14,116,6,49],[14,128,6,49,"_prefix$match$"],[14,142,6,49],[14,145,6,53],[14,147,6,55],[15,6,7,4],[15,10,7,10,"host"],[15,14,7,14],[15,17,7,17,"prefix"],[15,23,7,23],[15,24,7,24,"replace"],[15,31,7,31],[15,32,7,32],[15,36,7,36,"RegExp"],[15,42,7,42],[15,43,7,43],[15,47,7,47],[15,51,7,47,"escapeStringRegexp"],[15,78,7,65],[15,80,7,66,"protocol"],[15,88,7,74],[15,89,7,75],[15,91,7,77],[15,92,7,78],[15,94,7,80],[15,96,7,82],[15,97,7,83],[15,98,7,84,"replace"],[15,105,7,91],[15,106,7,92],[15,112,7,98],[15,114,7,100],[15,117,7,103],[15,118,7,104],[15,119,7,105],[16,6,7,105],[16,7,8,5,"replace"],[16,14,8,12],[16,15,8,13],[16,20,8,18],[16,22,8,20],[16,24,8,22],[16,25,8,23],[16,26,8,24],[16,27,8,25],[18,6,10,4],[18,10,10,10,"prefixRegex"],[18,21,10,21],[18,24,10,24],[18,28,10,28,"RegExp"],[18,34,10,34],[18,35,10,35],[18,39,10,39],[18,43,10,39,"escapeStringRegexp"],[18,70,10,57],[18,72,10,58,"protocol"],[18,80,10,66],[18,81,10,67],[18,88,10,74,"host"],[18,92,10,78],[18,93,10,79,"split"],[18,98,10,84],[18,99,10,85],[18,102,10,88],[18,103,10,89],[18,104,10,90,"map"],[18,107,10,93],[18,108,10,94],[18,118,10,94,"it"],[18,120,10,96],[19,8,10,96],[19,15,10,100,"it"],[19,17,10,102],[19,22,10,107],[19,25,10,110],[19,28,10,113],[19,35,10,120],[19,38,10,123],[19,42,10,123,"escapeStringRegexp"],[19,69,10,141],[19,71,10,142,"it"],[19,73,10,144],[19,74,10,145],[20,6,10,145],[20,8,10,146],[20,9,10,147,"join"],[20,13,10,151],[20,14,10,152],[20,19,10,157],[20,20,10,158],[20,22,10,160],[20,23,10,161],[21,6,11,4],[21,10,11,4,"_url$split"],[21,20,11,4],[21,23,11,45,"url"],[21,26,11,48],[21,27,11,49,"split"],[21,32,11,54],[21,33,11,55],[21,36,11,58],[21,37,11,59],[22,8,11,59,"_url$split2"],[22,19,11,59],[22,26,11,59,"_toArray2"],[22,35,11,59],[22,36,11,59,"default"],[22,43,11,59],[22,45,11,59,"_url$split"],[22,55,11,59],[23,8,11,11,"originAndPath"],[23,21,11,24],[23,24,11,24,"_url$split2"],[23,35,11,24],[24,8,11,29,"searchParams"],[24,20,11,41],[24,23,11,41,"_url$split2"],[24,34,11,41],[24,35,11,41,"slice"],[24,40,11,41],[25,6,12,4],[25,10,12,10,"normalizedURL"],[25,23,12,23],[25,26,12,26,"originAndPath"],[25,39,12,39],[25,40,12,40,"replace"],[25,47,12,47],[25,48,12,48],[25,54,12,54],[25,56,12,56],[25,59,12,59],[25,60,12,60],[25,61,12,61,"concat"],[25,67,12,67],[25,68,12,68,"searchParams"],[25,80,12,80],[25,81,12,81,"length"],[25,87,12,87],[25,90,12,90],[25,94,12,94,"searchParams"],[25,106,12,106],[25,107,12,107,"join"],[25,111,12,111],[25,112,12,112],[25,115,12,115],[25,116,12,116],[25,118,12,118],[25,121,12,121],[25,123,12,123],[25,124,12,124],[26,6,13,4],[26,10,13,8,"prefixRegex"],[26,21,13,19],[26,22,13,20,"test"],[26,26,13,24],[26,27,13,25,"normalizedURL"],[26,40,13,38],[26,41,13,39],[26,43,13,41],[27,8,14,6],[27,15,14,13,"normalizedURL"],[27,28,14,26],[27,29,14,27,"replace"],[27,36,14,34],[27,37,14,35,"prefixRegex"],[27,48,14,46],[27,50,14,48],[27,52,14,50],[27,53,14,51],[28,6,15,4],[29,4,16,2],[30,4,17,2],[30,11,17,9,"undefined"],[30,20,17,18],[31,2,18,0],[32,0,18,1],[32,3]],"functionMap":{"names":["<global>","extractPathFromURL","host.split.map$argument_0"],"mappings":"AAA;OCG;8FCM,mDD;CDQ"}},"type":"js/module"}]}