{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parse = parse;\n  // Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n  // Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\n  var whitespace = new Set([9, 10, 12, 13, 32]);\n  var ZERO = \"0\".charCodeAt(0);\n  var NINE = \"9\".charCodeAt(0);\n  /**\n   * Parses an expression.\n   *\n   * @throws An `Error` if parsing fails.\n   * @returns An array containing the integer step size and the integer offset of the nth rule.\n   * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n   */\n  function parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n      return [2, 0];\n    } else if (formula === \"odd\") {\n      return [2, 1];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    var idx = 0;\n    var a = 0;\n    var sign = readSign();\n    var number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n      idx++;\n      a = sign * (number !== null && number !== void 0 ? number : 1);\n      skipWhitespace();\n      if (idx < formula.length) {\n        sign = readSign();\n        skipWhitespace();\n        number = readNumber();\n      } else {\n        sign = number = 0;\n      }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n      throw new Error(`n-th rule couldn't be parsed ('${formula}')`);\n    }\n    return [a, sign * number];\n    function readSign() {\n      if (formula.charAt(idx) === \"-\") {\n        idx++;\n        return -1;\n      }\n      if (formula.charAt(idx) === \"+\") {\n        idx++;\n      }\n      return 1;\n    }\n    function readNumber() {\n      var start = idx;\n      var value = 0;\n      while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {\n        value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n        idx++;\n      }\n      // Return `null` if we didn't read anything.\n      return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n      while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {\n        idx++;\n      }\n    }\n  }\n});","lineCount":73,"map":[[6,2,1,0],[7,2,2,0],[8,2,3,0],[8,6,3,6,"whitespace"],[8,16,3,16],[8,19,3,19],[8,23,3,23,"Set"],[8,26,3,26],[8,27,3,27],[8,28,3,28],[8,29,3,29],[8,31,3,31],[8,33,3,33],[8,35,3,35],[8,37,3,37],[8,39,3,39],[8,41,3,41],[8,43,3,43],[8,45,3,45],[8,46,3,46],[8,47,3,47],[9,2,4,0],[9,6,4,6,"ZERO"],[9,10,4,10],[9,13,4,13],[9,16,4,16],[9,17,4,17,"charCodeAt"],[9,27,4,27],[9,28,4,28],[9,29,4,29],[9,30,4,30],[10,2,5,0],[10,6,5,6,"NINE"],[10,10,5,10],[10,13,5,13],[10,16,5,16],[10,17,5,17,"charCodeAt"],[10,27,5,27],[10,28,5,28],[10,29,5,29],[10,30,5,30],[11,2,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,2,13,7],[18,11,13,16,"parse"],[18,16,13,21,"parse"],[18,17,13,22,"formula"],[18,24,13,29],[18,26,13,31],[19,4,14,4,"formula"],[19,11,14,11],[19,14,14,14,"formula"],[19,21,14,21],[19,22,14,22,"trim"],[19,26,14,26],[19,27,14,27],[19,28,14,28],[19,29,14,29,"toLowerCase"],[19,40,14,40],[19,41,14,41],[19,42,14,42],[20,4,15,4],[20,8,15,8,"formula"],[20,15,15,15],[20,20,15,20],[20,26,15,26],[20,28,15,28],[21,6,16,8],[21,13,16,15],[21,14,16,16],[21,15,16,17],[21,17,16,19],[21,18,16,20],[21,19,16,21],[22,4,17,4],[22,5,17,5],[22,11,18,9],[22,15,18,13,"formula"],[22,22,18,20],[22,27,18,25],[22,32,18,30],[22,34,18,32],[23,6,19,8],[23,13,19,15],[23,14,19,16],[23,15,19,17],[23,17,19,19],[23,18,19,20],[23,19,19,21],[24,4,20,4],[25,4,21,4],[26,4,22,4],[26,8,22,8,"idx"],[26,11,22,11],[26,14,22,14],[26,15,22,15],[27,4,23,4],[27,8,23,8,"a"],[27,9,23,9],[27,12,23,12],[27,13,23,13],[28,4,24,4],[28,8,24,8,"sign"],[28,12,24,12],[28,15,24,15,"readSign"],[28,23,24,23],[28,24,24,24],[28,25,24,25],[29,4,25,4],[29,8,25,8,"number"],[29,14,25,14],[29,17,25,17,"readNumber"],[29,27,25,27],[29,28,25,28],[29,29,25,29],[30,4,26,4],[30,8,26,8,"idx"],[30,11,26,11],[30,14,26,14,"formula"],[30,21,26,21],[30,22,26,22,"length"],[30,28,26,28],[30,32,26,32,"formula"],[30,39,26,39],[30,40,26,40,"charAt"],[30,46,26,46],[30,47,26,47,"idx"],[30,50,26,50],[30,51,26,51],[30,56,26,56],[30,59,26,59],[30,61,26,61],[31,6,27,8,"idx"],[31,9,27,11],[31,11,27,13],[32,6,28,8,"a"],[32,7,28,9],[32,10,28,12,"sign"],[32,14,28,16],[32,18,28,20,"number"],[32,24,28,26],[32,29,28,31],[32,33,28,35],[32,37,28,39,"number"],[32,43,28,45],[32,48,28,50],[32,53,28,55],[32,54,28,56],[32,57,28,59,"number"],[32,63,28,65],[32,66,28,68],[32,67,28,69],[32,68,28,70],[33,6,29,8,"skipWhitespace"],[33,20,29,22],[33,21,29,23],[33,22,29,24],[34,6,30,8],[34,10,30,12,"idx"],[34,13,30,15],[34,16,30,18,"formula"],[34,23,30,25],[34,24,30,26,"length"],[34,30,30,32],[34,32,30,34],[35,8,31,12,"sign"],[35,12,31,16],[35,15,31,19,"readSign"],[35,23,31,27],[35,24,31,28],[35,25,31,29],[36,8,32,12,"skipWhitespace"],[36,22,32,26],[36,23,32,27],[36,24,32,28],[37,8,33,12,"number"],[37,14,33,18],[37,17,33,21,"readNumber"],[37,27,33,31],[37,28,33,32],[37,29,33,33],[38,6,34,8],[38,7,34,9],[38,13,35,13],[39,8,36,12,"sign"],[39,12,36,16],[39,15,36,19,"number"],[39,21,36,25],[39,24,36,28],[39,25,36,29],[40,6,37,8],[41,4,38,4],[42,4,39,4],[43,4,40,4],[43,8,40,8,"number"],[43,14,40,14],[43,19,40,19],[43,23,40,23],[43,27,40,27,"idx"],[43,30,40,30],[43,33,40,33,"formula"],[43,40,40,40],[43,41,40,41,"length"],[43,47,40,47],[43,49,40,49],[44,6,41,8],[44,12,41,14],[44,16,41,18,"Error"],[44,21,41,23],[44,22,41,24],[44,56,41,58,"formula"],[44,63,41,65],[44,67,41,69],[44,68,41,70],[45,4,42,4],[46,4,43,4],[46,11,43,11],[46,12,43,12,"a"],[46,13,43,13],[46,15,43,15,"sign"],[46,19,43,19],[46,22,43,22,"number"],[46,28,43,28],[46,29,43,29],[47,4,44,4],[47,13,44,13,"readSign"],[47,21,44,21,"readSign"],[47,22,44,21],[47,24,44,24],[48,6,45,8],[48,10,45,12,"formula"],[48,17,45,19],[48,18,45,20,"charAt"],[48,24,45,26],[48,25,45,27,"idx"],[48,28,45,30],[48,29,45,31],[48,34,45,36],[48,37,45,39],[48,39,45,41],[49,8,46,12,"idx"],[49,11,46,15],[49,13,46,17],[50,8,47,12],[50,15,47,19],[50,16,47,20],[50,17,47,21],[51,6,48,8],[52,6,49,8],[52,10,49,12,"formula"],[52,17,49,19],[52,18,49,20,"charAt"],[52,24,49,26],[52,25,49,27,"idx"],[52,28,49,30],[52,29,49,31],[52,34,49,36],[52,37,49,39],[52,39,49,41],[53,8,50,12,"idx"],[53,11,50,15],[53,13,50,17],[54,6,51,8],[55,6,52,8],[55,13,52,15],[55,14,52,16],[56,4,53,4],[57,4,54,4],[57,13,54,13,"readNumber"],[57,23,54,23,"readNumber"],[57,24,54,23],[57,26,54,26],[58,6,55,8],[58,10,55,14,"start"],[58,15,55,19],[58,18,55,22,"idx"],[58,21,55,25],[59,6,56,8],[59,10,56,12,"value"],[59,15,56,17],[59,18,56,20],[59,19,56,21],[60,6,57,8],[60,13,57,15,"idx"],[60,16,57,18],[60,19,57,21,"formula"],[60,26,57,28],[60,27,57,29,"length"],[60,33,57,35],[60,37,58,12,"formula"],[60,44,58,19],[60,45,58,20,"charCodeAt"],[60,55,58,30],[60,56,58,31,"idx"],[60,59,58,34],[60,60,58,35],[60,64,58,39,"ZERO"],[60,68,58,43],[60,72,59,12,"formula"],[60,79,59,19],[60,80,59,20,"charCodeAt"],[60,90,59,30],[60,91,59,31,"idx"],[60,94,59,34],[60,95,59,35],[60,99,59,39,"NINE"],[60,103,59,43],[60,105,59,45],[61,8,60,12,"value"],[61,13,60,17],[61,16,60,20,"value"],[61,21,60,25],[61,24,60,28],[61,26,60,30],[61,30,60,34,"formula"],[61,37,60,41],[61,38,60,42,"charCodeAt"],[61,48,60,52],[61,49,60,53,"idx"],[61,52,60,56],[61,53,60,57],[61,56,60,60,"ZERO"],[61,60,60,64],[61,61,60,65],[62,8,61,12,"idx"],[62,11,61,15],[62,13,61,17],[63,6,62,8],[64,6,63,8],[65,6,64,8],[65,13,64,15,"idx"],[65,16,64,18],[65,21,64,23,"start"],[65,26,64,28],[65,29,64,31],[65,33,64,35],[65,36,64,38,"value"],[65,41,64,43],[66,4,65,4],[67,4,66,4],[67,13,66,13,"skipWhitespace"],[67,27,66,27,"skipWhitespace"],[67,28,66,27],[67,30,66,30],[68,6,67,8],[68,13,67,15,"idx"],[68,16,67,18],[68,19,67,21,"formula"],[68,26,67,28],[68,27,67,29,"length"],[68,33,67,35],[68,37,68,12,"whitespace"],[68,47,68,22],[68,48,68,23,"has"],[68,51,68,26],[68,52,68,27,"formula"],[68,59,68,34],[68,60,68,35,"charCodeAt"],[68,70,68,45],[68,71,68,46,"idx"],[68,74,68,49],[68,75,68,50],[68,76,68,51],[68,78,68,53],[69,8,69,12,"idx"],[69,11,69,15],[69,13,69,17],[70,6,70,8],[71,4,71,4],[72,2,72,0],[73,0,72,1],[73,3]],"functionMap":{"names":["<global>","parse","readSign","readNumber","skipWhitespace"],"mappings":"AAA;OCY;IC+B;KDS;IEC;KFW;IGC;KHK;CDC"}},"type":"js/module"}]}