#!/bin/bash

# Navigation Test Script for ShortcutsLike App
# Tests that navigation is properly initialized and working

echo "üß≠ Navigation Test for ShortcutsLike"
echo "===================================="
echo ""

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    if [ "$1" = "success" ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    elif [ "$1" = "error" ]; then
        echo -e "${RED}‚ùå $2${NC}"
    elif [ "$1" = "warning" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $2${NC}"
    else
        echo "$2"
    fi
}

echo "üìù Checking Navigation Setup..."
echo ""

# Check App.tsx has proper structure
if grep -q "AppNavigator" "App.tsx"; then
    print_status "success" "App.tsx uses AppNavigator"
else
    print_status "error" "App.tsx not using AppNavigator!"
fi

# Check for Redux Provider
if grep -q "ReduxProvider" "App.tsx"; then
    print_status "success" "Redux Provider configured"
else
    print_status "error" "Redux Provider missing!"
fi

# Check for GestureHandlerRootView
if grep -q "GestureHandlerRootView" "App.tsx"; then
    print_status "success" "GestureHandlerRootView present"
else
    print_status "error" "GestureHandlerRootView missing!"
fi

# Check AppNavigator uses native stack
if grep -q "createNativeStackNavigator" "src/navigation/AppNavigator.tsx"; then
    print_status "success" "AppNavigator uses native stack"
else
    print_status "error" "AppNavigator not using native stack!"
fi

# Check OnboardingFlow exists
if [ -f "src/screens/onboarding/OnboardingFlow.tsx" ]; then
    print_status "success" "OnboardingFlow component exists"
else
    print_status "error" "OnboardingFlow component missing!"
fi

# Check WelcomeScreen exists
if [ -f "src/screens/onboarding/WelcomeScreen.tsx" ]; then
    print_status "success" "WelcomeScreen component exists"
else
    print_status "error" "WelcomeScreen component missing!"
fi

echo ""
echo "üîß Quick Fixes Applied:"
echo ""

# Apply critical navigation fixes
echo "1. Ensuring native stack navigator is used..."
if grep -q "createStackNavigator" "src/navigation/AppNavigator.tsx"; then
    sed -i '' 's/createStackNavigator/createNativeStackNavigator/g' src/navigation/AppNavigator.tsx
    sed -i '' 's/@react-navigation\/stack/@react-navigation\/native-stack/g' src/navigation/AppNavigator.tsx
    print_status "success" "Fixed stack navigator type"
else
    print_status "success" "Stack navigator already correct"
fi

echo ""
echo "üì± Testing Instructions:"
echo "------------------------"
echo ""
echo "1. Clear Metro cache and restart:"
echo "   npx react-native start --reset-cache"
echo ""
echo "2. Run on iOS:"
echo "   npm run ios"
echo ""
echo "3. Test these navigation flows:"
echo "   ‚úì Tap 'Get Started' ‚Üí Should open OnboardingFlow"
echo "   ‚úì Tap 'Skip' ‚Üí Should complete onboarding"
echo "   ‚úì Complete onboarding ‚Üí Should show main tabs"
echo ""
echo "4. Check console for these logs:"
echo "   ‚úì 'üöÄ App initialized with full navigation'"
echo "   ‚úì 'üì± OnboardingNavigator rendering'"
echo "   ‚úì No navigation errors"
echo ""

echo "üéØ Expected Behavior:"
echo "--------------------"
echo "‚Ä¢ App loads with loading screen briefly"
echo "‚Ä¢ Shows WelcomeScreen if first time"
echo "‚Ä¢ Navigation to OnboardingFlow works"
echo "‚Ä¢ Skip button completes onboarding"
echo "‚Ä¢ Main tabs appear after onboarding"
echo ""

print_status "success" "Navigation test complete!"
echo ""
echo "If navigation still fails, run:"
echo "  ./quick-start.sh ios --clean"
