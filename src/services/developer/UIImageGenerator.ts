import { Platform } from 'react-native';

export interface ImageGenerationRequest {
  prompt: string;
  style: 'enhanced' | 'reimagined' | 'interaction-focused';
  screenType: string;
  designGoals: string[];
  screenContext?: {
    components: string[];
    layout: string;
    features: string[];
    styling: string;
    interactivity: string[];
  };
}

export interface GeneratedImage {
  url: string;
  prompt: string;
  style: string;
  isAIGenerated: boolean;
}

export class UIImageGenerator {
  private static dalleApiKey: string;

  static setApiKey(apiKey: string) {
    this.dalleApiKey = apiKey;
  }

  /**
   * Generate UI mockup images using AI or sophisticated placeholders
   */
  static async generateMockupImage(request: ImageGenerationRequest): Promise<GeneratedImage> {
    try {
      console.log('üé® Generating mockup image:', {
        style: request.style,
        screenType: request.screenType,
        hasApiKey: !!this.dalleApiKey,
        hasContext: !!request.screenContext
      });
      
      // Try AI generation first if API key is available
      if (this.dalleApiKey) {
        console.log('ü§ñ Attempting DALL-E generation...');
        return await this.generateWithDALLE(request);
      } else {
        // Fallback to sophisticated UI mockups
        console.log('üñºÔ∏è Using placeholder generation (no API key)...');
        return this.generateAdvancedPlaceholder(request);
      }
    } catch (error) {
      console.error('‚ùå Image generation failed, using fallback:', error);
      console.error('Error details:', error.message, error.stack);
      try {
        return this.generateAdvancedPlaceholder(request);
      } catch (fallbackError) {
        console.error('‚ùå Fallback also failed:', fallbackError);
        // Return a basic error image
        return {
          url: 'https://via.placeholder.com/400x800/ff0000/ffffff?text=Error',
          prompt: request.prompt,
          style: request.style,
          isAIGenerated: false
        };
      }
    }
  }

  private static async generateWithDALLE(request: ImageGenerationRequest): Promise<GeneratedImage> {
    const optimizedPrompt = this.optimizePromptForDALLE(request);
    
    const response = await fetch('https://api.openai.com/v1/images/generations', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.dalleApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: optimizedPrompt,
        n: 1,
        size: "512x1024", // Mobile aspect ratio
        quality: "hd",
        style: "natural"
      }),
    });

    const data = await response.json();
    
    if (data.data && data.data[0]) {
      return {
        url: data.data[0].url,
        prompt: optimizedPrompt,
        style: request.style,
        isAIGenerated: true
      };
    } else {
      throw new Error('DALL-E generation failed');
    }
  }

  private static optimizePromptForDALLE(request: ImageGenerationRequest): string {
    const { prompt, style, screenType, designGoals, screenContext } = request;
    
    // Build context-aware prompt if screen context is available
    let contextualDetails = '';
    if (screenContext) {
      contextualDetails = `
Screen contains: ${screenContext.components.slice(0, 5).join(', ')}.
Layout: ${screenContext.layout}.
Key features: ${screenContext.features.slice(0, 3).join(', ')}.
Styling: ${screenContext.styling}.
`;
    }
    
    // Optimize for DALL-E mobile UI generation with context
    const optimized = `
Professional mobile app UI mockup for ${screenType}, ${style} design variation.
${contextualDetails}
${designGoals.join(' and ')} design principles.
Material Design 3 system, modern mobile interface,
clean layouts with proper typography, realistic mobile screen mockup,
high quality app design, contemporary mobile interface,
detailed UI elements showing ${screenContext?.components[0] || 'interface elements'},
professional app mockup with ${screenContext?.styling || 'modern styling'}
    `.trim().replace(/\s+/g, ' ');

    return optimized;
  }

  private static generateAdvancedPlaceholder(request: ImageGenerationRequest): GeneratedImage {
    const { style, screenType, designGoals, screenContext } = request;
    
    try {
      console.log('üé® Generating placeholder mockup...');
      
      // For React Native, use a more reliable approach
      if (Platform.OS !== 'web') {
        // Use local assets or simpler placeholder that works reliably in React Native
        const mockupUrl = this.createReactNativeMockup(style, screenType, designGoals);
        console.log('üì± React Native mockup URL:', mockupUrl);
        return {
          url: mockupUrl,
          prompt: request.prompt,
          style,
          isAIGenerated: false
        };
      }
      
      // For web, use the existing placeholder services
      const mockupUrl = this.createAdvancedMockupUrl(style, screenType, designGoals, screenContext);
      
      console.log('‚úÖ Placeholder URL generated:', mockupUrl);
      
      return {
        url: mockupUrl,
        prompt: request.prompt,
        style,
        isAIGenerated: false
      };
    } catch (error) {
      console.error('‚ùå Error in generateAdvancedPlaceholder:', error);
      throw error;
    }
  }

  private static createAdvancedMockupUrl(style: string, screenType: string, designGoals: string[], screenContext?: any): string {
    try {
      console.log('üéØ Creating mockup URL for style:', style);
      
      // Select service based on style
      let selectedService;
      switch (style) {
        case 'enhanced':
          selectedService = this.createMaterialDesignMockup;
          break;
        case 'reimagined':
          selectedService = this.createFigmaStyleMockup;
          break;
        case 'interaction-focused':
          selectedService = this.createSketchStyleMockup;
          break;
        default:
          selectedService = this.createMaterialDesignMockup;
      }

      const url = selectedService.call(this, screenType, designGoals, style, screenContext);
      console.log('üìç Generated URL:', url);
      return url;
    } catch (error) {
      console.error('‚ùå Error in createAdvancedMockupUrl:', error);
      throw error;
    }
  }

  private static createMaterialDesignMockup(screenType: string, designGoals: string[], style: string, screenContext?: any): string {
    try {
      // Create Material Design style mockups
      const baseUrl = 'https://via.placeholder.com/400x800';
      const colors = this.getColorScheme(style, designGoals);
      
      // Use simpler text for placeholder services
      const simpleText = `${screenType.replace(/([A-Z])/g, ' $1').trim()}\nMaterial Design`;
      
      return `${baseUrl}/${colors.background}/${colors.primary}?text=${encodeURIComponent(simpleText)}`;
    } catch (error) {
      console.error('Error in createMaterialDesignMockup:', error);
      // Return a basic fallback
      return 'https://via.placeholder.com/400x800/6200EE/FFFFFF?text=Material+Design';
    }
  }

  private static createFigmaStyleMockup(screenType: string, designGoals: string[], style: string, screenContext?: any): string {
    try {
      // Create Figma-style mockups with better layouts
      const baseUrl = 'https://dummyimage.com/400x800';
      const colors = this.getColorScheme(style, designGoals);
      
      // Use simpler text for placeholder services
      const simpleText = `${screenType.replace(/([A-Z])/g, ' $1').trim()}\nFigma Style`;
      
      return `${baseUrl}/${colors.background}/${colors.primary}.png&text=${encodeURIComponent(simpleText)}`;
    } catch (error) {
      console.error('Error in createFigmaStyleMockup:', error);
      // Return a basic fallback
      return 'https://dummyimage.com/400x800/1976D2/FFFFFF.png&text=Figma+Style';
    }
  }

  private static createSketchStyleMockup(screenType: string, designGoals: string[], style: string, screenContext?: any): string {
    try {
      // Create Sketch-style mockups with emphasis on interactions
      const colors = this.getColorScheme(style, designGoals);
      
      // Use simpler text for placeholder services
      const simpleText = `${screenType.replace(/([A-Z])/g, ' $1').trim()}\nInteractive`;
      
      // Use a service that supports more complex layouts
      return `https://fakeimg.pl/400x800/${colors.background}/${colors.primary}/?text=${encodeURIComponent(simpleText)}&font=arial`;
    } catch (error) {
      console.error('Error in createSketchStyleMockup:', error);
      // Return a basic fallback
      return 'https://fakeimg.pl/400x800/9C27B0/FFFFFF/?text=Interactive&font=arial';
    }
  }

  private static getColorScheme(style: string, designGoals: string[]): { background: string; primary: string; accent: string } {
    // Determine colors based on style and goals
    if (designGoals.includes('dark') || style === 'enhanced') {
      return { background: '1F1F1F', primary: 'BB86FC', accent: '03DAC6' };
    } else if (style === 'reimagined') {
      return { background: 'F8F9FA', primary: '1976D2', accent: '4CAF50' };
    } else if (style === 'interaction-focused') {
      return { background: 'FAFAFA', primary: '9C27B0', accent: 'FF9800' };
    } else {
      return { background: 'FFFFFF', primary: '6200EE', accent: '03DAC6' };
    }
  }

  private static generateMockupContent(screenType: string, designStyle: string, designGoals: string[], screenContext?: any): string {
    const isModern = designGoals.includes('modern');
    const isMinimal = designGoals.includes('minimal');
    const isAccessible = designGoals.includes('accessible');

    // Map screen names to mockup types
    const screenTypeMap: Record<string, string> = {
      'homescreen': 'dashboard',
      'automationlistscreen': 'content-list',
      'createautomationscreen': 'form-builder',
      'profilescreen': 'profile',
      'settingsscreen': 'settings',
      'scanscreen': 'scanner'
    };

    const mappedType = screenTypeMap[screenType.toLowerCase()] || screenType;

    switch (mappedType) {
      case 'dashboard':
        return this.generateDashboardMockup(designStyle, { isModern, isMinimal, isAccessible }, screenContext);
      case 'content-list':
        return this.generateListMockup(designStyle, { isModern, isMinimal, isAccessible }, screenContext);
      case 'form-builder':
        return this.generateFormMockup(designStyle, { isModern, isMinimal, isAccessible }, screenContext);
      case 'profile':
        return this.generateProfileMockup(designStyle, { isModern, isMinimal, isAccessible }, screenContext);
      case 'settings':
        return this.generateSettingsMockup(designStyle, { isModern, isMinimal, isAccessible }, screenContext);
      case 'scanner':
        return this.generateScannerMockup(designStyle, { isModern, isMinimal, isAccessible }, screenContext);
      default:
        return this.generateDefaultMockup(screenType, designStyle, { isModern, isMinimal, isAccessible }, screenContext);
    }
  }

  private static generateDashboardMockup(style: string, flags: any, screenContext?: any): string {
    const { isModern, isMinimal } = flags;
    
    // Extract actual components from context if available
    const hasFeatureGrid = screenContext?.components?.some((c: string) => c.includes('Feature grid'));
    const hasAuth = screenContext?.components?.some((c: string) => c.includes('Authentication'));
    const hasRefresh = screenContext?.features?.includes('Pull-to-refresh functionality');
    
    if (style === 'material') {
      return `üì± ${isModern ? 'Modern' : 'Enhanced'} Home\n\n‚ö° ZAPTAP${hasRefresh ? ' ‚Üª' : ''}\n\n${hasFeatureGrid ? '‚îå‚îÄü§ñ Essentials‚îÄ‚îê ‚îå‚îÄüíº Work‚îÄ‚îê\n‚îå‚îÄüö® Emergency‚îÄ‚îê ‚îå‚îÄüìù Templates‚îÄ‚îê\n‚îå‚îÄüè™ Gallery‚îÄ‚îê ‚îå‚îÄüìç Location‚îÄ‚îê' : 'ü§ñ üíº üö®\nüìù üè™ üìç'}\n\n${hasAuth ? 'üîê Sign In / Sign Up' : 'üë§ Welcome User'}\nüìã My Automations\n‚úÖ System Status`;
    } else if (style === 'figma') {
      return `üì± Reimagined Home\n\n‚îÅ‚îÅ ‚ö° ZAPTAP ‚îÅ‚îÅ\n\n${hasFeatureGrid ? '‚ï≠‚îÄ ESSENTIALS ‚îÄ‚ïÆ ‚ï≠‚îÄ PRODUCTIVITY ‚îÄ‚ïÆ\n‚îÇ ü§ñ Automate  ‚îÇ ‚îÇ üíº Workflows   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n‚ï≠‚îÄ EMERGENCY ‚îÄ‚îÄ‚ïÆ ‚ï≠‚îÄ TEMPLATES ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ üö® Quick SOS ‚îÇ ‚îÇ üìù Pre-built   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ' : '‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ ü§ñ  ‚îÇ ‚îÇ üíº  ‚îÇ ‚îÇ üö®  ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ'}\n\n${hasAuth ? '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüîë AUTHENTICATE' : '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüöÄ CREATE AUTOMATION'}`;
    } else {
      return `üì± Interactive Home\n\n‚ö° ZAPTAP ${hasRefresh ? '(Pull ‚Üì)' : ''}\n\n${hasFeatureGrid ? 'üéØ Feature Cards (6)\n‚îå‚îÄ Tap & Hold ‚îÄ‚îÄ‚îê ‚îå‚îÄ 3D Touch ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ü§ñ Essentials ‚îÇ ‚îÇ üíº Productivity‚îÇ\n‚îÇ ‚ö° Quick setup ‚îÇ ‚îÇ üìä Analytics   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò' : 'üé≠ Tap to Explore\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  üëÜ  ‚îÇ ‚îÇ  üëÜ  ‚îÇ ‚îÇ  üëÜ  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò'}\n\n${hasAuth ? 'üîê Biometric Login' : 'üì≥ Haptic Feedback'}\n‚ú® ${screenContext?.styling?.includes('Material') ? 'Material You' : 'Smooth Animations'}`;
    }
  }

  private static generateListMockup(style: string, flags: any, screenContext?: any): string {
    const { isModern, isAccessible } = flags;
    
    // Extract actual components from context
    const hasSearch = screenContext?.components?.some((c: string) => c.includes('Searchbar'));
    const hasFilters = screenContext?.components?.some((c: string) => c.includes('Filter chips'));
    const hasFAB = screenContext?.components?.some((c: string) => c.includes('FAB'));
    const hasNFC = screenContext?.features?.some((f: string) => f.includes('NFC'));
    
    if (style === 'material') {
      return `üì± ${isModern ? 'Modern' : 'Enhanced'} Automations\n\n${hasSearch ? 'üîç Search Automations' : 'üìã My Automations'}\n${hasFilters ? '‚≠ê All  üìÖ Recent  ‚ù§Ô∏è Favorites' : ''}\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ü§ñ Morning Routine  ‚îÇ\n‚îÇ ‚è∞ Runs at 7:00 AM  ‚îÇ\n‚îÇ ${isAccessible ? '‚óè‚óè‚óè‚óè‚óã' : '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ'} 4.5 (12 reviews) ‚îÇ\n${hasNFC ? '‚îÇ üè∑Ô∏è NFC Enabled      ‚îÇ' : ''}\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üíº Work Setup       ‚îÇ\n‚îÇ üìç Location trigger ‚îÇ\n‚îÇ ${isAccessible ? '‚óè‚óè‚óè‚óè‚óè' : '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ'} 5.0 (8 reviews)  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasFAB ? '‚ûï Create Automation' : 'üöÄ Add New'}`;
    } else if (style === 'figma') {
      return `üì± Reimagined Library\n\n${hasSearch ? 'üîç‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ' : '‚îÅ‚îÅ MY AUTOMATIONS ‚îÅ‚îÅ'}\n${hasFilters ? '‚îå‚îÄAll‚îÄ‚îê ‚îå‚îÄRecent‚îÄ‚îê ‚îå‚îÄ‚ù§Ô∏è‚îÄ‚îê' : ''}\n\n‚ï≠‚îÄ ü§ñ SMART ROUTINE ‚îÄ‚ïÆ\n‚îÇ Morning Automation  ‚îÇ\n‚îÇ üìä 15 runs/week    ‚îÇ\n‚îÇ ‚ö° 2.3s avg time    ‚îÇ\n${hasNFC ? '‚îÇ üè∑Ô∏è Tap to execute  ‚îÇ' : '‚îÇ üéØ Productivity    ‚îÇ'}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n‚ï≠‚îÄ üíº WORK FLOW ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ Office Arrival     ‚îÇ\n‚îÇ üìä 5 runs/week     ‚îÇ\n‚îÇ üìç Geo-triggered   ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n${hasFAB ? '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ûï CREATE NEW' : 'üöÄ BUILD AUTOMATION'}`;
    } else {
      return `üì± Interactive Library\n\n${hasSearch ? 'üîç AI-Powered Search' : 'üìö Automation List'}\n${hasFilters ? 'üéØ Smart Filters' : ''}\n\n‚îå‚îÄ Swipe & Interact ‚îÄ‚îê\n‚îÇ ‚Üê üóëÔ∏è  ü§ñ Morning  ‚öôÔ∏è ‚Üí ‚îÇ\n‚îÇ   Daily routine     ‚îÇ\n${hasNFC ? '‚îÇ   üè∑Ô∏è NFC: Tap phone ‚îÇ' : '‚îÇ   üëÜ Tap to run    ‚îÇ'}\n‚îÇ   üí´ 3D Touch menu  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n‚îå‚îÄ Gesture Controls ‚îÄ‚îê\n‚îÇ ‚Üê ‚ù§Ô∏è  üíº Work    üìä ‚Üí ‚îÇ\n‚îÇ   Location-based   ‚îÇ\n‚îÇ   üì≥ Haptic ready  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasFAB ? '‚ûï Floating Action' : '‚ú® Smooth Animations'}\nüåä Pull to Refresh`;
    }
  }

  private static generateFormMockup(style: string, flags: any, screenContext?: any): string {
    const { isModern, isAccessible } = flags;
    
    // Extract actual components from context
    const hasDragDrop = screenContext?.features?.some((f: string) => f.includes('Drag and drop'));
    const hasStepTypes = screenContext?.features?.some((f: string) => f.includes('Multiple step types'));
    const hasQR = screenContext?.components?.some((c: string) => c.includes('QR Generator'));
    const hasNFC = screenContext?.components?.some((c: string) => c.includes('NFC'));
    
    if (style === 'material') {
      return `üì± ${isModern ? 'Modern' : 'Enhanced'} Builder\n\n‚úèÔ∏è Automation Name\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ Morning Routine     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasDragDrop ? 'üîÄ Drag to Reorder:' : 'üìã Steps:'}\n‚îå‚îÄ 1. Notification ‚îÄ‚îÄ‚îê\n‚îÇ üì± "Good morning!" ‚îÇ\n${hasDragDrop ? '‚îÇ ‚â° ‚ÜïÔ∏è Drag handle   ‚îÇ' : ''}\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n‚îå‚îÄ 2. Smart Home ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üí° Turn on lights  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasStepTypes ? '‚ûï Add: üì± üìß üåê ‚è±Ô∏è üìä' : '‚ûï Add Step'}\n${hasQR || hasNFC ? '\nüîß Deploy: üì∑ QR | üè∑Ô∏è NFC' : ''}`;
    } else if (style === 'figma') {
      return `üì± Reimagined Builder\n\n‚úèÔ∏è Name Your Flow\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ Type automation...  ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n${hasDragDrop ? 'üîÄ VISUAL WORKFLOW' : 'üìã STEP BUILDER'}\n‚ï≠‚îÄ Step 1 ‚ãÆ‚ãÆ‚ãÆ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ üì± Send Alert      ‚îÇ\n‚îÇ Message: Welcome!  ‚îÇ\n${hasDragDrop ? '‚îÇ ‚ÜïÔ∏è Drag to reorder ‚îÇ' : '‚îÇ ‚öôÔ∏è Configure       ‚îÇ'}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n  ‚Üì\n‚ï≠‚îÄ Step 2 ‚ãÆ‚ãÆ‚ãÆ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ üè† Smart Action    ‚îÇ\n‚îÇ Device: Lights     ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n${hasStepTypes ? '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ûï ADD STEP' : '‚ûï New Action'}\n${hasQR ? 'üì∑ Generate QR' : ''} ${hasNFC ? 'üè∑Ô∏è Write NFC' : ''}`;
    } else {
      return `üì± Interactive Builder\n\n‚úèÔ∏è Smart Title Input\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üí° AI suggestions...‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasDragDrop ? 'üéØ Drag & Drop Canvas' : 'üìã Step Editor'}\n‚îå‚îÄ Draggable Card ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üì± Notification    ‚îÇ\n‚îÇ üîÑ Swipe actions   ‚îÇ\n${hasDragDrop ? '‚îÇ üëÜ Hold to drag    ‚îÇ' : '‚îÇ üëÜ Tap to edit     ‚îÇ'}\n‚îÇ üí´ 3D Touch menu   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n  ‚ö°\n‚îå‚îÄ Interactive Step ‚îÄ‚îê\n‚îÇ üè† Smart Home      ‚îÇ\n‚îÇ üì≥ Haptic feedback ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasStepTypes ? '‚ûï Rich Step Library' : '‚ûï Add Action'}\n${hasQR || hasNFC ? 'üîß Share: QR ‚Ä¢ NFC ‚Ä¢ Link' : '‚ú® Preview Mode'}`;
    }
  }

  private static generateProfileMockup(style: string, flags: any, screenContext?: any): string {
    const { isModern } = flags;
    
    // Use context if available
    const hasAvatar = screenContext?.components?.some((c: string) => c.includes('avatar'));
    const hasSettings = screenContext?.components?.some((c: string) => c.includes('Settings'));
    
    if (style === 'material') {
      return `üì± ${isModern ? 'Modern' : 'Classic'} Profile\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ    ${hasAvatar ? 'üì∏ Photo' : 'üë§ Avatar'}      ‚îÇ\n‚îÇ   user@email.com    ‚îÇ\n‚îÇ   Premium Member    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasSettings ? '‚öôÔ∏è Account Settings' : '‚öôÔ∏è Settings'}\nüîí Privacy & Security\nüìä Usage Analytics\nüé® Theme Preferences\nüè∑Ô∏è My NFC Tags\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüö™ Sign Out`;
    } else if (style === 'figma') {
      return `üì± Reimagined Profile\n\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ     ${hasAvatar ? 'üì∏' : 'üë§'} Profile     ‚îÇ\n‚îÇ  @username          ‚îÇ\n‚îÇ  ‚≠ê Pro User        ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n‚ï≠‚îÄ QUICK STATS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ üìä 15 Automations  ‚îÇ\n‚îÇ üè∑Ô∏è 8 NFC Tags      ‚îÇ\n‚îÇ ‚ö° 125 Runs/Week    ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚öôÔ∏è Settings\nüîê Security\nüé® Appearance\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüö™ LOG OUT`;
    } else {
      return `üì± Interactive Profile\n\n‚îå‚îÄ 3D Profile Card ‚îÄ‚îÄ‚îê\n‚îÇ    ${hasAvatar ? 'üì∏ Animated' : 'üë§ Avatar'}    ‚îÇ\n‚îÇ   Tap to edit ‚úèÔ∏è    ‚îÇ\n‚îÇ   üåü Level 5       ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nüéØ Achievements (12)\nüìä Stats Dashboard\nüè∑Ô∏è NFC Collection\nüîß Quick Actions\n\n‚ú® Swipe for more ‚Üí\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüö™ Biometric Logout`;
    }
  }

  private static generateDefaultMockup(screenType: string, style: string, flags: any, screenContext?: any): string {
    // Use context to make more relevant mockups
    const components = screenContext?.components?.slice(0, 3).join(', ') || 'UI Components';
    const layout = screenContext?.layout || 'Standard Layout';
    const features = screenContext?.features?.slice(0, 2) || ['Interactive', 'Responsive'];
    
    return `üì± ${screenType.replace('-', ' ').toUpperCase()}\n\nüé® ${style.toUpperCase()} Design\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ${layout}          ‚îÇ\n‚îÇ ${flags.isModern ? 'Modern' : 'Enhanced'} Interface ‚îÇ\n‚îÇ ${flags.isAccessible ? '‚ôø Accessible' : '‚ú® Beautiful'}       ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nüì¶ ${components}\nüöÄ ${features.join(' ‚Ä¢ ')}\n\n‚ú® Professional UI\nüìê Consistent Design\nüéØ User-Centered`;
  }

  private static generateSettingsMockup(style: string, flags: any, screenContext?: any): string {
    const { isModern, isAccessible } = flags;
    const hasToggles = screenContext?.components?.some((c: string) => c.includes('Toggle'));
    
    if (style === 'material') {
      return `üì± ${isModern ? 'Modern' : 'Classic'} Settings\n\n‚öôÔ∏è GENERAL\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üîî Notifications  ‚óã‚îÇ\n‚îÇ üåô Dark Mode      ‚óè‚îÇ\n‚îÇ üìç Location       ‚óã‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nüîê PRIVACY & SECURITY\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üîí Biometric Login ‚óè‚îÇ\n‚îÇ üîë 2FA Auth        ‚óã‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nüìä DATA & STORAGE\nüóëÔ∏è Clear Cache\nüíæ Backup Data`;
    } else {
      return `üì± Settings Hub\n\n‚îÅ‚îÅ PREFERENCES ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${hasToggles ? 'üîî Alerts      [‚óè‚îÅ‚óã]' : 'üîî Notifications ‚óã'}\nüåô Theme       [‚óã‚îÅ‚óè]\nüìç Location    [‚óè‚îÅ‚óã]\n\n‚îÅ‚îÅ SECURITY ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüîê Biometrics  [‚óè‚îÅ‚óã]\nüîë 2FA         [‚óã‚îÅ‚óè]\n\n‚îÅ‚îÅ ADVANCED ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüß™ Beta Features\nüîß Developer Mode\nüìä Analytics`;
    }
  }

  private static generateScannerMockup(style: string, flags: any, screenContext?: any): string {
    const hasQR = screenContext?.features?.some((f: string) => f.includes('QR'));
    const hasNFC = screenContext?.features?.some((f: string) => f.includes('NFC'));
    
    if (style === 'material') {
      return `üì± Scanner View\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                     ‚îÇ\n‚îÇ   üì∑ Camera Feed    ‚îÇ\n‚îÇ                     ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇ             ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ  ${hasQR ? 'QR TARGET' : 'SCAN AREA'}  ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ             ‚îÇ   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îÇ                     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n${hasNFC ? 'üè∑Ô∏è NFC: Hold Near Tag' : ''}\n${hasQR ? 'üì∑ Point at QR Code' : ''}\n\n‚ö° Recent: Morning Flow`;
    } else {
      return `üì± Smart Scanner\n\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ   üìπ Live Preview   ‚îÇ\n‚îÇ  ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ     ‚îÇ\n‚îÇ  ‚îÇ           ‚îÇ     ‚îÇ\n‚îÇ  ‚îÇ ${hasQR && hasNFC ? 'QR + NFC' : hasQR ? 'QR CODE' : 'SCANNER'} ‚îÇ     ‚îÇ\n‚îÇ  ‚îÇ           ‚îÇ     ‚îÇ\n‚îÇ  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ     ‚îÇ\n‚îÇ ‚ú® AI Detection     ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n${hasNFC ? 'üè∑Ô∏è NFC Ready' : ''}\n${hasQR ? 'üì∏ QR Scanner' : ''}\nüéØ Auto-Execute\n\nüìã History (5)`;
    }
  }
  
  private static createReactNativeMockup(style: string, screenType: string, designGoals: string[]): string {
    // Use a simple, reliable placeholder for React Native
    const colors = this.getColorScheme(style, designGoals);
    const styleName = style.charAt(0).toUpperCase() + style.slice(1);
    const screenName = screenType.replace(/([A-Z])/g, ' $1').trim();
    
    // First try external services
    try {
      const services = [
        `https://placehold.co/400x800/${colors.background}/${colors.primary}/png?text=${encodeURIComponent(screenName)}`,
        `https://via.placeholder.com/400x800/${colors.background}/${colors.primary}.png?text=${encodeURIComponent(styleName)}`,
        `https://dummyimage.com/400x800/${colors.background}/${colors.primary}.png&text=${encodeURIComponent('Mockup')}`
      ];
      
      // Return the first service URL
      return services[0];
    } catch (error) {
      console.warn('Failed to generate external URL, using data URI fallback');
      // If all else fails, return a data URI that will always work
      return this.createDataUriPlaceholder(style, screenType);
    }
  }
  
  private static createDataUriPlaceholder(style: string, screenType: string): string {
    // Create a simple SVG data URI that will always work
    const colors = this.getColorScheme(style, []);
    const text = screenType.replace(/([A-Z])/g, ' $1').trim();
    
    const svg = `
      <svg width="400" height="800" xmlns="http://www.w3.org/2000/svg">
        <rect width="400" height="800" fill="#${colors.background}"/>
        <text x="200" y="400" font-family="Arial" font-size="24" fill="#${colors.primary}" text-anchor="middle">
          ${text}
        </text>
        <text x="200" y="440" font-family="Arial" font-size="18" fill="#${colors.primary}" text-anchor="middle">
          ${style} Design
        </text>
      </svg>
    `.trim();
    
    // Convert to data URI - btoa might not be available in React Native
    try {
      const dataUri = `data:image/svg+xml;base64,${btoa(svg)}`;
      return dataUri;
    } catch (error) {
      // If btoa is not available, use URL encoding instead
      const encodedSvg = encodeURIComponent(svg);
      return `data:image/svg+xml,${encodedSvg}`;
    }
  }
}